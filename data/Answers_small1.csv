Id,OwnerUserId,CreationDate,ParentId,Score,Body
497,50,2008-08-02T16:56:53Z,469,4,"<p>open up a terminal (Applications-&gt;Utilities-&gt;Terminal) and type this in:</p>

<pre><code>locate InsertFontHere<br></code></pre>

<p>This will spit out every file that has the name you want.</p>

<p>Warning: there may be alot to wade through.</p>"
518,153,2008-08-02T17:42:28Z,469,2,"<p>I haven't been able to find anything that does this directly.  I think you'll have to iterate through the various font folders on the system: <code>/System/Library/Fonts</code>, <code>/Library/Fonts</code>, and there can probably be a user-level directory as well <code>~/Library/Fonts</code>.</p>
"
536,161,2008-08-02T18:49:07Z,502,9,"<p>You can use ImageMagick's convert utility for this, see some examples in <a href=""https://web.archive.org/web/20120413111338/http://studio.imagemagick.org/pipermail/magick-users/2002-May/002636.html"" rel=""nofollow"">http://studio.imagemagick.org/pipermail/magick-users/2002-May/002636.html</a>
:</p>

<blockquote>
<pre><code>Convert taxes.pdf taxes.jpg 
</code></pre>
  
  <p>Will convert a two page PDF file into [2] jpeg files: taxes.jpg.0,
  taxes.jpg.1</p>
  
  <p>I can also convert these JPEGS to a thumbnail as follows:</p>

<pre><code>convert -size 120x120 taxes.jpg.0 -geometry 120x120 +profile '*' thumbnail.jpg
</code></pre>
  
  <p>I can even convert the PDF directly to a jpeg thumbnail as follows:</p>

<pre><code>convert -size 120x120 taxes.pdf -geometry 120x120 +profile '*' thumbnail.jpg
</code></pre>
  
  <p>This will result in a thumbnail.jpg.0 and thumbnail.jpg.1 for the two
  pages.</p>
</blockquote>
"
538,156,2008-08-02T18:56:56Z,535,23,"<p>One possibility is Hudson.  It's written in Java, but there's integration with Python projects:</p>

<blockquote>
  <p><a href=""http://redsolo.blogspot.com/2007/11/hudson-embraces-python.html"" rel=""nofollow"">Hudson embraces Python</a></p>
</blockquote>

<p>I've never tried it myself, however.</p>

<p>(<strong>Update</strong>, Sept. 2011: After a trademark dispute Hudson has been renamed to <a href=""http://jenkins-ci.org/"" rel=""nofollow"">Jenkins</a>.)</p>
"
541,157,2008-08-02T19:06:40Z,535,20,"<p>We run <a href=""http://buildbot.net/trac"">Buildbot - Trac</a> at work, I haven't used it too much since my code base isn't part of the release cycle yet. But we run the tests on different environments (OSX/Linux/Win) and it sends emails --and it's written in python.</p>"
595,116,2008-08-03T01:17:36Z,594,25,"<p>The canonical way is to use the built-in cursor iterator.</p>

<pre><code>curs.execute('select * from people')
for row in curs:
    print row
</code></pre>

<hr>

<p>You can use <code>fetchall()</code> to get all rows at once.</p>

<pre><code>for row in curs.fetchall():
    print row
</code></pre>

<p>It can be convenient to use this to create a Python list containing the values returned:</p>

<pre><code>curs.execute('select first_name from people')
names = [row[0] for row in curs.fetchall()]
</code></pre>

<p>This can be useful for smaller result sets, but can have bad side effects if the result set is large.</p>

<ul>
<li><p>You have to wait for the entire result set to be returned to
your client process.</p></li>
<li><p>You may eat up a lot of memory in your client to hold
the built-up list.</p></li>
<li><p>It may take a while for Python to construct and deconstruct the
list which you are going to immediately discard anyways.</p></li>
</ul>

<hr>

<p>If you know there's a single row being returned in the result set you can call <code>fetchone()</code> to get the single row.</p>

<pre><code>curs.execute('select max(x) from t')
maxValue = curs.fetchone()[0]
</code></pre>

<hr>

<p>Finally, you can loop over the result set fetching one row at a time.  In general, there's no particular advantage in doing this over using the iterator.</p>

<pre><code>row = curs.fetchone()
while row:
    print row
    row = curs.fetchone()
</code></pre>
"
660,197,2008-08-03T12:09:18Z,535,14,"<p>Second the Buildbot - Trac integration. You can find more information about the integration on the <a href=""http://buildbot.net/trac/wiki/BuildbotAndTrac"">Buildbot website</a>. At my previous job, we wrote and used the plugin they mention (tracbb).
What the plugin does is rewriting all of the Buildbot urls so you can use Buildbot from within Trac. (http://example.com/tracbb).</p>

<p>The really nice thing about Buildbot is that the configuration is written in Python. You can integrate your own Python code directly to the configuration. It's also very easy to write your own BuildSteps to execute specific tasks.</p>

<p>We used BuildSteps to get the source from SVN, pull the dependencies, publish test results to WebDAV, etcetera.</p>

<p>I wrote an X10 interface so we could send signals with build results. When the build failed, we switched on a red lava lamp. When the build succeeded, a green lava lamp switched on. Good times :-)</p>"
701,111,2008-08-03T14:30:50Z,683,3,"<p>No, you were not dreaming.  Python has a pretty excellent list comprehension system that lets you manipulate lists pretty elegantly, and depending on exactly what you want to accomplish, this can be done a couple of ways.  In essence, what you're doing is saying ""For item in list if criteria.matches"", and from that you can just iterate through the results or dump the results into a new list.</p>

<p>I'm going to crib an example from <a href=""http://diveintopython.net/functional_programming/filtering_lists.html"" rel=""nofollow"">Dive Into Python</a> here, because it's pretty elegant and they're smarter than I am.  Here they're getting a list of files in a directory, then filtering the list for all files that match a regular expression criteria.</p>

<blockquote>
<pre><code>    files = os.listdir(path)                               
    test = re.compile(""test\.py$"", re.IGNORECASE)          
    files = [f for f in files if test.search(f)]
</code></pre>
</blockquote>

<p>You could do this without regular expressions, for your example, for anything where your expression at the end returns true for a match.  There are other options like using the filter() function, but if I were going to choose, I'd go with this.</p>

<p>Eric Sipple</p>
"
735,145,2008-08-03T15:47:22Z,683,-2,"<p>I think:</p>

<pre><code>#!/bin/python<br>bar in dict(Foo)<br></code></pre>

<p>Is what you are thinking of.  When trying to see if a certain key exists within a dictionary in python (python's version of a hash table) there are two ways to check.  First is the <strong><code>has_key()</code></strong> method attached to the dictionary and second is the example given above.  It will return a boolean value.</p>

<p>That should answer your question.</p>

<p>And now a little off topic to tie this in to the <em>list comprehension</em> answer previously given (for a bit more clarity).  <em>List Comprehensions</em> construct a list from a basic <em>for loop</em> with modifiers.  As an example (to clarify slightly), a way to use the <code>in dict</code> language construct in a _list comprehension_:</p>

<p>Say you have a two dimensional dictionary <strong><code>foo</code></strong> and you only want the second dimension dictionaries which contain the key <strong><code>bar</code></strong>.  A relatively straightforward way to do so would be to use a <em>list comprehension</em> with a conditional as follows:</p>

<pre><code>#!/bin/python<br>baz = dict([(key, value) for key, value in foo if bar in value])<br></code></pre>

<p>Note the <strong><code>if bar in value</code></strong> at the end of the statement<strong>, this is a modifying clause which tells the <em>list comprehension</em> to only keep those key-value pairs which meet the conditional.</strong>  In this case <strong><code>baz</code></strong> is a new dictionary which contains only the dictionaries from foo which contain bar (Hopefully I didn't miss anything in that code example... you may have to take a look at the list comprehension documentation found in <a href=""http://docs.python.org/tut/node7.html#SECTION007140000000000000000"" rel=""nofollow"">docs.python.org tutorials</a> and at <a href=""http://www.secnetix.de/olli/Python/list_comprehensions.hawk"" rel=""nofollow"">secnetix.de</a>, both sites are good references if you have questions in the future.).</p>"
745,154,2008-08-03T15:59:19Z,683,8,"<p>Are you looking to get a list of objects that have a certain attribute? If so, a <a href=""http://docs.python.org/tut/node7.html#SECTION007140000000000000000"">list comprehension</a> is the right way to do this.</p>

<pre><code>result = [obj for obj in listOfObjs if hasattr(obj, 'attributeName')]<br></code></pre>"
750,199,2008-08-03T16:13:29Z,683,2,"<p>What I was thinking of can be achieved using list comprehensions, but I thought that there was a function that did this in a slightly neater way.</p>

<p>i.e. 'bar' is a list of objects, all of which have the attribute 'id'</p>

<p>The mythical functional way:</p>

<pre><code>foo = 12<br>foo in iter_attr(bar, 'id')</code></pre>

<p>The list comprehension way:</p>

<pre><code>foo = 12<br>foo in [obj.id for obj in bar]</code></pre>

<p>In retrospect the list comprehension way is pretty neat anyway.</p>"
764,NA,2008-08-03T17:40:25Z,742,0,"<p>Sounds to me like you're trying to combine things that shouldn't be combined.  If you need to do different processing in your view depending on if it's a User or Group object you're trying to look at then you should use two different view functions.</p>

<p>On the other hand there can be common idioms you'd want to extract out of your object_detail type views... perhaps you could use a decorator or just helper functions?</p>

<p>-Dan</p>"
777,150,2008-08-03T18:32:27Z,766,5,"<p>I don't have any experience with <a href=""http://www.SiteGround.com"" rel=""nofollow"">http://www.SiteGround.com</a> as a web host personally.  </p>

<p>This is just a guess, but it's common for a shared host to support Python and MySQL with the MySQLdb module (e.g., GoDaddy does this).  Try the following CGI script to see if MySQLdb is installed.</p>

<pre><code>#!/usr/bin/python<br><br>module_name = 'MySQLdb'<br>head = '''Content-Type: text/html<br><br>%s is ''' % module_name<br><br>try:<br>    __import__(module_name)<br>    print head + 'installed'<br>except ImportError:<br>    print head + 'not installed'<br></code></pre>"
783,189,2008-08-03T18:40:09Z,773,52,"<p>Can you show us your code?</p>

<p>The example on the Python docs is quite straightforward:</p>

<pre><code>groups = []
uniquekeys = []
for k, g in groupby(data, keyfunc):
    groups.append(list(g))      # Store group iterator as a list
    uniquekeys.append(k)
</code></pre>

<p>So in your case, data is a list of nodes, keyfunc is where the logic of your criteria function goes and then <code>groupby()</code> groups the data.</p>

<p>You must be careful to <strong>sort the data</strong> by the criteria before you call <code>groupby</code> or it won't work. <code>groupby</code> method actually just iterates through a list and whenever the key changes it creates a new group.</p>
"
802,1384652,2008-08-03T20:07:05Z,766,4,"<p>I uploaded it and got an internal error</p>

<pre><code>Premature end of script headers<br></code></pre>

<p>After much playing around, I found that if I had</p>

<pre><code>import cgi<br>import cgitb; cgitb.enable()<br>import MySQLdb<br></code></pre>

<p>It would give me a much more useful answer and say that it was not installed, you can see it yourself -> <a href=""http://woarl.com/db.py"" rel=""nofollow"">http://woarl.com/db.py</a></p>

<p>Oddly enough, this would produce an error</p>

<pre><code>import MySQLdb<br>import cgi<br>import cgitb; cgitb.enable()<br></code></pre>

<p>I looked at some of the other files I had up there and it seems that library was one of the ones I had already tried.</p>"
982,200,2008-08-04T02:31:13Z,972,14,"<p>In Python monkey patching generally works by overwriting a class or functions signature with your own. Below is an example from the <a href=""http://wiki.zope.org/zope2/MonkeyPatch"">Zope Wiki</a>:</p>

<pre><code>from SomeOtherProduct.SomeModule import SomeClass<br>def speak(self):<br>   return ""ook ook eee eee eee!""<br>SomeClass.speak = speak<br></code></pre>

<p>That code will overwrite/create a method called speak on the class. In Jeff Atwood's <a href=""http://www.codinghorror.com/blog/archives/001151.html"">recent post on monkey patching</a>. He shows an example in C# 3.0 which is the current language I use for work.</p>"
984,122,2008-08-04T02:36:40Z,972,-6,"<p>I don't know Python syntax, but I know Ruby can do it, and it is rather trivial.  Let's say you want to add a method to Array that prints the length to standard out:</p>

<pre><code>class Array<br>  def print_length<br>    puts length<br>  end<br>end<br></code></pre>

<p>If you don't want to modify the whole class, you can just add the method to a single instance of the array, and no other arrays will have the method:</p>

<pre><code>array = [1, 2, 3]<br>def array.print_length<br>  puts length<br>end<br></code></pre>

<p>Just be aware of the issues involved in using this feature.  Jeff Atwood actually <a href=""http://www.codinghorror.com/blog/archives/001151.html"" rel=""nofollow"">wrote about it</a> not too long ago.</p>"
1478,305,2008-08-04T18:26:13Z,1476,-1,"<p>As far as I can tell Python, up through 2.5, only supports hexadecimal &amp; octal literals.  I did find some discussions about adding binary to future versions but nothing definite.</p>"
1479,269,2008-08-04T18:27:26Z,1476,-1,"<p>I am pretty sure this is one of the things due to change in Python 3.0 with perhaps bin() to go with hex() and oct().</p>

<p>EDIT:
lbrandy's answer is correct in all cases.</p>
"
1484,2089740,2008-08-04T18:34:45Z,1476,57,"<pre><code>&gt;&gt;&gt; print int('01010101111',2)
687
&gt;&gt;&gt; print int('11111111',2)
255
</code></pre>

<p>Another way.</p>
"
1619,92,2008-08-04T21:54:11Z,766,17,"<p>MySQLdb is what I have used before.</p>

<p>If you host is using Python version 2.5 or higher, support for sqlite3 databases is built in (sqlite allows you to have a relational database that is simply a file in your filesystem).  But buyer beware, sqlite is not suited for production, so it may depend what you are trying to do with it.</p>

<p>Another option may be to call your host and complain, or change hosts.  Honestly these days, any self respecting web host that supports python and mysql ought to have MySQLdb pre installed.</p>"
1780,77,2008-08-05T01:14:30Z,1734,8,"<P>If you are looking for user facing interaction, stick with xml. It has more support, understanding, and general acceptance currently. If it's internal, I would say that protocol buffers are a great idea.</P>
<P>Maybe in a few years as more tools come out to support protocol buffers, then start looking towards that for a public facing api. Until then... <A href=""http://en.wikipedia.org/wiki/JSON"">JSON</A>?</P>"
1840,116,2008-08-05T02:54:54Z,1829,8,"<p><strong>On Linux:</strong></p>

<ul>
<li>set raw mode</li>
<li>select and read the keystroke</li>
<li>restore normal settings</li>
</ul>

<pre>
import sys
import select
import termios
import tty

def getkey():
    old_settings = termios.tcgetattr(sys.stdin)
    tty.setraw(sys.stdin.fileno())
    select.select([sys.stdin], [], [], 0)
    answer = sys.stdin.read(1)
    termios.tcsetattr(sys.stdin, termios.TCSADRAIN, old_settings)
    return answer

print """"""Menu
1) Say Foo
2) Say Bar""""""

answer=getkey()

if ""1"" in answer: print ""foo""
elif ""2"" in answer: print ""bar""

</pre>
"
1852,116,2008-08-05T03:11:55Z,1829,6,"<p><strong>On Windows:</strong></p>

<pre><code>import msvcrt
answer=msvcrt.getch()
</code></pre>
"
1857,2089740,2008-08-05T03:27:03Z,1854,341,"<pre><code>&gt;&gt;&gt; import os
&gt;&gt;&gt; print os.name
posix
&gt;&gt;&gt; import platform
&gt;&gt;&gt; platform.system()
'Linux'
&gt;&gt;&gt; platform.release()
'2.6.22-15-generic'
</code></pre>

<p>See: <a href=""https://docs.python.org/2/library/platform.html"">platform — Access to underlying platform’s identifying data</a></p>
"
1870,30,2008-08-05T03:51:57Z,1829,2,"<p>Wow, that took forever. Ok, here's what I've ended up with </p>

<pre><code>#!C:\python25\python.exe<br>import msvcrt<br>print """"""Menu<br>1) Say Foo <br>2) Say Bar""""""<br>while 1:<br>    char = msvcrt.getch()<br>    if char == chr(27): #escape<br>        break<br>    if char == ""1"":<br>        print ""foo""<br>        break<br>    if char == ""2"":<br>        print ""Bar""<br>        break<br></code></pre>

<p>It fails hard using IDLE, the python...thing...that comes with python. But once I tried it in DOS (er, CMD.exe), as a real program, then it ran fine.</p>

<p>No one try it in IDLE, unless you have Task Manager handy.</p>

<p>I've already forgotten how I lived with menus that arn't super-instant responsive.</p>"
1871,216,2008-08-05T03:57:22Z,1854,112,"<p>Dang -- lbrandy beat me to the punch, but that doesn't mean I can't provide you with the system results for Vista!</p>

<pre><code>&gt;&gt;&gt; import os
&gt;&gt;&gt; os.name
'nt'
&gt;&gt;&gt; import platform
&gt;&gt;&gt; platform.system()
'Windows'
&gt;&gt;&gt; platform.release()
'Vista'
</code></pre>
"
1879,116,2008-08-05T04:13:53Z,1854,91,"<p>For the record here's the results on Mac:</p>

<pre><code>&gt;&gt;&gt; import os
&gt;&gt;&gt; os.name
'posix'
&gt;&gt;&gt; import platform
&gt;&gt;&gt; platform.system()
'Darwin'
&gt;&gt;&gt; platform.release()
'8.11.1'
</code></pre>
"
1885,50,2008-08-05T04:28:03Z,1829,0,"<p>The  reason msvcrt fails in IDLE is because IDLE is not accessing the library that runs msvcrt. Whereas when you run the program natively in cmd.exe it works nicely. For the same reason that your program blows up on Mac and Linux terminals.</p>

<p>But I guess if you're going to be using this specifically for windows, more power to ya.</p>"
1987,269,2008-08-05T07:27:40Z,1983,19,"<p>The list [1,2,3] is dynamic and flexible but that flexibility comes at a speed cost.</p>

<p>The tuple (1,2,3) is fixed (immutable) and therefore faster.</p>
"
2277,156,2008-08-05T13:22:43Z,1983,26,"<p>From the <a href=""http://www.python.org/doc/faq/general/#why-are-there-separate-tuple-and-list-data-types"">Python FAQ</a>:</p>

<blockquote>
  <p>Lists and tuples, while similar in many respects, are generally used in fundamentally different ways. Tuples can be thought of as being similar to Pascal records or C structs; they're small collections of related data which may be of different types which are operated on as a group. For example, a Cartesian coordinate is appropriately represented as a tuple of two or three numbers.</p>
  
  <p>Lists, on the other hand, are more like arrays in other languages. They tend to hold a varying number of objects all of which have the same type and which are operated on one-by-one.</p>
</blockquote>

<p>Generally by convention you wouldn't choose a list or a tuple just based on its (im)mutability.  You would choose a tuple for small collections of completely different pieces of data in which a full-blown class would be too heavyweight, and a list for collections of any reasonable size where you have a homogeneous set of data.</p>"
2316,259,2008-08-05T13:45:38Z,2311,14,"<p>Do you need to open the locfile in binary using <code>rb</code>?</p>

<pre><code>f = open (locfile, ""rb"")
</code></pre>
"
2317,17,2008-08-05T13:45:47Z,2311,2,"<p>Well if you go under the properties of your file in Windows or a *nix environment, you will notice two sizes.  One is the sector size, and one is the actual size.  The sector size is the number of sectors in bytes that are used up on your hard disk.  That is because two files cannot be in the same sector with most modern file systems, so if your file fills up half of the sector the whole sector is marked as filled.</p>

<p>So you might be comparing the sector file size to the actual file size on the FTP server or vice versa.</p>"
2510,269,2008-08-05T15:59:24Z,2311,0,"<p>Small files take up a whole node on the filesystem whatever size that is.</p>

<p>My host tends to report all small files as 4kb in ftp but in a shell gives an accurate size so it might be a 'feature' common to ftp clients.</p>"
2937,275,2008-08-05T22:34:25Z,2933,189,"<p>First you will need some GUI library with Python bindings and then (if you want) some program that will convert your python scripts into standalone executables.</p>

<p><strong>Cross-platform GUI libraries with Python bindings (Windows, Linux, Mac)</strong></p>

<p>Of course, there are many, but the most popular that I've seen in wild are:</p>

<ul>
<li><a href=""http://wiki.python.org/moin/TkInter"">Tkinter</a>  - based on <a href=""http://www.tcl.tk/"">Tk GUI toolkit</a> (de-facto standard GUI library for python, free for commercial projects)</li>
<li><a href=""http://www.wxpython.org/"">WxPython</a> - based on <a href=""http://www.wxwidgets.org/"">WxWidgets</a> (very popular, free for commercial projects)</li>
<li><a href=""http://www.riverbankcomputing.co.uk/news"">PyQt</a> - based on <a href=""http://trolltech.com/products/qt/"">Qt</a> (also very popular and more stable than WxWidgets but costly license for commercial projects)</li>
</ul>

<p>Complete list is at <a href=""http://wiki.python.org/moin/GuiProgramming"">http://wiki.python.org/moin/GuiProgramming</a></p>

<p><strong>Single executable (Windows)</strong></p>

<ul>
<li><a href=""http://www.py2exe.org/"">py2exe</a> - Probably the most popular out there (<a href=""http://stackoverflow.com/questions/2933/an-executable-python-app/31859#31859"">PyInstaller</a> is also gaining in popularity)</li>
</ul>

<p><strong>Single executable (Linux)</strong></p>

<ul>
<li><a href=""http://wiki.python.org/moin/Freeze"">Freeze</a> - works the same way like py2exe but targets Linux platform</li>
</ul>

<p><strong>Single executable (Mac)</strong></p>

<ul>
<li><a href=""https://pythonhosted.org/py2app/"">py2app</a> - again, works like py2exe but targets Mac OS</li>
</ul>
"
2941,92,2008-08-05T22:40:17Z,2933,0,"<p>You don't need to <em>compile</em> python for Mac/Windows/Linux.  It is an interpreted language, so you simply need to have the Python interpreter installed on the system of your choice (it is available for all three platforms).</p>

<p>As for a GUI library that works cross platform, Python's <a href=""http://www.tcl.tk/"" rel=""nofollow"">Tk/Tcl</a> widget library works very well, and I believe is sufficiently cross platform.</p>

<p><a href=""http://docs.python.org/lib/module-Tkinter.html"" rel=""nofollow"">Tkinter</a> is the python interface to Tk/Tcl</p>

<p>From the python project webpage: </p>

<blockquote>
  <p>Tkinter is not the only GuiProgramming
  toolkit for Python.  It is however the
  most commonly used one, and almost the
  only  one that is portable between
  Unix, Mac and Windows</p>
</blockquote>"
2980,188,2008-08-06T00:29:36Z,2933,2,"<p>Since python is installed on nearly every non-Windows OS by default now, the only thing you really need to make sure of is that all of the non-standard libraries you use are installed.</p>

<p>Having said that, it is possible to build executables that include the python interpreter, and any libraries you use.  This is likely to create a large executable, however.</p>

<p>MacOS X even includes support in the Xcode IDE for creating full standalone GUI apps.  These can be run by any user running OS X.</p>"
2982,99,2008-08-06T00:33:35Z,972,576,"<p>In Python, there is a difference between functions and bound methods.</p>

<pre><code>&gt;&gt;&gt; def foo():
...     print ""foo""
...
&gt;&gt;&gt; class A:
...     def bar( self ):
...         print ""bar""
...
&gt;&gt;&gt; a = A()
&gt;&gt;&gt; foo
&lt;function foo at 0x00A98D70&gt;
&gt;&gt;&gt; a.bar
&lt;bound method A.bar of &lt;__main__.A instance at 0x00A9BC88&gt;&gt;
&gt;&gt;&gt;
</code></pre>

<p>Bound methods have been ""bound"" (how descriptive) to an instance, and that instance will be passed as the first argument whenever the method is called.</p>

<p>Callables that are attributes of a class (as opposed to an instance) are still unbound, though, so you can modify the class definition whenever you want:</p>

<pre><code>&gt;&gt;&gt; def fooFighters( self ):
...     print ""fooFighters""
...
&gt;&gt;&gt; A.fooFighters = fooFighters
&gt;&gt;&gt; a2 = A()
&gt;&gt;&gt; a2.fooFighters
&lt;bound method A.fooFighters of &lt;__main__.A instance at 0x00A9BEB8&gt;&gt;
&gt;&gt;&gt; a2.fooFighters()
fooFighters
</code></pre>

<p>Previously defined instances are updated as well (as long as they haven't overridden the attribute themselves):</p>

<pre><code>&gt;&gt;&gt; a.fooFighters()
fooFighters
</code></pre>

<p>The problem comes when you want to attach a method to a single instance:</p>

<pre><code>&gt;&gt;&gt; def barFighters( self ):
...     print ""barFighters""
...
&gt;&gt;&gt; a.barFighters = barFighters
&gt;&gt;&gt; a.barFighters()
Traceback (most recent call last):
  File ""&lt;stdin&gt;"", line 1, in &lt;module&gt;
TypeError: barFighters() takes exactly 1 argument (0 given)
</code></pre>

<p>The function is not automatically bound when it's attached directly to an instance:</p>

<pre><code>&gt;&gt;&gt; a.barFighters
&lt;function barFighters at 0x00A98EF0&gt;
</code></pre>

<p>To bind it, we can use the <a href=""http://docs.python.org/library/types.html?highlight=methodtype#module-types"">MethodType function in the types module</a>:</p>

<pre><code>&gt;&gt;&gt; import types
&gt;&gt;&gt; a.barFighters = types.MethodType( barFighters, a )
&gt;&gt;&gt; a.barFighters
&lt;bound method ?.barFighters of &lt;__main__.A instance at 0x00A9BC88&gt;&gt;
&gt;&gt;&gt; a.barFighters()
barFighters
</code></pre>

<p>This time other instances of the class have not been affected:</p>

<pre><code>&gt;&gt;&gt; a2.barFighters()
Traceback (most recent call last):
  File ""&lt;stdin&gt;"", line 1, in &lt;module&gt;
AttributeError: A instance has no attribute 'barFighters'
</code></pre>

<p>More information can be found by reading about <a href=""http://users.rcn.com/python/download/Descriptor.htm"">descriptors</a> and <a href=""http://www.onlamp.com/pub/a/python/2003/04/17/metaclasses.html"">metaclass</a> <a href=""http://www.gnosis.cx/publish/programming/metaclass_2.html"">programming</a>.</p>
"
3040,457,2008-08-06T03:01:23Z,469,12,"<p>Unfortunately the only API that isn't deprecated is located in the ApplicationServices framework, which doesn't have a bridge support file, and thus isn't available in the bridge. If you're wanting to use ctypes, you can use ATSFontGetFileReference after looking up the ATSFontRef.</p>

<p>Cocoa doesn't have any native support, at least as of 10.5, for getting the location of a font.</p>"
3071,363,2008-08-06T03:57:16Z,3061,925,"<p>Assuming module <code>foo</code> with method <code>bar</code>:</p>

<pre><code>import foo
methodToCall = getattr(foo, 'bar')
result = methodToCall()
</code></pre>

<p>As far as that goes, lines 2 and 3 can be compressed to:</p>

<pre><code>result = getattr(foo, 'bar')()
</code></pre>

<p>if that makes more sense for your use case.  You can use <code>getattr</code> in this fashion on class instance bound methods, module-level methods, class methods... the list goes on.</p>
"
4128,17,2008-08-06T23:40:43Z,3976,0,"<p>have you tried watching the traffic between the GUI and the serial port to see if there is some kind of special command being sent across?  Also just curious, Python is sending ASCII and not UTF-8 or something else right?  The reason I ask is because I noticed your quote changes for the strings and in some languages that actually is the difference between ASCII and UTF-8.</p>
"
4162,582,2008-08-07T00:19:03Z,3976,4,"<p><code>/dev/cu.xxxxx</code> is the ""callout"" device, it's what you use when you establish a connection to the serial device and start talking to it. <code>/dev/tty.xxxxx</code> is the ""dialin"" device, used for monitoring a port for incoming calls for e.g. a fax listener.</p>"
4572,612,2008-08-07T10:44:23Z,742,7,"<p>If you're simply displaying data from models, why not use the <a href=""https://docs.djangoproject.com/en/1.2/ref/generic-views/"" rel=""nofollow"">Django Generic Views</a>? They're designed to let you easy show data from a model without having to write your own view and stuff about mapping URL paramaters to views, fetching data, handling edge cases, rendering output, etc.</p>
"
4595,618,2008-08-07T11:21:56Z,1983,10,"<p>Tuples are a quick\flexible way to create <em>composite</em> data-types.
Lists are containers for, well, lists of objects.</p>

<p>For example, you would use a List to store a list of student details in a class.</p>

<p>Each student detail in that list may be a 3-tuple containing their roll number, name and test score.</p>

<pre><code> `[(1,'Mark',86),(2,'John',34)...]`<br></code></pre>

<p>Also, because tuples are immutable they can be used as keys in dictionaries.</p>"
4600,618,2008-08-07T11:30:16Z,972,4,"<p>What you're looking for is <code>setattr</code> I believe.
Use this to set an attribute on an object.</p>

<pre><code>&gt;&gt;&gt; def printme(s): print repr(s)<br>&gt;&gt;&gt; class A: pass<br>&gt;&gt;&gt; setattr(A,'printme',printme)<br>&gt;&gt;&gt; a = A()<br>&gt;&gt;&gt; a.printme() # s becomes the implicit 'self' variable<br>&lt; __ main __ . A instance at 0xABCDEFG&gt;<br></code></pre>"
4605,618,2008-08-07T11:35:23Z,3061,145,"<p>Patrick's solution is probably the cleanest.
If you need to dynamically pick up the module as well, you can import it like:</p>

<pre><code>m = __import__ ('foo')
func = getattr(m,'bar')
func()
</code></pre>
"
4958,613,2008-08-07T16:50:43Z,4942,2,<p>Focus on the shorter time needed for development/prototype and possibly easier maintenance (none of this may apply against Ruby).</p>
4978,676,2008-08-07T17:04:25Z,4942,11,"<p>This is one of those cases that really boil down to personal preference or situational details. If you're more comfortable and experienced with Python, then say so. Are they asking you to justify it because they're more comfortable with one of the other environments? After you're done, will the system be passed off to someone else for long-term maintenance?</p>

<p>If they ask you to use a technology or language that you're not as familiar with, then make sure they know up-front that it's going to take you longer.</p>"
5014,660,2008-08-07T17:30:10Z,4942,3,"<p>I would consider that using python on a new project is completely dependent on what problem you are trying to solve with python.  If you want someone to agree with you that you should use python, then show them how python's features apply specifically to that problem.</p>

<p>In the case of web development with python, talk about WSGI and other web libraries and frameworks you could use that would make your life easier.  One note for python is that most of the frameworks for python web development can be plugged right into any current project. With ruby on rails, you're practically working in a DSL that anyone who uses your project will have to learn.  If they know python, then they can figure out what you are doing with django, etc in a day.</p>

<p>I'm only talking about web development because it appears that's what you are going to be working on seeing ruby, python and PHP in the same list.  The real message that's important is applying to whatever it is you like about python <em>directly</em> to some problem you are trying to solve.</p>"
5129,680,2008-08-07T18:40:53Z,5102,12,"<p>There are two main ways of running Python on Apache. The simplest would be to use CGI and write normal Python scripts while the second is using a web framework like Django or Pylons.</p>

<p>Using CGI is straightforward. Make sure your Apache config file has a cgi-bin set up. If not, follow their documentation (<a href=""http://httpd.apache.org/docs/2.0/howto/cgi.html"" rel=""nofollow"">http://httpd.apache.org/docs/2.0/howto/cgi.html</a>). At that point all you need to do is place your Python scripts in the cgi-bin directory and the standard output will become the HTTP response. Refer to Python's documentation for further info (<a href=""https://docs.python.org/library/cgi.html"" rel=""nofollow"">https://docs.python.org/library/cgi.html</a>).</p>

<p>If you want to use a web framework you'll need to setup mod_python or FastCGI. These steps are dependent on which framework you want to use. Django provides clear instructions on how to setup mod_python and Django with Apache (<a href=""http://www.djangoproject.com/documentation/modpython/"" rel=""nofollow"">http://www.djangoproject.com/documentation/modpython/</a>)</p>
"
5165,116,2008-08-07T19:02:57Z,5102,8,"<p>Yes, mod_python is pretty confusing to set up.  Here's how I did it.</p>

<p>In httpd.conf:</p>

<pre><code>LoadModule python_module modules/mod_python.so<br><br>&lt;Directory ""/serverbase/htdocs/myapp""&gt;<br>  AddHandler mod_python .py<br>  PythonHandler myapp<br>  PythonDebug On<br></code></pre>

<p>and in your application directory:</p>

<pre><code>$ /serverbase/htdocs/myapp$ ls -l<br>total 16<br>-r-xr-xr-x 1 root sys        6484 May 21 15:54 myapp.py<br></code></pre>

<p>Repeat the configuration for each python program you wish to have running under mod_python.</p>"
5168,636,2008-08-07T19:05:58Z,5102,5,"<p>Are you running Python on UNIX or Windows?</p>

<p>An alternative to mod_python and FastCGI is mod_wsgi. You can find out more at <a href=""http://code.google.com/p/modwsgi/"" rel=""nofollow"">modwsgi</a></p>

<p>I have built and installed this on Solaris without problems. I had previously tried mod_python but ran into problems with shared libraries as part of the build. There are <a href=""http://code.google.com/p/modwsgi/wiki/InstallationInstructions"" rel=""nofollow"">good install docs</a> available.</p>
"
5302,501,2008-08-07T20:57:20Z,5136,4,"<p>I won't help much but I remember that I was able to wrap MATLAB simulation into DLL and then call it from Delphi app. It work really well.</p>

<p>Anyway: good luck!!!</p>"
5319,380,2008-08-07T21:10:27Z,5313,8,<p>erm.. HTML? (trying to be funny here... while we wait for real answers..)</p>
5320,216,2008-08-07T21:11:28Z,5313,1,"<p>The <a href=""http://www.wxwidgets.org/"" rel=""nofollow"" title=""wxWidgets"">wxWidgets</a> (formerly known as wxWindows) library might be what you're looking for. There's a particularly good port for Python, <a href=""http://wxpython.org/"" rel=""nofollow"" title=""wxPython"">wxPython</a>, as well as versions for different languages -- C#, C++, Perl and Ruby come to mind -- and for various GUIs: Win32, Mac OS X, GTK+, X11, Motif, WinCE. The library's been around for a while and is pretty solid.</p>"
5340,108,2008-08-07T21:24:26Z,5313,3,"<P>Not sure if this is what you're looking for, but there's <A href=""http://glade.gnome.org/"" rel=""nofollow"">Glade</A> (or <A href=""http://gladewin32.sourceforge.net/"" rel=""nofollow"">Windows download</A>) which is a designer for GTK+. It generates an XML file which can then be used to build the GUI in a number of different languages.</P>"
5343,25,2008-08-07T21:25:26Z,5313,5,"<p><a href=""http://en.wikipedia.org/wiki/Qt_%28toolkit%29"">Qt</a> (pronounced ""cute"" by its creators[1]) is a cross-platform application development framework, widely used for the development of GUI programs.</p>

<p>Qt uses <strong>C++</strong> with several non-standard extensions implemented by an additional pre-processor that generates standard C++ code before compilation. Qt can also be used in several other programming languages; bindings exist for <strong>Ada</strong> (QtAda)[4], C<strong>#</strong> (Qyoto/Kimono)[5], <strong>Java</strong> (Qt Jambi)[6], <strong>Pascal</strong>, <strong>Perl</strong>, <strong>PHP</strong> (PHP-Qt), <strong>Ruby</strong> (RubyQt), and <strong>Python</strong> (PyQt). It runs on all major platforms, and has extensive internationalization support. Non-GUI features include SQL database access, XML parsing, thread management, network support and a unified cross-platform API for file handling.</p>"
5430,267,2008-08-07T22:32:23Z,5419,24,"<p><strong>Note:</strong> This answer is sort of outdated (from 2008). Please use the solution below with care!!</p>

<hr>

<p>Here is a page that details the problem and a solution (search the page for the text <em>Wrapping sys.stdout into an instance</em>):</p>

<p><a href=""http://wiki.python.org/moin/PrintFails"">PrintFails - Python Wiki</a></p>

<p>Here's a code excerpt from that page:</p>

<pre><code>$ python -c 'import sys, codecs, locale; print sys.stdout.encoding; \
    sys.stdout = codecs.getwriter(locale.getpreferredencoding())(sys.stdout); \
    line = u""\u0411\n""; print type(line), len(line); \
    sys.stdout.write(line); print line'
  UTF-8
  &lt;type 'unicode'&gt; 2
  Б
  Б

  $ python -c 'import sys, codecs, locale; print sys.stdout.encoding; \
    sys.stdout = codecs.getwriter(locale.getpreferredencoding())(sys.stdout); \
    line = u""\u0411\n""; print type(line), len(line); \
    sys.stdout.write(line); print line' | cat
  None
  &lt;type 'unicode'&gt; 2
  Б
  Б
</code></pre>

<p>There's some more information on that page, well worth a read.</p>
"
5435,429,2008-08-07T22:35:48Z,5415,13,"<p>You'll want the <a href=""https://docs.python.org/3.4/library/struct.html"" rel=""nofollow"">struct</a> package.</p>
"
5719,108465,2008-08-08T06:06:33Z,1983,1,"<P>As others have mentioned, Lists and tuples are both containers which can be used to store python objects. Lists are extensible and their contents can change by assignment, on the other hand tuples are immutable.</P>
<P>Also, lists cannot be used as keys in a dictionary whereas tuples can. </P>"
5746,699,2008-08-08T06:48:52Z,1983,1,"<p>If you can find a solution that works with tuples, use them, as it forces immutability which kind of drives you down a more functional path. You almost never regret going down the functional/immutable path.</p>"
5927,309844,2008-08-08T13:41:43Z,5909,6,"<p>The size of the file is sent as the Content-Length header. Here is how to get it with urllib:</p>

<pre><code>&gt;&gt;&gt; site = urllib.urlopen(""http://python.org"")<br>&gt;&gt;&gt; meta = site.info()<br>&gt;&gt;&gt; print meta.getheaders(""Content-Length"")<br>['16535']<br>&gt;&gt;&gt;<br></code></pre>"
5935,745,2008-08-08T13:47:26Z,5909,16,"<p>Using the returned-urllib-object method <code>info()</code>, you can get various information on the retrived document. Example of grabbing the current Google logo:</p>

<pre><code>&gt;&gt;&gt; import urllib<br>&gt;&gt;&gt; d = urllib.urlopen(""http://www.google.co.uk/logos/olympics08_opening.gif"")<br>&gt;&gt;&gt; print d.info()<br><br>Content-Type: image/gif<br>Last-Modified: Thu, 07 Aug 2008 16:20:19 GMT  <br>Expires: Sun, 17 Jan 2038 19:14:07 GMT <br>Cache-Control: public <br>Date: Fri, 08 Aug 2008 13:40:41 GMT <br>Server: gws <br>Content-Length: 20172 <br>Connection: Close<br></code></pre>

<p>It's a dict, so to get the size of the file, you do <code>urllibobject.info()['Content-Length']</code></p>

<pre><code>print f.info()['Content-Length']<br></code></pre>

<p>And to get the size of the local file (for comparison), you can use the os.stat() command:</p>

<pre><code>os.stat(""/the/local/file.zip"").st_size<br></code></pre>"
5938,309844,2008-08-08T13:51:23Z,5909,4,"<p>Also if the server you are connecting to supports it, look at <a href=""http://en.wikipedia.org/wiki/HTTP_ETag"" rel=""nofollow"">Etags</a> and the <a href=""http://en.wikipedia.org/wiki/List_of_HTTP_headers#Requests"" rel=""nofollow"">If-Modified-Since</a> and <a href=""http://en.wikipedia.org/wiki/List_of_HTTP_headers#Requests"" rel=""nofollow"">If-None-Match</a> headers.</p>

<p>Using these will take advantage of the webserver's caching rules and will return a <a href=""http://en.wikipedia.org/wiki/List_of_HTTP_status_codes#3xx_Redirection"" rel=""nofollow"">304 Not Modified</a> status code if the content hasn't changed.</p>"
5985,309844,2008-08-08T14:21:51Z,5909,19,"<p>I have reproduced what you are seeing:</p>

<pre><code>import urllib, os<br>link = ""http://python.org""<br>print ""opening url:"", link<br>site = urllib.urlopen(link)<br>meta = site.info()<br>print ""Content-Length:"", meta.getheaders(""Content-Length"")[0]<br><br>f = open(""out.txt"", ""r"")<br>print ""File on disk:"",len(f.read())<br>f.close()<br><br><br>f = open(""out.txt"", ""w"")<br>f.write(site.read())<br>site.close()<br>f.close()<br><br>f = open(""out.txt"", ""r"")<br>print ""File on disk after download:"",len(f.read())<br>f.close()<br><br>print ""os.stat().st_size returns:"", os.stat(""out.txt"").st_size<br></code></pre>

<p>Outputs this:</p>

<pre><code>opening url: http://python.org<br>Content-Length: 16535<br>File on disk: 16535<br>File on disk after download: 16535<br>os.stat().st_size returns: 16861<br></code></pre>

<p>What am I doing wrong here? Is os.stat().st_size not returning the correct size?</p>

<hr>

<p>Edit:
OK, I figured out what the problem was:</p>

<pre><code>import urllib, os<br>link = ""http://python.org""<br>print ""opening url:"", link<br>site = urllib.urlopen(link)<br>meta = site.info()<br>print ""Content-Length:"", meta.getheaders(""Content-Length"")[0]<br><br>f = open(""out.txt"", ""rb"")<br>print ""File on disk:"",len(f.read())<br>f.close()<br><br><br>f = open(""out.txt"", ""wb"")<br>f.write(site.read())<br>site.close()<br>f.close()<br><br>f = open(""out.txt"", ""rb"")<br>print ""File on disk after download:"",len(f.read())<br>f.close()<br><br>print ""os.stat().st_size returns:"", os.stat(""out.txt"").st_size<br></code></pre>

<p>this outputs:</p>

<pre><code>$ python test.py<br>opening url: http://python.org<br>Content-Length: 16535<br>File on disk: 16535<br>File on disk after download: 16535<br>os.stat().st_size returns: 16535<br></code></pre>

<p>Make sure you are opening both files for binary read/write.</p>

<pre><code>// open for binary write<br>open(filename, ""wb"")<br>// open for binary read<br>open(filename, ""rb"")<br></code></pre>"
6125,309844,2008-08-08T16:45:50Z,5966,3,"<p>Why not use SQLite? There is good support in Python and you can write SQL queries to get the data out. Here is the Python docs for <a href=""http://docs.python.org/lib/module-sqlite3.html"" rel=""nofollow"">sqlite3</a></p>

<hr>

<p>If you don't want to use SQLite you could do an array of dicts.</p>

<pre><code>episodes = []<br>episodes.append({'season':1, 'episode': 2, 'name':'Something'})<br>episodes.append({'season':1, 'episode': 2, 'name':'Something', 'actors':['Billy Bob', 'Sean Penn']})<br></code></pre>

<p>That way you add metadata to any record and search it very easily</p>

<pre><code>season_1 = [e for e in episodes if e['season'] == 1]<br>billy_bob = [e for e in episodes if 'actors' in e and 'Billy Bob' in e['actors']]<br><br>for episode in billy_bob:<br>    print ""Billy bob was in Season %s Episode %s"" % (episode['season'], episode['episode'])<br></code></pre>"
6161,758,2008-08-08T17:12:24Z,1734,10,"<p>Protocol buffers are intended to optimize communications between machines. They are really not intended for human interaction. Also, the format is binary, so it could not replace XML in that use case. </p>

<p>I would also recommend <a href=""http://en.wikipedia.org/wiki/JSON"">JSON</a> as being the most compact text-based format.</p>"
6616,488,2008-08-09T04:44:41Z,5313,3,"<p><a href=""http://www.mozilla.org/projects/xul/"" rel=""nofollow"">XML User Interface Language</a>. Don't know much about it so not sure if it meets your desires. Post back with your experience if you play with it.</p>"
6805,358,2008-08-09T15:13:14Z,5966,0,"<P>I have done something similar in the past and used an in-memory XML document as a quick and dirty hierachical database for storage. You can store each show/season/episode as an element (nested appropriately) and attributes of these things as xml attributes on the elements. Then you can use XQuery to get info back out.</P>
<P><STRONG>NOTE:</STRONG> I'm not a Python guy so I don't know what your xml support is like.</P>
<P><STRONG>NOTE 2:</STRONG> You'll want to profile this because it'll be bigger and slower than the solution you've already got. Likely enough if you are doing some high-volume processing then XML is probably not going to be your friend.</P>"
7073,878,2008-08-10T07:10:19Z,502,2,"<p>Is the PC likely to have Acrobat installed? I think Acrobat installs a shell extension so previews of the first page of a PDF document appear in Windows Explorer's thumbnail view. You can get thumbnails yourself via the IExtractImage COM API, which you'll need to wrap. <a href=""http://www.vbaccelerator.com/home/net/code/libraries/shell_projects/Thumbnail_Extraction/article.asp"" rel=""nofollow"" title=""Domain Specific Development with Visual Studio DSL Tools."">VBAccelerator has an example in C#</a> that you could port to Python.</p>
"
7090,13,2008-08-10T08:08:33Z,502,25,"<p>ImageMagick delegates the PDF->bitmap conversion to GhostScript anyway, so here's a command you can use (it's based on the actual command listed by the <code>ps:alpha</code> delegate in ImageMagick, just adjusted to use JPEG as output):</p>

<pre><code>gs -q -dQUIET -dPARANOIDSAFER -dBATCH -dNOPAUSE -dNOPROMPT \
-dMaxBitmap=500000000 -dLastPage=1 -dAlignToPixels=0 -dGridFitTT=0 \
-sDEVICE=jpeg -dTextAlphaBits=4 -dGraphicsAlphaBits=4 -r72x72 \
-sOutputFile=$OUTPUT -f$INPUT
</code></pre>

<p>where <code>$OUTPUT</code> and <code>$INPUT</code> are the output and input filenames. Adjust the <code>72x72</code> to whatever resolution you need. (Obviously, strip out the backslashes if you're writing out the whole command as one line.)</p>

<p>This is good for two reasons:</p>

<ol>
<li>You don't need to have ImageMagick installed anymore. Not that I have anything against ImageMagick (I love it to bits), but I believe in simple solutions.</li>
<li>ImageMagick does a two-step conversion. First PDF->PPM, then PPM->JPEG. This way, the conversion is one-step.</li>
</ol>

<p>Other things to consider: with the files I've tested, PNG compresses better than JPEG. If you want to use PNG, change the <code>-sDEVICE=jpeg</code> to <code>-sDEVICE=png16m</code>.</p>
"
7286,207,2008-08-10T18:45:32Z,773,394,"<p>As Sebastjan said, <strong>you first have to sort your data. This is important.</strong></p>

<p>The part I didn't get is that in the example construction</p>

<pre><code>groups = []
uniquekeys = []
for k, g in groupby(data, keyfunc):
   groups.append(list(g))    # Store group iterator as a list
   uniquekeys.append(k)
</code></pre>

<p><code>k</code> is the current grouping key, and <code>g</code> is an iterator that you can use to iterate over the group defined by that grouping key. In other words, the <code>groupby</code> iterator itself returns iterators.</p>

<p>Here's an example of that, using clearer variable names:</p>

<pre><code>from itertools import groupby

things = [(""animal"", ""bear""), (""animal"", ""duck""), (""plant"", ""cactus""), (""vehicle"", ""speed boat""), (""vehicle"", ""school bus"")]

for key, group in groupby(things, lambda x: x[0]):
    for thing in group:
        print ""A %s is a %s."" % (thing[1], key)
    print "" ""
</code></pre>

<p>This will give you the output:</p>

<blockquote>
  <p>A bear is a animal.<br>
  A duck is a animal.</p>
  
  <p>A cactus is a plant.</p>
  
  <p>A speed boat is a vehicle.<br>
  A school bus is a vehicle.</p>
</blockquote>

<p>In this example, <code>things</code> is a list of tuples where the first item in each tuple is the group the second item belongs to. </p>

<p>The <code>groupby()</code> function takes two arguments: (1) the data to group and (2) the function to group it with. </p>

<p>Here, <code>lambda x: x[0]</code> tells <code>groupby()</code> to use the first item in each tuple as the grouping key.</p>

<p>In the above <code>for</code> statement, <code>groupby</code> returns three (key, group iterator) pairs - once for each unique key. You can use the returned iterator to iterate over each individual item in that group.</p>

<p>Here's a slightly different example with the same data, using a list comprehension:</p>

<pre><code>for key, group in groupby(things, lambda x: x[0]):
    listOfThings = "" and "".join([thing[1] for thing in group])
    print key + ""s:  "" + listOfThings + "".""
</code></pre>

<p>This will give you the output:</p>

<blockquote>
  <p>animals: bear and duck.<br>
  plants: cactus.<br>
  vehicles: speed boat and school bus.</p>
</blockquote>
"
7496,680,2008-08-11T03:11:55Z,5313,0,"<p>I read a little on XML User Interface Language (XUL) and it looks really robust and well supported. The main problem for me is it's tied to the Gecko rendering engine so it's cross platform the way wxWidgets, QT and GTK+ are cross platform. Also, there Python bindings don't seem as good as those other libraries.</p>

<p>GladeXML and XRC seem like better markups</p>
"
8020,985,2008-08-11T17:58:28Z,5419,-1,"<p>The cause of your problem is <strong>NOT</strong> the Win console not willing to accept Unicode (as it does this since I guess Win2k by default). It is the default system encoding. Try this code and see what it gives you:</p>

<pre><code>import sys
sys.getdefaultencoding()
</code></pre>

<p>if it says ascii, there's your cause ;-)
You have to create a file called sitecustomize.py and put it under python path (I put it under /usr/lib/python2.5/site-packages, but that is differen on Win - it is c:\python\lib\site-packages or something), with the following contents:</p>

<pre><code>import sys
sys.setdefaultencoding('utf-8')
</code></pre>

<p>and perhaps you might want to specify the encoding in your files as well:</p>

<pre><code># -*- coding: UTF-8 -*-
import sys,time
</code></pre>

<p>Edit: more info can be found <a href=""http://www.diveintopython.net/xml_processing/unicode.html"" rel=""nofollow"">in excellent the Dive into Python book</a></p>
"
8109,1026,2008-08-11T19:17:41Z,5313,1,"<p>@Cristian and Antony Cramp: while XUL is a nice choice for UI development (cross-platform, open-source licensed, used in Firefox and other major software), it's certainly not language agnostic. You're tied to Gecko, with JS for scripting. There is experimental support for Python scripting, but it's only experimental, AFAIK.</p>

<p>You can define the UI in XUL+JS and use back-end components written in C++ though (there are Python and Java bridges available too).</p>
"
8114,872,2008-08-11T19:21:14Z,5313,4,"<p>I seriously doubt you're going to find a markup language for GIU's that's <em>not</em> tied to a specific library.  For such a thing to exist, there would need to be a standardized GUI markup language, with several implementations.</p>
"
8165,985,2008-08-11T20:07:59Z,5966,0,"<p>I don't get this part here:</p>

<blockquote>
  <p>This worked okay, but there was no easy way of checking if x[3][24] was supposed to exist or not (so I couldn't raise the season<em>not</em>found exception)</p>
</blockquote>

<p>There is a way to do it - called <strong>in</strong>:</p>

<pre><code>&gt;&gt;&gt;x={}
&gt;&gt;&gt;x[1]={}
&gt;&gt;&gt;x[1][2]={}
&gt;&gt;&gt;x
{1: {2: {}}}
&gt;&gt;&gt; 2 in x[1]
True
&gt;&gt;&gt; 3 in x[1]
False
</code></pre>

<p>what seems to be the problem with that?</p>
"
8320,1057,2008-08-11T22:59:42Z,742,1,"<p>Unless you want to do something a little complex, using the generic views are the way to go.  They are far more powerful than their name implies, and if you are just displaying model data generic views will do the job.</p>
"
8332,1057,2008-08-11T23:16:33Z,766,4,"<p>You could try setting up your own python installation using <a href=""http://peak.telecommunity.com/DevCenter/EasyInstall#creating-a-virtual-python"" rel=""nofollow"">Virtual Python</a>.  Check out how to setup Django using it <a href=""http://forums.site5.com/showthread.php?t=10236"" rel=""nofollow"">here</a>.  That was written a long time ago, but it shows how I got MySQLdb setup without having root access or anything like it.  Once you've got the basics going, you can install any python library you want.</p>
"
8699,207,2008-08-12T11:40:13Z,8692,74,"<p>The <a href=""http://lxml.de/"">lxml package</a> supports xpath.  It seems to work pretty well, although I've had some trouble with the self:: axis.  There's also <a href=""http://pypi.python.org/pypi/Amara/1.1.6"">Amara</a>, but I haven't used it personally.</p>
"
8972,722,2008-08-12T15:32:05Z,8948,1,"<p><a href=""http://www.dotfunk.com/projects/mp3/"" rel=""nofollow"">This toolkit</a> may do what you need. I can't say if it's the ""best"", but really, if it does what you need, that's all that matters, right?</p>

<p>HTH</p>
"
8974,394,2008-08-12T15:37:24Z,8948,6,"<p>A simple example from the book Dive Into Python works ok for me, <a href=""http://www.diveintopython.org/download/diveintopython-examples-5.4.zip"" rel=""nofollow"">this</a> is the download link, the example is fileinfo.py. Don't know if it's the best, but it can do the basic job.</p>

<p>The entire book is available online <a href=""http://www.diveintopython.org/"" rel=""nofollow"">here</a>.</p>
"
8976,1087,2008-08-12T15:37:59Z,8948,1,"<p>It can depend on exactly what you want to do in addition to reading the metadata. If it is just simply the bitrate / name etc. that you need, and nothing else, something lightweight is probably best.</p>

<p>If you're manipulating the mp3 past that PyMedia may be suitable.</p>

<p>There are quite a few, whatever you do get, make sure and test it out on plenty of sample media. There are a few different versions of ID3 tags in particular, so make sure it's not too out of date. </p>

<p>Personally I've used this small MP3Info class with luck. It is quite old though.</p>

<p><a href=""http://www.omniscia.org/~vivake/python/MP3Info.py"" rel=""nofollow"">http://www.omniscia.org/~vivake/python/MP3Info.py</a></p>
"
9080,745,2008-08-12T17:55:22Z,5966,0,"<p>Bartosz/To clarify ""This worked okay, but there was no easy way of checking if x[3][24] was supposed to exist or not""</p>

<p><code>x['some show'][3][24]</code> would return season 3, episode 24 of ""some show"". If there was no season 3, I want the pseudo-dict to raise tvdb<em>seasonnotfound, if ""some show"" doesn't exist, then raise tvdb</em>shownotfound</p>

<p>The current system of a series of classes, each with a <code>__getitem__</code> - Show checks <code>if self.seasons.has_key(requested_season_number)</code>, the Season class checks <code>if self.episodes.has_key(requested_episode_number)</code> and so on.</p>

<p>It works, but it there seems to be a lot of repeated code (each class is basically the same, but raises a different error)</p>
"
9171,1146,2008-08-12T19:34:44Z,8692,2,"<p><a href=""http://pyxml.sourceforge.net"" rel=""nofollow"" title=""PyXML"">PyXML</a> works well.  </p>

<p>You didn't say what platform you're using, however if you're on Ubuntu you can get it with <code>sudo apt-get install python-xml</code>.  I'm sure other Linux distros have it as well.  </p>

<p>If you're on a Mac, xpath is already installed but not immediately accessible.  You can set <code>PY_USE_XMLPLUS</code> in your environment or do it the Python way before you import xml.xpath:</p>

<pre><code>if sys.platform.startswith('darwin'):
    os.environ['PY_USE_XMLPLUS'] = '1'
</code></pre>

<p>In the worst case you may have to build it yourself.  This package is no longer maintained but still builds fine and works with modern 2.x Pythons.  Basic docs are <a href=""http://pyxml.sourceforge.net/topics/howto/section-XPath.html"" rel=""nofollow"">here</a>.</p>
"
9358,1057,2008-08-13T00:44:26Z,8948,11,"<p>What you're after is the <a href=""http://id3-py.sourceforge.net/"">ID3</a> module.  It's very simple and will give you exactly what you need.  Just copy the ID3.py file into your site-packages directory and you'll be able to do something like the following:</p>

<pre><code>from ID3 import *
try:
  id3info = ID3('file.mp3')
  print id3info
  # Change the tags
  id3info['TITLE'] = ""Green Eggs and Ham""
  id3info['ARTIST'] = ""Dr. Seuss""
  for k, v in id3info.items():
    print k, "":"", v
except InvalidTagError, message:
  print ""Invalid ID3 tag:"", message
</code></pre>
"
10129,116,2008-08-13T17:56:34Z,10123,10,"<p>This will do what you want:</p>

<pre><code>signum = status &amp; 0xff
exitstatus = (status &amp; 0xff00) &gt;&gt; 8
</code></pre>
"
10132,872,2008-08-13T17:58:27Z,10123,1,"<p>You can unpack the status using <a href=""http://docs.python.org/ref/shifting.html"" rel=""nofollow"">bit-shifting</a> and <a href=""http://docs.python.org/ref/bitwise.html"" rel=""nofollow"">masking</a> operators.</p>

<pre><code>low = status &amp; 0x00FF
high = (status &amp; 0xFF00) &gt;&gt; 8
</code></pre>

<p>I'm not a Python programmer, so I hope got the syntax correct.</p>
"
10148,429,2008-08-13T18:14:10Z,10123,0,"<p>The folks before me've nailed it, but if you really want it on one line, you can do this:</p>

<pre><code>(signum, exitstatus) = (status &amp; 0xFF, (status &gt;&gt; 8) &amp; 0xFF)
</code></pre>

<p>EDIT: Had it backwards.</p>
"
10213,99,2008-08-13T18:52:36Z,10123,10,"<p>To answer your general question, you can use <a href=""http://en.wikipedia.org/wiki/Bit_twiddling"" rel=""nofollow"">bit manipulation</a> techniques:</p>

<pre><code>pid, status = os.wait()
exitstatus, signum = status &amp; 0xFF, (status &amp; 0xFF00) &gt;&gt; 8
</code></pre>

<p>However, there are also <a href=""http://docs.python.org/lib/os-process.html#l2h-2780"" rel=""nofollow"">built-in functions</a> for interpreting exit status values:</p>

<pre><code>pid, status = os.wait()
exitstatus, signum = os.WEXITSTATUS( status ), os.WTERMSIG( status )
</code></pre>

<p>See also:</p>

<ul>
<li>os.WCOREDUMP()</li>
<li>os.WIFCONTINUED()</li>
<li>os.WIFSTOPPED()</li>
<li>os.WIFSIGNALED()</li>
<li>os.WIFEXITED()</li>
<li>os.WSTOPSIG()</li>
</ul>
"
10778,985,2008-08-14T07:08:19Z,5966,5,"<p>OK, what you need is <code>classobj</code> from new module. That would allow you to construct exception classes dynamically (<code>classobj</code> takes a string as an argument for the class name). </p>

<pre><code>import new
myexc=new.classobj(""ExcName"",(Exception,),{})
i=myexc(""This is the exc msg!"")
raise i
</code></pre>

<p>this gives you:</p>

<pre><code>Traceback (most recent call last):
File ""&lt;stdin&gt;"", line 1, in &lt;module&gt;
__main__.ExcName: This is the exc msg!
</code></pre>

<p>remember that you can always get the class name through:</p>

<pre><code>self.__class__.__name__
</code></pre>

<p>So, after some string mangling and concatenation, you should be able to obtain appropriate exception class name and construct a class object using that name and then raise that exception.</p>

<p>P.S. - you can also raise strings, but this is deprecated.</p>

<pre><code>raise(self.__class__.__name__+""Exception"")
</code></pre>
"
10845,912,2008-08-14T09:46:21Z,8948,25,"<p>I've used <a href=""https://bitbucket.org/lazka/mutagen"">mutagen</a> to edit tags in media files before.  The nice thing about mutagen is that it can handle other formats, such as mp4, FLAC etc.  I've written several scripts with a lot of success using this API.</p>
"
10846,912,2008-08-14T09:48:59Z,8692,7,"<p>The latest version of <a href=""http://effbot.org/zone/element-xpath.htm"">elementtree</a> supports XPath pretty well.  Not being an XPath expert I can't say for sure if the implementation is full but it has satisfied most of my needs when working in Python.  I've also use lxml and PyXML and I find etree nice because it's a standard module.</p>

<p>NOTE: I've since found lxml and for me it's definitely the best XML lib out there for Python.  It does XPath nicely as well (though again perhaps not a full implementation).</p>
"
11074,267,2008-08-14T14:04:25Z,11060,8,"<p>I started writing up a summary of my experience with my own code generator, then went back and re-read your question and found you had already touched upon the same issues yourself, focus on the execution results instead of the code layout/look.</p>

<p>Problem is, this is hard to test, the generated code might not be suited to actually run in the environment of the unit test system, and how do you encode the expected results?</p>

<p>I've found that you need to break down the code generator into smaller pieces and unit test those. Unit testing a full code generator is more like integration testing than unit testing if you ask me.</p>
"
11128,414,2008-08-14T14:38:19Z,11060,0,"<p>Yes, results are the ONLY thing that matters. The real chore is writing a framework that allows your generated code to run independently... spend your time there.</p>
"
11235,1343,2008-08-14T15:46:01Z,11060,0,"<p>If you are running on *nux you might consider dumping the unittest framework in favor of a bash script or makefile. on windows you might consider building a shell app/function that runs the generator and then uses the code (as another process) and unittest that.</p>

<p>A third option would be to generate the code and then build an app from it that includes nothing but a unittest. Again you would need a shell script or whatnot to run this for each input. As to how to encode the expected behavior, it occurs to me that it could be done in much the same way as you would for the C++ code just using the generated interface rather than the C++ one.</p>
"
11443,825,2008-08-14T18:15:42Z,11060,4,"<p>Recall that ""unit testing"" is only one kind of testing.  You should be able to unit test the <strong>internal</strong> pieces of your code generator.  What you're really looking at here is system level testing (a.k.a. regression testing).  It's not just semantics... there are different mindsets, approaches, expectations, etc.  It's certainly more work, but you probably need to bite the bullet and set up an end-to-end regression test suite: fixed C++ files -> SWIG interfaces -> python modules -> known output.  You really want to check the known input (fixed C++ code) against expected output (what comes out of the final Python program).  Checking the code generator results directly would be like diffing object files...</p>
"
12166,995,2008-08-15T11:56:02Z,2933,13,"<p>An alternative tool to py2exe is <a href=""http://pypi.python.org/pypi/bbfreeze/"">bbfreeze</a> which generates executables for windows and linux. It's newer than py2exe and handles eggs quite well. I've found it magically works better without configuration for a wide variety of applications.</p>
"
12167,1344,2008-08-15T12:00:37Z,2933,2,"<p>I'm not sure that this is the best way to do it, but when I'm deploying Ruby GUI apps (not Python, but has the same ""problem"" as far as .exe's are concerned) on Windows, I just write a short launcher in C# that calls on my main script. It compiles to an executable, and I then have an application executable.</p>
"
12454,1448,2008-08-15T16:38:59Z,1983,2,"<p>Whenever I need to pass in a collection of items to a function, if I want the function to not change the values passed in - I use tuples. </p>

<p>Else if I want to have the function to alter the values, I use list. </p>

<p>Always if you are using external libraries and need to pass in a list of values to a function and are unsure about the integrity of the data, use a tuple. </p>
"
12557,1416,2008-08-15T18:00:37Z,1983,7,"<p>The notion of tuples are highly expressive:</p>

<ul>
<li><p>Pragmatically, they are great for packing and unpacking values (<code>x,y=coord</code>).</p></li>
<li><p>In combination with dictionaries (hash tables), they allow forms of mapping that would otherwise require many levels of association.  For example, consider marking that (x,y) has been found.</p>

<pre><code>// PHP
if (!isset($found[$x])) {
    $found[$x] = Array();
    $found[$x][$y] = true;
} else if (!isset($found[$x][$y])) {
    $found[$x][$y] = true;
}


# Python
found[(x,y)] = True # parens added for clarity
</code></pre></li>
<li><p>Lists should be used with the expectation of operations on its contents (hence the various mentions of immutability).  One will want to pop, push, splice, slice, search, insert before, insert after, etc with a list.</p></li>
<li><p>Tuples should be a low-level representation of an object, where simple comparisons are made, or operations such as extracting the n'th element or n elements in a predictable fashion, such as the coordinates example given earlier.</p></li>
<li><p>Lastly, lists are not hashable, so the type of mapping done with dictionaries (hash tables in Perl, associative arrays in PHP) must be done with tuples.</p>

<p>Here's a simple example of tuples and dictionaries, together at last:</p>

<pre><code>""""""
couple is a tuple of two people
doesLike is a dictionary mapping couples to True or False
""""""
couple = ""john"", ""jane""
doesLike = dict()
doesLike[couple] = True
doesLike[""jane"", ""john""] = False # unrequited love :'(
</code></pre></li>
</ul>
"
12609,1448,2008-08-15T19:04:13Z,12592,45,"<p>Yes. You can do it. The <a href=""https://docs.python.org/3/library/doctest.html"">doctest module documentation</a> and Wikipedia has an <a href=""http://en.wikipedia.org/wiki/Doctest#Example_2%3a_doctests_embedded_in_a_README.txt_file"">example</a> of it.</p>

<pre><code>   &gt;&gt;&gt; x
   Traceback (most recent call last):
     ...
   NameError: name 'x' is not defined
</code></pre>
"
13040,995,2008-08-16T07:57:53Z,12591,1,"<p>Can you give an example? According to the <a href=""http://codespeak.net/lxml/validation.html"" rel=""nofollow"">lxml validation docs</a>, lxml can handle DTD validation (specified in the XML doc or externally in code) and system catalogs, which covers most cases I can think of.</p>

<pre><code>f = StringIO(""&lt;!ELEMENT b EMPTY&gt;"")
dtd = etree.DTD(f)
dtd = etree.DTD(external_id = ""-//OASIS//DTD DocBook XML V4.2//EN"")
</code></pre>
"
13107,1531,2008-08-16T12:35:36Z,1476,204,"<p>For reference&mdash;<em>future</em> Python possibilities:<br />
Starting with Python 2.6 you can express binary literals using the prefix <strong>0b</strong> or <strong>0B</strong>:</p>

<pre><code>&gt;&gt;&gt; 0b101111
47
</code></pre>

<p>You can also use the new <strong>bin</strong> function to get the binary representation of a number:</p>

<pre><code>&gt;&gt;&gt; bin(173)
'0b10101101'
</code></pre>

<p>Development version of the documentation: <a href=""http://docs.python.org/dev/whatsnew/2.6.html#pep-3127-integer-literal-support-and-syntax"">What's New in Python 2.6</a></p>
"
13399,242853,2008-08-16T22:37:06Z,13396,0,"<p>Depends on the language and what you need to do, a ""map"" as it's called in many languages could be what you're looking for. I don't know C#, but according to <a href=""http://blogs.msdn.com/devdev/archive/2006/06/30/652802.aspx"" rel=""nofollow"">this</a> page, .NET 2.0 calls map ""ConvertAll"".</p>

<p>The meaning of ""map"" is pretty simple - take a list, and apply a function to each element of it, returning a new list. You may also be looking for ""filter"", which would give you a list of items that satisfy a predicate in another list.</p>
"
13403,1190,2008-08-16T22:47:53Z,13396,1,"<p>in Ruby:</p>

<pre><code>intArray.select { |x| x &gt; 3 }.each do |x|
  # do other processing
end
</code></pre>

<p>or if ""other processing"" is a short one-liner:</p>

<pre><code>intArray.select { |x| x &gt; 3 }.each { |x| something_that_uses x }
</code></pre>

<p>lastly, if you want to return a new array containing the results of the processing of those elements greater than 3:</p>

<pre><code>intArray.select { |x| x &gt; 3 }.map { |x| do_something_to x }
</code></pre>
"
13405,429,2008-08-16T22:56:30Z,13396,2,"<p>In Python, you have <a href=""http://docs.python.org/tut/node7.html#SECTION007130000000000000000"" rel=""nofollow"" title=""Human Interface Guidelines"">filter and map</a>, which can so what you want:</p>

<pre><code>map(lambda x: foo(x + 1) filter(lambda x: x &gt; 3, intArray))
</code></pre>

<p>There's also <a href=""http://docs.python.org/tut/node7.html#SECTION007140000000000000000"" rel=""nofollow"">list comprehensions</a> which can do both in one easy statement:</p>

<pre><code>[f(x + 1) for x in intArray if x &gt; 3]
</code></pre>
"
13406,960,2008-08-16T23:06:52Z,13396,3,"<p>In C# you can apply selective processing on anything that lives inside an IEnumerable like this:  </p>

<pre><code>intArray.Where(i =&gt; i &gt; 3).ConvertAll();
DoStuff(intArray.Where(i =&gt; i 3));
</code></pre>

<p>Etc..</p>
"
13435,891,2008-08-17T00:44:57Z,13396,4,"<p>The increment in the original <code>foreach</code> loop will not affect the contents of the array, the only way to do this remains a <code>for</code> loop:</p>

<pre><code>for(int i = 0; i &lt; intArray.Length; ++i)
{
    if(intArray[i] &gt; 3) ++intArray[i];
}
</code></pre>

<p>Linq is not intended to modify existing collections or sequences. It creates new sequences based on existing ones. It is possible to achieve the above code using Linq, though it is slightly against its purposes:</p>

<pre><code>var newArray1 = from i in intArray select ((i &gt; 3) ? (i + 1) : (i));
var newArray2 = intArray.Select(i =&gt; (i &gt; 3) ? (i + 1) : (i));
</code></pre>

<p>Using <code>where</code> (or equivalent), as shown in some of the other answers, will exclude any values less than or equal to 3 from the resulting sequence.</p>

<pre><code>var intArray = new int[] { 10, 1, 20, 2 };
var newArray = from i in intArray where i &gt; 3 select i + 1;
// newArray == { 11, 21 }
</code></pre>

<p>There is a <code>ForEach</code> method on arrays that will allow you to use a lambda function instead of a <code>foreach</code> block, though for anything more than a method call I would stick with <code>foreach</code>.</p>

<pre><code>intArray.ForEach(i =&gt; DoSomething(i));
</code></pre>
"
13456,1554,2008-08-17T01:26:52Z,13454,0,"<p>You can obviously concatenate everything together:</p>

<pre><code>cleaned = stringwithslashes.replace(""\\n"",""\n"").replace(""\\r"",""\n"").replace(""\\"","""")
</code></pre>

<p>Is that what you were after? Or were you hoping for something more terse?</p>
"
13579,1370,2008-08-17T10:28:00Z,13454,-4,"<p>Python has a built-in escape() function analogous to PHP's addslashes, but no unescape() function (stripslashes), which in my mind is kind of ridiculous.</p>

<p>Regular expressions to the rescue (code not tested):</p>

<pre><code>p = re.compile( '\\(\\\S)')
p.sub('\1',escapedstring)
</code></pre>

<p>In theory that takes anything of the form \\(not whitespace) and returns \(same char)</p>

<p>edit: Upon further inspection, Python regular expressions are broken as all hell;</p>

<pre><code>&gt;&gt;&gt; escapedstring
'This is a \\n\\n\\n test'
&gt;&gt;&gt; p = re.compile( r'\\(\S)' )
&gt;&gt;&gt; p.sub(r""\1"",escapedstring)
'This is a nnn test'
&gt;&gt;&gt; p.sub(r""\\1"",escapedstring)
'This is a \\1\\1\\1 test'
&gt;&gt;&gt; p.sub(r""\\\1"",escapedstring)
'This is a \\n\\n\\n test'
&gt;&gt;&gt; p.sub(r""\(\1)"",escapedstring)
'This is a \\(n)\\(n)\\(n) test'
</code></pre>

<p>In conclusion, what the hell, Python.</p>
"
13598,745,2008-08-17T12:15:13Z,13454,10,"<p>Not totally sure this is what you want, but..</p>

<pre><code>cleaned = stringwithslashes.decode('string_escape')
</code></pre>
"
13608,893,2008-08-17T12:55:25Z,13454,2,"<p>It sounds like what you want could be reasonably efficiently handled through regular expressions:</p>

<pre><code>import re
def stripslashes(s):
    r = re.sub(r""\\(n|r)"", ""\n"", s)
    r = re.sub(r""\\"", """", r)
    return r
cleaned = stripslashes(stringwithslashes)
</code></pre>
"
13844,1421,2008-08-17T19:01:02Z,13791,3,"<p>Well, I think you might have missed the r or miscounted the backslashes...</p>

<pre><code>""\\n"" == r""\n""

&gt;&gt;&gt; import re
&gt;&gt;&gt; mystring = r""This is \\n a test \\r""
&gt;&gt;&gt; p = re.compile( r""[\\][\\](.)"" )
&gt;&gt;&gt; print p.sub( r""\\\1"", mystring )
This is \n a test \r
&gt;&gt;&gt;
</code></pre>

<p>Which, if I understood is what was requested.</p>

<p>I suspect the more common request is this:</p>

<pre><code>&gt;&gt;&gt; d = {'n':'\n', 'r':'\r', 'f':'\f'}
&gt;&gt;&gt; p = re.compile(r""[\\]([nrfv])"")
&gt;&gt;&gt; print p.sub(lambda mo: d[mo.group(1)], mystring)
This is \
 a test \
&gt;&gt;&gt;
</code></pre>

<p>The interested student should also read Ken Thompson's <a href=""http://cm.bell-labs.com/who/ken/trust.html"" rel=""nofollow"" title=""Cherry G80-11900"">Reflections on Trusting Trust""</a>, wherein our hero uses a similar example to explain the perils of trusting compilers you haven't bootstrapped from machine code yourself.</p>
"
13869,893,2008-08-17T19:26:33Z,13791,0,"<p>You are being tricked by Python's representation of the result string. The Python expression:</p>

<pre><code>'This is \\n a test \\r'
</code></pre>

<p>represents the string</p>

<pre><code>This is \n a test \r
</code></pre>

<p>which is I think what you wanted. Try adding 'print' in front of each of your p.sub() calls to print the actual string returned instead of a Python representation of the string.</p>

<pre><code>&gt;&gt;&gt; mystring = r""This is \n a test \r""
&gt;&gt;&gt; mystring
'This is \\n a test \\r'
&gt;&gt;&gt; print mystring
This is \n a test \r
</code></pre>
"
13875,1421,2008-08-17T19:32:33Z,13857,37,"<p>It's simple: A function that references variables from a containing scope, potentially after flow-of-control has left that scope. That last bit is very useful:</p>

<pre><code>&gt;&gt;&gt; def makeConstantAdder(x):
...     constant = x
...     def adder(y):
...         return y + constant
...     return adder
... 
&gt;&gt;&gt; f = makeConstantAdder(12)
&gt;&gt;&gt; f(3)
15
&gt;&gt;&gt; g = makeConstantAdder(4)
&gt;&gt;&gt; g(3)
7
</code></pre>

<p>Note that 12 and 4 have ""disappeared"" inside f and g, respectively, this feature is what make f and g proper closures.</p>
"
13882,1370,2008-08-17T19:40:49Z,13791,0,"<p>The idea is that I'll read in an escaped string, and unescape it (a feature notably lacking from Python, which you shouldn't need to resort to regular expressions for in the first place). Unfortunately I'm not being tricked by the backslashes...</p>

<p>Another illustrative example:</p>

<pre><code>&gt;&gt;&gt; mystring = r""This is \n ridiculous""
&gt;&gt;&gt; print mystring
This is \n ridiculous
&gt;&gt;&gt; p = re.compile( r""\\(\S)"" )
&gt;&gt;&gt; print p.sub( 'bloody', mystring )
This is bloody ridiculous
&gt;&gt;&gt; print p.sub( r'\1', mystring )
This is n ridiculous
&gt;&gt;&gt; print p.sub( r'\\1', mystring )
This is \1 ridiculous
&gt;&gt;&gt; print p.sub( r'\\\1', mystring )
This is \n ridiculous
</code></pre>

<p>What I'd like it to print is</p>

<pre><code>This is 
ridiculous
</code></pre>
"
13902,1659,2008-08-17T20:20:20Z,13857,6,"<p>I've never heard of transactions being used in the same context as explaining what a closure is and there really aren't any transaction semantics here.</p>

<p>It's called a closure because it ""closes over"" the outside variable (constant)--i.e., it's not just a function but an enclosure of the environment where the function was created. </p>

<p>In the following example, calling the closure g after changing x will also change the value of x within g, since g closes over x:</p>

<pre><code>x = 0

def f():
    def g(): 
        return x * 2
    return g


closure = f()
print(closure()) # 0
x = 2
print(closure()) # 4
</code></pre>
"
13906,150,2008-08-17T20:25:18Z,13857,13,"<p>I like <a href=""http://effbot.org/zone/closure.htm"">this rough, succinct definition</a>:</p>

<blockquote>
  <p>A function that can refer to environments that are no longer active.</p>
</blockquote>

<p>I'd add</p>

<blockquote>
  <p>A closure allows you to bind variables into a function <em>without passing them as parameters</em>.</p>
</blockquote>

<p>Decorators which accept parameters are a common use for closures.  Closures are a common implementation mechanism for that sort of ""function factory"".  I frequently choose to use closures in the <a href=""http://c2.com/cgi/wiki?StrategyPattern"">Strategy Pattern</a> when the strategy is modified by data at run-time.</p>

<p>In a language that allows anonymous block definition -- e.g., Ruby, C# -- closures can be used to implement (what amount to) novel new control structures.  The lack of anonymous blocks is among <a href=""http://ivan.truemesh.com/archives/000411.html"">the limitations of closures in Python</a>.</p>
"
13943,1472,2008-08-17T21:36:32Z,13791,7,"<p>Isn't that what <a href=""#13844"">Anders' second example</a> does?</p>

<p>In 2.5 there's also a <code>string-escape</code> encoding you can apply:</p>

<pre><code>&gt;&gt;&gt; mystring = r""This is \n a test \r""
&gt;&gt;&gt; mystring.decode('string-escape')
'This is \n a test \r'
&gt;&gt;&gt; print mystring.decode('string-escape')
This is 
 a test 
&gt;&gt;&gt;
</code></pre>
"
13949,1667,2008-08-17T21:46:02Z,13941,47,"<p>Have you tried :</p>

<pre><code>import sys
sys.stdout.write('\a')
sys.stdout.flush()
</code></pre>

<p>That works for me here on Mac OS 10.5</p>

<p>Actually, I think your original attempt works also with a little modification:</p>

<pre><code>print('\a')
</code></pre>

<p>(You just need the single quotes around the character sequence).</p>
"
13958,1370,2008-08-17T21:55:54Z,13791,0,"<p>Mark; his second example requires every escaped character thrown into an array initially, which generates a KeyError if the escape sequence happens not to be in the array. It will die on anything but the three characters provided (give \v a try), and enumerating every possible escape sequence every time you want to unescape a string (or keeping a global array) is a really bad solution. Analogous to PHP, that's using <code>preg_replace_callback()</code> with a lambda instead of <code>preg_replace()</code>, which is utterly unnecessary in this situation.</p>

<p>I'm sorry if I'm coming off as a dick about it, I'm just utterly frustrated with Python. This is supported by every other regular expression engine I've ever used, and I can't understand why this wouldn't work.</p>

<p>Thank you for responding; the <code>string.decode('string-escape')</code> function is precisely what i was looking for initially. If someone has a general solution to the regex backreference problem, feel free to post it and I'll accept that as an answer as well.</p>
"
13959,1472,2008-08-17T21:56:10Z,13941,4,"<p>I had to turn off the ""Silence terminal bell"" option in my active Terminal Profile in iTerm for <code>print('\a')</code> to work. It seemed to work fine by default in Terminal.</p>

<p>You can also use the Mac module <code>Carbon.Snd</code> to play the system beep:</p>

<pre><code>&gt;&gt;&gt; import Carbon.Snd
&gt;&gt;&gt; Carbon.Snd.SysBeep(1)
&gt;&gt;&gt;
</code></pre>

<p>The Carbon modules don't have any documentation, so I had to use <code>help(Carbon.Snd)</code> to see what functions were available. It seems to be a direct interface onto Carbon, so the docs on Apple Developer Connection probably help.</p>
"
14304,242853,2008-08-18T08:06:30Z,14281,0,"<p>You could loop through the zip files, reading individual files using the zipfile module and running your regex on those, eliminating to unzip all the files at once. </p>

<p>I'm fairly certain that you can't run a regex over the zipped data, at least not meaningfully.</p>
"
14314,1404,2008-08-18T08:10:57Z,14281,0,"<p>To access the contents of a zip file you have to unzip it, although the zipfile package makes this fairly easy, as you can unzip each file within an archive individually.</p>

<p><a href=""http://docs.python.org/lib/module-zipfile.html"" rel=""nofollow"">Python zipfile module</a></p>
"
14320,116,2008-08-18T08:19:06Z,14281,8,"<p>There's nothing that will automatically do what you want.</p>

<p>However, there is a python zipfile module that will make this easy to do.  Here's how to iterate over the lines in the file.</p>

<pre><code>#!/usr/bin/python

import zipfile
f = zipfile.ZipFile('myfile.zip')

for subfile in f.namelist():
    print subfile
    data = f.read(subfile)
    for line in data.split('\n'):
        print line
</code></pre>
"
14391,1659,2008-08-18T09:43:10Z,14389,14,"<p>Use a subrange of [\u0000-\uFFFF] for what you want.</p>

<p>You can also use the re.UNICODE compile flag. <a href=""http://docs.python.org/lib/re-syntax.html"">The docs</a> say that if UNICODE is set, \w will match the characters [0-9_] plus whatever is classified as alphanumeric in the Unicode character properties database. </p>

<p>See also <a href=""http://coding.derkeiler.com/Archive/Python/comp.lang.python/2004-05/2560.html"">http://coding.derkeiler.com/Archive/Python/comp.lang.python/2004-05/2560.html</a>.</p>
"
14399,914,2008-08-18T09:53:13Z,14389,0,"<p>\X seems to be available as a generic word-character in some languages, it allows you to match a single character disregarding of how many bytes it takes up. Might be useful.</p>
"
14420,1633,2008-08-18T10:17:35Z,14389,4,"<p>In Mastering Regular Expressions from Jeffrey Friedl (great book) it is mentioned that you could use \p{Letter} which will match unicode stuff that is considered a letter.</p>
"
15261,1813,2008-08-18T21:35:39Z,8154,2,"<p>You might want to check MySQL's timeout variables:</p>

<pre><code>show variables like '%timeout%';
</code></pre>

<p>You're probably interested in <code>wait_timeout</code> (less likely but possible: <code>interactive_timeout</code>).  On Debian and Ubuntu, the defaults are 28800 (MySQL kills connections after 8 hours), but maybe the default for your platform is different or whoever administrates the server has configured things differently.</p>

<p>AFAICT, <code>pool_recycle</code> doesn't actually keep the connections alive, it expires them on its own before MySQL kills them.  I'm not familiar with pylons, but if causing the connections to intermittently do a <code>SELECT 1;</code> is an option, that will keep them alive at the cost of basically no server load and minimal network traffic.  One final thought: are you somehow managing to use a connection that pylons thinks it has expired?</p>
"
15291,1797,2008-08-18T22:06:02Z,4942,0,"<p>I agree with mreggen. Tell them by working in Python you can get things done faster. Getting things done faster possibly means money saved by the client. In the least it means that you are working with a language you a more comfortable in, meaning faster development, debugging, and refactoring time. There will be less time spent looking up documentation on what function to use to find the length of a string, etc. </p>
"
15296,1199387,2008-08-18T22:10:13Z,4942,4,"<p>It's one of the preferred languages over at Google - It's several years ahead of Ruby in terms of ""maturity"" (what ever that really means - but managers like that). Since it's prefered by Google you can also run it on the Google App Engine.</p>

<p>Mircosoft is also embracing Python, and will have a v2.0 of IronPython coming out shortly. They are working on a Ruby implementation as well, but the Python version is way ahead, and is actually ""ready for primetime"". That give you the possibility for easy integration with .NET code, as well as being able to write client side RIAs in Python when Silverlight 2 ships.</p>
"
15931,995,2008-08-19T09:39:56Z,15798,28,"<p>Another good option is <a href=""http://lxml.de/validation.html"" rel=""nofollow"">lxml's validation</a> which I find quite pleasant to use.</p>

<p>A simple example taken from the lxml site:</p>

<pre><code>from StringIO import StringIO

from lxml import etree

dtd = etree.DTD(StringIO(""""""&lt;!ELEMENT foo EMPTY&gt;""""""))
root = etree.XML(""&lt;foo/&gt;"")
print(dtd.validate(root))
# True

root = etree.XML(""&lt;foo&gt;bar&lt;/foo&gt;"")
print(dtd.validate(root))
# False
print(dtd.error_log.filter_from_errors())
# &lt;string&gt;:1:0:ERROR:VALID:DTD_NOT_EMPTY: Element foo was declared EMPTY this one has content
</code></pre>
"
15938,446497,2008-08-19T09:45:44Z,2933,3,"<p>For the GUI itself:</p>

<p><a href=""http://wiki.python.org/moin/PyQt"" rel=""nofollow"">PyQT</a> is pretty much the reference.</p>

<p>Another way to develop a rapid user interface is to write a web app,
have it run locally and display the app in the browser.</p>

<p>Plus, if you go for the Tkinter option suggested by lubos hasko
you may want to try portablepy to have your app run on Windows environment
without Python.</p>
"
16189,985,2008-08-19T13:51:47Z,5136,1,"<p>Perhaps try <a href=""http://python.net/crew/theller/ctypes/"" rel=""nofollow"">ctypes </a>instead of SWIG. If it has been included as a part of Python 2.5, then it must be good :-)</p>
"
16191,1694,2008-08-19T13:52:23Z,16067,1,"<p>In my experience, there are two easy ways to call into C code from Python code.  There are other approaches, all of which are more annoying and/or verbose.</p>

<p>The first and easiest is to compile a bunch of C code as a separate shared library and then call functions in that library using ctypes.  Unfortunately, passing anything other than basic data types is non-trivial.</p>

<p>The second easiest way is to write a Python module in C and then call functions in that module.  You can pass anything you want to these C functions without having to jump through any hoops.  And it's easy to call Python functions or methods from these C functions, as described here: <a href=""https://docs.python.org/extending/extending.html#calling-python-functions-from-c"" rel=""nofollow"">https://docs.python.org/extending/extending.html#calling-python-functions-from-c</a></p>

<p>I don't have enough experience with SWIG to offer intelligent commentary.  And while it is possible to do things like pass custom Python objects to C functions through ctypes, or to define new Python classes in C, these things are annoying and verbose and I recommend taking one of the two approaches described above.</p>
"
16875,92,2008-08-19T20:24:18Z,16861,0,"<p>If you are using a framework like <a href=""http://www.djangoproject.com/"" rel=""nofollow"">django</a>, the framework can easily do this for you using standard filters.  In fact, I'm pretty sure django automatically does it unless you tell it not to.</p>

<p>Otherwise, I would recommend using some sort of regex validation before accepting inputs from forms.  I don't think there's a silver bullet for your problem, but using the re module, you should be able to construct what you need.</p>
"
16929,1694,2008-08-19T20:51:39Z,16861,6,"<p>Jeff Atwood himself described how StackOverflow.com sanitizes user input (in non-language-specific terms) on the Stack Overflow blog: <a href=""http://blog.stackoverflow.com/2008/06/safe-html-and-xss/"" rel=""nofollow"">http://blog.stackoverflow.com/2008/06/safe-html-and-xss/</a></p>

<p>However, as Justin points out, if you use Django templates or something similar then they probably sanitize your HTML output anyway.</p>

<p>SQL injection also shouldn't be a concern.  All of Python's database libraries (MySQLdb, cx_Oracle, etc) always sanitize the parameters you pass.  These libraries are used by all of Python's object-relational mappers (such as Django models), so you don't need to worry about sanitation there either.</p>
"
17287,1057,2008-08-20T01:20:48Z,17250,0,"<p>You can use the <a href=""http://www.chilkatsoft.com/python.asp"" rel=""nofollow"">Chilkat</a> library.  It's commercial, but has a free evaluation and seems pretty nice.</p>

<p>Here's an example I got from <a href=""http://www.example-code.com/python/zip.asp"" rel=""nofollow"">here</a>:</p>

<pre><code>import chilkat

# Demonstrates how to create a WinZip-compatible 128-bit AES strong encrypted zip
zip = chilkat.CkZip()
zip.UnlockComponent(""anything for 30-day trial"")

zip.NewZip(""strongEncrypted.zip"")

# Set the Encryption property = 4, which indicates WinZip compatible AES encryption.
zip.put_Encryption(4)
# The key length can be 128, 192, or 256.
zip.put_EncryptKeyLength(128)
zip.SetPassword(""secret"")

zip.AppendFiles(""exampleData/*"",True)
zip.WriteZip()
</code></pre>
"
17300,99,2008-08-20T01:45:05Z,16067,6,"<p>The best way to plan for an eventual transition to compiled code is to write the performance sensitive portions as a module of simple functions in a <a href=""http://en.wikipedia.org/wiki/Functional_programming"" rel=""nofollow"">functional style</a> (stateless and without side effects), which accept and return basic data types.</p>

<p>This will provide a one-to-one mapping from your Python prototype code to the eventual compiled code, and will let you use <a href=""https://docs.python.org/library/ctypes.html"" rel=""nofollow"">ctypes</a> easily and avoid a whole bunch of headaches.</p>

<p>For peak fitting, you'll almost certainly need to use arrays, which will complicate things a little, but is still very doable with ctypes.</p>

<p>If you really want to use more complicated data structures, or modify the passed arguments, <a href=""http://www.swig.org/"" rel=""nofollow"">SWIG</a> or <a href=""https://docs.python.org/extending/"" rel=""nofollow"">Python's standard C-extension interface</a> will let you do what you want, but with some amount of hassle.</p>

<p>For what you're doing, you may also want to check out <a href=""http://numpy.scipy.org/"" rel=""nofollow"">NumPy</a>, which might do some of the work you would want to push to C, as well as offering <a href=""http://projects.scipy.org/scipy/numpy/wiki/NumPyCAPI"" rel=""nofollow"">some additional help in moving data back and forth between Python and C</a>.</p>
"
17933,1199,2008-08-20T13:25:23Z,17893,33,"<p>Try the <code>entry_points.console_scripts</code> parameter in the setup() call. As described in the <a href=""http://peak.telecommunity.com/DevCenter/setuptools#automatic-script-creation"">setuptools docs</a>, this should do what I think you want.</p>

<p>To reproduce here:</p>

<pre><code>from setuptools import setup

setup(
    # other arguments here...
    entry_points = {
        'console_scripts': [
            'foo = package.module:func',
            'bar = othermodule:somefunc',
        ],
    }
)
</code></pre>
"
19152,145,2008-08-21T00:36:33Z,19151,90,"<p>First of all the <a href=""https://docs.python.org/3/library/itertools.html"">itertools module</a> is incredibly useful for all sorts of cases in which an iterator would be useful, but here is all you need to create an iterator in python:</p>

<blockquote>
  <p>yield</p>
</blockquote>

<p>Isn't that cool?  Yield can be used to replace a normal <strong>return</strong> in a function.  It returns the object just the same, but instead of destroying state and exiting, it saves state for when you want to execute the next iteration.  Here is an example of it in action pulled directly from the <a href=""http://docs.python.org/lib/itertools-functions.html"">itertools function list</a>:</p>

<pre><code> def count(n=0):
     while True:
         yield n
         n += 1
</code></pre>

<p>As stated in the functions description (it's the <strong>count()</strong> function from the itertools module...) , it produces an iterator that returns consecutive integers starting with n.</p>

<p><a href=""https://docs.python.org/2/reference/expressions.html#generator-expressions"">Generator expressions</a> are a whole other can of worms (awesome worms!).  They may be used in place of a <a href=""http://www.secnetix.de/olli/Python/list_comprehensions.hawk"">List Comprehension</a> to save memory (list comprehensions create a list in memory that is destroyed after use if not assigned to a variable, but generator expressions can create a Generator Object... which is a fancy way of saying Iterator). Here is an example of a generator expression definition:</p>

<pre><code>gen = (n for n in xrange(0,11))
</code></pre>

<p>This is very similar to our iterator definition above except the full range is predetermined to be between 0 and 10.</p>

<p>I just found <strong>xrange()</strong> (suprised I hadn't seen it before...) and added it to the above example.  <strong>xrange()</strong> is an iterable version of <strong>range()</strong> which has the advantage of not prebuilding the list.  It would be  very useful if you had a giant corpus of data to iterate over and only had so much memory to do it in.</p>
"
19343,429,2008-08-21T04:36:29Z,19339,397,"<p><a href=""http://docs.python.org/library/functions.html#zip""><code>zip</code></a> is its own inverse! Provided you use the special * operator.</p>

<pre><code>&gt;&gt;&gt; zip(*[('a', 1), ('b', 2), ('c', 3), ('d', 4)])
[('a', 'b', 'c', 'd'), (1, 2, 3, 4)]
</code></pre>

<p>The way this works is by calling <code>zip</code> with the arguments:</p>

<pre><code>zip(('a', 1), ('b', 2), ('c', 3), ('d', 4))
</code></pre>

<p>… except the arguments are passed to <code>zip</code> directly (after being converted to a tuple), so there's no need to worry about the number of arguments getting too big.</p>
"
19389,46,2008-08-21T05:59:00Z,19030,0,"<p>maybe you should take the approach of defaulting to: ""the filename is correct"" and work from there to disprove that statement:</p>

<p>with the fact that you only allow filenames with: 'show name', 'season number x episode number' and 'episode name', you know for certain that these items should be separated by a ""-"" (dash) so you have to have 2 of those for a filename to be correct.<br>
if that checks out, you can use your code to check that the show name matches the show name as seen in the parent's parent folder (case insensitive i assume), the season number matches the parents folder numeric value (with or without an extra 0 prepended).</p>

<p>if however you don't see the correct amount of dashes you instantly know that there is something wrong and stop before the rest of the tests etc.</p>

<p>and separately you can check if the file <code>folder.jpg</code> exists and take the necessary actions. <strong>or</strong> do that first and filter that file from the rest of the files in that folder.</p>
"
19665,1094,2008-08-21T11:53:38Z,19654,0,"<p>Well, python is a high level language.. its not hard to learn and if the guys already have programming knowledge it should be much easier to learn.. i like django.. i think it should be a nice try to use django .. </p>
"
19668,279,2008-08-21T11:56:00Z,19654,4,"<p>If the mandate of the new lead is to put the house in order, the current situation should likely be simplified as much as possible prior.  If I had to bring things to order, I wouldn't want to have to manage an ongoing language conversion project on top of everything else, or at least I'd like some choice when initiating the project.  When making your recommendation, did you think about the additional managerial complexity that coming into the middle of a conversion would entail?</p>
"
19685,837,2008-08-21T12:03:43Z,19654,0,"<p>I don't think it's a matter of a programming language as such. </p>

<p>What is the proficiency level of PHP in the team you're talking about? Are they doing spaghetti code or using some structured framework like Zend? If this is the first case then I absolutely understand the guy's interest in Python and Django. It this is the latter, it's just a hype.</p>
"
19692,1344,2008-08-21T12:09:46Z,19654,2,"<p>@darkdog:</p>

<p>Using a new language in production code is about more than easy syntax and high-level capability. You want to be familiar with core APIs and feel like you can fix something through logic instead of having to comb through the documentation.</p>

<p>I'm not saying transitioning to Python would be a bad idea for this company, but I'm with John--keep things simple during the transition. The new lead will appreciate having a say in such decisions.</p>

<p>If you'd really, really, really like to introduce Python, consider writing some extensions or utilities in straight-up Python or in the framework. You won't be upsetting your core initiatives, so it will be a low/no-risk opportunity to prove the merits of a switch.</p>
"
19700,1712,2008-08-21T12:13:51Z,19654,1,"<p>I think the language itself is not an issue here, as python is really nice high level language with good and easy to find, thorough documentation.</p>

<p>From what I've seen, the Django framework is also a great tooklit for web development, giving much the same developer performance boost Rails is touted to give.</p>

<p>The real issue is at the maintenance and management level.</p>

<p>How will this move fragment the maintenance between PHP and Python code. Is there a need to migrate existing code from one platform to another? What problems will adopting Python and Django solve that you have in your current development workflow and frameworks, etc.</p>
"
19715,1694,2008-08-21T12:25:21Z,19654,13,"<p>I recently introduced Python to my company, which does consulting work for the Post Office.  I did this by waiting until there was a project for which I would be the only programmer, then getting permission to do this new project in Python.  I then did another small project in Python with similarly impressive results.  In addition, I used Python for all of my small throwaway assignments (""can you parse the stats in these files into a CSV file organized by date and site?"", etc) and had a quick turnaround time on all of them.</p>

<p>I also evangelized Python a bit; I went out of my way to NOT be obnoxious about it, but I'd occasionally describe why I liked it so much, talked about the personal projects I use it for in my free time and why it's awesome for me, etc.</p>

<p>Eventually we started another project and I convinced everyone to use Python for it.  I took care to point everyone to a lot of documentation, including the specific webpages relating to what they were working on, and every time they had a question, I'd explain how to do things properly by explaining the Pythonic approach to things, etc.</p>

<p>This has worked really well.  However, this might be somewhat different than what you're describing.  In my case I started with moderately small projects and Python is only being used for new projects.  Also, none of my co-workers were really Perl or PHP gurus; they all knew those languages and had been using them for awhile, but it didn't take much effort for them to become more productive in Python than they'd been before.</p>

<p>So if you're talking about new projects with people who currently use PHP but aren't super-experts and don't love that language, then I think switching to Python is a no-brainer.  However, if you're talking about working with a large existing PHP code base with a lot of very experienced PHP programmers who are happy with their current setup, then switching languages is probably not a good idea.  You're probably somewhere in between, so you'll have to weigh the tradeoffs; hopefully my answer will help you do that.</p>
"
19943,2123,2008-08-21T13:47:40Z,19654,0,"<p>I love Python and Django, and use both to develop the our core webapps.</p>

<p>That said, it's hard to make a business case for switching at this point. Specifically:</p>

<ul>
<li>Any new platform is risky compared to staying with the tried and true</li>
<li>You'll have the developer fragmentation you mentioned</li>
<li>It's far easier to find PHP programmers than python programmers</li>
</ul>

<p>Moreover, as other posters have mention, if the issue is more with spaghetti code than PHP itself, there are plenty of nice PHP frameworks that could be used to refactor the code.</p>

<p>That said, if this developer is excited about python, stopping them outright is probably demoralizing. My suggestion would be to encourage them to develop in python, but not the mission critical parts of the app. Instead they could write some utility scripts, some small internal application that needs doing, etc.</p>

<p>In conclusion: I don't recommend switching from PHP, but I do recommend accommodating the developer's interest in some way at work.</p>
"
19968,791,2008-08-21T13:57:41Z,19654,1,"<p>It's really all about schedules.  To me the break should be with a specific project.  If you decide your direction is Django then start new projects with that.  Before you start a new project with a new language/framework, either make sure that you have scheduled time to get up to speed in this new direction, or get up to speed before using on new projects.</p>

<p>I would avoid going with a tool of the month.  Make sure you want it to be your direction and commit some time/resources to learning enough to make a good decision.</p>
"
20065,1595,2008-08-21T14:25:19Z,20063,13,"<p>Use <code>optparse</code> which comes with the standard library. For example:</p>

<pre><code>#!/usr/bin/env python
import optparse

def main():
  p = optparse.OptionParser()
  p.add_option('--person', '-p', default=""world"")
  options, arguments = p.parse_args()
  print 'Hello %s' % options.person

if __name__ == '__main__':
  main()
</code></pre>

<p>Source: <a href=""http://www.ibm.com/developerworks/aix/library/au-pythocli/"" rel=""nofollow"">Using Python to create UNIX command line tools</a></p>

<p>However as of Python 2.7 optparse is deprecated, see: <a href=""http://stackoverflow.com/q/3217673/55075"">Why use argparse rather than optparse?</a></p>
"
20069,446497,2008-08-21T14:26:57Z,20063,14,"<p>Pretty much everybody is using <a href=""http://python.active-venture.com/lib/module-getopt.html"" rel=""nofollow"">getopt</a></p>

<p>Here is the example code for the doc :</p>

<pre><code>import getopt, sys

def main():
    try:
        opts, args = getopt.getopt(sys.argv[1:], ""ho:v"", [""help"", ""output=""])
    except getopt.GetoptError:
        # print help information and exit:
        usage()
        sys.exit(2)
    output = None
    verbose = False
    for o, a in opts:
        if o == ""-v"":
            verbose = True
        if o in (""-h"", ""--help""):
            usage()
            sys.exit()
        if o in (""-o"", ""--output""):
            output = a
</code></pre>

<p>So in a word, here is how it works.</p>

<p>You've got two types of options. Those who are receiving arguments, and those who are
just like switches.</p>

<p><code>sys.argv</code> is pretty much your <code>char** argv</code> in C. Like in C you skip the first element which is the name of your program and parse only the arguments : <code>sys.argv[1:]</code></p>

<p><code>Getopt.getopt</code> will parse it according to the rule you give in argument.</p>

<p><code>""ho:v""</code> here describes the short arguments : <code>-ONELETTER</code>. The <code>:</code> means that <code>-o</code> accepts one argument.</p>

<p>Finally <code>[""help"", ""output=""]</code> describes long arguments ( <code>--MORETHANONELETTER</code> ).
The <code>=</code> after output once again means that output accepts one arguments.</p>

<p>The result is a list of couple (option,argument)</p>

<p>If an option doesn't accept any argument (like <code>--help</code> here) the <code>arg</code> part is an empty string.
You then usually want to loop on this list and test the option name as in the example.</p>

<p>I hope this helped you.</p>
"
20169,1697,2008-08-21T14:59:54Z,20063,4,"<p>Just in case you might need to, this may help if you need to <strong>grab</strong> unicode arguments on Win32 (2K, XP etc):</p>

<pre><code>
from ctypes import *

def wmain(argc, argv):
    print argc
    for i in argv:
        print i
    return 0

def startup():
    size = c_int()
    ptr = windll.shell32.CommandLineToArgvW(windll.kernel32.GetCommandLineW(), byref(size))
    ref = c_wchar_p * size.value
    raw = ref.from_address(ptr)
    args = [arg for arg in raw]
    windll.kernel32.LocalFree(ptr)
    exit(wmain(len(args), args))
startup()
</code></pre>
"
20222,1412,2008-08-21T15:22:20Z,20063,2,"<p>I prefer optparse to getopt. It's very declarative: you tell it the names of the options and the effects they should have (e.g., setting a boolean field), and it hands you back a dictionary populated according to your specifications.</p>

<p><a href=""http://docs.python.org/lib/module-optparse.html"" rel=""nofollow"">http://docs.python.org/lib/module-optparse.html</a></p>
"
20843,459,2008-08-21T19:13:46Z,20794,3,"<p>Can I mention testing for hardlinks without python? /bin/test has the FILE1 -ef FILE2 condition that is true when files share an inode.</p>

<p>Therefore, something like <code>find . -type f -exec test \{} -ef /path/to/file \; -print</code> works for hard link testing to a specific file.</p>

<p>Which brings me to reading <code>man test</code> and the mentions of <code>-L</code> and <code>-h</code> which both work on one file and return true if that file is a symbolic link, however that doesn't tell you if the target is missing.</p>

<p>I did find that <code>head -0 FILE1</code> would return an exit code of <code>0</code> if the file can be opened and a <code>1</code> if it cannot, which in the case of a symbolic link to a regular file works as a test for whether it's target can be read.</p>
"
20845,430,2008-08-21T19:14:01Z,20794,1,"<p>I'm not a python guy but it looks like os.readlink()?  The logic I would use in perl is to use readlink() to find the target and the use stat() to test to see if the target exists.</p>

<p>Edit: I banged out some perl that demos readlink.  I believe perl's stat and readlink and python's os.stat() and os.readlink()are both wrappers for the system calls, so this should translate reasonable well as proof of concept code:</p>

<pre><code>wembley 0 /home/jj33/swap &gt; cat p
my $f = shift;

while (my $l = readlink($f)) {
  print ""$f -&gt; $l\n"";
  $f = $l;
}

if (!-e $f) {
  print ""$f doesn't exist\n"";
}
wembley 0 /home/jj33/swap &gt; ls -l | grep ^l
lrwxrwxrwx    1 jj33  users          17 Aug 21 14:30 link -&gt; non-existant-file
lrwxrwxrwx    1 root     users          31 Oct 10  2007 mm -&gt; ../systems/mm/20071009-rewrite//
lrwxrwxrwx    1 jj33  users           2 Aug 21 14:34 mmm -&gt; mm/
wembley 0 /home/jj33/swap &gt; perl p mm
mm -&gt; ../systems/mm/20071009-rewrite/
wembley 0 /home/jj33/swap &gt; perl p mmm
mmm -&gt; mm
mm -&gt; ../systems/mm/20071009-rewrite/
wembley 0 /home/jj33/swap &gt; perl p link
link -&gt; non-existant-file
non-existant-file doesn't exist
wembley 0 /home/jj33/swap &gt;
</code></pre>
"
20848,893,2008-08-21T19:15:33Z,20794,11,"<p><a href=""https://docs.python.org/2/library/os.html#os.lstat"" rel=""nofollow"">os.lstat()</a> may be helpful. If lstat() succeeds and stat() fails, then it's probably a broken link.</p>
"
20859,2147,2008-08-21T19:19:24Z,20794,2,"<p><a href=""http://docs.python.org/lib/module-os.path.html"" rel=""nofollow"">os.path</a></p>

<p>You may try using realpath() to get what the symlink points to, then trying to determine if it's a valid file using is file.</p>

<p>(I'm not able to try that out at the moment, so you'll have to play around with it and see what you get)</p>
"
20983,2168,2008-08-21T19:57:36Z,20927,5,"<p>You would also need to then save the message.  Then it that should work.</p>
"
21221,2363,2008-08-21T21:24:10Z,4942,6,"<p>The best sell of Python I've ever seen was by a manager in our group who had a young daughter.  He used a quote attributed to Einstein:</p>

<blockquote>
  <p>If you can't explain something to a six-year-old, you really don't understand it yourself.</p>
</blockquote>

<p>The next few slides of his presentation demonstrated how he was able to teach his young daughter some basic Python in less than 30 minutes, with examples of the code she wrote and an explanation of what it did.</p>

<p>He ended the presentation with a picture of his daughter and her quote ""Programming is fun!""</p>

<p>I would focus on Python's user friendliness and wealth of libraries and frameworks.  There are also a lot of little libraries that you might not get in other languages, and would have to write yourself (i.e. <a href=""http://blog.programmerslog.com/?p=124"">How a C++ developer writes Python</a>).</p>

<p>Good luck!</p>
"
21302,792,2008-08-21T22:02:01Z,19030,2,"<blockquote>
  <p>I want to add a rule that checks for
  the presence of a folder.jpg file in
  each directory, but to add this would
  make the code substantially more messy
  in it's current state..</p>
</blockquote>

<p>This doesn't look bad.  In fact your current code does it very nicely, and Sven mentioned a good way to do it as well:</p>

<ol>
<li>Get a list of all the files</li>
<li>Check for ""required"" files</li>
</ol>

<p>You would just have have add to your dictionary a list of required files:</p>

<pre><code>checker = {
  ...
  'required': ['file', 'list', 'for_required']
}
</code></pre>

<p>As far as there being a better/extensible way to do this?  I am not exactly sure.  I could only really think of a way to possibly drop the ""multiple"" regular expressions and build off of Sven's idea for using a delimiter.  So my strategy would be defining a dictionary as follows (and I'm sorry I don't know Python syntax and I'm a tad to lazy to look it up but it should make sense.  The /regex/ is shorthand for a regex):</p>

<pre><code>check_dict = {
  'delim'    : /\-/,
  'parts'    : [ 'Show Name', 'Episode Name', 'Episode Number' ],
  'patterns' : [/valid name/, /valid episode name/, /valid number/ ],
  'required' : ['list', 'of', 'files'],
  'ignored'  : ['.*', 'hidden.txt'],
  'start_dir': '/path/to/dir/to/test/'
}
</code></pre>

<ol>
<li>Split the filename based on the delimiter.</li>
<li>Check each of the parts.</li>
</ol>

<p>Because its an ordered list you can determine what parts are missing and if a section doesn't match any pattern it is malformed.  Here the <code>parts</code> and <code>patterns</code> have a 1 to 1 ratio.  Two arrays instead of a dictionary enforces the order.</p>

<p>Ignored and required files can be listed.  The <code>.</code> and <code>..</code> files should probably be ignored automatically.  The user should be allowed to input ""globs"" which can be shell expanded.  I'm thinking here of <code>svn:ignore</code> properties, but globbing is natural for listing files.</p>

<p>Here <code>start_dir</code> would be default to the current directory but if you wanted a single file to run automated testing of a bunch of directories this would be useful.</p>

<p>The real loose end here is the path template and along the same lines what path is required for ""valid files"".  I really couldn't come up with a solid idea without writing one large regular expression and taking groups from it... to build a template.  It felt a lot like writing a TextMate language grammar.  But that starts to stray on the ease of use.  The real problem was that the path template was not composed of <code>parts</code>, which makes sense but adds complexity.</p>

<p>Is this strategy in tune with what you were thinking of?</p>
"
21468,446497,2008-08-21T23:54:52Z,21454,75,"<p>From the <a href=""https://docs.djangoproject.com/en/dev/ref/models/fields/#django.db.models.Field.choices"" rel=""nofollow"">Django documentation</a>:</p>

<pre><code>MAYBECHOICE = (
    ('y', 'Yes'),
    ('n', 'No'),
    ('u', 'Unknown'),
)
</code></pre>

<p>And you define a charfield in your model :</p>

<pre><code>married = models.CharField(max_length=1, choices=MAYBECHOICE)
</code></pre>

<p>You can do the same with integer fields if you don't like to have letters
in your db.</p>

<p>In that case, rewrite your choices:</p>

<pre><code>MAYBECHOICE = (
    (0, 'Yes'),
    (1, 'No'),
    (2, 'Unknown'),
)
</code></pre>
"
21937,2257,2008-08-22T07:40:12Z,21934,8,"<p>I think the article ""<a href=""http://www.ibm.com/developerworks/java/library/j-jtp10283/"">Java theory and practice: A brief history of garbage collection</a>"" from IBM should help explain some of the questions you have.</p>
"
21964,2260,2008-08-22T09:10:06Z,21934,40,"<p>There are drawbacks of using reference counting. One of the most mentioned is circular references: Suppose A references B, B references C and C references B. If A were to drop its reference to B, both B and C will still have a reference count of 1 and won't be deleted with traditional reference counting. CPython (reference counting is not part of python itself, but part of the C implementation thereof) catches circular references with a separate garbage collection routine that it runs periodically...</p>

<p>Another drawback: Reference counting can make execution slower. Each time an object is referenced and dereferenced, the interpreter/VM must check to see if the count has gone down to 0 (and then deallocate if it did). Garbage Collection does not need to do this.</p>

<p>Also, Garbage Collection can be done in a separate thread (though it can be a bit tricky). On machines with lots of RAM and for processes that use memory only slowly, you might not want to be doing GC at all! Reference counting would be a bit of a drawback there in terms of performance...</p>
"
21973,1421,2008-08-22T09:21:55Z,21961,1,"<pre><code>mktime(...)
    mktime(tuple) -&gt; floating point number

    Convert a time tuple in local time to seconds since the Epoch.
</code></pre>

<p>local time... fancy that.</p>

<p>The time tuple:</p>

<pre><code>The other representation is a tuple of 9 integers giving local time.
The tuple items are:
  year (four digits, e.g. 1998)
  month (1-12)
  day (1-31)
  hours (0-23)
  minutes (0-59)
  seconds (0-59)
  weekday (0-6, Monday is 0)
  Julian day (day in the year, 1-366)
  DST (Daylight Savings Time) flag (-1, 0 or 1)
If the DST flag is 0, the time is given in the regular time zone;
if it is 1, the time is given in the DST time zone;
if it is -1, mktime() should guess based on the date and time.
</code></pre>

<p>Incidentally, we seem to be 6 hours apart:</p>

<pre><code>&gt;&gt;&gt; time.mktime((2009, 1, 31, 0, 0, 0, 5, 31, -1))
1233356400.0
&gt;&gt;&gt; (1233378000.0 - 1233356400)/(60*60)
6.0
</code></pre>
"
21974,2260,2008-08-22T09:22:08Z,21961,0,"<p>Interesting. I don't know, but I did try this:</p>

<pre><code>&gt;&gt;&gt; now = time.mktime((2008, 8, 22, 11 ,17, -1, -1, -1, -1))
&gt;&gt;&gt; tomorrow = time.mktime((2008, 8, 23, 11 ,17, -1, -1, -1, -1))
&gt;&gt;&gt; tomorrow - now
86400.0
</code></pre>

<p>which is what you expected. My guess? Maybe some time correction was done since the epoch. This could be only a few seconds, something like a leap year. I think I heard something like this before, but can't remember exactly how and when it is done...</p>
"
21975,1087,2008-08-22T09:24:25Z,21961,7,"<p>Short answer: Because of timezones.</p>

<p>The Epoch is in UTC.</p>

<p>For example, I'm on IST (Irish Stsandard Time) or GMT+1. time.mktime() is relative to my timezone, so on my system this refers to</p>

<pre><code>&gt;&gt;&gt; time.mktime((2009, 1, 31, 0, 0, 0, 5, 31, -1))
1233360000.0
</code></pre>

<p>Because you got the result 1233378000, that would suggest that you're 5 hours behind me</p>

<pre><code>&gt;&gt;&gt; (1233378000 - 1233360000) / (60*60)    
5
</code></pre>

<p>Have a look at the time.gmtime() function which works off UTC.</p>
"
22021,2427,2008-08-22T10:12:25Z,21961,1,"<p>Phil's answer really solved it, but I'll elaborate a little more. Since the epoch is in UTC, if I want to compare other times to the epoch, I need to interpret them as UTC as well.</p>

<pre><code>&gt;&gt;&gt; calendar.timegm((2009, 1, 31, 0, 0, 0, 5, 31, -1))
1233360000
&gt;&gt;&gt; 1233360000 / (60*60*24)
14275
</code></pre>

<p>By converting the time tuple to a timestamp treating is as UTC time, I get a number which <em>is</em> evenly divisible by the number of seconds in a day.</p>

<p>I can use this to convert a date to a days-from-the-epoch representation which is what I'm ultimately after.</p>
"
22157,309844,2008-08-22T12:03:47Z,22149,0,"<p>Python stores Unicode as UTF-16. str() will return the UTF-8 representation of the UTF-16 string.</p>
"
22168,1993,2008-08-22T12:10:14Z,22149,-1,"<p>From <a href=""http://en.wikipedia.org/wiki/UTF-8"" rel=""nofollow"">Wikipedia on UTF-8</a>: </p>

<blockquote>
UTF-8 (8-bit UCS/Unicode Transformation Format) is a <strong>variable-length character encoding for Unicode. It is able to represent any character in the Unicode standard</strong>, yet the initial encoding of byte codes and character assignments for UTF-8 is backwards compatible with ASCII. For these reasons, it is steadily becoming the preferred encoding for e-mail, web pages[1], and other places where characters are stored or streamed.
</blockquote>

<p>So, it's anywhere between one and four bytes depending on which character you wish to represent within the realm of Unicode.</p>

<p><a href=""http://en.wikipedia.org/wiki/Unicode"" rel=""nofollow"">From Wikipedia on Unicode:</a></p>

<blockquote>
In computing, Unicode is an industry standard allowing computers to consistently represent and manipulate text expressed in <strong>most of the world's writing systems</strong>. 
</blockquote>

<p>So it's able to represent most (but not all) of the world's writing systems. </p>

<p>I hope this helps :)</p>
"
22206,370899,2008-08-22T12:32:04Z,22149,-2,"<blockquote>
  <p>so what is a ""Unicode string"" in
  Python?</p>
</blockquote>

<p>Python 'knows' that your string is Unicode. Hence if you do regex on it, it will know which is character and which is not etc, which is really helpful. If you did a strlen it will also give the correct result. As an example if you did string count on Hello, you will get 5 (even if it's Unicode). But if you did a string count of a foreign word and that string was not a Unicode string than you will have much larger result. Pythong uses the information form the Unicode Character Database to identify each character in the Unicode String. Hope that helps. </p>
"
22208,2077,2008-08-22T12:32:59Z,22149,8,"<p>Meanwhile, I did a refined research to verify what the internal representation in Python is, and also what its limits are. ""<a href=""http://www.cmlenz.net/archives/2008/07/the-truth-about-unicode-in-python"">The Truth About Unicode In Python</a>"" is a very good article which cites directly from the Python developers. Apparently, internal representation is either UCS-2 or UCS-4 depending on a compile-time switch. So Jon, it's not UTF-16, but your answer put me on the right track anyway, thanks.</p>
"
22219,1694,2008-08-22T12:40:03Z,21934,11,"<p>Darren Thomas gives a good answer.  However, one big difference between the Java and Python approaches is that with reference counting in the common case (no circular references) objects are cleaned up immediately rather than at some indeterminate later date.</p>

<p>For example, I can write sloppy, non-portable code in CPython such as</p>

<pre><code>def parse_some_attrs(fname):
    return open(fname).read().split(""~~~"")[2:4]
</code></pre>

<p>and the file descriptor for that file I opened will be cleaned up immediately because as soon as the reference to the open file goes away, the file is garbage collected and the file descriptor is freed.  Of course, if I run Jython or IronPython or possibly PyPy, then the garbage collector won't necessarily run until much later; possibly I'll run out of file descriptors first and my program will crash.</p>

<p>So you SHOULD be writing code that looks like</p>

<pre><code>def parse_some_attrs(fname):
    with open(fname) as f:
        return f.read().split(""~~~"")[2:4]
</code></pre>

<p>but sometimes people like to rely on reference counting to always free up their resources because it can sometimes make your code a little shorter.</p>

<p>I'd say that the best garbage collector is the one with the best performance, which currently seems to be the Java-style generational garbage collectors that can run in a separate thread and has all these crazy optimizations, etc.  The differences to how you write your code should be negligible and ideally non-existent.</p>
"
22525,2482,2008-08-22T14:40:21Z,972,3,"<p>What Jason Pratt posted is correct.</p>

<pre><code>&gt;&gt;&gt; class Test(object):
...   def a(self):
...     pass
... 
&gt;&gt;&gt; def b(self):
...   pass
... 
&gt;&gt;&gt; Test.b = b
&gt;&gt;&gt; type(b)
&lt;type 'function'&gt;
&gt;&gt;&gt; type(Test.a)
&lt;type 'instancemethod'&gt;
&gt;&gt;&gt; type(Test.b)
&lt;type 'instancemethod'&gt;
</code></pre>

<p>As you can see, Python doesn't consider b() any different than a(). In Python all methods are just variables that happen to be functions. </p>
"
22624,1968,2008-08-22T15:12:41Z,22617,103,"<p>Formatting in Python is done via the <a href=""http://docs.python.org/2/library/stdtypes.html#string-formatting"">string formatting (<code>%</code>) operator</a>:</p>

<pre><code>""%02d:%02d:%02d"" % (hours, minutes, seconds)
</code></pre>

<p>/Edit: There's also <a href=""https://docs.python.org/2/library/time.html#time.strftime"">strftime</a>.</p>
"
22630,736,2008-08-22T15:13:45Z,22617,3,"<p>You can use C style string formatting:</p>

<pre><code>""%d:%d:d"" % (hours, minutes, seconds)
</code></pre>

<p>See here, especially: <a href=""https://web.archive.org/web/20120415173443/http://diveintopython3.ep.io/strings.html"" rel=""nofollow"">https://web.archive.org/web/20120415173443/http://diveintopython3.ep.io/strings.html</a></p>
"
22682,1595,2008-08-22T15:38:22Z,22676,286,"<p>In Python 2, use urllib2 which comes with the standard library.</p>

<pre><code>import urllib2
response = urllib2.urlopen('http://www.example.com/')
html = response.read()
</code></pre>

<p>This is the most basic way to use the library, minus any error handling.  You can also do more complex stuff such as changing headers.  The documentation can be found <a href=""http://docs.python.org/2/library/urllib2.html"">here.</a></p>
"
22721,30,2008-08-22T15:58:17Z,22676,118,"<pre class=""lang-py prettyprint-override""><code>import urllib2
mp3file = urllib2.urlopen(""http://www.example.com/songs/mp3.mp3"")
with open('test.mp3','wb') as output:
  output.write(mp3file.read())
</code></pre>

<p>The <code>wb</code> in <code>open('test.mp3','wb')</code> opens a file (and erases any existing file) in binary mode so you can save data with it instead of just text.</p>
"
22723,145,2008-08-22T15:58:52Z,22676,9,"<p>I agree with Corey, urllib2 is more complete than <a href=""http://docs.python.org/lib/module-urllib.html"">urllib</a> and should likely be the module used if you want to do more complex things, but to make the answers more complete, urllib is a simpler module if you want just the basics:</p>

<pre><code>import urllib
response = urllib.urlopen('http://www.example.com/sound.mp3')
mp3 = response.read()
</code></pre>

<p>Will work fine. Or, if you don't want to deal with the ""response"" object you can call <strong>read()</strong> directly:</p>

<pre><code>import urllib
mp3 = urllib.urlopen('http://www.example.com/sound.mp3').read()
</code></pre>
"
22776,394,2008-08-22T16:19:09Z,22676,759,"<p>One more, using <a href=""http://docs.python.org/2/library/urllib.html#urllib.urlretrieve""><code>urlretrieve</code></a>:</p>

<pre><code>import urllib
urllib.urlretrieve (""http://www.example.com/songs/mp3.mp3"", ""mp3.mp3"")
</code></pre>

<p>(for Python 3+ use 'import urllib.request' and urllib.request.urlretrieve)</p>

<p>Yet another one, with a ""progressbar""</p>

<pre><code>import urllib2

url = ""http://download.thinkbroadband.com/10MB.zip""

file_name = url.split('/')[-1]
u = urllib2.urlopen(url)
f = open(file_name, 'wb')
meta = u.info()
file_size = int(meta.getheaders(""Content-Length"")[0])
print ""Downloading: %s Bytes: %s"" % (file_name, file_size)

file_size_dl = 0
block_sz = 8192
while True:
    buffer = u.read(block_sz)
    if not buffer:
        break

    file_size_dl += len(buffer)
    f.write(buffer)
    status = r""%10d  [%3.2f%%]"" % (file_size_dl, file_size_dl * 100. / file_size)
    status = status + chr(8)*(len(status)+1)
    print status,

f.close()
</code></pre>
"
23041,106,2008-08-22T17:58:23Z,22059,0,"<p>Open Calais probably use language parsing technology and language statics to guess which words or phrases are Names, Places, Companies, etc. Then, it is just another step to do some kind of search for those entities and return meta data.</p>

<p>Zementa probably does something similar, but matches the phrases against meta-data attached to images in order to acquire related results.</p>

<p>It certainly isn't easy.</p>
"
23414,2016,2008-08-22T20:34:00Z,23397,0,"<p>Possibly a version of spawn() for python? <a href=""http://en.wikipedia.org/wiki/Spawn_(operating_system)"" rel=""nofollow"">http://en.wikipedia.org/wiki/Spawn_(operating_system)</a></p>
"
23422,893,2008-08-22T20:38:18Z,23397,4,"<p>Have a look at the process management functions in the <a href=""http://python.org/doc/2.5/lib/os-process.html"" rel=""nofollow"">os module</a>. There are function for starting new processes in many different ways, both synchronously and asynchronously.</p>

<p>I should note also that Windows doesn't provide functionality that is exactly like fork() on other systems. To do multiprocessing on Windows, you will need to use the <a href=""http://python.org/doc/2.5/lib/module-threading.html"" rel=""nofollow"">threading</a> module.</p>
"
23510,1694,2008-08-22T21:16:07Z,23397,3,"<p>In addition to the process management code in the os module that Greg pointed out, you should also take a look at the threading module: <a href=""https://docs.python.org/library/threading.html"" rel=""nofollow"">https://docs.python.org/library/threading.html</a></p>

<pre><code>from threading import Thread

def separate_computations(x, y):
    print sum(x for i in range(y))  # really expensive multiplication

Thread(target=separate_compuations, args=[57, 83]).start()
print ""I'm continuing while that other function runs in another thread!""
</code></pre>
"
23703,2551,2008-08-22T22:58:36Z,21934,2,"<p>The latest Sun Java VM actually have multiple GC algorithms which you can tweak.  The Java VM specifications intentionally omitted specifying actual GC behaviour to allow different (and multiple) GC algorithms for different VMs.</p>

<p>For example, for all the people who dislike the ""stop-the-world"" approach of the default Sun Java VM GC behaviour, there are VM such as <a href=""http://www-01.ibm.com/software/webservers/realtime/"" rel=""nofollow"">IBM's WebSphere Real Time</a> which allows real-time application to run on Java.</p>

<p>Since the Java VM spec is publicly available, there is (theoretically) nothing stopping anyone from implementing a Java VM that uses CPython's GC algorithm.</p>
"
24061,1586,2008-08-23T07:43:18Z,13857,11,"<p>To be honest, I understand closures perfectly well except I've never been clear about what exactly is the thing which is the ""closure"" and what's so ""closure"" about it. I recommend you give up looking for any logic behind the choice of term.</p>

<p>Anyway, here's my explanation:</p>

<pre><code>def foo():
   x = 3
   def bar():
      print x
   x = 5
   return bar

bar = foo()
bar()   # print 5
</code></pre>

<p>A key idea here is that the function object returned from foo retains a hook to the local var 'x' even though 'x' has gone out of scope and should be defunct. This hook is to the var itself, not just the value that var had at the time, so when bar is called, it prints 5, not 3.</p>

<p>Also be clear that Python 2.x has limited closure: there's no way I can modify 'x' inside 'bar' because writing 'x = bla' would declare a local 'x' in bar, not assign to 'x' of foo. This is a side-effect of Python's assignment=declaration. To get around this, Python 3.0 introduces the nonlocal keyword:</p>

<pre><code>def foo():
   x = 3
   def bar():
      print x
   def ack():
      nonlocal x
      x = 7
   x = 5
   return (bar, ack)

bar, ack = foo()
ack()   # modify x of the call to foo
bar()   # print 7
</code></pre>
"
24190,893,2008-08-23T12:39:52Z,23907,4,"<p>The first thing that jumps to mind is the possibility of your git history having a nonlinear history. You might have difficulty determining a sensible sequence of commits.</p>

<p>Having said that, it seems like you could keep a log of commit ids and the corresponding lines of code in that commit. In a post-commit hook, starting from the HEAD revision, work backwards (branching to multiple parents if necessary) until all paths reach a commit that you've already seen before. That should give you the total lines of code for each commit id.</p>

<p>Does that help any? I have a feeling that I've misunderstood something about your question.</p>
"
24199,893,2008-08-23T12:49:12Z,24193,2,"<p>I recall that in previous versions of VS, there was a way to add custom build steps to the build process. I used that a lot to do exactly the kind of automated code generation you describe.</p>

<p>I imagine the custom build step feature is still there in 2008.</p>
"
24236,2384,2008-08-23T13:42:39Z,24193,1,"<p>I don't understand what you are trying to do here. Are you trying to execute a Python script that generates a C# file and then compile that with the project? Or are you trying to compile a Python script to C#?</p>
"
24248,2384,2008-08-23T14:07:27Z,24193,1,"<p>OK, I see. Well, as far as I know there isn't any code generator for Python. There is a good introduction on how to roll your own <a href=""http://www.drewnoakes.com/snippets/WritingACustomCodeGeneratorToolForVisualStudio/"" rel=""nofollow"">here</a>.</p>

<p>Actually, that's quite an under-used part of the environment, I suppose it's so because it needs you to use the IDE to compile the project, as it'd seem only the IDE knows about these ""generators"", but MSBuild ignores them.</p>
"
24377,2611,2008-08-23T16:57:28Z,19151,374,"<p>Iterator objects in python conform to the iterator protocol, which basically means they provide two methods: <code>__iter__()</code>  and  <code>next()</code>.  The <code>__iter__</code> returns the iterator object and is implicitly called at the start of loops.  The <code>next()</code> method returns the next value and is implicitly called at each loop increment.  <code>next()</code> raises a StopIteration exception when there are no more value to return, which is implicitly captured by looping constructs to stop iterating.</p>

<p>Here's a simple example of a counter:</p>

<pre><code>class Counter:
    def __init__(self, low, high):
        self.current = low
        self.high = high

    def __iter__(self):
        return self

    def next(self): # Python 3: def __next__(self)
        if self.current &gt; self.high:
            raise StopIteration
        else:
            self.current += 1
            return self.current - 1


for c in Counter(3, 8):
    print c
</code></pre>

<p>This will print:</p>

<pre><code>3
4
5
6
7
8
</code></pre>

<p>This is easier to write using a generator, as covered in a previous answer:</p>

<pre><code>def counter(low, high):
    current = low
    while current &lt;= high:
        yield current
        current += 1

for c in counter(3, 8):
    print c
</code></pre>

<p>The printed output will be the same.  Under the hood, the generator object supports the iterator protocol and does something roughly similar to the class Counter.</p>

<p>David Mertz's article, <a href=""https://www.ibm.com/developerworks/library/l-pycon/"">Iterators and Simple Generators</a>, is a pretty good introduction. </p>
"
24939,267,2008-08-24T09:05:20Z,24931,0,"<p>In which context are you asking?</p>

<p>Are you trying to capture the output from a program you start on the command line?</p>

<p>if so, then this is how to execute it:</p>

<pre><code>somescript.py | your-capture-program-here
</code></pre>

<p>and to read the output, just read from standard input.</p>

<p>If, on the other hand, you're executing that script or cmd.exe or similar from within your program, and want to wait until the script/program has finished, and capture all its output, then you need to look at the library calls you use to start that external program, most likely there is a way to ask it to give you some way to read the output and wait for completion.</p>
"
24942,429,2008-08-24T09:27:54Z,24931,1,"<p>You want <a href=""http://docs.python.org/lib/module-subprocess.html"" rel=""nofollow"">subprocess</a>. Look specifically at Popen in 17.1.1 and communicate in 17.1.2.</p>
"
24949,2010,2008-08-24T09:39:08Z,24931,9,"<p>If you are talking about the python interpreter or CMD.exe that is the 'parent' of your script then no, it isn't possible. In every POSIX-like system (now you're running Windows, it seems, and that might have some quirk I don't know about, YMMV) each process has three streams, standard input, standard output and standard error. Bu default (when running in a console) these are directed to the console, but redirection is possible using the pipe notation:</p>

<pre><code>python script_a.py | python script_b.py
</code></pre>

<p>This ties the standard output stream of script a to the standard input stream of script B. Standard error still goes to the console in this example. See the article on <a href=""http://en.wikipedia.org/wiki/Standard_streams"" rel=""nofollow"">standard streams</a> on Wikipedia.</p>

<p>If you're talking about a child process, you can launch it from python like so (stdin is also an option if you want two way communication):</p>

<pre><code>import subprocess
# Of course you can open things other than python here :)
process = subprocess.Popen([""python"", ""main.py""], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
x = process.stderr.readline()
y = process.stdout.readline()
process.wait()
</code></pre>

<p>See the Python <a href=""http://docs.python.org/lib/module-subprocess.html"" rel=""nofollow"">subprocess</a> module for information on managing the process. For communication, the process.stdin and process.stdout pipes are considered standard <a href=""http://docs.python.org/lib/bltin-file-objects.html"" rel=""nofollow"">file objects</a>.</p>

<p>For use with pipes, reading from standard input as <a href=""http://stackoverflow.com/questions/24931/how-to-capture-python-interpreters-andor-cmdexes-output-from-a-python-script#24939"" rel=""nofollow"">lassevk</a> suggested you'd do something like this:</p>

<pre><code>import sys
x = sys.stderr.readline()
y = sys.stdin.readline()
</code></pre>

<p>sys.stdin and sys.stdout are standard file objects as noted above, defined in the <a href=""http://docs.python.org/lib/module-sys.html"" rel=""nofollow"">sys</a> module. You might also want to take a look at the <a href=""http://docs.python.org/lib/module-pipes.html"" rel=""nofollow"">pipes</a> module.</p>

<p>Reading data with readline() as in my example is a pretty naïve way of getting data though. If the output is not line-oriented or indeterministic you probably want to look into <a href=""http://docs.python.org/lib/poll-objects.html"" rel=""nofollow"">polling</a> which unfortunately does not work in windows, but I'm sure there's some alternative out there.</p>
"
24962,188,2008-08-24T10:32:49Z,22617,0,"<p><em>str()</em> in python on an integer will <strong>not</strong> print any decimal places.</p>

<p>If you have a float that you want to ignore the decimal part, then you can use str(int(floatValue)).</p>

<p>Perhaps the following code will demonstrate:</p>

<pre><code>&gt;&gt;&gt; str(5)
'5'
&gt;&gt;&gt; int(8.7)
8
</code></pre>
"
25117,2260,2008-08-24T15:38:21Z,23397,2,"<p>You might also like using the processing module (<a href=""http://pypi.python.org/pypi/processing"" rel=""nofollow"">http://pypi.python.org/pypi/processing</a>). It has lot's of functionality for writing parallel systems with the same API as the threading module...</p>
"
25123,1638,2008-08-24T15:50:54Z,25116,3,"<p>Look at the struct package: <a href=""https://docs.python.org/library/struct.html"" rel=""nofollow"">https://docs.python.org/library/struct.html</a>, it allows you to interpret strings as packed binary data.</p>

<p>Not sure if this will completely answer your question but you can use struct.unpack() to convert binary data to python objects.</p>

<pre>
<code>
import struct
f = open(filename, ""rb"")
s = f.read(8)
x, y = struct.unpack("">hl"", s)
</code>
</pre>

<p>int this example, the "">"" tells to read big-endian the ""h"" reads a 2-byte short, and the ""l"" is for a 4-byte long. you can obviously change these to whatever you need to read out of the binary data...</p>
"
25136,2363,2008-08-24T16:08:37Z,16861,23,"<p>Here is a snippet that will remove all tags not on the white list, and all tag attributes not on the attribues whitelist (so you can't use <code>onclick</code>).</p>

<p>It is a modified version of <a href=""http://www.djangosnippets.org/snippets/205/"">http://www.djangosnippets.org/snippets/205/</a>, with the regex on the attribute values to prevent people from using <code>href=""javascript:...""</code>, and other cases described at <a href=""http://ha.ckers.org/xss.html"">http://ha.ckers.org/xss.html</a>.<br>
(e.g. <code>&lt;a href=""ja&amp;#x09;vascript:alert('hi')""&gt;</code> or <code>&lt;a href=""ja  vascript:alert('hi')""&gt;</code>, etc.)</p>

<p>As you can see, it uses the (awesome) <a href=""http://www.crummy.com/software/BeautifulSoup/"">BeautifulSoup</a> library.</p>

<pre><code>import re
from urlparse import urljoin
from BeautifulSoup import BeautifulSoup, Comment

def sanitizeHtml(value, base_url=None):
    rjs = r'[\s]*(&amp;#x.{1,7})?'.join(list('javascript:'))
    rvb = r'[\s]*(&amp;#x.{1,7})?'.join(list('vbscript:'))
    re_scripts = re.compile('(%s)|(%s)' % (rjs, rvb), re.IGNORECASE)
    validTags = 'p i strong b u a h1 h2 h3 pre br img'.split()
    validAttrs = 'href src width height'.split()
    urlAttrs = 'href src'.split() # Attributes which should have a URL
    soup = BeautifulSoup(value)
    for comment in soup.findAll(text=lambda text: isinstance(text, Comment)):
        # Get rid of comments
        comment.extract()
    for tag in soup.findAll(True):
        if tag.name not in validTags:
            tag.hidden = True
        attrs = tag.attrs
        tag.attrs = []
        for attr, val in attrs:
            if attr in validAttrs:
                val = re_scripts.sub('', val) # Remove scripts (vbs &amp; js)
                if attr in urlAttrs:
                    val = urljoin(base_url, val) # Calculate the absolute url
                tag.attrs.append((attr, val))

    return soup.renderContents().decode('utf8')
</code></pre>

<p>As the other posters have said, pretty much all Python db libraries take care of SQL injection, so this should pretty much cover you.</p>
"
25151,2010,2008-08-24T16:23:13Z,16861,4,"<p>I don't do web development much any longer, but when I did, I did something like so:</p>

<p>When no parsing is supposed to happen, I usually just escape the data to not interfere with the database when I store it, and escape everything I read up from the database to not interfere with html when I display it (cgi.escape() in python).</p>

<p>Chances are, if someone tried to input html characters or stuff, they actually wanted that to be displayed as text anyway. If they didn't, well tough :)</p>

<p>In short always escape what can affect the current target for the data.</p>

<p>When I did need some parsing (markup or whatever) I usually tried to keep that language in a non-intersecting set with html so I could still just store it suitably escaped (after validating for syntax errors) and parse it to html when displaying without having to worry about the data the user put in there interfering with your html.</p>

<p>See also <a href=""http://wiki.python.org/moin/EscapingHtml"" rel=""nofollow"">Escaping HTML</a></p>
"
25180,2010,2008-08-24T16:52:29Z,25116,24,"<p>As long as you don't try to put any unicode data into your <code>StringIO</code> and you are careful NOT to use <code>cStringIO</code> you should be fine.</p>

<p>According to the <a href=""https://docs.python.org/library/stringio.html"" rel=""nofollow"">StringIO</a> documentation, as long as you keep to either unicode or 8-bits everything works as expected. Presumably, <code>StringIO</code> does something special when someone does a <code>f.write(u""asdf"")</code> (which ZipFile does not do, to my knowledge). Anyway;</p>

<pre><code>import zipfile
import StringIO

s = StringIO.StringIO()
z = zipfile.ZipFile(s, ""w"")
z.write(""test.txt"")
z.close()
f = file(""x.zip"", ""w"")
f.write(s.getvalue())
s.close()
f.close()
</code></pre>

<p>works just as expected, and there's no difference between the file in the resulting archive and the original file.</p>

<p>If you know of a particular case where this approach does not work, I'd be most interested to hear about it :)</p>
"
25193,1421,2008-08-24T17:07:57Z,19339,17,"<p>You could also do</p>

<pre><code>result = ([ a for a,b in original ], [ b for a,b in original ])
</code></pre>

<p>It <em>should</em> scale better. Especially if Python makes good on not expanding the list comprehensions unless needed.</p>

<p>(Incidentally, it makes a 2-tuple (pair) of lists, rather than a list of tuples, like <code>zip</code> does.)</p>

<p>If generators instead of actual lists are ok, this would do that:</p>

<pre><code>result = (( a for a,b in original ), ( b for a,b in original ))
</code></pre>

<p>The generators don't munch through the list until you ask for each element, but on the other hand, they do keep references to the original list.</p>
"
25213,1421,2008-08-24T17:28:26Z,594,4,"<p>There's also the way <code>psyco-pg</code> seems to do it... From what I gather, it seems to create dictionary-like row-proxies to map key lookup into the memory block returned by the query. In that case, fetching the whole answer and working with a similar proxy-factory over the rows seems like useful idea. Come to think of it though, it feels more like Lua than Python.</p>

<p>Also, this should be applicable to all <a href=""http://www.python.org/dev/peps/pep-0249/"" rel=""nofollow"">PEP-249 DBAPI2.0</a> interfaces, not just Oracle, or did you mean just <em>fastest</em> using <em>Oracle</em>?</p>
"
25761,1662,2008-08-25T08:08:46Z,25661,1,"<p>You may be interested in <a href=""http://www.daa.com.au/pipermail/pygtk/2006-September/012888.html"" rel=""nofollow"">this message thread</a>.  Looks like they recommend against it.</p>
"
25815,2168,2008-08-25T09:22:22Z,25807,36,"<p><code>C.__bases__</code> is an array of the super classes, so you could implement your hypothetical function like so:</p>

<pre><code>def magicGetSuperClasses(cls):
  return cls.__bases__
</code></pre>

<p>But I imagine it would be easier to just reference <code>cls.__bases__</code> directly in most cases.</p>
"
26611,199,2008-08-25T18:38:10Z,26595,223,"<p><code>is</code> always returns <code>True</code> if it compares the same object instance</p>

<p>Whereas <code>==</code> is ultimately determined by the <code>__eq__()</code> method</p>

<p>i.e.</p>

<pre><code>
>>> class foo(object):
       def __eq__(self, other):
           return True

>>> f = foo()
>>> f == None
True
>>> f is None
False
</code></pre>
"
26626,2772,2008-08-25T18:48:20Z,26595,46,"<p>You may want to read this <a href=""http://mail.python.org/pipermail/python-list/2001-November/094920.html"">object identity and equivalence</a>.</p>

<p>The statement 'is' is used for object identity, it checks if objects refer to the same instance (same address in memory).</p>

<p>And the '==' statement refers to equality (same value).</p>
"
26654,360,2008-08-25T19:04:59Z,26595,3,"<p>For None there shouldn't be a difference between equality (==) and identity (is). The NoneType probably returns identity for equality. Since None is the only instance you can make of NoneType (I think this is true), the two operations are the same. In the case of other types this is not always the case. For example:</p>

<pre><code>list1 = [1, 2, 3]
list2 = [1, 2, 3]
if list1==list2: print ""Equal""
if list1 is list2: print ""Same""
</code></pre>

<p>This would print ""Equal"" since lists have a comparison operation that is not the default returning of identity.</p>
"
26707,1785,2008-08-25T19:45:40Z,26706,1,"<p>One solution, which is a hack of limited usefulness, is when a drag is initiated, store the dragged data in a global or static reference somewhere. This way, in the OnEnter and OnDragOver handlers, it is possible to get a reference to the data being dragged. This is of course only useful for drags within the same application (the same instance of the application, actually).</p>
"
26910,2900,2008-08-25T21:11:03Z,20063,85,"<p><strong>This answer suggests <code>optparse</code> which is appropriate for older Python versions. For Python 2.7 and above, <code>argparse</code> replaces <code>optparse</code>. See <a href=""http://stackoverflow.com/questions/3217673/why-use-argparse-rather-than-optparse"">this answer</a> for more information.</strong></p>

<p>As other people pointed out, you are better off going with optparse over getopt.  getopt is pretty much a one-to-one mapping of the standard getopt(3) C library functions, and not very easy to use.</p>

<p>optparse, while being a bit more verbose, is much better structured and simpler to extend later on.</p>

<p>Here's a typical line to add an option to your parser:</p>

<pre><code>parser.add_option('-q', '--query',
            action=""store"", dest=""query"",
            help=""query string"", default=""spam"")
</code></pre>

<p>It pretty much speaks for itself; at processing time, it will accept -q or --query as options, store the argument in an attribute called query and has a default value if you don't specify it.  It is also self-documenting in that you declare the help argument (which will be used when run with -h/--help) right there with the option.</p>

<p>Usually you parse your arguments with:</p>

<pre><code>options, args = parser.parse_args()
</code></pre>

<p>This will, by default, parse the standard arguments passed to the script (sys.argv[1:])</p>

<p>options.query will then be set to the value you passed to the script.</p>

<p>You create a parser simply by doing</p>

<pre><code>parser = optparse.OptionParser()
</code></pre>

<p>These are all the basics you need.  Here's a complete Python script that shows this:</p>

<pre><code>import optparse

parser = optparse.OptionParser()

parser.add_option('-q', '--query',
    action=""store"", dest=""query"",
    help=""query string"", default=""spam"")

options, args = parser.parse_args()

print 'Query string:', options.query
</code></pre>

<p>5 lines of python that show you the basics.</p>

<p>Save it in sample.py, and run it once with</p>

<pre><code>python sample.py
</code></pre>

<p>and once with</p>

<pre><code>python sample.py --query myquery
</code></pre>

<p>Beyond that, you will find that optparse is very easy to extend.
In one of my projects, I created a Command class which allows you to nest subcommands in a command tree easily.  It uses optparse heavily to chain commands together.  It's not something I can easily explain in a few lines, but feel free to <a href=""https://thomas.apestaart.org/moap/trac/browser/trunk/moap/extern/command/command.py"">browse around in my repository</a> for the main class, as well as <a href=""https://thomas.apestaart.org/moap/trac/browser/trunk/moap/command/doap.py"">a class that uses it and the option parser</a></p>
"
26957,2900,2008-08-25T21:32:20Z,20794,18,"<p>A common Python saying is that it's easier to ask forgiveness than permission.  While I'm not a fan of this statement in real life, it does apply in a lot of cases.  Usually you want to avoid code that chains two system calls on the same file, because you never know what will happen to the file in between your two calls in your code.</p>

<p><strong>A typical mistake is to write something like</strong>:</p>

<pre><code>if os.path.exists(path):
    os.unlink(path)
</code></pre>

<p>The second call (os.unlink) may fail if something else deleted it after your if test, raise an Exception, and stop the rest of your function from executing.  (You might think this doesn't happen in real life, but we just fished another bug like that out of our codebase last week - and it was the kind of bug that left a few programmers scratching their head and claiming 'Heisenbug' for the last few months)</p>

<p>So, in your particular case, I would probably do:</p>

<pre><code>try:
    os.stat(path)
except OSError, e:
    if e.errno == errno.ENOENT:
        print 'path %s does not exist or is a broken symlink' % path
    else:
        raise e
</code></pre>

<p>The annoyance here is that stat returns the same error code for a symlink that just isn't there and a broken symlink.</p>

<p>So, I guess you have no choice than to break the atomicity, and do something like</p>

<pre><code>if not os.path.exists(os.readlink(path)):
    print 'path %s is a broken symlink' % path
</code></pre>
"
26963,1821,2008-08-25T21:35:14Z,26595,4,"<p>@<a href=""http://stackoverflow.com/questions/26595/is-there-any-difference-between-foo-is-none-and-foo-none#26698"" rel=""nofollow"">Jason</a>:</p>

<blockquote>
  <p>I recommend using something more along the lines of</p>

<pre><code>if foo:
    #foo isn't None
else:
    #foo is None
</code></pre>
</blockquote>

<p>I don't like using ""if foo:"" unless foo truly represents a boolean value (i.e. 0 or 1). If foo is a string or an object or something else, ""if foo:"" may work, but it looks like a lazy shortcut to me. If you're checking to see if x is None, say ""if x is None:"".</p>
"
27600,2018,2008-08-26T09:06:33Z,27567,2,"<p>Are you looking for Python specific translation, or just the general ""how do you compile some code to bytecode""? If the latter is your case, check <a href=""http://llvm.org/docs/tutorial/"" rel=""nofollow"">the LLVM tutorial</a>. I especially find chapter two, which teaches you to write a compiler for your own language, interesting.</p>
"
27780,2990,2008-08-26T11:30:50Z,742,0,"<p>If you want to share common functionality between pages I suggest you look at custom tags. They're quite <a href=""https://docs.djangoproject.com/en/1.1/howto/custom-template-tags/"" rel=""nofollow"">easy to create</a>, and are very powerful.</p>

<p>Also, <a href=""https://code.djangoproject.com/wiki/ExtendingTemplates"" rel=""nofollow"">templates can extend from other templates</a>. This allows you to have a base template to set up the layout of the page and to share this between other templates which fill in the blanks. You can nest templates to any depth; allowing you to specify the layout on separate groups of related pages in one place.</p>
"
27792,2384,2008-08-26T11:38:36Z,742,2,"<p>You can always create a class, override the <em><code>__call__</code></em> function and then point the URL file to an instance of the class. You can take a look at the <a href=""http://code.djangoproject.com/browser/django/trunk/django/contrib/formtools/wizard.py"" rel=""nofollow"">FormWizard</a> class to see how this is done.</p>
"
27974,620,2008-08-26T13:06:39Z,8692,106,"<p><a href=""http://xmlsoft.org/python.html"">libxml2</a> has a number of advantages:</p>

<ol>
<li>Compliance to the <a href=""http://www.w3.org/TR/xpath"">spec</a></li>
<li>Active development and a community participation </li>
<li>Speed. This is really a python wrapper around a C implementation. </li>
<li>Ubiquity. The libxml2 library is pervasive and thus well tested.</li>
</ol>

<p>Downsides include:</p>

<ol>
<li>Compliance to the <a href=""http://www.w3.org/TR/xpath"">spec</a>. It's strict. Things like default namespace handling are easier in other libraries.</li>
<li>Use of native code. This can be a pain depending on your how your application is distributed / deployed. RPMs are available that ease some of this pain.</li>
<li>Manual resource handling. Note in the sample below the calls to freeDoc() and xpathFreeContext(). This is not very Pythonic.</li>
</ol>

<p>If you are doing simple path selection, stick with <a href=""http://effbot.org/zone/element-xpath.htm"">ElementTree</a> ( which is included in Python 2.5 ). If you need full spec compliance or raw speed and can cope with the distribution of native code, go with libxml2.</p>

<p><strong>Sample of libxml2 XPath Use</strong></p>

<hr>

<pre><code>import libxml2

doc = libxml2.parseFile(""tst.xml"")
ctxt = doc.xpathNewContext()
res = ctxt.xpathEval(""//*"")
if len(res) != 2:
    print ""xpath query: wrong node set size""
    sys.exit(1)
if res[0].name != ""doc"" or res[1].name != ""foo"":
    print ""xpath query: wrong node set value""
    sys.exit(1)
doc.freeDoc()
ctxt.xpathFreeContext()
</code></pre>

<p><strong>Sample of ElementTree XPath Use</strong></p>

<hr>

<pre><code>from elementtree.ElementTree import ElementTree
mydoc = ElementTree(file='tst.xml')
for e in mydoc.findall('/foo/bar'):
    print e.get('title').text</code></pre>

<hr>
"
28067,2979,2008-08-26T13:44:11Z,26595,21,"<p>A word of caution: </p>

<pre><code>if foo:
  # do something
</code></pre>

<p>Is <strong>not</strong> exactly the same as:</p>

<pre><code>if x is not None:
  # do something
</code></pre>

<p>The former is a boolean value test and can evaluate to false in different contexts. There are a number of things that represent false in a boolean value tests for example empty containers, boolean values. None also evaluates to false in this situation but other things do too.</p>
"
28199,2314,2008-08-26T14:30:17Z,28165,1,"<p>Some of the user-contributed notes and functions in <a href=""http://us3.php.net/sprintf"" rel=""nofollow"">PHP's documentation for sprintf</a> come quite close.</p>

<p>Note: search the page for ""sprintf2"".</p>
"
28247,1585,2008-08-26T14:49:54Z,28165,4,"<pre><code>function subst($str, $dict){
    return preg_replace(array_map(create_function('$a', 'return ""/%\\($a\\)s/"";'), array_keys($dict)), array_values($dict), $str);
 }
</code></pre>

<p>You call it like so:</p>

<pre><code>echo subst('The %(site)s site %(adj)s because it %(adj)s', array('site'=&gt;'Stackoverflow', 'adj'=&gt;'rocks'));
</code></pre>
"
28349,2506,2008-08-26T15:21:51Z,28165,3,"<p>@<a href=""http://stackoverflow.com/questions/28165/does-php-have-an-equivalent-to-this-type-of-python-string-substitution#28199"" rel=""nofollow"">Marius</a></p>

<p>I don't know if it's faster, but you can do it without regexes:</p>

<pre><code>function subst($str, $dict)
{
  foreach ($dict AS $key, $value)
  {
    $str = str_replace($key, $value, $str);
  }

  return $str;
}
</code></pre>
"
28426,3051,2008-08-26T15:41:50Z,1854,30,"<p>You can also use sys.platform if you already have imported sys and you don't want to import another module</p>

<pre><code>&gt;&gt;&gt; import sys
&gt;&gt;&gt; sys.platform
'linux2'
</code></pre>
"
28436,72,2008-08-26T15:44:31Z,28369,2,"<p>Writing your own parser could be fun!  It might be a better option because people are expecting to use the familiar spreadsheet syntax (Excel, etc) and not Python when they're entering formulas.  I'm not familiar with safe_eval but I would imagine that anything like this certainly has the potential for exploitation.</p>
"
28467,3051,2008-08-26T15:58:08Z,16067,10,"<p>I haven't used SWIG or SIP, but I find writing Python wrappers with <a href=""http://www.boost.org/doc/libs/1_35_0/libs/python/doc/index.html"" rel=""nofollow"">boost.python</a> to be very powerful and relatively easy to use.</p>

<p>I'm not clear on what your requirements are for passing types between C/C++ and python, but you can do that easily by either exposing a C++ type to python, or by using a generic <a href=""http://www.boost.org/doc/libs/1_35_0/libs/python/doc/v2/object.html"" rel=""nofollow"">boost::python::object</a> argument to your C++ API. You can also register converters to automatically convert python types to C++ types and vice versa.</p>

<p>If you plan use boost.python, the <a href=""http://www.boost.org/doc/libs/1_35_0/libs/python/doc/tutorial/doc/html/index.html"" rel=""nofollow"">tutorial</a> is a good place to start.</p>

<p>I have implemented something somewhat similar to what you need. I have a C++ function that 
accepts a python function and an image as arguments, and applies the python function to each pixel in the image.</p>

<pre><code>Image* unary(boost::python::object op, Image&amp; im)
{
    Image* out = new Image(im.width(), im.height(), im.channels());
    for(unsigned int i=0; i&lt;im.size(); i++)
    {
        (*out)[i] == extract&lt;float&gt;(op(im[i]));
    }
    return out;
}
</code></pre>

<p>In this case, Image is a C++ object exposed to python (an image with float pixels), and op is a python defined function  (or really any python object with a &#95;&#95;call&#95;&#95; attribute). You can then use this function as follows (assuming unary is located in the called image that also contains Image and a load function):</p>

<pre><code>import image
im = image.load('somefile.tiff')
double_im = image.unary(lambda x: 2.0*x, im)
</code></pre>

<p>As for using arrays with boost, I personally haven't done this, but I know the functionality to expose arrays to python using boost is available - <a href=""http://www.boost.org/doc/libs/1_35_0/libs/python/doc/v2/faq.html#question2"" rel=""nofollow"">this</a> might be helpful.</p>
"
28563,1199,2008-08-26T16:42:27Z,28559,2,"<p>Maybe it's not terribly idiomatic, but I'd be inclined to go with</p>

<pre><code>x = next()
while x != END:
    do_something_with_x
    x = next()
</code></pre>

<p>... but that's because I find that sort of thing easy to read</p>
"
28566,2132,2008-08-26T16:42:49Z,28559,1,"<p>What are you trying to do here?
If you're iterating over a list, you can use <code>for e in L</code> where e is the element and L is the list. If you're filtering a list, you can use list comprehensions (i.e. <code>[ e for e in L if e % 2 == 0 ]</code> to get all the even numbers in a list).</p>
"
28568,3102,2008-08-26T16:44:42Z,28559,5,"<p>It depends a bit what you want to do. To match your example as far as possible, I would make next a generator and iterate over it:</p>

<pre><code>def next():
   for num in range(10):
      yield num

for x in next():
   print x
</code></pre>
"
28580,3002,2008-08-26T16:49:52Z,28559,1,"<p>If you need to do this more than once, the pythonic way would use an iterator</p>

<pre><code>for x in iternext():
    do_something_with_x
</code></pre>

<p>where <code>iternext</code> would be defined using something like
(<a href=""http://www.python.org/dev/peps/pep-0020/"" rel=""nofollow"">explicit is better than implicit!</a>):</p>

<pre><code>def iternext():
    x = next()
    while x != END:
        yield x
        x = next()
</code></pre>
"
28692,1627,2008-08-26T17:36:19Z,28668,5,"<p>It has been a <strong>really</strong> long time since I did anything with FileMaker Pro, but I know that it does have capabilities for an ODBC (and JDBC) connection to be made to it (however, I don't know how, or if, that translates to the linux/perl/python world though).  </p>

<p>This article shows how to share/expose your FileMaker data via ODBC &amp; JDBC:<br />
<a href=""http://www.filemaker.com/help/15-Using%20ODBC2.html"">Sharing FileMaker Pro data via ODBC or JDBC</a>   </p>

<p>From there, if you're able to create an ODBC/JDBC connection you could query out data as needed.</p>
"
28711,1233,2008-08-26T17:48:49Z,8948,0,"<p>If you can use IronPython, there is TagLibSharp.  <a href=""http://stackoverflow.com/questions/28664/what-is-the-besta-very-good-meta-data-reader-library#28687"">It can be used from any .NET language</a>.</p>
"
28714,2132,2008-08-26T17:50:30Z,28559,4,"<p>Short answer: there's no way to do inline variable assignment in a while loop in Python. Meaning that I <strong>cannot</strong> say:</p>

<pre><code>while x=next():
    // do something here!
</code></pre>

<p>Since that's not possible, there are a number of ""idiomatically correct"" ways of doing this:</p>

<pre><code>while 1:
    x = next()
    if x != END:
        // Blah
    else:
        break
</code></pre>

<p>Obviously, this is kind of ugly. You can also use one of the ""iterator"" approaches listed above, but, again, that may not be ideal. Finally, you can use the ""pita pocket"" approach that I actually just found while googling:</p>

<pre><code>class Pita( object ):
    __slots__ = ('pocket',)
    marker = object()
    def __init__(self, v=marker):
        if v is not self.marker:
            self.pocket = v
    def __call__(self, v=marker):
        if v is not self.marker:
            self.pocket = v
        return self.pocket
</code></pre>

<p>Now you can do:</p>

<pre><code>p = Pita()
while p( next() ) != END:
    // do stuff with p.pocket!
</code></pre>

<p>Thanks for this question; learning about the <code>__call__</code> idiom was really cool! :)</p>

<p>EDIT: I'd like to give credit where credit is due. The 'pita pocket' idiom was found <a href=""http://mail.python.org/pipermail/python-list/2003-July/216789.html"" rel=""nofollow"">here</a></p>
"
28780,1694,2008-08-26T18:18:42Z,28559,1,"<p>Can you provide more information about what you're trying to accomplish?  It's not clear to me why you can't just say</p>

<pre><code>for x in everything():
    ...
</code></pre>

<p>and have the everything function return everything, instead of writing a next function to just return one thing at a time.  Generators can even do this quite efficiently.</p>
"
28935,3119,2008-08-26T19:36:24Z,25661,7,"<p>I've never attempted it myself, but hearing plenty about other people who've tried, it's not a road you want to go down.</p>

<p>There is the alternative of putting the gui in pygame itself. There are plenty of gui toolkits built specifically for pygame that you could use. Most of them are rather unfinished, but there are 2 big, actively maintained ones: <a href=""http://www.pygame.org/project/108/"" rel=""nofollow"">PGU</a> and <a href=""http://www.pygame.org/project/125/"" rel=""nofollow"">OcempGUI</a>. The full list on the pygame site is <a href=""http://www.pygame.org/tags/gui"" rel=""nofollow"">here</a>.</p>
"
29169,2900,2008-08-26T23:16:16Z,24931,3,"<p>Actually, you definitely can, and it's beautiful, ugly, and crazy at the same time!</p>

<p>You can replace sys.stdout and sys.stderr with StringIO objects that collect the output.</p>

<p>Here's an example, save it as evil.py:</p>

<pre><code>import sys
import StringIO

s = StringIO.StringIO()

sys.stdout = s

print ""hey, this isn't going to stdout at all!""
print ""where is it ?""

sys.stderr.write('It actually went to a StringIO object, I will show you now:\n')
sys.stderr.write(s.getvalue())
</code></pre>

<p>When you run this program, you will see that:</p>

<ul>
<li>nothing went to stdout (where print usually prints to)</li>
<li>the first string that gets written to stderr is the one starting with 'It'</li>
<li>the next two lines are the ones that were collected in the StringIO object</li>
</ul>

<p>Replacing sys.stdout/err like this is an application of what's called monkeypatching.  Opinions may vary whether or not this is 'supported', and it is definitely an ugly hack, but it has saved my bacon when trying to wrap around external stuff once or twice.</p>

<p>Tested on Linux, not on Windows, but it should work just as well.  Let me know if it works on Windows!</p>
"
29255,3002,2008-08-27T00:35:29Z,29243,8,"<p>Setting an attribute on an object won't give a compile-time or a run-time error, it will just do nothing useful if the object doesn't access it (i.e. ""<code>node.noSuchAttr = 'bar'</code>"" would also not give an error).</p>

<p>Unless you need a specific feature of <code>minidom</code>, I would look at <code>ElementTree</code>:</p>

<pre><code>import sys
from xml.etree.cElementTree import Element, ElementTree

def make_xml():
    node = Element('foo')
    node.text = 'bar'
    doc = ElementTree(node)
    return doc

if __name__ == '__main__':
    make_xml().write(sys.stdout)
</code></pre>
"
29262,1638,2008-08-27T00:42:32Z,29243,8,"<p>@Daniel</p>

<p>Thanks for the reply, I also figured out how to do it with the minidom (I'm not sure of the difference between the ElementTree vs the minidom)</p>

<pre>
<code>
from xml.dom.minidom import *
def make_xml():
    doc = Document();
    node = doc.createElement('foo')
    node.appendChild(doc.createTextNode('bar'))
    doc.appendChild(node)
    return doc
if __name__ == '__main__':
    make_xml().writexml(sys.stdout)
</code>
</pre>

<p>I swear I tried this before posting my question...</p>
"
29264,2908,2008-08-27T00:45:14Z,29243,3,"<p>I found a <a href=""http://www.boddie.org.uk/python/XML_intro.html"" rel=""nofollow"">pretty verbose tutorial on the minidom method</a></p>

<p>Here's a <a href=""http://drfox.com/cgi-bin/topic_display.py?name=climbing_etree"" rel=""nofollow"">tutorial for the etree method</a>. It's much nicer to read, and seems quite simple. It also goes over parsing of xml (briefly)</p>
"
29347,1815,2008-08-27T01:50:48Z,28796,-18,"<p>Most editors support the ""whole word"" search option. It's usually a checkbox in the search dialog, and what it does is only match the search term if it has leading and trailing spaces, dots, and most other delimiters.
It will probably work in your case.</p>
"
29390,3119,2008-08-27T02:37:05Z,28369,1,"<p>Although that code looks quite secure, I've always held the opinion that any sufficiently motivated person could break it given adequate time. I do think it will take quite a bit of determination to get through that, but I'm relatively sure it could be done.</p>
"
29575,2928,2008-08-27T05:12:47Z,29562,13,"<p>See the <a href=""http://docs.python.org/dist/simple-example.html"" rel=""nofollow"">distutils simple example</a>. That's basically what it is like, except real install scripts usually contain a bit more information. I have not seen any that are fundamentally more complicated, though. In essence, you just give it a list of what needs to be installed. Sometimes you need to give it some mapping dicts since the source and installed trees might not be the same.</p>

<p>Here is a real-life (anonymized) example:</p>

<pre><code>#!/usr/bin/python 

from distutils.core import setup 

setup (name = 'Initech Package 3', 
          description = ""Services and libraries ABC, DEF"", 
          author = ""That Guy, Initech Ltd"", 
          author_email = ""that.guy@initech.com"", 
          version = '1.0.5', 
          package_dir = {'Package3' : 'site-packages/Package3'}, 
          packages = ['Package3', 'Package3.Queries'], 
          data_files = [ 
                       ('/etc/Package3', ['etc/Package3/ExternalResources.conf']) 
          ])
</code></pre>
"
29770,2900,2008-08-27T09:15:42Z,28796,43,"<p>In the meantime, I've tried it two tools that have some sort of integration with vim.</p>

<p>The first is <a href=""http://rope.sourceforge.net/"">Rope</a>, a python refactoring library that comes with a Vim (and emacs) plug-in.  I tried it for a few renames, and that definitely worked as expected.  It allowed me to preview the refactoring as a diff, which is nice.  It is a bit text-driven, but that's alright for me, just takes longer to learn.</p>

<p>The second is <a href=""http://bicyclerepair.sourceforge.net/"">Bicycle Repair Man</a> which I guess wins points on name.  Also plugs into vim and emacs.  Haven't played much with it yet, but I remember trying it a long time ago.</p>

<p>Haven't played with both enough yet, or tried more types of refactoring, but I will do some more hacking with them.</p>
"
29839,2990,2008-08-27T10:04:25Z,29562,2,"<p>Most Python programs will use distutils. <a href=""http://www.djangoproject.com"" rel=""nofollow"">Django</a> is a one - see <a href=""http://code.djangoproject.com/svn/django/trunk/setup.py"" rel=""nofollow"">http://code.djangoproject.com/svn/django/trunk/setup.py</a></p>

<p>You should also read <a href=""http://docs.python.org/dist/dist.html"" rel=""nofollow"">the documentation</a>, as it's very comprehensive and has some good examples.</p>
"
30591,2438,2008-08-27T16:30:06Z,29856,1,"<p>Not sure I entirely understand your question, but can't you simply build and install a 64 bit version and then create symbolic links so that /Library/Python/2.5 and below point to your freshly built version of python?</p>
"
30973,720,2008-08-27T19:27:06Z,20063,2,"<p>I think the best way for larger projects is optparse, but if you are looking for an easy way, maybe <a href=""http://werkzeug.pocoo.org/documentation/script"" rel=""nofollow"">http://werkzeug.pocoo.org/documentation/script</a> is something for you.</p>

<pre><code>from werkzeug import script

# actions go here
def action_foo(name=""""):
    """"""action foo does foo""""""
    pass

def action_bar(id=0, title=""default title""):
    """"""action bar does bar""""""
    pass

if __name__ == '__main__':
    script.run()
</code></pre>

<p>So basically every function action_* is exposed to the command line and a nice
help message is generated for free. </p>

<pre><code>python foo.py 
usage: foo.py &lt;action&gt; [&lt;options&gt;]
       foo.py --help

actions:
  bar:
    action bar does bar

    --id                          integer   0
    --title                       string    default title

  foo:
    action foo does foo

    --name                        string
</code></pre>
"
31126,3119,2008-08-27T20:13:49Z,683,6,"<p>you could always write one yourself:</p>

<pre><code>def iterattr(iterator, attributename):
    for obj in iterator:
        yield getattr(obj, attributename)
</code></pre>

<p>will work with anything that iterates, be it a tuple, list, or whatever.</p>

<p>I love python, it makes stuff like this very simple and no more of a hassle than neccessary, and in use stuff like this is hugely elegant.</p>
"
31188,2147,2008-08-27T20:30:22Z,683,2,"<p>If you plan on searching anything of remotely decent size, your best bet is going to be to use a dictionary or a set.  Otherwise, you basically have to iterate through every element of the iterator until you get to the one you want.</p>

<p>If this isn't necessarily performance sensitive code, then the list comprehension way should work.  But note that it is fairly inefficient because it goes over every element of the iterator and then goes BACK over it again until it finds what it wants.</p>

<p>Remember, python has one of the most efficient hashing algorithms around.  Use it to your advantage.</p>
"
31225,2147,2008-08-27T20:42:16Z,29562,1,"<p>distutils really isn't all that difficult once you get the hang of it.  It's really just a matter of putting in some meta-information (program name, author, version, etc) and then selecting what files you want to include.  For example, here's a sample distutils setup.py module from a decently complex python library:</p>

<p><a href=""http://code.google.com/p/kamaelia/source/browse/trunk/Code/Python/Kamaelia/setup.py"" rel=""nofollow"">Kamaelia setup.py</a></p>

<p>Note that this doesn't deal with any data files or or whatnot, so YMMV.</p>

<p>On another note, I agree that the distutils documentation is probably some of python's worst documentation.  It is extremely inclusive in some areas, but neglects some really important information in others.</p>
"
31331,3431280,2008-08-27T23:38:27Z,29856,0,"<p>Essentially, yes. I was not sure you could do it like that (current version does not do it like that). When using the python install script, however, there is no option (that I can find) to specify where to put directories and files (eg --prefix). I was hoping to match the current layout of python related files so as to avoid 'polluting' my machine with redundant files.</p>
"
31358,1638,2008-08-27T23:52:59Z,31340,18,"<p>Below is a basic threading sample. It will spawn 20 threads; each thread will output its thread number. Run it and observe the order in which they print.</p>

<pre><code>import threading
class Foo (threading.Thread):
    def __init__(self,x):
        self.__x = x
        threading.Thread.__init__(self)
    def run (self):
          print str(self.__x)

for x in xrange(20):
    Foo(x).start()
</code></pre>

<p>As you have hinted at Python threads are implemented through time-slicing. This is how they get the ""parallel"" effect. </p>

<p>In my example my Foo class extends thread, I then implement the <code>run</code> method, which is where the code that you would like to run in a thread goes. To start the thread you call <code>start()</code> on the thread object, which will automatically invoke the <code>run</code> method...</p>

<p>Of course, this is just the very basics. You will eventually want to learn about semaphores, mutexes, and locks for thread synchronization and message passing.</p>
"
31372,2147,2008-08-28T00:00:18Z,31340,32,"<p>Python's a fairly easy language to thread in, but there are caveats.  The biggest thing you need to know about is the Global Interpreter Lock.  This allows only one thread to access the interpreter.  This means two things:  1)  you rarely ever find yourself using a lock statement in python and 2) if you want to take advantage of multi-processor systems, you have to use separate processes.  EDIT:  I should also point out that you can put some of the code in C/C++ if you want to get around the GIL as well.</p>

<p>Thus, you need to re-consider why you want to use threads.  If you want to parallelize your app to take advantage of dual-core architecture, you need to consider breaking your app up into multiple processes.</p>

<p>If you want to improve responsiveness, you should CONSIDER using threads.  There are other alternatives though, namely <a href=""http://en.wikipedia.org/wiki/Microthread"" rel=""nofollow"">microthreading</a>.  There are also some frameworks that you should look into:</p>

<ul>
<li><a href=""http://www.stackless.com/"" rel=""nofollow"">stackless python</a></li>
<li><a href=""http://greenlet.readthedocs.org/en/latest/"" rel=""nofollow"">greenlets</a></li>
<li><a href=""http://www.gevent.org/"" rel=""nofollow"">gevent</a></li>
<li><a href=""https://github.com/saucelabs/monocle"" rel=""nofollow"">monocle</a></li>
</ul>
"
31384,2147,2008-08-28T00:09:56Z,29856,1,"<p>Personally, I wouldn't worry about it until you see a problem.  Messing with the default python install on a *Nix system can cause more trouble than it's worth.  I can say from personal experience that you never truly understand what python has done for the nix world until you have a problem with it.</p>

<p>You can also add a second python installation, but that also causes more problems than it's worth IMO.</p>

<p>So I suppose the best question to start out with would be why exactly do you want to use the 64 bit version of python?</p>
"
31398,720,2008-08-28T00:19:50Z,31340,41,"<p>Yes, because of the Global Interpreter Lock (GIL) there can only run one thread at a time. Here are some links with some insights about this:</p>

<ul>
<li><a href=""http://www.artima.com/weblogs/viewpost.jsp?thread=214235"">http://www.artima.com/weblogs/viewpost.jsp?thread=214235</a></li>
<li><a href=""http://smoothspan.wordpress.com/2007/09/14/guido-is-right-to-leave-the-gil-in-python-not-for-multicore-but-for-utility-computing/"">http://smoothspan.wordpress.com/2007/09/14/guido-is-right-to-leave-the-gil-in-python-not-for-multicore-but-for-utility-computing/</a></li>
</ul>

<p>From the last link an interesting quote:</p>

<blockquote>
  <p>Let me explain what all that means. 
  Threads run inside the same virtual
  machine, and hence run on the same
  physical machine.  Processes can run
  on the same physical machine or in
  another physical machine.  If you
  architect your application around
  threads, you’ve done nothing to access
  multiple machines.  So, you can scale
  to as many cores are on the single
  machine (which will be quite a few
  over time), but to really reach web
  scales, you’ll need to solve the
  multiple machine problem anyway.</p>
</blockquote>

<p>If you want to use multi core, <a href=""http://www.python.org/dev/peps/pep-0371/"">pyprocessing</a> defines an process based API to do real parallelization. The <a href=""http://en.wikipedia.org/wiki/Python_Enhancement_Proposal#Development"">PEP</a> also includes some interesting benchmarks.</p>
"
31425,3431280,2008-08-28T00:33:52Z,29856,0,"<p>The short answer is because I can. The long answer, expanding on what the OP said, is to be more compatible with apache and mysql/postgresql. They are all 64bit (apache is a fat binary with ppc, ppc64 x86 and x86 and x86_64, the others just straight 64bit). <strong>Mysqldb and mod_python wont compile unless they are all running the  same architecture.</strong> Yes I could run them all in 32bit (and have in the past) but this is much more work then compiling one program.</p>

<p>EDIT: You pretty much convinced though to just let the installer do its thing and update the PATH to reflect this.</p>
"
31552,1455,2008-08-28T02:34:18Z,31340,9,"<p>Use threads in python if the individual workers are doing I/O bound operations. If you are trying to scale across multiple cores on a machine either find a good <a href=""http://www.python.org/dev/peps/pep-0371/"">IPC</a> framework for python or pick a different language.</p>
"
31765,2774,2008-08-28T07:16:15Z,29856,1,"<p>Hyposaurus,</p>

<p>It is possible to have multiple versions of Python installed simultaneously. Installing two versions in parallel solves your problem and helps avoid the problems laid out by Jason Baker above. </p>

<p>The easiest way, and the way I recommend, is to use <a href=""http://www.macports.org/"" rel=""nofollow"">MacPorts</a>, which will install all its software separately. By default, for example, everything is installed in /opt/local</p>

<p>Another method is to simply download the source and compile with a specified prefix. Note that this method doesn't modify your PATH environment variable, so you'll need to do that yourself if you want to avoid typing the fully qualified path to the python executable each time</p>

<pre><code>./configure --prefix=/usr/local/python64
make
sudo make install
</code></pre>

<p>Then you can simply point your Apache install at the new version using mod_python's <a href=""http://www.modpython.org/live/current/doc-html/dir-other-pi.html"" rel=""nofollow"">PythonInterpreter</a> directive</p>
"
31859,3363,2008-08-28T08:41:45Z,2933,39,"<p>Another system (not mentioned in the accepted answer yet) is PyInstaller, which worked for a PyQt project of mine when py2exe would not. I found it easier to use.</p>

<p><a href=""http://www.pyinstaller.org/"">http://www.pyinstaller.org/</a></p>

<p>Pyinstaller is based on Gordon McMillan's Python Installer. Which is no longer available.</p>
"
31926,3374,2008-08-28T09:47:57Z,28961,3,"<p>If I have to expose APIs, I prefer doing it as JSON. Python has excellent support for JSON objects (JSON Objects are infact python dictionaries)</p>
"
31950,2774,2008-08-28T10:04:23Z,25661,1,"<p>PyGame works much better when it can manage its own window, or even better, use the whole screen. GTK has flexible enough widgets to allow creation of a drawing area. </p>

<p><a href=""http://faq.pygtk.org/index.py?req=show&amp;file=faq23.042.htp"" rel=""nofollow"">This page</a> may help, though, if you want to try it.</p>
"
31964,2774,2008-08-28T10:12:03Z,28369,0,"<p>Daniel,
<a href=""http://jinja.pocoo.org/2/documentation/intro"" rel=""nofollow"">Jinja</a> implements a sandboxe environment that may or may not be useful to you. From what I remember, it doesn't yet ""comprehend"" list comprehensions. </p>

<p><a href=""http://jinja.pocoo.org/2/documentation/sandbox"" rel=""nofollow"">Sanbox info</a> </p>
"
32028,2603,2008-08-28T11:35:19Z,28369,1,"<p>Depends on your definition of safe I suppose. A lot of the security depends on what you pass in and what you are allowed to pass in the context. For instance, if a file is passed in, I can open arbitrary files:</p>

<pre><code>&gt;&gt;&gt; names['f'] = open('foo', 'w+')
&gt;&gt;&gt; safe_eval.safe_eval(""baz = type(f)('baz', 'w+')"", names)
&gt;&gt;&gt; names['baz']
&lt;open file 'baz', mode 'w+' at 0x413da0&gt;
</code></pre>

<p>Furthermore, the environment is very restricted (you cannot pass in modules), thus, you can't simply pass in a module of utility functions like re or random.</p>

<p>On the other hand, you don't need to write your own parser, you could just write your own evaluator for the python ast:</p>

<pre><code>&gt;&gt;&gt; import compiler
&gt;&gt;&gt; ast = compiler.parse(""print 'Hello world!'"")
</code></pre>

<p>That way, hopefully, you could implement safe imports. The other idea is to use Jython or IronPython and take advantage of Java/.Net sandboxing capabilities.</p>
"
32125,1421,2008-08-28T12:47:29Z,32044,23,"<p>I think the canonical answer is: ""Don't"".</p>

<p>What you should probably do instead is unravel the thing in your <em>view</em> code, so it's just a matter of iterating over (in|de)dents in the template. I think I'd do it by appending indents and dedents to a list while recursing through the tree and then sending that ""travelogue"" list to the template. (the template would then insert <code>&lt;li&gt;</code> and <code>&lt;/li&gt;</code> from that list, creating the recursive structure with ""understanding"" it.)</p>

<p>I'm also pretty sure recursively including template files is really a <em>wrong</em> way to do it...</p>
"
32402,3207,2008-08-28T14:27:37Z,32385,2,"<p>Python's standard library provides pretty good facilities for working with Python source; note the <a href=""https://docs.python.org/2/library/tokenize.html"" rel=""nofollow"">tokenize</a> and <a href=""https://docs.python.org/2/library/parser.html"" rel=""nofollow"">parser</a> modules.</p>
"
32440,3399,2008-08-28T14:39:04Z,32404,169,"<p>Yes you can. I do it using the pythoncom libraries that come included with <a href=""http://www.activestate.com/Products/activepython/index.mhtml"" rel=""nofollow"">ActivePython</a> or can be installed with <a href=""https://sourceforge.net/projects/pywin32/"" rel=""nofollow"">pywin32</a> (Python for Windows extensions).</p>

<p>This is a basic skeleton for a simple service:</p>

<pre><code>import win32serviceutil
import win32service
import win32event
import servicemanager
import socket


class AppServerSvc (win32serviceutil.ServiceFramework):
    _svc_name_ = ""TestService""
    _svc_display_name_ = ""Test Service""

    def __init__(self,args):
        win32serviceutil.ServiceFramework.__init__(self,args)
        self.hWaitStop = win32event.CreateEvent(None,0,0,None)
        socket.setdefaulttimeout(60)

    def SvcStop(self):
        self.ReportServiceStatus(win32service.SERVICE_STOP_PENDING)
        win32event.SetEvent(self.hWaitStop)

    def SvcDoRun(self):
        servicemanager.LogMsg(servicemanager.EVENTLOG_INFORMATION_TYPE,
                              servicemanager.PYS_SERVICE_STARTED,
                              (self._svc_name_,''))
        self.main()

    def main(self):
        pass

if __name__ == '__main__':
    win32serviceutil.HandleCommandLine(AppServerSvc)
</code></pre>

<p>Your code would go in the main() method, usually with some kind of infinite loop that might be interrumped by checking a flag, that you set in the SvcStop method</p>
"
32857,NA,2008-08-28T17:23:22Z,32044,18,"<p>this might be way more than you need, but there is a django module called 'mptt' - this stores a hierarchical tree structure in an sql database, and includes templates for display in the view code.  you might be able to find something useful there.</p>

<p>here's the link : <a href=""https://github.com/django-mptt/django-mptt/"" rel=""nofollow"">django-mptt</a></p>
"
32939,3448,2008-08-28T18:02:33Z,32899,75,"<p>i use something like this:</p>

<pre><code>import unittest

l = [[""foo"", ""a"", ""a"",], [""bar"", ""a"", ""b""], [""lee"", ""b"", ""b""]]

class TestSequense(unittest.TestCase):
    pass

def test_generator(a, b):
    def test(self):
        self.assertEqual(a,b)
    return test

if __name__ == '__main__':
    for t in l:
        test_name = 'test_%s' % t[0]
        test = test_generator(t[1], t[2])
        setattr(TestSequense, test_name, test)
    unittest.main()
</code></pre>

<p>The <a href=""https://github.com/wolever/nose-parameterized""><code>nose-parameterized</code></a> package can be used to automate this process:</p>

<pre><code>from nose_parameterized import parameterized

class TestSequence(unittest.TestCase):
    @parameterized.expand([
        [""foo"", ""a"", ""a"",],
        [""bar"", ""a"", ""b""],
        [""lee"", ""b"", ""b""],
    ])
    def test_sequence(self, name, a, b):
        self.assertEqual(a,b)
</code></pre>

<p>Which will generate the tests:</p>

<pre><code>test_sequence_0_foo (__main__.TestSequence) ... ok
test_sequence_1_bar (__main__.TestSequence) ... FAIL
test_sequence_2_lee (__main__.TestSequence) ... ok

======================================================================
FAIL: test_sequence_1_bar (__main__.TestSequence)
----------------------------------------------------------------------
Traceback (most recent call last):
  File ""/usr/local/lib/python2.7/site-packages/nose_parameterized/parameterized.py"", line 233, in &lt;lambda&gt;
    standalone_func = lambda *a: func(*(a + p.args), **p.kwargs)
  File ""x.py"", line 12, in test_sequence
    self.assertEqual(a,b)
AssertionError: 'a' != 'b'
</code></pre>
"
33325,3504,2008-08-28T20:33:29Z,32385,0,"<p>I had the same issue and I simply opened the file and did some replace: then reload the file in the Python interpreter. This works fine and is easy to do. </p>

<p>Otherwise AFAIK you have to use some conf objects.</p>
"
33486,3279,2008-08-28T21:53:10Z,33475,3,"<blockquote>
<pre><code>s = p.stderr.readline()
</code></pre>
</blockquote>

<p>I suspect it's the above line.  When you invoke a command directly through ssh, you don't get your full pty (assuming Linux), and thus no stderr to read from.</p>

<p>When you log in interactively, stdin, stdout, and stderr are set up for you, and so your script works.</p>
"
33556,3119,2008-08-28T22:28:36Z,33534,0,"<p>Ints are immutable and you can't modify them in place, so you should go with option #2 (because option #1 is impossible without some trickery).</p>
"
33563,2774,2008-08-28T22:32:40Z,33534,5,"<p><strong>int</strong> is a value type, so each time you do an assignment, (e.g. both instances of <strong>+=</strong> above), it doesn't modify the object you have on the heap, but replaces the reference with one of the result of the right hand side of the assignment (i.e. an int)</p>

<p><strong>list</strong> isn't a value type, so it isn't bound by the same rules.</p>

<p>this page has more details on the differences: <a href=""http://docs.python.org/ref/objects.html"">http://docs.python.org/ref/objects.html</a></p>

<p>IMO, yes, you should define a new class that keeps an int as an instance variable</p>
"
33663,3002,2008-08-28T23:41:55Z,33534,22,"<p>Your two <code>xint</code> examples don't work for two different reasons.</p>

<p>The first doesn't work because <code>self += value</code> is equivalent to <code>self = self + value</code> which just reassigns the local variable <code>self</code> to a different object (an integer) but doesn't change the original object. You can't really get this </p>

<pre><code>&gt;&gt;&gt; x = xint(10)
&gt;&gt;&gt; x.add(2)
</code></pre>

<p>to work with a subclass of <code>int</code> since integers are <a href=""http://docs.python.org/ref/objects.html"">immutable</a>.</p>

<p>To get the second one to work you can define an <a href=""http://docs.python.org/ref/numeric-types.html""><code>__add__</code> method</a>, like so:</p>

<pre><code>class xint(int):
    def __add__(self, value):
        return xint(int.__add__(self, value))

&gt;&gt;&gt; x = xint(10)
&gt;&gt;&gt; type(x)
&lt;class '__main__.xint'&gt;
&gt;&gt;&gt; x += 3
&gt;&gt;&gt; x
13
&gt;&gt;&gt; type(x)
&lt;class '__main__.xint'&gt;
</code></pre>
"
33673,3467,2008-08-28T23:50:19Z,33475,0,"<p>what if you do the following:</p>

<h2><code>ssh &lt;remote host&gt; '&lt;your command&gt; ;&lt;your regexp using awk or something&gt;'</code></h2>

<p>For example</p>

<h2><code>ssh &lt;remote host&gt; '&lt;your program&gt;; ps aux | awk \'/root/ {print $2}\''</code></h2>

<p>This will connect to , execute  and then print each PSID for any user root or any process with root in its description.</p>

<p>I have used this method for running all kinds of commands on remote machines.  The catch is to wrap the command(s) you wish to execute in single quotation marks (') and to separate each command with a semi-colon (;).</p>
"
33873,742,2008-08-29T02:42:07Z,33475,0,"<p>@Ben Collins</p>

<p>I think you're right about stderr being an issue. I am pretty sure it's blocking on the readline() call. </p>

<p>In the end, I gave up and decided to use the pxssh module from <a href=""http://pexpect.sourceforge.net"" rel=""nofollow"">pexpect</a> to automate my interaction with an ssh session.</p>

<p>@Misha M</p>

<p>Unfortunately, the semi-colon trick doesn't work here: it blocks on executing my program. </p>
"
33932,3207,2008-08-29T03:57:14Z,21454,26,"<p>Using the <code>choices</code> parameter won't use the ENUM db type; it will just create a VARCHAR or INTEGER, depending on whether you use <code>choices</code> with a CharField or IntegerField.  Generally, this is just fine.  If it's important to you that the ENUM type is used at the database level, you have three options:</p>

<ol>
<li>Use ""./manage.py sql appname"" to see the SQL Django generates, manually modify it to use the ENUM type, and run it yourself.  If you create the table manually first, ""./manage.py syncdb"" won't mess with it.</li>
<li>If you don't want to do this manually every time you generate your DB, put some custom SQL in appname/sql/modelname.sql to perform the appropriate ALTER TABLE command.</li>
<li>Create a <a href=""http://docs.djangoproject.com/en/dev/howto/custom-model-fields/#howto-custom-model-fields"" rel=""nofollow"">custom field type</a> and define the db_type method appropriately.</li>
</ol>

<p>With any of these options, it would be your responsibility to deal with the implications for cross-database portability.  In option 2, you could use <a href=""http://www.djangoproject.com/documentation/model-api/#database-backend-specific-sql-data"" rel=""nofollow"">database-backend-specific custom SQL</a> to ensure your ALTER TABLE is only run on MySQL.  In option 3, your db_type method would need to check the database engine and set the db column type to a type that actually exists in that database.</p>

<p><strong>UPDATE</strong>: Since the migrations framework was added in Django 1.7, options 1 and 2 above are entirely obsolete. Option 3 was always the best option anyway. The new version of options 1/2 would involve a complex custom migration using <code>SeparateDatabaseAndState</code> -- but really you want option 3.</p>
"
33957,3207,2008-08-29T04:29:22Z,742,36,"<p>I've created and used my own generic view classes, defining <strong><code>__call__</code></strong> so an instance of the class is callable.  I really like it; while Django's generic views allow some customization through keyword arguments, OO generic views (if their behavior is split into a number of separate methods) can have much more fine-grained customization via subclassing, which lets me repeat myself a lot less.  (I get tired of rewriting the same create/update view logic anytime I need to tweak something Django's generic views don't quite allow).</p>

<p>I've posted some code at <a href=""http://www.djangosnippets.org/snippets/1009/"">djangosnippets.org</a>.</p>

<p>The only real downside I see is the proliferation of internal method calls, which may impact performance somewhat. I don't think this is much of a concern; it's rare that Python code execution would be your performance bottleneck in a web app.</p>

<p><strong>UPDATE</strong>: Django's own <a href=""http://docs.djangoproject.com/en/dev/topics/class-based-views/"">generic views</a> are now class-based.</p>

<p><strong>UPDATE</strong>: FWIW, I've changed my opinion on class-based views since this answer was written. After having used them extensively on a couple of projects, I feel they tend to lead to code that is satisfyingly DRY to write, but very hard to read and maintain later, because functionality is spread across so many different places, and subclasses are so dependent on every implementation detail of the superclasses and mixins. I now feel that <a href=""https://docs.djangoproject.com/en/dev/ref/template-response/"">TemplateResponse</a> and view decorators is a better answer for decomposing view code.</p>
"
34011,1416,2008-08-29T05:33:49Z,33978,3,"<p>I haven't any personal experience with either of the following, but a simple search for a ""Python [memory] profiler"" yield:</p>

<ul>
<li><p>PySizer, ""a memory profiler for Python,"" found at <a href=""http://pysizer.8325.org/"" rel=""nofollow"">http://pysizer.8325.org/</a>.  However the page seems to indicate that the project hasn't been updated for a while, and refers to...</p></li>
<li><p>Heapy, ""support[ing] debugging and optimization regarding memory related issues in Python programs,"" found at <a href=""http://guppy-pe.sourceforge.net/#Heapy"" rel=""nofollow"">http://guppy-pe.sourceforge.net/#Heapy</a>.</p></li>
</ul>

<p>Hope that helps.</p>
"
34024,1662,2008-08-29T05:50:47Z,34020,-2,"<p>I've used it in several applications and have never had nor heard of threading being anything other than 100% reliable, as long as you know its limits.  You can't spawn 1000 threads at the same time and expect your program to run properly on Windows, however you can easily write a worker pool and just feed it 1000 operations, and keep everything nice and under control.</p>
"
34031,2010,2008-08-29T05:58:34Z,34020,3,"<p>As far as I know there are no real bugs, but the performance when threading in cPython is really bad (compared to most other threading implementations, but usually good enough if all most of the threads do is block) due to the <a href=""http://docs.python.org/api/threads.html"" rel=""nofollow"">GIL</a> (Global Interpreter Lock), so really it is implementation specific rather than language specific. Jython, for example, does not suffer from this due to using the Java thread model.</p>

<p>See <a href=""http://www.artima.com/weblogs/viewpost.jsp?thread=214235"" rel=""nofollow"">this</a> post on why it is not really feasible to remove the GIL from the cPython implementation, and <a href=""http://www.pyzine.com/Issue001/Section_Articles/article_ThreadingGlobalInterpreter.html"" rel=""nofollow"">this</a> for some practical elaboration and workarounds.</p>

<p>Do a quick google for <a href=""http://www.google.com/search?q=python+gil"" rel=""nofollow"">""Python GIL""</a> for more information.</p>
"
34060,1476,2008-08-29T06:33:54Z,34020,43,"<p>Python threads are good for <strong>concurrent I/O programming</strong>. Threads are swapped out of the CPU as soon as they block waiting for input from file, network, etc. This allows other Python threads to use the CPU while others wait. This would allow you to write a multi-threaded web server or web crawler, for example.</p>

<p>However, Python threads are serialized by the <a href=""http://en.wikipedia.org/wiki/Global_Interpreter_Lock"">GIL</a> when they enter interpreter core. This means that if two threads are crunching numbers, only one can run at any given moment. It also means that you can't take advantage of multi-core or multi-processor architectures.</p>

<p>There are solutions like running multiple Python interpreters concurrently, using a C based threading library. This is not for the faint of heart and the benefits might not be worth the trouble. Let's hope for an all Python solution in a future release.</p>
"
34078,2260,2008-08-29T06:55:14Z,34020,7,"<p>The GIL (Global Interpreter Lock) might be a problem, but the API is quite OK. Try out the excellent <code>processing</code> module, which implements the Threading API for separate processes. I am using that right now (albeit on OS X, have yet to do some testing on Windows) and am really impressed. The Queue class is really saving my bacon in terms of managing complexity!</p>

<p><strong>EDIT</strong>: it seemes the processing module is being included in the standard library as of version 2.6 (<code>import multiprocessing</code>). Joy!</p>
"
34094,3571,2008-08-29T07:10:31Z,32899,48,"<p>The <a href=""https://nose.readthedocs.org/en/latest/"">nose</a> testing framework <a href=""https://nose.readthedocs.org/en/latest/writing_tests.html#test-generators"">supports this</a>. </p>

<p>Example (the code below is the entire contents of the file containing the test):</p>

<pre><code>param_list = [('a', 'a'), ('a', 'b'), ('b', 'b')]

def test_generator():
    for params in param_list:
        yield check_em, params[0], params[1]

def check_em(a, b):
    assert a == b
</code></pre>

<p>The output of the nosetests command:</p>

<pre><code>> nosetests -v
testgen.test_generator('a', 'a') ... ok
testgen.test_generator('a', 'b') ... FAIL
testgen.test_generator('b', 'b') ... ok

======================================================================
FAIL: testgen.test_generator('a', 'b')
----------------------------------------------------------------------
Traceback (most recent call last):
  File ""/usr/lib/python2.5/site-packages/nose-0.10.1-py2.5.egg/nose/case.py"", line 203, in runTest
    self.test(*self.arg)
  File ""testgen.py"", line 7, in check_em
    assert a == b
AssertionError

----------------------------------------------------------------------
Ran 3 tests in 0.006s

FAILED (failures=1)
</code></pre>
"
34116,3056,2008-08-29T07:30:35Z,34079,53,"<p>This works for me:  </p>

<pre><code>import urllib2

proxy = urllib2.ProxyHandler({'http': 'http://
username:password@proxyurl:proxyport'})
auth = urllib2.HTTPBasicAuthHandler()
opener = urllib2.build_opener(proxy, auth, urllib2.HTTPHandler)
urllib2.install_opener(opener)

conn = urllib2.urlopen('http://python.org')
return_str = conn.read()
</code></pre>
"
34266,2990,2008-08-29T09:39:47Z,34243,4,"<p>I've not heard of a direct equivalent either. You could probably achieve the same effect with macros, especially in a language like Lisp which has extremely powerful macros.</p>

<p>I wouldn't be at all surprised if other languages start to incorporate something similar because it is so powerful.</p>
"
34330,2257,2008-08-29T10:20:39Z,34328,8,"<p>Here is code to install a python-script as a service, written in python :)</p>

<p><a href=""http://code.activestate.com/recipes/551780/"">http://code.activestate.com/recipes/551780/</a></p>

<p>This post could also help you out:</p>

<p><a href=""http://essiene.blogspot.com/2005/04/python-windows-services.html"">http://essiene.blogspot.com/2005/04/python-windows-services.html</a></p>
"
34391,2384,2008-08-29T11:39:27Z,34209,2,"<p>This is simple. I started getting this problems a few revisions ago. Basically, just remove the ""core=True"" parameter in the ImageField in the models, and then follow the instructions <a href=""http://docs.djangoproject.com/en/dev/ref/contrib/admin/#inlinemodeladmin-objects"" rel=""nofollow"">here</a> to convert to what the newforms admin uses.</p>
"
34418,3458,2008-08-29T15:00:52Z,34328,3,"<p>As with most ""aware"" things in Windows, the answer is ""Registry"".</p>

<p>Take a look at this Microsoft Knowledge Base article: <a href=""http://support.microsoft.com/kb/103000"" rel=""nofollow"">http://support.microsoft.com/kb/103000</a></p>

<p>Search for ""A Win32 program that can be started by the Service Controller and that obeys the service control protocol."" This is the kind of service you're interested in.</p>

<p>The service registration (contents of KEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services
\myservice) carries information about the service, including things like its executable location, what to do when it fails (halt the OS?), what services must be started before this one, what user it runs as.</p>

<p>As to service control protocol, main() of your program is supposed to invoke a Windows API call, setting up callbacks for start, stop, pause for your service. What you do in those callbacks is all up to you.</p>
"
34421,1638,2008-08-29T15:01:50Z,34328,0,"<p>You can use srvany.exe from Windows NT Resource Kit to create a user defined service that will show up in the admin tools...</p>

<p><a href=""http://support.microsoft.com/kb/137890"" rel=""nofollow"">http://support.microsoft.com/kb/137890</a></p>

<p>I am using this method to run tracd (a python script / server) for trac. </p>

<p>Here are some very clear instructions: <a href=""http://www.tacktech.com/display.cfm?ttid=197"" rel=""nofollow"">http://www.tacktech.com/display.cfm?ttid=197</a></p>

<p>It does require some registry editing (very minimal and easy) but will allow you to make any command line / script a windows service. </p>
"
34452,3394,2008-08-29T15:09:05Z,34439,188,"<p>It appears you can use this code, replacing 'object' with the object you're interested in:-</p>

<pre><code>[method for method in dir(object) if callable(getattr(object, method))]
</code></pre>

<p>I discovered it at <a href=""http://www.diveintopython.net/power_of_introspection/index.html"">this site</a>, hopefully that should provide some further detail!</p>
"
34467,1288,2008-08-29T15:36:55Z,34439,78,"<p>You can use the built in <code>dir()</code> function to get a list of all the attributes a module has.  Try this at the command line to see how it works.</p>

<pre><code>&gt;&gt;&gt; import moduleName
&gt;&gt;&gt; dir(moduleName)
</code></pre>

<p>Also, you can use the <code>hasattr(module_name, ""attr_name"")</code> function to find out if a module has a specific attribute.</p>

<p>See the <a href=""http://www.ibm.com/developerworks/library/l-pyint.html"">Guide to Python introspection</a> for more information.</p>
"
34472,NA,2008-08-29T15:40:05Z,34439,20,"<p>To check if it has a particular method:</p>

<pre><code>hasattr(object,""method"")
</code></pre>
"
34481,1480,2008-08-29T15:47:04Z,34439,11,"<p>On top of the more direct answers, I'd be remiss if I didn't mention <a href=""http://ipython.scipy.org/"">iPython</a>.
Hit 'tab' to see the available methods, with autocompletion.</p>

<p>And once you've found a method, try:</p>

<pre><code>help(object.method) 
</code></pre>

<p>to see the pydocs, method signature, etc.</p>

<p>Ahh... <a href=""http://en.wikipedia.org/wiki/REPL"">REPL</a>.</p>
"
34482,2140,2008-08-29T15:47:05Z,13941,9,"<p>If you have PyObjC (the Python - Objective-C bridge) installed or are running on OS X 10.5's system python (which ships with PyObjC), you can do</p>

<pre><code>from AppKit import NSBeep
NSBeep()
</code></pre>

<p>to play the system alert.</p>
"
34782,3189,2008-08-29T17:17:18Z,34020,13,"<p>The standard implementation of Python (generally known as CPython as it is written in C) uses OS threads, but since there is the <a href=""http://en.wikipedia.org/wiki/Global_Interpreter_Lock"" rel=""nofollow"">Global Interpreter Lock</a>, only one thread at a time is allowed to run Python code.  But within those limitations, the threading libraries are robust and widely used.</p>

<p>If you want to be able to use multiple CPU cores, there are a few options.  One is to use multiple python interpreters concurrently, as mentioned by others.  Another option is to use a different implementation of Python that does not use a GIL.  The two main options are <a href=""http://en.wikipedia.org/wiki/Jython"" rel=""nofollow"">Jython</a> and <a href=""http://en.wikipedia.org/wiki/IronPython"" rel=""nofollow"">IronPython</a>.</p>

<p>Jython is written in Java, and is now fairly mature, though some incompatibilities remain.  For example, the web framework <a href=""http://zyasoft.com/pythoneering/2008/01/django-on-jython-minding-gap.html"" rel=""nofollow"">Django does not run perfectly yet</a>, but is getting closer all the time.  Jython is <a href=""http://mail.python.org/pipermail/python-list/2001-December/116555.html"" rel=""nofollow"">great for thread safety</a>, comes out <a href=""http://blogs.warwick.ac.uk/dwatkins/entry/benchmarking_parallel_python_1_2/"" rel=""nofollow"">better in benchmarks</a> and has a <a href=""http://cgwalters.livejournal.com/17956.html"" rel=""nofollow"">cheeky message for those wanting the GIL</a>.</p>

<p>IronPython uses the .NET framework and is written in C#.  Compatibility is reaching the stage where <a href=""http://www.infoq.com/news/2008/03/django-and-ironpython"" rel=""nofollow"">Django can run on IronPython</a> (at least as a demo) and there are <a href=""http://www.voidspace.org.uk/ironpython/threading.shtml"" rel=""nofollow"">guides to using threads in IronPython</a>.</p>
"
35089,444,2008-08-29T19:20:47Z,34209,3,"<p>The <code>core</code> attribute isn't used anymore.</p>

<p>From <a href=""http://oebfare.com/blog/2008/jul/20/newforms-admin-migration-and-screencast/"" rel=""nofollow"">Brian Rosner's Blog</a>:</p>

<blockquote>
  <p>You can safely just remove any and all <code>core</code> arguments. They are no longer used. <em>newforms-admin</em> now provides a nice delete checkbox for exisiting instances in inlines.</p>
</blockquote>
"
35110,199,2008-08-29T19:30:29Z,34916,4,"<p>I hear you, I've followed the Pylons mailing list for a while looking for something similar. There have been some attempts in the past (see <a href=""http://adminpylon.devjavu.com/"" rel=""nofollow"">AdminPylon</a> and <a href=""http://code.google.com/p/restin/"" rel=""nofollow"">Restin</a>) but none have really kept up with SQLAlchemy's rapidly developing orm api.</p>

<p>Since DBSprockets is likely to be incorporated into TurboGears it will likely be maintained. I'd bite the bullet and go with that.</p>
"
35111,3594,2008-08-29T19:30:31Z,25807,11,"<p>@John: Your snippet doesn't work -- you are returning the <em>class</em> of the base classes (which are also known as metaclasses). You really just want <code>cls.__bases__</code>:</p>

<pre><code>class A: pass
class B: pass
class C(A, B): pass

c = C() # Instance

assert C.__bases__ == (A, B) # Works
assert c.__class__.__bases__ == (A, B) # Works

def magicGetSuperClasses(clz):
  return tuple([base.__class__ for base in clz.__bases__])

assert magicGetSuperClasses(C) == (A, B) # Fails
</code></pre>

<p>Also, if you're using Python 2.4+ you can use <a href=""http://www.python.org/dev/peps/pep-0289/"">generator expressions</a> instead of creating a list (via []), then turning it into a tuple (via <code>tuple</code>). For example:</p>

<pre><code>def get_base_metaclasses(cls):
    """"""Returns the metaclass of all the base classes of cls.""""""
    return tuple(base.__class__ for base in clz.__bases__)
</code></pre>

<p>That's a somewhat confusing example, but genexps are generally easy and cool. :)</p>
"
35443,3665,2008-08-29T22:52:47Z,34079,8,"<p>The best way of going through a proxy that requires authentication is using <a href=""http://docs.python.org/lib/module-urllib2.html"">urllib2</a> to build a custom url opener, then using that to make all the requests you want to go through the proxy. Note in particular, you probably don't want to embed the proxy password in the url or the python source code (unless it's just a quick hack).</p>

<pre><code>import urllib2

def get_proxy_opener(proxyurl, proxyuser, proxypass, proxyscheme=""http""):
    password_mgr = urllib2.HTTPPasswordMgrWithDefaultRealm()
    password_mgr.add_password(None, proxyurl, proxyuser, proxypass)

    proxy_handler = urllib2.ProxyHandler({proxyscheme: proxyurl})
    proxy_auth_handler = urllib2.ProxyBasicAuthHandler(password_mgr)

    return urllib2.build_opener(proxy_handler, proxy_auth_handler)

if __name__ == ""__main__"":
    import sys
    if len(sys.argv) &gt; 4:
        url_opener = get_proxy_opener(*sys.argv[1:4])
        for url in sys.argv[4:]:
            print url_opener.open(url).headers
    else:
        print ""Usage:"", sys.argv[0], ""proxy user pass fetchurls...""
</code></pre>

<p>In a more complex program, you can seperate these components out as appropriate (for instance, only using one password manager for the lifetime of the application). The python documentation has <a href=""http://docs.python.org/lib/urllib2-examples.html"">more examples on how to do complex things with urllib2</a> that you might also find useful.</p>
"
35543,3560,2008-08-30T01:20:52Z,35538,7,"<p>XHTML is easy, use <a href=""http://lxml.de/validation.html"" rel=""nofollow"">lxml</a>.</p>

<p>HTML is harder, since there's traditionally not been as much interest in validation among the HTML crowd (run StackOverflow itself through a validator, yikes). The easiest solution would be to execute external applications such as <a href=""http://www.jclark.com/sp/"" rel=""nofollow"">nsgmls</a> or <a href=""http://openjade.sourceforge.net/"" rel=""nofollow"">OpenJade</a>, and then parse their output.</p>
"
35562,619,2008-08-30T01:48:07Z,35538,3,"<p>I think that <a href=""http://tidy.sourceforge.net/"" rel=""nofollow"">HTML tidy</a> will do what you want. There is a Python binding for it.</p>
"
35572,2603,2008-08-30T01:55:50Z,35538,5,"<p>Try tidylib. You can get some really basic bindings as part of the elementtidy module (builds elementtrees from HTML documents). <a href=""http://effbot.org/downloads/#elementtidy"">http://effbot.org/downloads/#elementtidy</a></p>

<pre><code>&gt;&gt;&gt; import _elementtidy
&gt;&gt;&gt; xhtml, log = _elementtidy.fixup(""&lt;html&gt;&lt;/html&gt;"")
&gt;&gt;&gt; print log
line 1 column 1 - Warning: missing &lt;!DOCTYPE&gt; declaration
line 1 column 7 - Warning: discarding unexpected &lt;/html&gt;
line 1 column 14 - Warning: inserting missing 'title' element
</code></pre>

<p>Parsing the log should give you pretty much everything you need.</p>
"
35582,3002,2008-08-30T02:01:57Z,35569,8,"<p>Check out <a href=""http://mail.python.org/pipermail/python-3000/2007-September/010209.html"" rel=""nofollow"">this thread</a> for a discussion on the reasons behind this behavior (including that Guido likes it, and it's <a href=""http://mail.python.org/pipermail/python-3000/2007-September/010222.html"" rel=""nofollow"">not likely to change</a>).</p>
"
35633,3207,2008-08-30T03:04:44Z,34209,3,"<p>To get rid of ""This field is required,"" you need to make it not required, by using blank=True (and possibly null=True as well, if it's not a CharField).</p>
"
35635,3560,2008-08-30T03:06:02Z,35634,12,"<p>Use <code>a.equal? b</code></p>

<p><a href=""http://www.ruby-doc.org/core/classes/Object.html"">http://www.ruby-doc.org/core/classes/Object.html</a></p>

<blockquote>
  <p>Unlike ==, the equal? method should never be overridden by subclasses: it is used to determine object identity (that is, a.equal?(b) iff a is the same object as b). </p>
</blockquote>
"
35645,3702,2008-08-30T03:25:43Z,33978,67,"<p><strong>There's no easy way to find out the memory size of a python object</strong>. One of the problems you may find is that Python objects - like lists and dicts - may have references to other python objects (in this case, what would your size be? The size containing the size of each object or not?). There are some pointers overhead and internal structures related to object types and garbage collection. Finally, some python objects have non-obvious behaviors. For instance, lists reserve space for more objects than they have, most of the time; dicts are even more complicated since they can operate in different ways (they have a different implementation for small number of keys and sometimes they over allocate entries).</p>

<p>There is a <a href=""http://code.activestate.com/recipes/544288/"">big chunk of code</a> (and an <a href=""http://code.activestate.com/recipes/546530/"">updated big chunk of code</a>) out there to try to best approximate the size of a python object in memory. There's also some <a href=""https://mail.python.org/pipermail/python-list/2008-January/483475.html"">simpler approximations</a>. But they will always be approximations.</p>

<p>You may also want to check some <a href=""http://mail.python.org/pipermail/python-list/2002-March/135223.html"">old description about PyObject</a> (the internal C struct that represents virtually all python objects).</p>
"
35664,3702,2008-08-30T03:55:23Z,23907,22,"<p>You may get both added and removed lines with git log, like:</p>

<pre><code>git log --shortstat --reverse --pretty=oneline
</code></pre>

<p>From this, you can write a similar script to the one you did using this info. In python:</p>

<pre><code>#!/usr/bin/python

""""""
Display the per-commit size of the current git branch.
""""""

import subprocess
import re
import sys

def main(argv):
  git = subprocess.Popen([""git"", ""log"", ""--shortstat"", ""--reverse"",
                        ""--pretty=oneline""], stdout=subprocess.PIPE)
  out, err = git.communicate()
  total_files, total_insertions, total_deletions = 0, 0, 0
  for line in out.split('\n'):
    if not line: continue
    if line[0] != ' ': 
      # This is a description line
      hash, desc = line.split("" "", 1)
    else:
      # This is a stat line
      data = re.findall(
        ' (\d+) files changed, (\d+) insertions\(\+\), (\d+) deletions\(-\)', 
        line)
      files, insertions, deletions = ( int(x) for x in data[0] )
      total_files += files
      total_insertions += insertions
      total_deletions += deletions
      print ""%s: %d files, %d lines"" % (hash, total_files,
                                        total_insertions - total_deletions)


if __name__ == '__main__':
  sys.exit(main(sys.argv))
</code></pre>
"
35667,3446,2008-08-30T03:56:57Z,22059,7,"<p>I'm not familiar with the specific services listed, but the field of natural language processing has developed a number of techniques that enable this sort of information extraction from general text.  As Sean stated, once you have candidate terms, it's not to difficult to search for those terms with some of the other entities in context and then use the results of that search to determine how confident you are that the term extracted is an actual entity of interest.</p>

<p><a href=""http://opennlp.sourceforge.net/"">OpenNLP</a> is a great project if you'd like to play around with natural language processing.  The capabilities you've named would probably be best accomplished with Named Entity Recognizers (NER) (algorithms that locate proper nouns, generally, and sometimes dates as well) and/or Word Sense Disambiguation (WSD) (eg: the word 'bank' has different meanings depending on it's context, and that can be very important when extracting information from text.  Given the sentences: ""the plane banked left"", ""the snow bank was high"", and ""they robbed the bank"" you can see how dissambiguation can play an important part in language understanding)</p>

<p>Techniques generally build on each other, and NER is one of the more complex tasks, so to do NER successfully, you will generally need accurate tokenizers (natural language tokenizers, mind you -- statistical approaches tend to fare the best), string stemmers (algorithms that conflate similar words to common roots: so words like informant and informer are treated equally), sentence detection ('Mr. Jones was tall.' is only one sentence, so you can't just check for punctuation), part-of-speech taggers (POS taggers), and WSD.</p>

<p>There is a python port of (parts of) OpenNLP called NLTK (<a href=""http://nltk.sourceforge.net"">http://nltk.sourceforge.net</a>) but I don't have much experience with it yet.  Most of my work has been with the Java and C# ports, which work well.  </p>

<p>All of these algorithms are language-specific, of course, and they can take significant time to run (although, it is generally faster than reading the material you are processing).  Since the state-of-the-art is largely based on statistical techniques, there is also a considerable error rate to take into account.  Furthermore, because the error rate impacts all the stages, and something like NER requires numerous stages of processing, (tokenize -> sentence detect -> POS tag -> WSD -> NER) the error rates compound.</p>
"
35757,720,2008-08-30T07:19:40Z,35753,16,"<p>In my opinion python is more than ready for developing complex applications. I see pythons strength more on the server side than writing graphical clients. But have a look at <a href=""http://www.resolversystems.com/"" rel=""nofollow"">http://www.resolversystems.com/</a>. They develop a whole spreadsheet in python using the .net ironpython port.</p>

<p>If you are familiar with eclipse have a look at <a href=""http://pydev.sourceforge.net/"" rel=""nofollow"">pydev</a> which provides auto-completion and debugging support for python with all the other eclipse goodies like svn support. The guy developing it has just been bought by <a href=""http://aptana.com/blog/pcolton/pydev_news"" rel=""nofollow"">aptana</a>, so this will be solid choice for the future.</p>

<p>@Marcin</p>

<blockquote>
  <p>Cons: as a dynamic language, has way
  worse IDE support (proper syntax
  completion requires static typing,
  whether explicit in Java or inferred
  in SML),</p>
</blockquote>

<p>You are right, that static analysis may not provide full syntax completion for dynamic languages, but I thing pydev gets the job done very well. Further more I have a different development style when programming python. I have always an ipython session open and with one F5 I do not only get the perfect completion from ipython, but object introspection and manipulation as well.</p>

<blockquote>
  <p>But if you want to write second Google
  or Yahoo, you will be much better with
  C# or Java.</p>
</blockquote>

<p><a href=""http://www.jaiku.com/blog/2008/08/18/from-the-dev-corner-an-under-the-hood-preview-of-our-new-engine/"" rel=""nofollow"">Google just rewrote jaiku</a> to work on top of App Engine, all in python. And as far as I know they use a lot of python inside google too.</p>
"
35759,893,2008-08-30T07:22:03Z,35753,11,"<p>I really like python, it's usually my language of choice these days for small (non-gui) stuff that I do on my own.</p>

<p>However, for some larger Python projects I've tackled, I'm finding that it's not quite the same as programming in say, C++. I was working on a language parser, and needed to represent an AST in Python. This is certainly within the scope of what Python can do, but I had a bit of trouble with some refactoring. I was changing the representation of my AST and changing methods and classes around a lot, and I found I missed the strong typing that would be available to me in a C++ solution. Python's duck typing was almost <em>too</em> flexible and I found myself adding a lot of <code>assert</code> code to try to check my types as the program ran. And then I couldn't really be sure that everything was properly typed unless I had 100% code coverage testing (which I didn't at the time).</p>

<p>Actually, that's another thing that I miss sometimes. It's possible to write syntactically correct code in Python that simply won't run. The compiler is incapable of telling you about it until it actually executes the code, so in infrequently-used code paths such as error handlers you can easily have unseen bugs lurking around. Even code that's as simple as printing an error message with a % format string can fail at runtime because of mismatched types.</p>

<p>I haven't used Python for any GUI stuff so I can't comment on that aspect.</p>
"
35776,3594,2008-08-30T08:21:18Z,35753,8,"<p>Python is considered (among Python programmers :) to be a great language for rapid prototyping. There's not a lot of extraneous syntax getting in the way of your thought processes, so most of the work you do tends to go into the code. (There's far less idioms required to be involved in writing good Python code than in writing good C++.)</p>

<p>Given this, most Python (CPython) programmers ascribe to the ""premature optimization is the root of all evil"" philosophy. By writing high-level (and significantly slower) Python code, one can optimize the bottlenecks out using C/C++ bindings when your application is nearing completion. At this point it becomes more clear what your processor-intensive algorithms are through proper profiling. This way, you write most of the code in a very readable and maintainable manner while allowing for speedups down the road. You'll see several Python library modules written in C for this very reason.</p>

<p>Most graphics libraries in Python (i.e. wxPython) are just Python wrappers around C++ libraries anyway, so you're pretty much writing to a C++ backend.</p>

<p>To address your IDE question, <a href=""http://pythonide.blogspot.com/"">SPE</a> (Stani's Python Editor) is a good IDE that I've used and <a href=""http://www.eclipse.org/"">Eclipse</a> with <a href=""http://pydev.sourceforge.net/"">PyDev</a> gets the job done as well. Both are OSS, so they're free to try!</p>

<p>[Edit] @Marcin: Have you had experience writing > 30k LOC in Python? It's also funny that you should mention Google's scalability concerns, since they're Python's biggest supporters! Also a small organization called NASA also uses Python frequently ;) see <a href=""http://www.python.org/about/success/usa/"">""One coder and 17,000 Lines of Code Later""</a>.</p>
"
35777,3105,2008-08-30T08:21:24Z,35753,19,"<p>You'll find mostly two answers to that &ndash; the religous one (Yes! Of course! It's the best language ever!) and the other religious one (you gotta be kidding me! Python? No... it's not mature enough). I will maybe skip the last religion (Python?! Use Ruby!). The truth, as always, is far from obvious. </p>

<p><strong>Pros</strong>: it's easy, readable, batteries included, has lots of good libraries for pretty much everything. It's expressive and dynamic typing makes it more concise in many cases.</p>

<p><strong>Cons</strong>: as a dynamic language, has way worse IDE support (proper syntax completion <strong>requires</strong> static typing, whether explicit in Java or inferred in SML), its object system is far from perfect (interfaces, anyone?) and it is easy to end up with messy code that has methods returning either int or boolean or object or some sort under unknown circumstances.</p>

<p>My take &ndash; I love Python for scripting, automation, tiny webapps and other simple well defined tasks. In my opinion it is by far <strong>the best</strong> dynamic language on the planet. That said, I would <strong>never</strong> use it <strong>any</strong> dynamically typed language to develop an application of substantial size.</p>

<p>Say &ndash; it would be fine to use it for Stack Overflow, which has three developers and I guess no more than 30k lines of code. For bigger things &ndash; first your development would be super fast, and then once team and codebase grow things are slowing down more than they would with Java or C#. You need to offset lack of compilation time checks by writing more unittests, refactorings get harder cause you never know what your refacoring broke until you run all tests or even the whole big app, etc.</p>

<p>Now &ndash; decide on how big your team is going to be and how big the app is supposed to be once it is done. If you have 5 or less people and the target size is roughly Stack Overflow, go ahead, write in Python. You will finish in no time and be happy with good codebase. But if you want to write second Google or Yahoo, you will be much better with C# or Java.</p>

<p>Side-note on C/C++ you have mentioned: if you are not writing performance critical software (say massive parallel raytracer that will run for three months rendering a film) or a very mission critical system (say Mars lander that will fly three years straight and has only one chance to land right or you lose $400mln) do not use it. For web apps, most desktop apps, most apps in general it is not a good choice. You will die debugging pointers and memory allocation in complex business logic.</p>
"
35786,3594,2008-08-30T08:35:08Z,32385,0,"<p>Most of these kinds of things can be determined programatically in Python, using modules like sys, os, and the special <a href=""http://pyref.infogami.com/__file__"" rel=""nofollow""></a> identifier which tells you where you are in the filesystem path.</p>

<p>It's important to keep in mind that when a module is first imported it will execute everything in the file-scope, which is important for developing system-dependent behaviors. For example, the os module basically determines what operating system you're using on import and then adjusts its implementation accordingly (by importing another module corresponding to Linux, OSX, Windows, etc.).</p>

<p>There's a lot of power in this feature and something along these lines is probably what you're looking for. :)</p>

<p>[Edit] I've also used socket.gethostname() in some rare, hackish instances. ;)</p>
"
35823,3207,2008-08-30T09:33:00Z,35805,38,"<p><code>B.name</code> is a class attribute, not an instance attribute.  It shows up in <code>B.__dict__</code>, but not in <code>b = B(); b.__dict__</code>.</p>

<p>The distinction is obscured somewhat because when you access an attribute on an instance, the class dict is a fallback.  So in the above example, <code>b.name</code> will give you the value of <code>B.name</code>.</p>
"
35831,755,2008-08-30T09:43:50Z,35817,3,"<p>I believe that os.system just invokes whatever command shell is configured for the user, so I don't think you can do it in a platform independent way.  My command shell could be anything from bash, emacs, ruby, or even quake3.  Some of these programs aren't expecting the kind of arguments you are passing to them and even if they did there is no guarantee they do their escaping the same way.</p>
"
35838,2422,2008-08-30T09:49:27Z,35753,0,"<p>I know I'm probably stating the obvious, but don't forget that the quality of the development team and their familiarity with the technology will have a major impact on your ability to deliver. </p>

<p>If you have a strong team, then it's probably not an issue if they're familiar. But if you have people who are more 9 to 5'rs who aren't familiar with the technology, they will need more support and you'd need to make a call if the productivity gains are worth whatever the cost of that support is.</p>
"
35841,755,2008-08-30T09:53:02Z,35753,2,"<p>Refactoring is inevitable on larger codebases and the lack of static typing makes this much harder in python than in statically typed languages.</p>
"
35857,893,2008-08-30T10:13:11Z,35817,44,"<p>This is what I use:</p>

<pre><code>def shellquote(s):
    return ""'"" + s.replace(""'"", ""'\\''"") + ""'""
</code></pre>

<p>The shell will always accept a quoted filename and remove the surrounding quotes before passing it to the program in question. Notably, this avoids problems with filenames that contain spaces or any other kind of nasty shell metacharacter.</p>

<p><strong>Update</strong>: If you are using Python 3.3 or later, use <a href=""http://docs.python.org/dev/library/shlex.html#shlex.quote"">shlex.quote</a> instead of rolling your own.</p>
"
35858,3363,2008-08-30T10:15:02Z,35817,49,"<p>Perhaps you have a specific reason for using <code>os.system()</code>. But if not you should probably be using the <a href=""http://docs.python.org/lib/module-subprocess.html""><code>subprocess</code> module</a>. You can specify the pipes directly and avoid using the shell.</p>

<p>The following is from <a href=""http://www.python.org/dev/peps/pep-0324/"">PEP324</a>:</p>

<blockquote>
<pre><code>Replacing shell pipe line
-------------------------

output=`dmesg | grep hda`
==&gt;
p1 = Popen([""dmesg""], stdout=PIPE)
p2 = Popen([""grep"", ""hda""], stdin=p1.stdout, stdout=PIPE)
output = p2.communicate()[0]
</code></pre>
</blockquote>
"
35900,745,2008-08-30T11:43:44Z,35817,-2,"<p>If you do use the system command, I would try and whitelist what goes into the os.system() call.. For example..</p>

<pre><code>clean_user_input re.sub(""[^a-zA-Z]"", """", user_input)
os.system(""ls %s"" % (clean_user_input))
</code></pre>

<p>The subprocess module is a better option, and I would recommend trying to avoid using anything like os.system/subprocess wherever possible.</p>
"
35978,3171,2008-08-30T14:16:54Z,35948,9,"<p>I'm assuming that the part the doesn't work is <code>{{ user.item }}</code>.</p>

<p>Django will be trying a dictionary lookup, but using the string <code>""item""</code> and not the value of the <code>item</code> loop variable.  Django did the same thing when it resolved <code>{{ user.name  }}</code> to the <code>name</code> attribute of the <code>user</code> object, rather than looking for a variable called <code>name</code>.</p>

<p>I think you will need to do some preprocessing of the data in your view before you render it in your template.</p>
"
35990,305,2008-08-30T14:35:29Z,35988,47,"<p>How about a dictionary?</p>

<p>Something like this:</p>

<pre><code>myStruct = {'field1': 'some val', 'field2': 'some val'}
</code></pre>

<p>Then you can use this to manipulate values:</p>

<pre><code>print myStruct['field1']
myStruct['field2'] = 'some other values'
</code></pre>

<p>And the values don't have to be strings.  They can be pretty much any other object.</p>
"
35993,3002,2008-08-30T14:38:38Z,35988,70,"<p>You can use a tuple for a lot of things where you would use a struct in C (something like x,y coordinates or RGB colors for example).</p>

<p>For everything else you can use dictionary, or a utility class like <a href=""http://code.activestate.com/recipes/52308/"">this one</a>:</p>

<pre><code>&gt;&gt;&gt; class Bunch:
...     def __init__(self, **kwds):
...         self.__dict__.update(kwds)
...
&gt;&gt;&gt; mystruct = Bunch(field1=value1, field2=value2)
</code></pre>

<p>I think the ""definitive"" discussion is <a href=""http://books.google.com/books?id=Q0s6Vgb98CQC&amp;lpg=PT212&amp;dq=Python%20Cookbook%20%22Collecting%20a%20Bunch%20of%20Named%20Items%22&amp;hl=en&amp;pg=PT213#v=onepage&amp;q&amp;f=false"">here</a>, in the published version of the Python Cookbook.</p>
"
36033,3665,2008-08-30T15:18:59Z,35988,202,"<p>Use a <a href=""https://docs.python.org/2/library/collections.html#collections.namedtuple"">named tuple</a>, which was added to the <a href=""http://docs.python.org/library/collections.html"">collections module</a> in the standard library in Python 2.6. It's also possible to use Raymond Hettinger's <a href=""http://code.activestate.com/recipes/500261/"">named tuple</a> recipe if you need to support Python 2.4.</p>

<p>It's nice for your basic example, but also covers a bunch of edge cases you might run into later as well. Your fragment above would be written as:</p>

<pre><code>from collections import namedtuple
MyStruct = namedtuple(""MyStruct"", ""field1 field2 field3"")
</code></pre>

<p>The newly created type can be used like this:</p>

<pre><code>m = MyStruct(""foo"", ""bar"", ""baz"")
</code></pre>

<p>Or you can use named arguments:</p>

<pre><code>m = MyStruct(field1 = ""foo"", field2 = ""bar"", field3 = ""baz"")
</code></pre>
"
36034,4381,2008-08-30T15:20:15Z,35988,17,"<blockquote>
  <p>dF: that's pretty cool... I didn't
  know that I could access the fields in
  a class using dict.</p>
  
  <p>Mark: the situations that I wish I had
  this are precisely when I want a tuple
  but nothing as ""heavy"" as a
  dictionary.</p>
</blockquote>

<p>You can access the fields of a class using a dictionary because the fields of a class, its methods and all its properties are stored internally using dicts (at least in CPython).</p>

<p>...Which leads us to your second comment. Believing that Python dicts are ""heavy"" is an extremely non-pythonistic concept. And reading such comments kills my Python Zen. That's not good.</p>

<p>You see, when you declare a class you are actually creating a pretty complex wrapper around a dictionary - so, if anything, you are adding more overhead than by using a simple dictionary. An overhead which, by the way, is meaningless in any case. If you are working on performance critical applications, use C or something.</p>
"
36061,394,2008-08-30T15:53:10Z,35988,13,"<p>You can also pass the init parameters to the instance variables by position</p>

<pre><code># Abstract struct class       
class Struct:
    def __init__ (self, *argv, **argd):
        if len(argd):
            # Update by dictionary
            self.__dict__.update (argd)
        else:
            # Update by position
            attrs = filter (lambda x: x[0:2] != ""__"", dir(self))
            for n in range(len(argv)):
                setattr(self, attrs[n], argv[n])

# Specific class
class Point3dStruct (Struct):
    x = 0
    y = 0
    z = 0

pt1 = Point3dStruct()
pt1.x = 10

print pt1.x
print ""-""*10

pt2 = Point3dStruct(5, 6)

print pt2.x, pt2.y
print ""-""*10

pt3 = Point3dStruct (x=1, y=2, z=3)
print pt3.x, pt3.y, pt3.z
print ""-""*10
</code></pre>
"
36143,2474,2008-08-30T17:04:40Z,36139,23,"<pre><code>list.sort()
</code></pre>

<p>It really is that simple :)</p>
"
36156,1694,2008-08-30T17:10:12Z,36139,270,"<p>Basic answer:</p>

<pre><code>mylist = [""b"", ""C"", ""A""]
mylist.sort()
</code></pre>

<p>This modifies your original list (i.e. sorts in-place). To get a sorted copy of the list, without changing the original, use the <a href=""http://docs.python.org/library/functions.html#sorted""><code>sorted()</code></a> function:</p>

<pre><code>for x in sorted(mylist):
    print x
</code></pre>

<p>However, the examples above are a bit naive, because they don't take locale into account, and perform a case-sensitive sorting. You can take advantage of the optional parameter <code>key</code> to specify custom sorting order (the alternative, using <code>cmp</code>, is a deprecated solution, as it has to be evaluated multiple times - <code>key</code> is only computed once per element).</p>

<p>So, to sort according to the current locale, taking language-specific rules into account (<a href=""http://docs.python.org/library/functools.html#functools.cmp_to_key""><code>cmp_to_key</code></a> is a helper function from functools):</p>

<pre><code>sorted(mylist, key=cmp_to_key(locale.strcoll))
</code></pre>

<p>And finally, if you need, you can specify a <a href=""http://docs.python.org/library/locale.html"">custom locale</a> for sorting:</p>

<pre><code>import locale
locale.setlocale(locale.LC_ALL, 'en_US.UTF-8') # vary depending on your lang/locale
assert sorted((u'Ab', u'ad', u'aa'),
  key=cmp_to_key(locale.strcoll)) == [u'aa', u'Ab', u'ad']
</code></pre>

<p>Last note: you will see examples of case-insensitive sorting which use the <code>lower()</code> method - those are incorrect, because they work only for the ASCII subset of characters. Those two are wrong for any non-English data:</p>

<pre><code># this is incorrect!
mylist.sort(key=lambda x: x.lower())
# alternative notation, a bit faster, but still wrong
mylist.sort(key=str.lower)
</code></pre>
"
36219,3665,2008-08-30T18:10:33Z,12591,0,"<p>It seems that lxml does not expose this libxml2 feature, grepping the source only turns up some #defines for the error handling:</p>

<pre><code>C:\Dev&gt;grep -ir --include=*.px[id] catalog lxml-2.1.1/src | sed -r ""s/\s+/ /g""
lxml-2.1.1/src/lxml/dtd.pxi: catalog.
lxml-2.1.1/src/lxml/xmlerror.pxd: XML_FROM_CATALOG = 20 # The Catalog module
lxml-2.1.1/src/lxml/xmlerror.pxd: XML_WAR_CATALOG_PI = 93 # 93
lxml-2.1.1/src/lxml/xmlerror.pxd: XML_CATALOG_MISSING_ATTR = 1650
lxml-2.1.1/src/lxml/xmlerror.pxd: XML_CATALOG_ENTRY_BROKEN = 1651 # 1651
lxml-2.1.1/src/lxml/xmlerror.pxd: XML_CATALOG_PREFER_VALUE = 1652 # 1652
lxml-2.1.1/src/lxml/xmlerror.pxd: XML_CATALOG_NOT_CATALOG = 1653 # 1653
lxml-2.1.1/src/lxml/xmlerror.pxd: XML_CATALOG_RECURSION = 1654 # 1654
lxml-2.1.1/src/lxml/xmlerror.pxi:CATALOG=20
lxml-2.1.1/src/lxml/xmlerror.pxi:WAR_CATALOG_PI=93
lxml-2.1.1/src/lxml/xmlerror.pxi:CATALOG_MISSING_ATTR=1650
lxml-2.1.1/src/lxml/xmlerror.pxi:CATALOG_ENTRY_BROKEN=1651
lxml-2.1.1/src/lxml/xmlerror.pxi:CATALOG_PREFER_VALUE=1652
lxml-2.1.1/src/lxml/xmlerror.pxi:CATALOG_NOT_CATALOG=1653
lxml-2.1.1/src/lxml/xmlerror.pxi:CATALOG_RECURSION=1654
</code></pre>

<p>From the <a href=""http://xmlsoft.org/catalog.html"" rel=""nofollow"">catalog implementation in libxml2 page</a> it seems possible that the 'transparent' handling through installation in /etc/xml/catalog may still work in lxml, but if you need more than that you can always abandon lxml and use the default python bindings, which do expose the catalog functions.</p>
"
36220,3560,2008-08-30T18:10:45Z,36139,6,"<blockquote>
  <p>But how does this handle language specific sorting rules? Does it take locale into account?</p>
</blockquote>

<p>No, <code>list.sort()</code> is a generic sorting function. If you want to sort according to the Unicode rules, you'll have to define a custom sort key function. You can try using the <a href=""http://jtauber.com/blog/2006/01/27/python_unicode_collation_algorithm/"">pyuca</a> module, but I don't know how complete it is.</p>
"
36238,3189,2008-08-30T18:42:19Z,35753,4,"<p>One way to judge what python is used for is to look at what products use python at the moment.  This <a href=""http://en.wikipedia.org/wiki/Python_software"" rel=""nofollow"">wikipedia page</a> has a long list including various web frameworks, content management systems, version control systems, desktop apps and IDEs.</p>

<p>As it says <a href=""http://en.wikipedia.org/wiki/Python_%28programming_language%29#Usage"" rel=""nofollow"">here</a> - ""Some of the largest projects that use Python are the Zope application server, YouTube, and the original BitTorrent client. Large organizations that make use of Python include Google, Yahoo!, CERN and NASA. ITA uses Python for some of its components.""</p>

<p>So in short, yes, it is ""proper for production use in the development of stand-alone complex applications"".  So are many other languages, with various pros and cons.  Which is the best language for your particular use case is too subjective to answer, so I won't try, but often the answer will be ""the one your developers know best"".</p>
"
36327,3002,2008-08-30T20:34:35Z,36324,12,"<p>It's a bug, see the <a href=""http://docs.python.org/lib/node528.html"" rel=""nofollow"">documentation of <code>subprocess.Popen</code></a>. There either needs to be a <code>""shell=True</code>"" option, or the first argument needs to be a sequence <code>['svn', '--version']</code>. As it is now, <code>Popen</code> is looking for an executable named, literally, ""svn --version"" which it doesn't find.</p>

<p>I don't know why it would work for your colleagues though, if they are running the same OS and version of Python... FWIW it gives me the same error message on a mac, and either of the two ways I gave fixes it.</p>
"
36395,893,2008-08-30T22:14:36Z,36139,29,"<p>It is also worth noting the <code>sorted()</code> function:</p>

<pre><code>for x in sorted(list):
    print x
</code></pre>

<p>This returns a new, sorted version of a list without changing the original list.</p>
"
36818,3839,2008-08-31T12:19:14Z,36812,-1,"<p>Follow the Django tutorial for setting up the ""admin"" part of an application. This will allow you to modify your database.</p>

<p><a href=""https://docs.djangoproject.com/en/dev/intro/tutorial02/"" rel=""nofollow"">Django Admin Setup</a></p>

<p>Alternatively, you can just connect directly to the database using the standard tools for whatever database type you are using.</p>
"
36827,3448,2008-08-31T12:31:49Z,36812,0,"<p>This topic is covered in <a href=""https://code.djangoproject.com/wiki/Tutorials"" rel=""nofollow"">Django tutorials</a>.</p>
"
36852,3861,2008-08-31T13:11:03Z,28668,3,"<p>You'll need the FileMaker Pro installation CD to get the drivers. <a href=""http://www.filemaker.com/downloads/pdf/fm9_odbc_jdbc_guide_en.pdf"" rel=""nofollow"">This document</a> details the process for FMP 9 - it is similar for versions 7.x and 8.x as well. Versions 6.x and earlier are completely different and I wouldn't bother trying (xDBC support in those previous versions is ""minimal"" at best).</p>

<p>FMP 9 supports SQL-92 standard syntax (mostly). Note that rather than querying tables directly you query using the ""table occurrence"" name which serves as a table alias of sorts. If the data tables are stored in multiple files it is possible to create a single FMP file with table occurrences/aliases pointing to those data tables. There's an ""undocumented feature"" where such a file must have a table defined in it as well and that table ""related"" to any other table on the relationships graph (doesn't matter which one) for ODBC access to work. Otherwise your queries will always return no results.</p>

<p>The PDF document details all of the limitations of using the xDBC interface FMP provides. Performance of simple queries is reasonably fast, ymmv. I have found the performance of queries specifying the ""LIKE"" operator to be less than stellar.</p>

<p>FMP also has an XML/XSLT interface that you can use to query FMP data over an HTTP connection. It also provides a PHP class for accessing and using FMP data in web applications.</p>
"
36902,2600,2008-08-31T15:07:48Z,36901,9,"<p>From the Python documentation:</p>

<blockquote>
  <p>If there are more positional arguments than there are formal parameter slots, a TypeError exception is raised, unless a formal parameter using the syntax ""*identifier"" is present; in this case, that formal parameter receives a tuple containing the excess positional arguments (or an empty tuple if there were no excess positional arguments). </p>
  
  <p>If any keyword argument does not correspond to a formal parameter name, a TypeError exception is raised, unless a formal parameter using the syntax ""**identifier"" is present; in this case, that formal parameter receives a dictionary containing the excess keyword arguments (using the keywords as keys and the argument values as corresponding values), or a (new) empty dictionary if there were no excess keyword arguments. </p>
</blockquote>
"
36908,720,2008-08-31T15:17:31Z,36901,877,"<p>The <code>*args</code> and <code>**kwargs</code> is a common idiom to allow arbitrary number of arguments to functions as described in the section <a href=""http://docs.python.org/dev/tutorial/controlflow.html#more-on-defining-functions"">more on defining functions</a> in the Python documentation.</p>

<p>The <code>*args</code> will give you all function parameters <a href=""https://docs.python.org/dev/tutorial/controlflow.html#arbitrary-argument-lists"">as a tuple</a>:</p>

<pre><code>In [1]: def foo(*args):
   ...:     for a in args:
   ...:         print a
   ...:         
   ...:         

In [2]: foo(1)
1


In [4]: foo(1,2,3)
1
2
3
</code></pre>

<p>The <code>**kwargs</code> will give you all 
<strong>keyword arguments</strong> except for those corresponding to a formal parameter as a dictionary.</p>

<pre><code>In [5]: def bar(**kwargs):
   ...:     for a in kwargs:
   ...:         print a, kwargs[a]
   ...:         
   ...:         

In [6]: bar(name='one', age=27)
age 27
name one
</code></pre>

<p>Both idioms can be mixed with normal arguments to allow a set of fixed and some variable arguments:</p>

<pre><code>def foo(kind, *args, **kwargs):
   pass
</code></pre>

<p>Another usage of the <code>*l</code> idiom is to <strong>unpack argument lists</strong> when calling a function.</p>

<pre><code>In [9]: def foo(bar, lee):
   ...:     print bar, lee
   ...:     
   ...:     

In [10]: l = [1,2]

In [11]: foo(*l)
1 2
</code></pre>

<p>In Python 3 it is possible to use <code>*l</code> on the left side of an assignment (<a href=""http://www.python.org/dev/peps/pep-3132/"">Extended Iterable Unpacking</a>):</p>

<pre><code>first, *rest = [1,2,3,4]
first, *l, last = [1,2,3,4]
</code></pre>

<p>Also Python 3 adds new semantic (refer <a href=""https://www.python.org/dev/peps/pep-3102/"">PEP 3102</a>):</p>

<pre><code>def func(arg1, arg2, arg3='default', *, kwarg1='abc', kwarg2='xyz'):
    pass
</code></pre>

<p>Such function accepts only 2 positional arguments, and everything after <code>*</code> can only be passed as keyword argument, not positional one.</p>

<p>In Python 2 similar was true for all parameters after <code>*args</code>.</p>
"
36911,2373,2008-08-31T15:20:21Z,36901,89,"<p>The single * means that there can be any number of extra positional arguments. <code>foo()</code> can be invoked like <code>foo(1,2,3,4,5)</code>. In the body of foo() param2 is a sequence containing 2-5.</p>

<p>The double ** means there can be any number of extra named parameters. <code>bar()</code> can be invoked like <code>bar(1, a=2, b=3)</code>. In the body of bar() param2 is a dictionary containing {'a':2, 'b':3 }</p>

<p>With the following code:</p>

<pre><code>def foo(param1, *param2):
    print param1
    print param2

def bar(param1, **param2):
    print param1
    print param2

foo(1,2,3,4,5)
bar(1,a=2,b=3)
</code></pre>

<p>the output is</p>

<pre><code>1
(2, 3, 4, 5)
1
{'a': 2, 'b': 3}
</code></pre>
"
36926,742,2008-08-31T15:47:25Z,36901,244,"<p>It's also worth noting that you can use * and ** when calling functions as well. This is a shortcut that allows you to pass multiple arguments to a function directly using either a list/tuple or a dictionary. For example, if you have the following function:</p>

<pre><code>def foo(x,y,z):
    print ""x="" + str(x)
    print ""y="" + str(y)
    print ""z="" + str(z)
</code></pre>

<p>You can do things like:</p>

<pre><code>&gt;&gt;&gt; mylist = [1,2,3]
&gt;&gt;&gt; foo(*mylist)
x=1
y=2
z=3

&gt;&gt;&gt; mydict = {'x':1,'y':2,'z':3}
&gt;&gt;&gt; foo(**mydict)
x=1
y=2
z=3

&gt;&gt;&gt; mytuple = (1, 2, 3)
&gt;&gt;&gt; foo(*mytuple)
x=1
y=2
z=3
</code></pre>
"
36935,3207,2008-08-31T15:59:11Z,36812,7,"<p>You will want to wire your URL to the Django <a href=""https://docs.djangoproject.com/en/1.4/ref/generic-views/#django-views-generic-create-update-create-object"" rel=""nofollow"">create_object generic view</a>, and pass it either ""model"" (the model you want to create) or ""form_class"" (a customized <a href=""https://docs.djangoproject.com/en/1.1/topics/forms/modelforms/#topics-forms-modelforms"" rel=""nofollow"">ModelForm</a> class).  There are a number of <a href=""https://docs.djangoproject.com/en/1.4/ref/generic-views/#django-views-generic-create-update-create-object"" rel=""nofollow"">other arguments</a> you can also pass to override default behaviors.</p>

<p>Sample URLconf for the simplest case:</p>

<pre><code>from django.conf.urls.defaults import *
from django.views.generic.create_update import create_object

from my_products_app.models import Product

urlpatterns = patterns('',
    url(r'^admin/products/add/$', create_object, {'model': Product}))
</code></pre>

<p>Your template will get the context variable ""form"", which you just need to wrap in a &lt;form> tag and add a submit button.  The simplest working template (by default should go in ""my_products_app/product_form.html""):</p>

<pre><code>&lt;form action=""."" method=""POST""&gt;
  {{ form }}
  &lt;input type=""submit"" name=""submit"" value=""add""&gt;
&lt;/form&gt;
</code></pre>

<p>Note that your Product model must have a get_absolute_url method, or else you must pass in the post_save_redirect parameter to the view.  Otherwise it won't know where to redirect to after save.</p>
"
36937,3280,2008-08-31T16:06:14Z,36932,610,"<p>Before PEP 435, Python didn't have an equivalent but you could implement your own.</p>

<p>Myself, I like keeping it simple (I've seen some horribly complex examples on the net), something like this ...</p>

<pre><code>class Animal:
    DOG = 1
    CAT = 2

x = Animal.DOG
</code></pre>

<hr>

<p>In Python 3.4 (<a href=""http://www.python.org/dev/peps/pep-0435/"">PEP 435</a>), you can make Enum the base class.  This gets you a little bit of extra functionality, described in the PEP.  For example, enum values are distinct from integers.</p>

<pre><code>class Animal(Enum):
    DOG = 1
    CAT = 2

print(Animal.DOG)
&lt;Animal.DOG: 1&gt;
</code></pre>

<hr>

<p>If you don't want to type the values, use the following shortcut:</p>

<pre><code>class Animal(Enum):
    DOG, CAT = range(2)
</code></pre>
"
36940,2384,2008-08-31T16:09:53Z,36932,17,"<p>Hmmm... I suppose the closest thing to an enum would be a dictionary, defined either like this:</p>

<pre><code>months = {
    'January': 1,
    'February': 2,
    ...
}
</code></pre>

<p>or</p>

<pre><code>months = dict(
    January=1,
    February=2,
    ...
)
</code></pre>

<p>Then, you can use the symbolic name for the constants like this:</p>

<pre><code>mymonth = months['January']
</code></pre>

<p>There are other options, like a list of tuples, or a tuple of tuples, but the dictionary is the only one that provides you with a ""symbolic"" (constant string) way to access the 
value.</p>

<p>Edit: I like Alexandru's answer too!</p>
"
36978,927,2008-08-31T17:14:06Z,36953,4,"<p>Have a look at the standard module <a href=""http://docs.python.org/lib/module-shlex.html"" rel=""nofollow"">shlex</a> and modify one copy of it to match the syntax you use for your shell, it is a good starting point</p>

<p>If you want all the power of a complete solution for lexing/parsing, <a href=""http://www.antlr.org/wiki/display/ANTLR3/Antlr3PythonTarget"" rel=""nofollow"">ANTLR</a> can generate python too.</p>
"
37000,3002,2008-08-31T18:10:50Z,36932,42,"<p>Python doesn't have a built-in equivalent to <code>enum</code>, and other answers have ideas for implementing your own (you may also be interested in the <a href=""http://code.activestate.com/recipes/67107/"">over the top version</a> in the Python cookbook).</p>

<p>However, in situations where an <code>enum</code> would be called for in C, I usually end up <strong><em>just using simple strings</em></strong>: because of the way objects/attributes are implemented, (C)Python is optimized to work very fast with short strings anyway, so there wouldn't really be any performance benefit to using integers. To guard against typos / invalid values you can insert checks in selected places.</p>

<pre><code>ANIMALS = ['cat', 'dog', 'python']

def take_for_a_walk(animal):
    assert animal in ANIMALS
    ...
</code></pre>

<p>(One disadvantage compared to using a class is that you lose the benefit of autocomplete)</p>
"
37009,3560,2008-08-31T18:20:51Z,36806,5,"<p>What happens if you remove the <code>Alias /</code> directive?</p>
"
37081,116,2008-08-31T20:31:22Z,36932,140,"<p>If you need the numeric values, here's the quickest way:</p>

<pre><code>dog, cat, rabbit = range(3)
</code></pre>
"
37146,3560,2008-08-31T21:43:58Z,37142,1,"<p>Use an interface that runs each response in a separate interpreter, such as <code>mod_wsgi</code> for Python. This lets multi-threading be used without encountering the GIL.</p>

<p>EDIT: Apparently, <code>mod_wsgi</code> no longer supports multiple interpreters per process because idiots couldn't figure out how to properly implement extension modules. It still supports running requests in separate processes FastCGI-style, though, so that's apparently the current accepted solution.</p>
"
37153,720,2008-08-31T21:53:30Z,37142,4,"<p>I'm not totally sure which problem you want so solve, but if you deploy your python/django application via an apache prefork MPM using mod_python apache will start several worker processes for handling different requests.</p>

<p>If one request needs so much resources, that you want to use multiple cores have a look at <a href=""http://pyprocessing.berlios.de/"" rel=""nofollow"">pyprocessing</a>. But I don't think that would be wise.</p>
"
37190,2947,2008-08-31T22:29:14Z,35948,0,"<p>shouldn't this:</p>

<pre><code>{{ user.item }}
</code></pre>

<p>be this?</p>

<pre><code>{{ item }}
</code></pre>

<p>there is no user object in the context within that loop....?</p>
"
37203,234,2008-08-31T22:41:55Z,37142,4,"<p>The 'standard' way to do this with rails is to run a ""pack"" of Mongrel instances (ie: 4 copies of the rails application) and then use apache or nginx or some other piece of software to sit in front of them and act as a load balancer. </p>

<p>This is probably how it's done with other ruby frameworks such as merb etc, but I haven't used those personally.</p>

<p>The OS will take care of running each mongrel on it's own CPU.</p>

<p>If you install <a href=""http://www.modrails.com/"" rel=""nofollow"">mod_rails aka phusion passenger</a> it will start and stop multiple copies of the rails process for you as well, so it will end up spreading the load across multiple CPUs/cores in a similar way.</p>
"
37218,3560,2008-08-31T22:51:15Z,36806,5,"<blockquote>
  <p>It works. I have no idea why, but it does.</p>
</blockquote>

<p>For future reference:</p>

<p>It works because Apache processes alias directives in order, and uses the first match. It was always hitting <code>Alias /</code>, which will match anything, before <code>WSGIScriptAlias</code>.</p>

<p>From the <a href=""http://httpd.apache.org/docs/2.2/mod/mod_alias.html"" rel=""nofollow""><code>mod_alias</code> documentation</a>:</p>

<blockquote>
  <p>First, all Redirects are processed before Aliases are processed, and therefore a request that matches a <code>Redirect</code> or <code>RedirectMatch</code> will never have Aliases applied. Second, the Aliases and Redirects are processed in the order they appear in the configuration files, with the first match taking precedence.</p>
</blockquote>
"
37245,3926,2008-08-31T23:14:54Z,36953,3,"<p>I suggest <a href=""http://www.canonware.com/Parsing/"" rel=""nofollow"">http://www.canonware.com/Parsing/</a>, since it is pure python and you don't need to learn a grammar, but it isn't widely used, and has comparatively little documentation. The heavyweight is ANTLR and PyParsing. ANTLR can generate java and C++ parsers too, and AST walkers but you will have to learn what amounts to a new language.</p>
"
37252,3926,2008-08-31T23:27:16Z,773,24,"<p>A neato trick with groupby is to run length encoding in one line:</p>

<pre><code>[(c,len(list(cgen))) for c,cgen in groupby(some_string)]
</code></pre>

<p>will give you a list of 2-tuples where the first element is the char and the 2nd is the number of repetitions.</p>
"
37488,3560,2008-09-01T05:26:06Z,37479,0,"<blockquote>
  <p>Is what I'm trying to do possible? If so, what am I doing wrong?</p>
</blockquote>

<p>It's certainly possible. What's wrong is that <code>HTMLDecorator.__init__()</code> doesn't accept parameters.</p>

<p>Here's a simple example:</p>

<pre><code>def decorator (func):
    def new_func ():
        return ""new_func %s"" % func ()
    return new_func

@decorator
def a ():
    return ""a""

def b ():
    return ""b""

print a() # new_func a
print decorator (b)() # new_func b
</code></pre>
"
37496,3056,2008-09-01T05:35:08Z,37486,4,"<p>How about parsing the HTML data and extracting the data with the help of the parser ?</p>

<p>I'd try something like the author described in <a href=""http://diveintopython.net/html_processing/extracting_data.html"" rel=""nofollow"">chapter 8.3 in the Dive Into Python book</a> </p>
"
37502,1265,2008-09-01T05:49:04Z,37486,6,"<p>While I agree with Lucas that regular expressions are not all that scary, I still think that you should go with a specialized HTML parser. This is because the HTML standard is hairy enough (especially if you want to parse arbitrarily ""HTML"" pages taken off the Internet) that you would need to write a lot of code to handle the corner cases. It seems that <a href=""http://docs.python.org/lib/module-htmllib.html"" rel=""nofollow"">python includes one out of the box</a>. </p>

<p>You should also check out the <a href=""http://utidylib.berlios.de/"" rel=""nofollow"">python bindings for TidyLib</a> which can clean up broken HTML, making the success rate of any HTML parsing much higher.</p>
"
37504,813,2008-09-01T05:50:44Z,37486,1,"<p>You might need something more complicated than a regular expression. Web pages often have angle brackets that aren't part of a tag, like this:</p>

<pre><code> &lt;div&gt;5 &lt; 7&lt;/div&gt;
</code></pre>

<p>Stripping the tags with regex will return the string ""5 "" and treat</p>

<pre><code> &lt; 7&lt;/div&gt;
</code></pre>

<p>as a single tag and strip it out.</p>

<p>I suggest looking for already-written code that does this for you. I did a search and found this: <a href=""http://zesty.ca/python/scrape.html"" rel=""nofollow"">http://zesty.ca/python/scrape.html</a> It also can resolve HTML entities.</p>
"
37506,3560,2008-09-01T05:53:39Z,37486,15,"<p>Use <a href=""http://www.crummy.com/software/BeautifulSoup/"">BeautifulSoup</a>! It's perfect for this, where you have incoming markup of dubious virtue and need to get something reasonable out of it. Just pass in the original text, extract all the string tags, and join them.</p>
"
37512,720,2008-09-01T06:07:01Z,37486,38,"<p>Use <a href=""http://codespeak.net/lxml/lxmlhtml.html"">lxml</a> which is the best xml/html library for python.</p>

<pre><code>import lxml.html
t = lxml.html.fromstring(""..."")
t.text_content()
</code></pre>

<p>And if you just want to sanitize the html look at the lxml.html.clean <a href=""http://codespeak.net/lxml/lxmlhtml.html#cleaning-up-html"">module</a></p>
"
37513,1057,2008-09-01T06:10:04Z,37479,0,"<p>@John (37448):</p>

<p>Sorry, I might have misled you with the name (bad choice).  I'm not really looking for a decorator function, or anything to do with decorators at all.  What I'm after is for the html(self) def to use ClassX or ClassY's <code>__repr__</code>.  I want this to work without modifying ClassX or ClassY.</p>
"
37526,3560,2008-09-01T06:25:43Z,37479,0,"<p>Ah, in that case, perhaps code like this will be useful? It doesn't really have anything to do with decorators, but demonstrates how to pass arguments to a class's initialization function and to retrieve those arguments for later.</p>

<pre><code>import cgi

class ClassX(object):
    def __repr__ (self):
        return ""&lt;class X&gt;""

class HTMLDecorator(object):
    def __init__ (self, wrapped):
        self.__wrapped = wrapped

    def html (self):
        sep = cgi.escape (repr (self.__wrapped))
        return sep.join ((""&lt;H1&gt;"", ""&lt;/H1&gt;""))

inst_x=ClassX()
inst_b=True

print HTMLDecorator(inst_x).html()
print HTMLDecorator(inst_b).html()
</code></pre>
"
37544,1057,2008-09-01T06:55:13Z,37479,0,"<p>@John (37479):</p>

<p>Very close, but then I lose everything from ClassX.  Below is something a collegue gave me that does do the trick, but it's hideous.  There has to be a better way.</p>

<pre><code>import cgi
from math import sqrt

class ClassX(object): 
  def __repr__(self): 
    return ""Best Guess""

class ClassY(object):
  pass # ... with own __repr__

inst_x=ClassX()

inst_y=ClassY()

inst_z=[ i*i for i in range(25) ]

inst_b=True

avoid=""__class__ __init__ __dict__ __weakref__""

class HTMLDecorator(object):
    def __init__(self,master):
        self.master = master
        for attr in dir(self.master):
            if ( not attr.startswith(""__"") or 
                attr not in avoid.split() and ""attr"" not in attr):
                self.__setattr__(attr, self.master.__getattribute__(attr))

    def html(self): # an ""enhanced"" version of __repr__
        return cgi.escape(self.__repr__()).join((""&lt;H1&gt;"",""&lt;/H1&gt;""))

    def length(self):
        return sqrt(sum(self.__iter__()))

print HTMLDecorator(inst_x).html()
print HTMLDecorator(inst_y).html()
wrapped_z = HTMLDecorator(inst_z)
print wrapped_z.length()
inst_z[0] += 70
#wrapped_z[0] += 71
wrapped_z.__setitem__(0,wrapped_z.__getitem__(0)+ 71)
print wrapped_z.html()
print HTMLDecorator(inst_b).html()
</code></pre>

<p>Output:</p>

<pre>&lt;H1&gt;Best Guess&lt;/H1&gt;
&lt;H1&gt;&lt;__main__.ClassY object at 0x891df0c&gt;&lt;/H1&gt;
70.0
&lt;H1&gt;[141, 1, 4, 9, 16, 25, 36, 49, 64, 81, 100, 121, 144, 169, 196, 225, 256, 289, 324, 361, 400, 441, 484, 529, 576]&lt;/H1&gt;
&lt;H1&gt;True&lt;/H1&gt;</pre>
"
37553,1448,2008-09-01T07:02:10Z,37535,7,"<p>You can try this <a href=""http://code.activestate.com/recipes/362715/"" rel=""nofollow"">recipe on Active State</a>. </p>

<p>There is also a <a href=""http://code.google.com/p/lino/source/browse/lino/utils/dbfreader.py"" rel=""nofollow"">DBFReader module</a> which you can try.</p>

<p>For support for <a href=""http://www.physics.ox.ac.uk/users/santoso/dbf.py.src"" rel=""nofollow"">memo fields</a>.</p>
"
37571,3560,2008-09-01T07:33:45Z,37479,2,"<blockquote>
  <p>Very close, but then I lose everything from ClassX. Below is something a collegue gave me that does do the trick, but it's hideous. There has to be a better way.</p>
</blockquote>

<p>Looks like you're trying to set up some sort of proxy object scheme. That's doable, and there are better solutions than your colleague's, but first consider whether it would be easier to just patch in some extra methods. This won't work for built-in classes like <code>bool</code>, but it will for your user-defined classes:</p>

<pre><code>def HTMLDecorator (obj):
    def html ():
        sep = cgi.escape (repr (obj))
        return sep.join ((""&lt;H1&gt;"", ""&lt;/H1&gt;""))
    obj.html = html
    return obj
</code></pre>

<p>And here is the proxy version:</p>

<pre><code>class HTMLDecorator(object):
    def __init__ (self, wrapped):
        self.__wrapped = wrapped

    def html (self):
        sep = cgi.escape (repr (self.__wrapped))
        return sep.join ((""&lt;H1&gt;"", ""&lt;/H1&gt;""))

    def __getattr__ (self, name):
        return getattr (self.__wrapped, name)

    def __setattr__ (self, name, value):
        if not name.startswith ('_HTMLDecorator__'):
            setattr (self.__wrapped, name, value)
            return
        super (HTMLDecorator, self).__setattr__ (name, value)

    def __delattr__ (self, name):
        delattr (self.__wraped, name)
</code></pre>
"
37604,3207,2008-09-01T08:15:28Z,37486,0,"<p>Regular expressions are not scary, but writing your own regexes to strip HTML is a sure path to madness (and it won't work, either).  Follow the path of wisdom, and use one of the many good HTML-parsing libraries.</p>

<p>Lucas' example is also broken because ""sub"" is not a method of a Python string.  You'd have to ""import re"", then call re.sub(pattern, repl, string).  But that's neither here nor there, as the correct answer to your question does not involve writing any regexes.</p>
"
37619,3207,2008-09-01T08:30:41Z,37479,2,"<p>Both of John's solutions would work.  Another option that allows HTMLDecorator to remain very simple and clean is to monkey-patch it in as a base class.  This also works only for user-defined classes, not builtin types:</p>

<pre><code>import cgi

class ClassX(object):
    pass # ... with own __repr__

class ClassY(object):
    pass # ... with own __repr__

inst_x=ClassX()
inst_y=ClassY()

class HTMLDecorator:
    def html(self): # an ""enhanced"" version of __repr__
        return cgi.escape(self.__repr__()).join((""&lt;H1&gt;"",""&lt;/H1&gt;""))

ClassX.__bases__ += (HTMLDecorator,)
ClassY.__bases__ += (HTMLDecorator,)

print inst_x.html()
print inst_y.html()
</code></pre>

<p>Be warned, though -- monkey-patching like this comes with a high price in readability and maintainability of your code.  When you go back to this code a year later, it can become very difficult to figure out how your ClassX got that html() method, especially if ClassX is defined in some other library.</p>
"
37917,1709,2008-09-01T13:12:53Z,37535,16,"<p>I prefer <a href=""http://sourceforge.net/projects/dbfpy/"">dbfpy</a>. It supports both reading and writing of <code>.DBF</code> files and can cope with most variations of the format. It's the only implementation I have found that could both read and write the legacy DBF files of some older systems I have worked with.</p>
"
38092,2603,2008-09-01T16:05:25Z,36932,72,"<p>The typesafe enum pattern which was used in Java pre-JDK 5 has a
number of advantages. Much like in Alexandru's answer, you create a
class and class level fields are the enum values; however, the enum
values are instances of the class rather than small integers. This has
the advantage that your enum values don't inadvertently compare equal
to small integers, you can control how they're printed, add arbitrary
methods if that's useful and make assertions using isinstance:</p>

<pre><code>class Animal:
   def __init__(self, name):
       self.name = name

   def __str__(self):
       return self.name

   def __repr__(self):
       return ""&lt;Animal: %s&gt;"" % self

Animal.DOG = Animal(""dog"")
Animal.CAT = Animal(""cat"")

&gt;&gt;&gt; x = Animal.DOG
&gt;&gt;&gt; x
&lt;Animal: dog&gt;
&gt;&gt;&gt; x == 1
False
</code></pre>

<hr>

<p>A recent <a href=""http://mail.python.org/pipermail/python-dev/2010-November/105873.html"">thread on python-dev</a> pointed out there are a couple of enum libraries in the wild, including:</p>

<ul>
<li><a href=""http://packages.python.org/flufl.enum/docs/using.html"">flufl.enum</a></li>
<li><a href=""http://pypi.python.org/pypi/lazr.enum"">lazr.enum</a></li>
<li>... and the imaginatively named <a href=""http://pypi.python.org/pypi/enum/"">enum</a></li>
</ul>
"
38254,2603,2008-09-01T18:27:27Z,38238,22,"<p>Alternative constructors are the classic example.</p>
"
38276,3560,2008-09-01T18:45:56Z,38238,142,"<p>Class methods are for when you need to have methods that aren't specific to any particular instance, but still involve the class in some way. The most interesting thing about them is that they can be overridden by subclasses, something that's simply not possible in Java's static methods or Python's module-level functions.</p>

<p>If you have a class <code>MyClass</code>, and a module-level function that operates on MyClass (factory, dependency injection stub, etc), make it a <code>classmethod</code>. Then it'll be available to subclasses.</p>
"
38287,2147,2008-09-01T18:54:29Z,38238,4,"<p>Honestly?  I've never found a use for staticmethod or classmethod.  I've yet to see an operation that can't be done using a global function or an instance method.</p>

<p>It would be different if python used private and protected members more like Java does.  In Java, I need a static method to be able to access an instance's private members to do stuff.  In Python, that's rarely necessary.</p>

<p>Usually, I see people using staticmethods and classmethods when all they really need to do is use python's module-level namespaces better.</p>
"
38303,4080,2008-09-01T19:08:25Z,38238,53,"<p>Factory methods (alternative constructors) are indeed a classic example of class methods.</p>

<p>Basically, class methods are suitable anytime you would like to have a method which naturally fits into the namespace of the class, but is not associated with a particular instance of the class.</p>

<p>As an example, in the excellent <a href=""http://pypi.python.org/pypi/Unipath/0.2.1"">unipath</a> module:</p>

<h2>Current directory</h2>

<ul>
<li><code>Path.cwd()</code>
<ul>
<li>Return the actual current directory; e.g., <code>Path(""/tmp/my_temp_dir"")</code>. This is a class method.</li>
</ul></li>
<li><code>.chdir()</code>
<ul>
<li>Make self the current directory.</li>
</ul></li>
</ul>

<p>As the current directory is process wide, the <code>cwd</code> method has no particular instance with which it should be associated.  However, changing the <code>cwd</code> to the directory of a given <code>Path</code> instance should indeed be an instance method.</p>

<p>Hmmm... as <code>Path.cwd()</code> does indeed return a <code>Path</code> instance, I guess it could be considered to be a factory method...</p>
"
38442,2193,2008-09-01T21:14:43Z,38435,1,"<p>My solution to this, that I hope can be bettered, is to use Oracle to explicitly convert the TIMESTAMP into a string:</p>

<pre><code>cursor.execute(""SELECT TO_CHAR(WhenAdded, 'YYYY-MM-DD HH:MI:SSAM') FROM Log"")
</code></pre>

<p>This works, but isn't portable. I'd like to use the same Python script against a SQL Server database, so an Oracle-specific solution (such as TO_CHAR) won't work.</p>
"
38513,2600,2008-09-01T22:03:17Z,38508,7,"<p>Returning a tuple is the usual way to do this in Python.</p>
"
38514,3694,2008-09-01T22:03:41Z,38508,14,"<p>Return a tuple.</p>

<pre><code>def f(x):
    # do stuff
    return (True, modified_string)

success, modified_string = f(something)
</code></pre>
"
38516,3560,2008-09-01T22:04:02Z,38508,105,"<pre><code>def f(in_str):
    out_str = in_str.upper()
    return True, out_str # Creates tuple automatically

succeeded, b = f(""a"") # Automatic tuple unpacking
</code></pre>
"
38524,2147,2008-09-01T22:09:00Z,38508,27,"<p>Why not throw an exception if the operation wasn't successful?  Personally, I tend to be of the opinion that if you need to return more than one value from a function, you should reconsider if you're doing things the right way or use an object.</p>

<p>But more directly to the point, if you throw an exception, you're forcing them to deal with the problem.  If you try to return a value that indicates failure, it's very well possible somebody could not check the value and end up with some potentially hard to debug errors.</p>
"
38646,1157,2008-09-02T00:11:49Z,37486,0,"<p>Looking at the amount of sense people are demonstrating in other answers here, I'd say that using a regex probably isn't the best idea for your situation. Go for something tried and tested, and treat my previous answer as a demonstration that regexes need not be <em>that</em> scary.</p>
"
38718,3154,2008-09-02T02:33:57Z,38435,2,"<p>I believe this is a bug in the Oracle ODBC driver. Basically, the Oracle ODBC driver does not support the <code>TIMESTAMP WITH (LOCAL) TIME ZONE</code> data types, only the <code>TIMESTAMP</code> data type. As you have discovered, one workaround is in fact to use the <code>TO_CHAR</code> method.</p>

<p>In your example you are not actually reading the time zone information. If you have control of the table you could convert it to a straight <code>TIMESTAMP</code> column. If you don't have control over the table, another solution may be to create a view that converts from <code>TIMESTAMP WITH TIME ZONE</code> to <code>TIMESTAMP</code> via a string - sorry, I don't know if there is a way to convert directly from <code>TIMESTAMP WITH TIME ZONE</code> to <code>TIMESTAMP</code>.</p>
"
38760,3286,2008-09-02T03:15:49Z,38508,3,"<p>Throwing an exception for failure is one good way to proceed, and if you're returning a lot of different values, you can return a tuple.  For the specific case you're citing, I often take an intermediate approach: return the modified string on success, and return None on failure.  I'm enough of an unreconstructed C programmer to want to return a NULL pointer to char on failure.</p>

<p>If I were writing a routine to be used as part of a larger library and consumed by other developers, I'd throw an exception on failure.  When I'm eating my own dogfood, I'll probably return different types and test on return.</p>
"
38762,3286,2008-09-02T03:20:30Z,36932,13,"<p>davidg recommends using dicts.  I'd go one step further and use sets:</p>

<pre><code>months = set('January', 'February', ..., 'December')
</code></pre>

<p>Now you can test whether a value matches one of the values in the set like this:</p>

<pre><code>if m in months:
</code></pre>

<p>like dF, though, I usually just use string constants in place of enums.</p>
"
38916,3207,2008-09-02T06:10:58Z,38601,141,"<p>The growing complexity of this answer over time, and the many hacks required, probably ought to caution you against doing this at all. It's relying on undocumented internal implementation details of the admin, is likely to break again in future versions of Django, and is no easier to implement than just finding another JS calendar widget and using that.</p>

<p>That said, here's what you have to do if you're determined to make this work:</p>

<ol>
<li><p>Define your own ModelForm subclass for your model (best to put it in forms.py in your app), and tell it to use the AdminDateWidget / AdminTimeWidget / AdminSplitDateTime (replace 'mydate' etc with the proper field names from your model):</p>

<pre><code>from django import forms
from my_app.models import Product
from django.contrib.admin import widgets                                       

class ProductForm(forms.ModelForm):
    class Meta:
        model = Product
    def __init__(self, *args, **kwargs):
        super(ProductForm, self).__init__(*args, **kwargs)
        self.fields['mydate'].widget = widgets.AdminDateWidget()
        self.fields['mytime'].widget = widgets.AdminTimeWidget()
        self.fields['mydatetime'].widget = widgets.AdminSplitDateTime()
</code></pre></li>
<li><p>Change your URLconf to pass 'form_class': ProductForm instead of 'model': Product to the generic create_object view (that'll mean ""from my_app.forms import ProductForm"" instead of ""from my_app.models import Product"", of course).</p></li>
<li><p>In the head of your template, include {{ form.media }} to output the links to the Javascript files.</p></li>
<li><p>And the hacky part: the admin date/time widgets presume that the i18n JS stuff has been loaded, and also require core.js, but don't provide either one automatically.  So in your template above {{ form.media }} you'll need:</p>

<pre><code>&lt;script type=""text/javascript"" src=""/my_admin/jsi18n/""&gt;&lt;/script&gt;
&lt;script type=""text/javascript"" src=""/media/admin/js/core.js""&gt;&lt;/script&gt;
</code></pre>

<p>You may also wish to use the following admin CSS (thanks <a href=""http://stackoverflow.com/questions/38601/using-django-time-date-widgets-in-custom-form/719583#719583"">Alex</a> for mentioning this):</p>

<pre><code>&lt;link rel=""stylesheet"" type=""text/css"" href=""/media/admin/css/forms.css""/&gt;
&lt;link rel=""stylesheet"" type=""text/css"" href=""/media/admin/css/base.css""/&gt;
&lt;link rel=""stylesheet"" type=""text/css"" href=""/media/admin/css/global.css""/&gt;
&lt;link rel=""stylesheet"" type=""text/css"" href=""/media/admin/css/widgets.css""/&gt;
</code></pre></li>
</ol>

<p>This implies that Django's admin media (ADMIN_MEDIA_PREFIX) is at /media/admin/ - you can change that for your setup.  Ideally you'd use a context processor to pass this values to your template instead of hardcoding it, but that's beyond the scope of this question.</p>

<p>This also requires that the URL /my_admin/jsi18n/ be manually wired up to the django.views.i18n.javascript_catalog view (or null_javascript_catalog if you aren't using I18N).  You have to do this yourself instead of going through the admin application so it's accessible regardless of whether you're logged into the admin (thanks <a href=""http://stackoverflow.com/questions/38601/using-django-time-date-widgets-in-custom-form/408230#408230"">Jeremy</a> for pointing this out).  Sample code for your URLconf:</p>

<pre><code>(r'^my_admin/jsi18n', 'django.views.i18n.javascript_catalog'),
</code></pre>

<p>Lastly, if you are using Django 1.2 or later, you need some additional code in your template to help the widgets find their media:</p>

<pre><code>{% load adminmedia %} /* At the top of the template. */

/* In the head section of the template. */
&lt;script type=""text/javascript""&gt;
window.__admin_media_prefix__ = ""{% filter escapejs %}{% admin_media_prefix %}{% endfilter %}"";
&lt;/script&gt;
</code></pre>

<p>Thanks <a href=""http://stackoverflow.com/questions/38601/using-django-time-date-widgets-in-custom-form/2818128#2818128"">lupefiasco</a> for this addition.</p>
"
38989,893,2008-09-02T07:49:27Z,38987,25,"<pre><code>x = {'a':1, 'b': 2}
y = {'b':10, 'c': 11}
z = dict(x.items() + y.items())
print z
</code></pre>

<p>For items with keys in both dictionaries ('b'), you can control which one ends up in the output by putting that one last.</p>
"
38990,2900,2008-09-02T07:50:12Z,38987,1292,"<p>In your case, what you can do is:</p>

<pre><code>z = dict(x.items() + y.items())
</code></pre>

<p>This will, as you want it, put the final dict in <code>z</code>, and make the value for key <code>b</code> be properly overridden by the second (<code>y</code>) dict's value:</p>

<pre><code>&gt;&gt;&gt; x = {'a':1, 'b': 2}
&gt;&gt;&gt; y = {'b':10, 'c': 11}
&gt;&gt;&gt; z = dict(x.items() + y.items())
&gt;&gt;&gt; z
{'a': 1, 'c': 11, 'b': 10}
</code></pre>

<p>If you use Python 3, it is only a little more complicated.  To create <code>z</code>:</p>

<pre><code>&gt;&gt;&gt; z = dict(list(x.items()) + list(y.items()))
&gt;&gt;&gt; z
{'a': 1, 'c': 11, 'b': 10}
</code></pre>
"
39062,2018,2008-09-02T09:02:34Z,35634,2,"<p>You could also use <code>__id__</code>. This gives you the objects internal ID number, which is always unique. To check if to objects are the same, try</p>

<blockquote>
  <p><code>a.__id__ = b.__id__</code></p>
</blockquote>

<p>This is how Ruby's standard library does it as far as I can tell (see <code>group_by</code> and others).</p>
"
39089,267,2008-09-02T09:24:20Z,39086,2,"<p>Create a new file, copy lines from the old to the new, and do the replacing before you write the lines to the new file.</p>
"
39110,4059,2008-09-02T09:42:21Z,39086,111,"<p>I guess something like this should do it. It basically writes the content to a new file and replaces the old file with the new file:</p>

<pre><code>from tempfile import mkstemp
from shutil import move
from os import remove, close

def replace(file_path, pattern, subst):
    #Create temp file
    fh, abs_path = mkstemp()
    with open(abs_path,'w') as new_file:
        with open(file_path) as old_file:
            for line in old_file:
                new_file.write(line.replace(pattern, subst))
    close(fh)
    #Remove original file
    remove(file_path)
    #Move new file
    move(abs_path, file_path)
</code></pre>
"
39113,3590,2008-09-02T09:42:57Z,39086,8,"<p>As lassevk suggests, write out the new file as you go, here is some example code:</p>

<pre><code>fin = open(""a.txt"")
fout = open(""b.txt"", ""wt"")
for line in fin:
    fout.write( line.replace('foo', 'bar') )
fin.close()
fout.close()
</code></pre>
"
39295,2384,2008-09-02T11:43:45Z,39104,4,"<p>That's probably the way to do it, without resorting to something more advanced like using setuptools to install the files where they belong.</p>

<p>Notice there's a problem with that approach, because on OSes with real a security framework (UNIXes, etc.) the user running your script might not have the rights to access the DB in the system directory where it gets installed.</p>
"
39437,188,2008-09-02T13:00:46Z,38987,472,"<p>An alternative:</p>

<pre><code>z = x.copy()
z.update(y)
</code></pre>
"
39659,2603,2008-09-02T14:26:07Z,39104,14,"<p>Try using pkg_resources, which is part of setuptools (and available on all of the pythons I have access to right now):</p>

<pre><code>&gt;&gt;&gt; import pkg_resources
&gt;&gt;&gt; pkg_resources.resource_ filename(__name__, ""foo.config"")
'foo.config'
&gt;&gt;&gt; pkg_resources.resource_filename('tempfile', ""foo.config"")
'/usr/lib/python2.4/foo.config'
</code></pre>

<p>There's more discussion about using pkg_resources to get resources on the <a href=""http://peak.telecommunity.com/DevCenter/PythonEggs#accessing-package-resources"">eggs</a> page and the <a href=""http://peak.telecommunity.com/DevCenter/PkgResources"">pkg_resources</a> page.</p>

<p>Also note, where possible it's probably advisable to use pkg_resources.resource_stream or pkg_resources.resource_string because if the package is part of an egg, resource_filename will copy the file to a temporary directory.</p>
"
39755,2979,2008-09-02T15:12:12Z,35805,11,"<pre><code>class A:
    def _ _init_ _(self):
        self.name = 'A'
a = A()
</code></pre>

<p>Creates an attribute on the object instance a of type A and it can therefore be found in: <code>a.__dict__</code></p>

<pre><code>class B:
    name = 'B'
b = B()
</code></pre>

<p>Creates an attribute on the class B and the attribute can be found in <code>B.__dict__</code> alternatively if you have an instance b of type B you can see the class level attributes in <code>b.__class__.__dict__</code></p>
"
39760,2900,2008-09-02T15:13:44Z,39663,7,"<p>It's an often-asked question.  There's an <a href=""http://code.activestate.com/recipes/113799/"">ASPN Cookbook</a> entry on it that has served me in the past.</p>

<p>And there is an <a href=""http://wiki.python.org/moin/BitManipulation"">extensive page of requirements one person would like to see from a module doing this.</a></p>
"
39858,3207,2008-09-02T15:52:07Z,38987,209,"<p>Another, more concise, option:</p>

<pre><code>z = dict(x, **y)
</code></pre>

<p><strong>Note</strong>: this has become a popular answer, but it is important to point out that if <code>y</code> has any non-string keys, the fact that this works at all is an abuse of a CPython implementation detail, and it does not work in Python 3, or in PyPy, IronPython, or Jython. Also, <a href=""http://mail.python.org/pipermail/python-dev/2010-April/099459.html"">Guido is not a fan</a>. So I can't recommend this technique for forward-compatible or cross-implementation portable code, which really means it should be avoided entirely.</p>
"
39865,3886,2008-09-02T15:58:10Z,39847,0,"<p>You know, you should look at static linking.</p>

<p>These days, we all have HUGE hard drives, and a few extra megabytes (for carrying around libc and what not) is really not that big a deal anymore. </p>

<p>You could also try running your applications in chroot() jails and distributing those.</p>
"
39871,4272,2008-09-02T15:59:52Z,39847,0,"<p>Depending on your mix os OSes, you might be better off creating packages for each class of system.</p>

<p>Alternatively, if they all share the same ABI and hardware architecture, you could also compile static binaries.</p>
"
39878,3886,2008-09-02T16:03:04Z,39847,1,"<p>Also, you could use autoconf and distribute your application in source form only. :)</p>
"
39982,3666,2008-09-02T16:36:28Z,39960,4,"<p>Well, I don't think that there is something like that in js. You can always use eval instead of locals(). Like this: </p>

<pre><code>eval(s+""()"");
</code></pre>

<p>You just have to know that actually function <em>foo</em> exists.</p>

<p><strong>Edit:</strong></p>

<p>Don't use eval:) Use:</p>

<pre><code>var functionName=""myFunctionName"";
window[functionName]();
</code></pre>
"
39992,1265,2008-09-02T16:41:56Z,39960,0,"<p>AFAIK, no. If you just want to check the existence of a given variable, you can do it by testing for it, something like this:</p>

<pre><code>if (foo) foo();
</code></pre>
"
40012,811,2008-09-02T16:50:34Z,39960,3,"<p>I seem to remember Brendan Eich commented on this in a recent podcast; if i recall correctly, it's not being considered, as it adds unreasonable restrictions to optimization. He compared it to the <code>arguments</code> local in that, while useful for varargs, its very existence removes the ability to guess at what a function will touch just by looking at its definition. </p>

<p>BTW: i believe JS <em>did</em> have support for accessing locals through the arguments local at one time - <a href=""http://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Functions/arguments"" rel=""nofollow"">a quick search</a> shows this has been deprecated though.</p>
"
40035,4257,2008-09-02T17:00:12Z,39960,0,"<p>@e-bartek, I think that window[functionName] won't work if you in some closure, and the function name is local to that closure.  For example:</p>

<pre><code>function foo() {
    var bar = function () {
        alert('hello world');
    };
    var s = 'bar';
    window[s](); // this won't work
}
</code></pre>

<p>In this case, s is 'bar', but the function 'bar' only exists inside the scope of the function 'foo'.  It is not defined in the window scope.</p>

<p>Of course, this doesn't really answer the original question, I just wanted to chime in on this response.  I don't believe there is a way to do what the original question asked.</p>
"
40067,3666,2008-09-02T17:14:25Z,39960,0,"<p>@pkaeding</p>

<p>Yes, you're right. <em>window[functionName]()</em> doesn't work in this case, but <em>eval</em> does. If I needed something like this, I'd create my own object to keep those functions together.</p>

<pre><code>var func = {};
func.bar = ...;
var s = ""bar"";
func[s]();
</code></pre>
"
40069,3207,2008-09-02T17:15:23Z,39929,8,"<p>I think <a href=""http://www.gnupg.org/related_software/gpgme/"" rel=""nofollow"">GPGME</a> and the <a href=""http://pyme.sourceforge.net/"" rel=""nofollow"">PyMe Python wrapper</a> should do what you need.</p>
"
40173,473,2008-09-02T18:01:29Z,39960,13,"<ul>
<li><p>locals() - No. </p></li>
<li><p>globals() - Yes.</p></li>
</ul>

<p><code>window</code> is a reference to the global scope, like <code>globals()</code> in python.</p>

<pre><code>globals()[""foo""]
</code></pre>

<p>is the same as:</p>

<pre><code>window[""foo""]
</code></pre>
"
40367,3286,2008-09-02T19:29:07Z,39847,2,"<p>Launching a Python interpreter instance just to select the right binary to run would be much heavier than you need.  I'd distribute a shell .rc file which provides aliases.</p>

<p>In /shared/bin, you put the various binaries: /shared/bin/toolname-mac, /shared/bin/toolname-debian-x86, /shared/bin/toolname-netbsd-dreamcast, etc.  Then, in the common shared shell .rc file, you put the logic to set the aliases according to platform, so that on OSX, it gets alias toolname=/shared/bin/toolname-mac, and so forth.</p>

<p>This won't work as well if you're adding new tools all the time, because the users will need to reload the aliases.</p>

<p>I wouldn't recommend distributing tools this way, though.  Testing and qualifying new builds of the tools should be taking up enough time and effort that the extra time required to distribute the tools to the users is trivial.  You seem to be optimizing to reduce the distribution time.  Replacing tools that quickly in a live environment is all too likely to result in lengthy and confusing downtime if anything goes wrong in writing and building the tools--especially when subtle cross-platform issues creep in.</p>
"
40593,116,2008-09-02T20:41:33Z,40586,9,"<pre><code>try:
   cursor.execute(""select 1 / 0 from dual"")
except cx_Oracle.DatabaseError, exc:
   error, = exc
   print ""Code:"", error.code
   print ""Message:"", error.message
</code></pre>

<p>This results in the following output:</p>

<pre><code>Code: 1476
Message: ORA-01476: divisor is equal to zero
</code></pre>
"
40715,3458,2008-09-02T21:25:40Z,40705,8,"<p>""env"" simply executes the first thing it finds in the PATH env var. To switch to different python, prepend the directory for that python's executable to the path before invoking your script.</p>
"
40721,3978,2008-09-02T21:28:03Z,40705,2,"<p>If you are running the scripts then you can set your PATH variable to point to a private bin directory first:</p>

<pre><code>$ mkdir ~/bin
$ ln -s `which python2.4` ~/bin/python
$ export PATH=~/bin:$PATH
</code></pre>

<p>Then when you execute your python script it'll use python 2.4. You'll have to change your login scripts to change your PATH.</p>

<p>Alternatively run your python script with the explicit interpreter you want:</p>

<pre><code>$ /path/to/python2.4 &lt;your script&gt;
</code></pre>
"
41550,3355,2008-09-03T12:25:19Z,32044,-2,"<p>I had a similar issue, however I had first implemented the solution using JavaScript, and just afterwards considered how I would have done the same thing in django templates.</p>

<p>I used the serializer utility to turn a list off models into json, and used the json data as a basis for my hierarchy.</p>
"
41555,3171,2008-09-03T12:28:34Z,41547,2,"<p>If you can hook your authentication into the <a href=""http://www.djangoproject.com/documentation/authentication/#authentication-in-web-requests"" rel=""nofollow"">Django authentication scheme</a> you'll be able to use <code>request.user</code>.</p>

<p>I think this should just be a case of calling <code>authenticate()</code> and <code>login()</code> based on the contents of your Cookie.</p>

<p>Edit: @Staale - I always use the <a href=""http://www.djangobook.com/en/1.0/chapter04/"" rel=""nofollow""><code>locals()</code> trick</a> for my context so all my templates can see <code>request</code> and so <code>request.user</code>.  If you're not then I guess it wouldn't be so straightforward.</p>
"
41558,2696,2008-09-03T12:31:58Z,41547,18,"<p>In a more general sense of not having to explicitly set variables in each view, it sounds like you want to look at writing your own <a href=""http://docs.djangoproject.com/en/dev/ref/templates/api/#writing-your-own-context-processors"">context processor</a>.</p>

<p>From the docs:</p>

<blockquote>
  <p>A context processor has a very simple interface: It's just a Python function that takes one argument, an HttpRequest object, and returns a dictionary that gets added to the template context. Each context processor must return a dictionary.</p>
</blockquote>
"
41560,3355,2008-09-03T12:33:31Z,41547,2,"<p>@Dave
To use {{user.username}} in my templates, I will then have to use 
requestcontext rather than just a normal map/hash: <a href=""http://www.djangoproject.com/documentation/templates_python/#subclassing-context-requestcontext"" rel=""nofollow"">http://www.djangoproject.com/documentation/templates_python/#subclassing-context-requestcontext</a></p>

<p>So I guess there are no globals that the template engine checks.</p>

<p>But the RequestContext has some prepopulate classes that I can look into to solve my problems. Thanks.</p>
"
41574,533,2008-09-03T12:42:43Z,41562,3,"<p>A print statement does its IO through ""sys.stdout.write"" so you can override sys.stdout if you want to manipulate the print stream.</p>
"
41707,2600,2008-09-03T13:50:24Z,41701,13,"<p>I'd say that a dictionary is definitely the best way to do it.  It's easily extensible, allows you to give each value a sensible name, and Python has a lot of built-in language features for using and manipulating dictionaries.  If you need to add more fields later, all you need to change is the code that converts the tuple to a dictionary and the code that actually makes use of the new values.</p>

<p>For example:</p>

<pre><code>job={}
job['jobid'], job['label'], job['username']=&lt;querycode&gt;
</code></pre>
"
41709,3002,2008-09-03T13:51:53Z,41701,0,"<p>With a tuple it will always be a hassle to add or change fields. You're right that a dictionary will be much better. </p>

<p>If you want something with slightly friendlier syntax you might want to take a look at the answers <a href=""http://stackoverflow.com/questions/35988/c-like-structures-in-python"" rel=""nofollow"">this question</a> about a simple 'struct-like' object. That way you can pass around an object, say <code>job</code>, and access its fields even more easily than a tuple or dict:</p>

<pre><code>job.jobId, job.username = jobId, username
</code></pre>
"
41721,2696,2008-09-03T13:57:15Z,41701,3,"<p>Perhaps this is overkill for your case, but I would be tempted to create a ""Job"" class that takes the tuple as its constructor argument and has respective properties on it.  I'd then pass instances of this class around instead.</p>
"
41723,3355,2008-09-03T13:59:28Z,41701,2,"<p>I would use a dictionary. You can convert the tuple to a dictionary this way:</p>

<pre><code>values = &lt;querycode&gt;
keys = [""jobid"", ""label"", ""username""]
job = dict([[keys[i], values [i]] for i in xrange(len(values ))])
</code></pre>

<p>This will first create an array [[""jobid"", val1], [""label"", val2], [""username"", val3]] and then convert that to a dictionary. If the result order or count changes, you just need to change the list of keys to match the new result.</p>

<p>PS still fresh on Python myself, so there might be better ways off doing this.</p>
"
41730,2260,2008-09-03T14:02:37Z,41701,-2,"<p>How about this:</p>

<pre><code>class TypedTuple:
    def __init__(self, fieldlist, items):
       self.fieldlist = fieldlist
       self.items = items
    def __getattr__(self, field):
       return self.items[self.fieldlist.index(field)]
</code></pre>

<p>You could then do:</p>

<pre><code>j = TypedTuple([""jobid"", ""label"", ""username""], job)
print j.jobid
</code></pre>

<p>It should be easy to swap <code>self.fieldlist.index(field)</code> with a dictionary lookup later on... just edit your <code>__init__</code> method! Something like Staale does.</p>
"
41822,1412,2008-09-03T14:42:10Z,14281,0,"<p>Isn't it (at least theoretically) possible, to read in the ZIP's Huffman coding and then translate the regexp into the Huffman code? Might this be more efficient than first de-compressing the data, then running the regexp?</p>

<p>(Note: I know it wouldn't be quite that simple: you'd also have to deal with other aspects of the ZIP coding&mdash;file layout, block structures, back-references&mdash;but one imagines this could be fairly lightweight.)</p>

<p>EDIT: Also note that it's probably much more sensible to just use the <code>zipfile</code> solution.</p>
"
41846,2603,2008-09-03T14:51:48Z,41701,13,"<p>@Staale</p>

<p>There is a better way:</p>

<pre><code>job = dict(zip(keys, values))
</code></pre>
"
41921,825,2008-09-03T15:21:20Z,41562,1,"<p>The python <a href=""http://www.python.org/doc/current/lib/module-inspect.html"" rel=""nofollow"">inspect</a> module makes this a lot easier and cleaner. </p>
"
41999,4275,2008-09-03T16:02:06Z,41969,0,"<p>this would probably have to be done manually, or have as a config item since there are many file managers that users may want to use. Providing a way for command options as well.</p>

<p>There might be an function that launches the defaults for kde or gnome in their respective toolkits but I haven't had reason to look for them.</p>
"
42039,1249,2008-09-03T16:15:43Z,41969,0,"<p>You're going to have to do this based on the running window manager. OSX and Windows have a (defacto) standard way because there is only one choice.</p>

<p>You shouldn't need to specify the exact filemanager application, though, this should be possible to do through the wm. I know Gnome does, and it's important to do this in KDE since there are two possible file managers (Konqueror/Dolphin) that may be in use.</p>

<p>I agree that this would be a good thing for freedesktop.org to standardize, although I doubt it will happen unless someone steps up and volunteers to do it.</p>

<p><hr /></p>

<p>EDIT: I wasn't aware of xdg-open. Good to know!</p>
"
42046,4421,2008-09-03T16:18:25Z,41969,7,"<pre><code>os.system('xdg-open ""%s""' % foldername)
</code></pre>

<p><code>xdg-open</code> can be used for files/urls also</p>
"
42048,2600,2008-09-03T16:18:53Z,42034,32,"<ul>
<li>Tuples are used whenever you want to return multiple results from a function.</li>
<li>Since they're immutable, they can be used as keys for a dictionary (lists can't).</li>
</ul>
"
42049,4203,2008-09-03T16:19:14Z,42034,2,"<p>I find them useful when you always deal with two or more objects as a set.</p>
"
42050,2971,2008-09-03T16:20:00Z,42034,1,"<p>A list can always replace a tuple, with respect to functionality (except, apparently, as keys in a dict). However, a tuple can make things go faster. The same is true for, for example, immutable strings in Java -- when will you ever need to be unable to alter your strings? Never!</p>

<p>I just read a decent discussion on limiting what you can do in order to make better programs; <a href=""http://weblog.raganwald.com/2007/03/why-why-functional-programming-matters.html"" rel=""nofollow"">Why Why Functional Programming Matters Matters</a></p>
"
42052,2775,2008-09-03T16:20:59Z,42034,14,"<p>Tuples make good dictionary keys when you need to combine more than one piece of data into your key and don't feel like making a class for it.</p>

<pre><code>a = {}
a[(1,2,""bob"")] = ""hello!""
a[(""Hello"",""en-US"")] = ""Hi There!""
</code></pre>

<p>I've used this feature primarily to create a dictionary with keys that are coordinates of the vertices of a mesh.  However, in my particular case, the exact comparison of the floats involved worked fine which might not always be true for your purposes [in which case I'd probably convert your incoming floats to some kind of fixed-point integer]</p>
"
42055,1043,2008-09-03T16:23:48Z,42034,1,"<p>A tuple is useful for storing multiple values.. As you note a tuple is just like a list that is immutable - e.g. once created you cannot add/remove/swap elements.</p>

<p>One benefit of being immutable is that because the tuple is fixed size it allows the run-time to perform certain optimizations. This is particularly beneficial when a tupple is used in the context of a return value or a parameter to a function.</p>
"
42060,4020,2008-09-03T16:25:17Z,42034,2,"<p>Tuples and lists have the same uses in general. Immutable data types in general have many benefits, mostly about concurrency issues.</p>

<p>So, when you have lists that are not volatile in nature and you need to guarantee that no consumer is altering it, you may use a tuple.</p>

<p>Typical examples are fixed data in an application like company divisions, categories, etc.  If this data change, typically a single producer rebuilts the tuple.</p>
"
42485,2902,2008-09-03T20:20:00Z,42482,2,"<p>Open Office has an <a href=""http://api.openoffice.org/"" rel=""nofollow"">API</a></p>
"
42492,2194,2008-09-03T20:22:23Z,42482,0,"<p>If it is Word 2007 docx, you could unzip it and parse the XML files that are contained inside.</p>
"
42516,2846,2008-09-03T20:32:40Z,40705,4,"<p>Pretty hackish solution - if your check fails, use this function (which probably could be significantly improved) to determine the best interpreter available, determine if it is acceptable, and if so relaunch your script with os.system or something similar and your sys.argv using the new interpreter.</p>

<pre><code>import os
import glob
def best_python():
    plist = []
    for i in os.getenv(""PATH"").split("":""):
        for j in glob.glob(os.path.join(i, ""python2.[0-9]"")):
             plist.append(os.path.join(i, j))
    plist.sort()
    plist.reverse()
    if len(plist) == 0: return None
    return plist[0]
</code></pre>
"
42597,3051,2008-09-03T21:08:02Z,42581,75,"<p>Look at the definition of <a href=""http://docs.python.org/library/re.html#re.sub""><code>re.sub</code></a>:</p>

<pre><code>sub(pattern, repl, string[, count])
</code></pre>

<p>The 4th argument is the count, you are using <code>re.MULTILINE</code> (which is 8) as the count, not as a flag.</p>

<p>You have to compile your regex if you wish to use flags.</p>

<pre><code>re.sub(re.compile('^//', re.MULTILINE), '', s)
</code></pre>

<p>A <code>flags</code> argument was added in Python 2.7, so the full definition is now:</p>

<pre><code>re.sub(pattern, repl, string[, count, flags])
</code></pre>

<p>Which means that:</p>

<pre><code>re.sub('^//', '', s, flags=re.MULTILINE)
</code></pre>

<p>works.</p>
"
42689,3446,2008-09-03T21:52:46Z,27567,4,"<p>This document seems to go into quite a bit of detail (and I think a complete description is out of scope for a stackoverflow answer):</p>

<ul>
<li><a href=""http://codespeak.net/pypy/dist/pypy/doc/translation.html"" rel=""nofollow"">http://codespeak.net/pypy/dist/pypy/doc/translation.html</a></li>
</ul>

<p>The general idea of translating from one language to another isn't particularly revolutionary, but it has only recently been gaining popularity / applicability in ""real-world"" applications.  <a href=""http://code.google.com/webtoolkit/"" rel=""nofollow"">GWT</a> does this with Java (generating Javascript) and there is a library for translating Haskell into various other languages as well (called <a href=""http://www.haskell.org/haskellwiki/Yhc"" rel=""nofollow"">YHC</a>)</p>
"
42794,3594,2008-09-03T23:07:53Z,40705,0,"<p>@morais: That's an interesting idea, but I think maybe we can take it one step farther. Maybe there's a way to use <a href=""http://pypi.python.org/pypi/virtualenv"" rel=""nofollow"">Ian Bicking's virtualenv</a> to:</p>

<ul>
<li>See if we're running in an acceptable environment to begin with, and if so, do nothing.</li>
<li>Check if there exists a version-specific executable on the <code>PATH</code>, i.e. check if <code>python2.x</code> exists <code>for x in reverse(range(4, 10))</code>. If so, re-run the command with the better interpreter.</li>
<li>If no better interpreter exists, use virtualenv to try and install a newer version of Python from the older version of Python and get any prerequisite packages.</li>
</ul>

<p>I have no idea if virtualenv is capable of this, so I'll go mess around with it sometime soon. :)</p>
"
42997,3560,2008-09-04T01:26:33Z,42950,43,"<p>EDIT: See @<a href=""#43663"">Blair Conrad's answer</a> for a cleaner solution</p>

<p><hr /></p>

<pre><code>&gt;&gt;&gt; import datetime
&gt;&gt;&gt; datetime.date (2000, 2, 1) - datetime.timedelta (days = 1)
datetime.date(2000, 1, 31)
&gt;&gt;&gt;
</code></pre>
"
43088,1199,2008-09-04T02:25:50Z,42950,32,"<p>EDIT: see my other answer. It has a better implementation than this one, which I leave here just in case someone's interested in seeing how one might ""roll your own"" calculator.</p>

<p>@<a href=""#42997"">John Millikin</a> gives a good answer, with the added complication of calculating the first day of the next month.</p>

<p>The following isn't particularly elegant, but to figure out the last day of the month that any given date lives in, you could try:</p>

<pre><code>def last_day_of_month(date):
    if date.month == 12:
        return date.replace(day=31)
    return date.replace(month=date.month+1, day=1) - datetime.timedelta(days=1)

&gt;&gt;&gt; last_day_of_month(datetime.date(2002, 1, 17))
datetime.date(2002, 1, 31)
&gt;&gt;&gt; last_day_of_month(datetime.date(2002, 12, 9))
datetime.date(2002, 12, 31)
&gt;&gt;&gt; last_day_of_month(datetime.date(2008, 2, 14))
datetime.date(2008, 2, 29)
</code></pre>
"
43172,3830,2008-09-04T04:09:00Z,43099,5,"<p>And the answer is like so:</p>

<pre><code>def check_commit_msg(local, master, old_revno, old_revid, new_revno, new_revid):
    branch = local or master
    revision = branch.repository.get_revision(new_revid)
    print revision.message
</code></pre>

<p>local and master are Branch objects, so once you have a revision, it's easy to extract the message.</p>
"
43301,2983,2008-09-04T07:45:26Z,42482,2,"<p>Using the OpenOffice API, and Python, and <a href=""http://www.pitonyak.org/oo.php"" rel=""nofollow"">Andrew Pitonyak's excellent online macro book</a> I managed to do this. Section 7.16.4 is the place to start.</p>

<p>One other tip to make it work without needing the screen at all is to use the Hidden property:</p>

<pre><code>RO = PropertyValue('ReadOnly', 0, True, 0)
Hidden = PropertyValue('Hidden', 0, True, 0)
xDoc = desktop.loadComponentFromURL( docpath,""_blank"", 0, (RO, Hidden,) )
</code></pre>

<p>Otherwise the document flicks up on the screen (probably on the webserver console) when you open it.</p>
"
43312,720,2008-09-04T07:54:57Z,43290,32,"<p>If you need to use something similar to the <code>{% url %}</code> template tag in your code, Django provides the <code>django.core.urlresolvers.reverse()</code>. The <code>reverse</code> function has the following signature:</p>

<pre><code>reverse(viewname, urlconf=None, args=None, kwargs=None)
</code></pre>

<p><a href=""https://docs.djangoproject.com/en/dev/ref/urlresolvers/"">https://docs.djangoproject.com/en/dev/ref/urlresolvers/</a></p>
"
43331,4496,2008-09-04T08:21:31Z,43315,32,"<p>Not currently, currently the only languages available to access the iPhone SDK are C/C++, Objective C and Swift.</p>

<p>There is no technical reason why this could not change in the future but I wouldn't hold your breath for this happening in the short term.</p>

<p>That said, Objective-C and Swift really are not too scary...</p>

<blockquote>
  <h1>2016 edit</h1>
  
  <p>Javascript with NativeScript framework is available to use now.</p>
</blockquote>
"
43358,2794,2008-09-04T08:44:11Z,43315,51,"<p>You can use PyObjC on the iPhone as well, due to the excellent work by Jay Freeman (saurik). See <a href=""http://www.saurik.com/id/5"">iPhone Applications in Python</a>.</p>

<p>Note that this requires a jailbroken iPhone at the moment.</p>
"
43364,3571,2008-09-04T08:52:01Z,42482,8,"<p>I use catdoc or antiword for this, whatever gives the result that is the easiest to parse. I have embedded this in python functions, so it is easy to use from the parsing system (which is written in python).</p>

<pre><code>import os

def doc_to_text_catdoc(filename):
    (fi, fo, fe) = os.popen3('catdoc -w ""%s""' % filename)
    fi.close()
    retval = fo.read()
    erroroutput = fe.read()
    fo.close()
    fe.close()
    if not erroroutput:
        return retval
    else:
        raise OSError(""Executing the command caused an error: %s"" % erroroutput)

# similar doc_to_text_antiword()
</code></pre>

<p>The -w switch to catdoc turns off line wrapping, BTW.</p>
"
43386,720,2008-09-04T09:12:27Z,43368,3,"<p>You should have a look at django and especially its <a href=""http://www.djangoproject.com/documentation/forms/"" rel=""nofollow"">newforms</a> and <a href=""http://docs.djangoproject.com/en/dev/ref/contrib/admin/#ref-contrib-admin"" rel=""nofollow"">admin</a> modules. The newforms module provides a nice possibility to do server side validation with automated generation of error messages/pages for the user. Adding ajax validation is also <a href=""http://lukeplant.me.uk/blog.php?id=1107301681"" rel=""nofollow"">possible</a> </p>
"
43414,3571,2008-09-04T09:42:10Z,43368,1,"<p>I believe that Django models does not support composite primary keys (see <a href=""http://docs.djangoproject.com/en/dev/topics/db/models/#automatic-primary-key-fields"" rel=""nofollow"">documentation</a>). But perhaps you can use SQLAlchemy in Django? A <a href=""http://www.google.com/search?q=sqlalchemy+django"" rel=""nofollow"">google search</a> indicates that you can. I have not used Django, so I don't know.</p>

<p>I suggest you take a look at:</p>

<ul>
<li><a href=""http://toscawidgets.org/"" rel=""nofollow"">ToscaWidgets</a></li>
<li><a href=""http://code.google.com/p/dbsprockets/"" rel=""nofollow"">DBSprockets</a>, including <a href=""http://code.google.com/p/dbsprockets/wiki/DBMechanic"" rel=""nofollow"">DBMechanic</a></li>
<li><a href=""http://www.checkandshare.com/catwalk/"" rel=""nofollow"">Catwalk</a>. Catwalk is an application for TurboGears 1.0 that uses SQLObject, not SQLAlchemy. Also check out this <a href=""http://www.checkandshare.com/blog/?p=41"" rel=""nofollow"">blog post</a> and <a href=""http://www.checkandshare.com/CATWALK2/lview/index.html"" rel=""nofollow"">screencast</a>.</li>
<li><a href=""http://docs.turbogears.org/1.0/DataController"" rel=""nofollow"">FastData</a>. Also uses SQLObject.</li>
<li><a href=""http://code.google.com/p/formalchemy/"" rel=""nofollow"">formalchemy</a></li>
<li><a href=""http://rumdemo.toscawidgets.org/"" rel=""nofollow"">Rum</a></li>
</ul>

<p>I do not have any deep knowledge of any of the projects above. I am just in the process of trying to add something similar to one of my own applications as what the original question mentions. The above list is simply a list of interesting projects that I have stumbled across.</p>

<p>As to web application frameworks for Python, I recommend TurboGears 2. Not that I have any experience with any of the other frameworks, I just like TurboGears...</p>

<p>If the original question's author finds a solution that works well, please update or answer this thread.</p>
"
43588,3171,2008-09-04T12:12:20Z,43580,53,"<p>The <a href=""https://docs.python.org/library/mimetypes.html"">mimetypes module</a> in the standard library will determine/guess the MIME type from a file extension.</p>

<p>If users are uploading files the HTTP post will contain the MIME type of the file alongside the data.  For example, Django makes this data available as an attribute of the <a href=""https://docs.djangoproject.com/en/dev/topics/http/file-uploads/#uploadedfile-objects"">UploadedFile</a> object.</p>
"
43616,145,2008-09-04T12:22:55Z,43580,5,"<p>You didn't state what web server you were using, but Apache has a nice little module called <a href=""http://httpd.apache.org/docs/1.3/mod/mod_mime_magic.html"" rel=""nofollow"">Mime Magic</a> which it uses to determine the type of a file when told to do so.  It reads some of the file's content and tries to figure out what type it is based on the characters found.  And as <a href=""http://stackoverflow.com/questions/43580/how-to-find-the-mime-type-of-a-file-in-python#43588"" rel=""nofollow"">Dave Webb Mentioned</a> the <a href=""http://docs.python.org/lib/module-mimetypes.html"" rel=""nofollow"">MimeTypes Module</a> under python will work, provided an extension is handy.</p>

<p>Alternatively, if you are sitting on a UNIX box you can use <code>sys.popen('file -i ' + fileName, mode='r')</code> to grab the MIME type.  Windows should have an equivalent command, but I'm unsure as to what it is. </p>
"
43663,1199,2008-09-04T12:44:12Z,42950,552,"<p>I didn't notice this earlier when I was looking at the <a href=""https://docs.python.org/2/library/calendar.html"">documentation for the calendar module</a>, but a method called <a href=""http://docs.python.org/library/calendar.html#calendar.monthrange"">monthrange</a> provides this information:</p>

<blockquote>
  <p><b>monthrange(year, month)</b><br>
  &nbsp;&nbsp;&nbsp;&nbsp;Returns weekday of first day of the month and number of days in month, for the specified year and month. </p>
</blockquote>

<pre><code>&gt;&gt;&gt; import calendar
&gt;&gt;&gt; calendar.monthrange(2002,1)
(1, 31)
&gt;&gt;&gt; calendar.monthrange(2008,2)
(4, 29)
&gt;&gt;&gt; calendar.monthrange(2100,2)
(0, 28)
</code></pre>

<p>so:</p>

<pre><code>calendar.monthrange(year, month)[1]
</code></pre>

<p>seems like the simplest way to go.</p>

<p>Just to be clear, <code>monthrange</code> supports leap years as well:</p>

<pre><code>&gt;&gt;&gt; from calendar import monthrange
&gt;&gt;&gt; monthrange(2012, 2)
(2, 29)
</code></pre>

<p><a href=""http://stackoverflow.com/questions/42950/get-last-day-of-the-month-in-python#43088"">My previous answer</a> still works, but is clearly suboptimal.</p>
"
43736,3171,2008-09-04T13:17:38Z,43709,2,"<p>If you've never done any CGI programming before I think it would be worth doing one project - perhaps just a sample play site just for yourself - using the DIY approach.  You'll learn a lot more about how all the various parts work than you would by using a framework.  This will help in you design and debug and so on all your future web applications however you write them.</p>

<p>Personally I now use <a href=""http://www.djangoproject.com/"" rel=""nofollow"">Django</a>.  The real benefit is very fast application deployment.  The object relational mapping gets things moving fast and the template library is a joy to use.  Also the admin interface gives you basic CRUD screens for all your objects so you don't need to write any of the ""boring"" stuff.</p>

<p>The downside of using an ORM based solution is that if you do want to handcraft some SQL, say for performance reasons, it much harder than it would have been otherwise, although still very possible. </p>
"
43753,3571,2008-09-04T13:24:55Z,43709,7,"<p>If you decide to go with a framework that is WSGI-based (for instance <a href=""http://www.turbogears.org/2.0"" rel=""nofollow"">TurboGears</a>), I would recommend you go through the excellent article <a href=""http://pythonpaste.org/webob/do-it-yourself.html"" rel=""nofollow"">Another Do-It-Yourself Framework</a> by Ian Bicking.</p>

<p>In the article, he builds a simple web application framework from scratch.</p>

<p>Also, check out the video <a href=""http://www.vimeo.com/3258566"" rel=""nofollow"">Creating a web framework with WSGI</a> by Kevin Dangoor. Dangoor is the founder of the TurboGears project.</p>
"
43773,2147,2008-09-04T13:35:45Z,43709,17,"<p>CGI is great for low-traffic websites, but it has some performance problems for anything else.  This is because every time a request comes in, the server starts the CGI application in its own process.  This is bad for two reasons:  1)  Starting and stopping a process can take time and 2) you can't cache anything in memory.  You can go with FastCGI, but I would argue that you'd be better off just writing a straight <a href=""http://www.python.org/dev/peps/pep-0333/"">WSGI</a> app if you're going to go that route (the way WSGI works really isn't a whole heck of a lot different from CGI).</p>

<p>Other than that, your choices are for the most part how much you want the framework to do.  You can go with an all singing, all dancing framework like Django or Pylons.  Or you can go with a mix-and-match approach (use something like CherryPy for the HTTP stuff, SQLAlchemy for the database stuff, paste for deployment, etc).  I should also point out that most frameworks will also let you switch different components out for others, so these two approaches aren't necessarily mutually exclusive.</p>

<p>Personally, I dislike frameworks that do too much magic for me and prefer the mix-and-match technique, but I've been told that I'm also completely insane.  :)</p>

<p>How much web programming experience do you have?  If you're a beginner, I say go with Django.  If you're more experienced, I say to play around with the different approaches and techniques until you find the right one.</p>
"
43780,4165,2008-09-04T13:40:59Z,43775,9,"<p>Your Python interpreter is correct.
One (stupid) way of calculating a modulus is to subtract or add the modulus until the resulting value is between 0 and (modulus − 1).</p>

<p>e.g.:
13 mod 5 = (13 − 5) mod 5 = (13 − 10) mod 5 = 3</p>

<p>or in your case: −2 mod 5 = (−2 + 5) mod 5 = 3</p>
"
43781,2147,2008-09-04T13:41:04Z,43775,0,"<p>Well, -2 divided by 5 would be 0 with a remainder of 3.  I don't believe that should be very platform dependent, but I've seen stranger things.</p>
"
43782,863,2008-09-04T13:41:19Z,43775,0,"<p>It is indeed 3.  In <a href=""http://en.wikipedia.org/wiki/Modular_arithmetic"" rel=""nofollow"">modular arithmetic</a>, a modulus is simply the remainder of a division, and the remainder of -2 divided by 5 is 3.</p>
"
43783,1353,2008-09-04T13:41:25Z,43775,11,"<p>The result of the modulus operation on negatives seems to be programming language dependent and here is a listing <a href=""http://en.wikipedia.org/wiki/Modulo_operation"">http://en.wikipedia.org/wiki/Modulo_operation</a></p>
"
43785,797,2008-09-04T13:41:40Z,43775,4,"<p>Well, 0 % 5 should be 0, right?</p>

<p>-1 % 5 should be 4 because that's the next allowed digit going in the reverse direction (i.e., it can't be 5, since that's out of range).</p>

<p>And following along by that logic, -2 must be 3.</p>

<p>The easiest way to think of how it will work is that you keep adding or subtracting 5 until the number falls between 0 (inclusive) and 5 (exclusive).</p>

<p>I'm not sure about machine dependence - I've never seen an implementation that was, but I can't say it's never done.</p>
"
43794,1968,2008-09-04T13:46:23Z,43775,15,"<p>By the way: most programming languages would disagree with Python and give the result <code>-2</code>. Depending on the interpretation of modulus this is correct. However, the most agreed-upon mathematical definition states that the modulus of <em>a</em> and <em>b</em> is the (strictly positive) rest <em>r</em> of the division of <em>a</em> / <em>b</em>. More precisely, 0 &lt;= <em>r</em> &lt; <em>b</em> by definition.</p>
"
43799,976,2008-09-04T13:53:07Z,43775,0,"<p>The result depends on the language. Python returns the sign of the divisor, where for example c# returns the sign of the dividend (ie. -2 % 5 returns -2 in c#).</p>
"
43835,1694,2008-09-04T14:11:54Z,43709,12,"<p>The simplest web program is a CGI script, which is basically just a program whose standard output is redirected to the web browser making the request.  In this approach, every page has its own executable file, which must be loaded and parsed on every request.  This makes it really simple to get something up and running, but scales badly both in terms of performance and organization.  So when I need a very dynamic page very quickly that won't grow into a larger system, I use a CGI script.</p>

<p>One step up from this is embedding your Python code in your HTML code, such as with PSP.  I don't think many people use this nowadays, since modern template systems have made this pretty obsolete.  I worked with PSP for awhile and found that it had basically the same organizational limits as CGI scripts (every page has its own file) plus some whitespace-related annoyances from trying to mix whitespace-ignorant HTML with whitespace-sensitive Python.</p>

<p>The next step up is very simple web frameworks such as web.py, which I've also used.  Like CGI scripts, it's very simple to get something up and running, and you don't need any complex configuration or automatically generated code.  Your own code will be pretty simple to understand, so you can see what's happening.  However, it's not as feature-rich as other web frameworks; last time I used it, there was no session tracking, so I had to roll my own.  It also has ""too much magic behavior"" to quote Guido (""upvars(), bah"").</p>

<p>Finally, you have feature-rich web frameworks such as Django.  These will require a bit of work to get simple Hello World programs working, but every major one has a great, well-written tutorial (especially Django) to walk you through it.  I highly recommend using one of these web frameworks for any real project because of the convenience and features and documentation, etc.</p>

<p>Ultimately you'll have to decide what you prefer.  For example, frameworks all use template languages (special code/tags) to generate HTML files.  Some of them such as Cheetah templates let you write arbitrary Python code so that you can do anything in a template.  Others such as Django templates are more restrictive and force you to separate your presentation code from your program logic.  It's all about what you personally prefer.</p>

<p>Another example is URL handling; some frameworks such as Django have you define the URLs in your application through regular expressions.  Others such as CherryPy automatically map your functions to urls by your function names.  Again, this is a personal preference.</p>

<p>I personally use a mix of web frameworks by using CherryPy for my web server stuff (form parameters, session handling, url mapping, etc) and Django for my object-relational mapping and templates.  My recommendation is to start with a high level web framework, work your way through its tutorial, then start on a small personal project.  I've done this with all of the technologies I've mentioned and it's been really beneficial.  Eventually you'll get a feel for what you prefer and become a better web programmer (and a better programmer in general) in the process.</p>
"
43837,NA,2008-09-04T14:12:16Z,43775,0,"<p>One explanation might be that negative numbers are stored using <a href=""http://en.wikipedia.org/wiki/Two%27s_complement"" rel=""nofollow"">2's complement</a>. When the python interpreter tries to do the modulo operation it converts to unsigned value. As such instead of doing (-2) % 5 it actually computes 0xFFFF_FFFF_FFFF_FFFD % 5 which is 3. </p>
"
43863,3002,2008-09-04T14:25:05Z,43775,4,"<p>As explained in other answers, there are many choices for a modulo operation with negative values. In general different languages (and different machine architectures) will give a different result.</p>

<p>According to the <a href=""http://docs.python.org/ref/binary.html"" rel=""nofollow"">Python reference manual</a>,</p>

<blockquote>
  <p>The modulo operator always yields a result with the same sign as its second operand (or zero); the absolute value of the result is strictly smaller than the absolute value of the second operand.</p>
</blockquote>

<p>is the choice taken by Python. Basically modulo is defined so that this always holds:</p>

<pre><code>x == (x/y)*y + (x%y)
</code></pre>

<p>so it makes sense that (-2)%5 = -2 - (-2/5)*5 = 3</p>
"
43916,2543,2008-09-04T14:46:11Z,43775,0,"<p>Be careful not to rely on this mod behavior in C/C++ on all OSes and architectures. If I recall correctly, I tried to rely on C/C++ code like</p>

<pre><code>float x2 = x % n;
</code></pre>

<p>to keep x2 in the range from 0 to n-1 but negative numbers crept in when I would compile on one OS, but things would work fine on another OS. This made for an evil time debugging since it only happened half the time!</p>
"
44094,1447,2008-09-04T16:12:07Z,44084,5,"<p>It's easy, you just add a docstring at the top of the module.</p>
"
44095,1044,2008-09-04T16:12:23Z,44084,33,"<p>For the packages, you can document it in <code>__init__.py</code>.
For the modules, you can add a docstring simply in the module file.</p>

<p>All the information is here: <a href=""http://www.python.org/dev/peps/pep-0257/"">http://www.python.org/dev/peps/pep-0257/</a></p>
"
44098,2600,2008-09-04T16:12:52Z,44084,6,"<p>You do it the exact same way.  Put a string in as the first statement in the module.</p>
"
44381,4558,2008-09-04T18:20:21Z,44352,9,"<p>Here's one way to do it:</p>

<pre><code>import inspect

def get_subclasses(mod, cls):
    """"""Yield the classes in module ``mod`` that inherit from ``cls``""""""
    for name, obj in inspect.getmembers(mod):
        if hasattr(obj, ""__bases__"") and cls in obj.__bases__:
            yield obj
</code></pre>
"
44403,2603,2008-09-04T18:29:59Z,44352,1,"<p>Given the module foo.py</p>

<pre><code>class foo(object): pass
class bar(foo): pass
class baz(foo): pass

class grar(Exception): pass

def find_subclasses(module, clazz):
    for name in dir(module):
        o = getattr(module, name)

        try: 
             if issubclass(o, clazz):
             yield name, o
        except TypeError: pass

&gt;&gt;&gt; import foo
&gt;&gt;&gt; list(foo.find_subclasses(foo, foo.foo))
[('bar', &lt;class 'foo.bar'&gt;), ('baz', &lt;class 'foo.baz'&gt;), ('foo', &lt;class 'foo.foo'&gt;)]
&gt;&gt;&gt; list(foo.find_subclasses(foo, object))
[('bar', &lt;class 'foo.bar'&gt;), ('baz', &lt;class 'foo.baz'&gt;), ('foo', &lt;class 'foo.foo'&gt;), ('grar', &lt;class 'foo.grar'&gt;)]
&gt;&gt;&gt; list(foo.find_subclasses(foo, Exception))
[('grar', &lt;class 'foo.grar'&gt;)]
</code></pre>
"
44512,3446,2008-09-04T19:08:25Z,38987,63,"<p>I wanted something similar, but with the ability to specify how the values on duplicate keys were merged, so I hacked this out (but did not heavily test it).  Obviously this is not a single expression, but it is a single function call.</p>

<pre><code>def merge(d1, d2, merge_fn=lambda x,y:y):
    """"""
    Merges two dictionaries, non-destructively, combining 
    values on duplicate keys as defined by the optional merge
    function.  The default behavior replaces the values in d1
    with corresponding values in d2.  (There is no other generally
    applicable merge strategy, but often you'll have homogeneous 
    types in your dicts, so specifying a merge technique can be 
    valuable.)

    Examples:

    &gt;&gt;&gt; d1
    {'a': 1, 'c': 3, 'b': 2}
    &gt;&gt;&gt; merge(d1, d1)
    {'a': 1, 'c': 3, 'b': 2}
    &gt;&gt;&gt; merge(d1, d1, lambda x,y: x+y)
    {'a': 2, 'c': 6, 'b': 4}

    """"""
    result = dict(d1)
    for k,v in d2.iteritems():
        if k in result:
            result[k] = merge_fn(result[k], v)
        else:
            result[k] = v
    return result
</code></pre>
"
44638,985,2008-09-04T19:55:29Z,43709,1,"<p>OK, rails is actually pretty good, but there is just a little bit too much magic going on in there (from the Ruby world I would much prefer merb to rails). I personally use Pylons, and am pretty darn happy. I'd say (compared to django), that pylons allows you to interchange ints internal parts easier than django does. The downside is that you will have to write more stuff all by youself (like the basic CRUD). </p>

<p>Pros of using a framework:</p>

<ol>
<li>get stuff done quickly (and I mean lighning fast once you know the framework)</li>
<li>everything is compying to standards (which is probably not that easy to achieve when rolling your own)</li>
<li>easier to get something working (lots of tutorials) without reading gazillion articles and docs</li>
</ol>

<p>Cons:</p>

<ol>
<li>you learn less</li>
<li>harder to replace parts (not that much of an issue in pylons, more so with django)</li>
<li>harder to tweak some low-level stuff (like the above mentioned SQLs)</li>
</ol>

<p>From that you can probably devise what they are good for :-) Since you get all the code it is possible to tweak it to fit even the most bizzare situations (pylons supposedly work on the Google app engine now...).</p>
"
44781,305,2008-09-04T21:06:12Z,44778,333,"<pre><code>myList = ['a','b','c','d']
myString = "","".join(myList )
</code></pre>

<p>This won't work if the list contains numbers.</p>

<hr>

<p>As <a href=""http://stackoverflow.com/users/3399/ricardo-reyes"">Ricardo Reyes</a> suggested, if it contains non-string types (such as integers, floats, bools, None) then do:</p>

<pre><code>myList = ','.join(map(str, myList)) 
</code></pre>
"
44788,1480,2008-09-04T21:08:29Z,44778,42,"<p>Why the map/lambda magic? Doesn't this work?</p>

<pre><code>&gt;&gt;&gt;foo = [ 'a', 'b', 'c' ]
&gt;&gt;&gt;print "","".join(foo)
a,b,c
&gt;&gt;&gt;print "","".join([])

&gt;&gt;&gt;print "","".join(['a'])
a
</code></pre>

<p>Edit: @mark-biek points out the case for numbers.
Perhaps the list comprehension:</p>

<pre><code>&gt;&gt;&gt;','.join([str(x) for x in foo])
</code></pre>

<p>is more ""pythonic"".</p>

<p>Edit2:
Thanks for the suggestions. I'll use the generator rather than the list comprehension in the future.</p>

<pre><code>&gt;&gt;&gt;','.join(str(x) for x in foo)
</code></pre>
"
44791,3978,2008-09-04T21:09:33Z,44778,10,"<p>Don't you just want:</p>

<pre><code>"","".join(l)
</code></pre>

<p>Obviously it gets more complicated if you need to quote/escape commas etc in the values. In that case I would suggest looking at the csv module in the standard library:</p>

<p><a href=""https://docs.python.org/library/csv.html"" rel=""nofollow"">https://docs.python.org/library/csv.html</a></p>
"
44794,4618,2008-09-04T21:10:25Z,44778,2,"<p>Unless I'm missing something, <code>','.join(foo)</code> should do what you're asking for.</p>

<pre><code>&gt;&gt;&gt; ','.join([''])
''
&gt;&gt;&gt; ','.join(['s'])
's'
&gt;&gt;&gt; ','.join(['a','b','c'])
'a,b,c'
</code></pre>

<p>(edit:  and as jmanning2k points out, </p>

<pre><code>','.join([str(x) for x in foo])
</code></pre>

<p>is safer and quite Pythonic, though the resulting string will be difficult to parse if the elements can contain commas -- at that point, you need the full power of the <code>csv</code> module, as Douglas points out in his answer.)</p>
"
44842,4435,2008-09-04T21:30:46Z,44834,198,"<p>It's a list of public objects of that module. It overrides the default of hiding everything that begins with an underscore.</p>
"
44843,267,2008-09-04T21:31:16Z,44834,43,"<p>From <a href=""http://effbot.org/pyref/__all__.htm"">(An Unofficial) Python Reference Wiki</a>:</p>

<blockquote>
  <p>The public names defined by a module are determined by checking the module's namespace for a variable named <code>__all__</code>; if defined, it must be a sequence of strings which are names defined or imported by that module. The names given in <code>__all__</code> are all considered public and are required to exist. If <code>__all__</code> is not defined, the set of public names includes all names found in the module's namespace which do not begin with an underscore character (""_""). <code>__all__</code> should contain the entire public API. It is intended to avoid accidentally exporting items that are not part of the API (such as library modules which were imported and used within the module).</p>
</blockquote>
"
44878,720,2008-09-04T21:57:51Z,44778,5,"<p>@jmanning2k using a list comprehension has the downside of creating a new temporary list. The better solution would be using itertools.imap which returns an iterator</p>

<pre><code>from itertools import imap
l = [1, ""foo"", 4 ,""bar""]
"","".join(imap(str, l))
</code></pre>
"
45016,3560,2008-09-05T00:12:41Z,45013,8,"<p>Have you tried View -> Zoom -> Reset on both sites?</p>
"
45126,3002,2008-09-05T02:18:21Z,45122,71,"<p>You need to put</p>

<pre><code>from project import Project
</code></pre>

<p>in <code>controllers/__init__.py</code>.</p>

<p>Note that when <a href=""http://www.python.org/dev/peps/pep-0328/"" rel=""nofollow"">Absolute imports</a> become the default (Python 2.7?), you will want to add a dot before the module name (to avoid collisions with a top-level model named <code>project</code>), i.e.,</p>

<pre><code>from .project import Project
</code></pre>
"
45245,3415,2008-09-05T04:52:09Z,45228,2,"<p>If your asking what I think your asking, you can find them <a href=""http://books.google.com/books?id=vpTAq4dnmuAC&amp;pg=RA1-PA476&amp;lpg=RA1-PA476&amp;dq=Big-O+of+Python+data+structures&amp;source=web&amp;ots=AOM5B5D7yA&amp;sig=deLGb6VrftTpnNYN6fILVbiirXM&amp;hl=en&amp;sa=X&amp;oi=book_result&amp;resnum=7&amp;ct=result#PRA1-PA479,M1"" rel=""nofollow"">Here</a>... page 476 and on.</p>

<p>It's written around optimization techniques for Python; It's mostly Big-O notation of time efficiencies not much memory.</p>
"
45519,3571,2008-09-05T10:36:58Z,45507,6,"<p>Perhaps the following would work:</p>

<ul>
<li>Generate your icon image using PIL</li>
<li>Convert the image to .ico format using the python interface to ImageMagick, <a href=""http://www.imagemagick.org/download/python/"">PythonMagick</a></li>
</ul>

<p>I have not tried this approach. The ImageMagick convert command line program was able to convert a .png file to .ico format, so at least ImageMagick supports the .ico format.</p>
"
45520,3180,2008-09-05T10:38:00Z,45507,2,"<p>I don't know if this applies for all cases, but on WinXP an .ico can be a bmp of size 16x16, 32x32 or 64x64. Just change the extension to ico from bmp and you're ready to go.</p>
"
45538,4702,2008-09-05T11:04:04Z,45228,12,"<p>Raymond D. Hettinger does <a href=""http://www.youtube.com/watch?v=hYUsssClE94"" rel=""nofollow"">an excellent talk</a> (<a href=""http://wenku.baidu.com/view/9c6fb20dcc1755270722089d.html"" rel=""nofollow"">slides</a>) about Python's built-in collections called 'Core Python Containers - Under the Hood'. The version I saw focussed mainly on <code>set</code> and <code>dict</code>, but <code>list</code> was covered too.</p>

<p>There are also some photos of the pertinent slides from EuroPython in <a href=""http://paranoid-engineering.blogspot.com/2008/07/europython-2008-day-3.html"" rel=""nofollow"">a blog</a>.</p>

<p>Here is a summary of my notes on <code>list</code>:</p>

<ul>
<li>Stores items as an array of pointers. Subscript costs O(1) time. Append costs amortized O(1) time. Insert costs O(n) time.</li>
<li>Tries to avoid <code>memcpy</code> when growing by over-allocating. Many small lists will waste a lot of space, but large lists never waste more than about 12.5% to overallocation.</li>
<li>Some operations pre-size. Examples given were <code>range(n)</code>, <code>map()</code>, <code>list()</code>, <code>[None] * n</code>, and slicing.</li>
<li>When shrinking, the array is <code>realloc</code>ed only when it is wasting 50% of space. <code>pop</code> is cheap.</li>
</ul>
"
45564,3571,2008-09-05T11:21:35Z,45500,3,"<p>You could perhaps take a look at the <a href=""http://www.alexmac.cc/tablet-apps/tablet-apps-0.3.1.tar.bz2"" rel=""nofollow"">software</a> described <a href=""http://www.alexmac.cc/tablet-apps/"" rel=""nofollow"">here</a>. It is a gnome applet, written in Python.</p>

<p>From the web site:</p>

<p>""The gnome wacom applet is a small gnome panel applet that shows how much pressure is being applied to your wacom tablet by the current device. Clicking on the panel icon brings up a dialog allowing you to select a different device and check what pressure and tilt information is being recieved from it. This dialog also contains a small drawing test area to give your pen a quick test.""</p>

<p><a href=""http://www.google.com/search?q=wacom+tablet+python"" rel=""nofollow"">Google is your friend</a></p>
"
45832,3978,2008-09-05T13:35:32Z,45507,6,"<p>According to <a href=""http://en.wikipedia.org/wiki/Favicon"">Wikipedia</a> modern browsers can handle favicons in PNG format, so maybe you could just generate that?</p>

<p>Alternatively the <a href=""http://en.wikipedia.org/wiki/ICO_(icon_image_file_format)"">ICO article</a> describes the format...</p>
"
46028,3978,2008-09-05T15:23:13Z,45954,3,"<p>I don't know of any, but if all else fails you could use <a href=""http://docs.python.org/lib/module-ctypes.html"" rel=""nofollow"">ctypes</a> to directly use libdwarf, libelf or libbfd.</p>
"
46201,2603,2008-09-05T16:19:03Z,45228,16,"<p>Checkout the <a href=""http://wiki.python.org/moin/TimeComplexity"">TimeComplexity</a> page on the py dot org wiki. It covers set/dicts/lists/etc at least as far as time complexity goes.</p>
"
46205,NA,2008-09-05T16:19:35Z,45540,1,"<p>I believe you want:</p>

<pre><code>if 'normal' != root.state():
    tkMessageBox.showinfo(""Key you!"", "" "".join(sys.argv[1:]))
</code></pre>
"
46233,2603,2008-09-05T16:29:25Z,44778,6,"<p>@<a href=""#44878"">Peter Hoffmann</a></p>

<p>Using generator expressions has the benefit of also producing an iterator but saves importing itertools. Furthermore, list comprehensions are generally preferred to map, thus, I'd expect generator expressions to be preferred to imap.</p>

<pre><code>&gt;&gt;&gt; l = [1, ""foo"", 4 ,""bar""]
&gt;&gt;&gt; "","".join(str(bit) for bit in l)
'1,foo,4,bar'
</code></pre>
"
46442,736,2008-09-05T18:07:50Z,8154,6,"<p>I think I fixed it. It's turns out I had a simple config error. My ini file read:</p>

<pre><code>sqlalchemy.default.url = [connection string here]
sqlalchemy.pool_recycle = 1800
</code></pre>

<p>The problem is that my <code>environment.py</code> file declared that the engine would only map keys with the prefix: <code>sqlalchemy.default</code> so <code>pool_recycle</code> was ignored.</p>

<p>The solution is to simply change the second line in the ini to:</p>

<pre><code>sqlalchemy.default.pool_recycle = 1800
</code></pre>
"
46780,4725,2008-09-05T20:03:19Z,21934,2,"<p>Reference counting is particularly difficult to do efficiently in a multi-threaded environment. I don't know how you'd even start to do it without getting into hardware assisted transactions or similar (currently) unusual atomic instructions.</p>

<p>Reference counting is easy to implement. JVMs have had a lot of money sunk into competing implementations, so it shouldn't be surprising that they implement very good solutions to very difficult problems. However, it's becoming increasingly easy to target your favourite language at the JVM.</p>
"
47032,4834,2008-09-05T22:54:42Z,44352,4,"<p>Can I suggest that neither of the answers from Chris AtLee and zacherates fulfill the requirements?
I think this modification to zacerates answer is better:</p>

<pre><code>def find_subclasses(module, clazz):
    for name in dir(module):
    	o = getattr(module, name)
    	try:
    		if (o != clazz) and issubclass(o, clazz):
    			yield name, o
    	except TypeError: pass
</code></pre>

<p>The reason I disagree with the given answers is that the first does not produce classes that are a distant subclass of the given class, and the second includes the given class.</p>
"
47201,188,2008-09-06T02:27:45Z,47198,4,"<p>I've not seen a system with less than 2.3 installed for some time.  Mostly 2.4+ is installed by default for most OS I use now.  2.3 is just on an older Solaris machine.  Linux distros tend to have 2.4+, as does OS X.</p>

<p>IIRC, 2.4 has a lot of the features 2.5 does, but usable only with</p>

<pre><code>from __future__ import *
</code></pre>
"
47208,720,2008-09-06T02:44:31Z,47198,6,"<p>As python is in kind of an transition phase towards python 3 with breaking backward compatibility I don't think it is a good idea to go python 3 only. Based on the <a href=""http://www.python.org/dev/peps/pep-3000/#timeline"" rel=""nofollow"">time line</a> there will be at least one or two following releases of the 2.x series after 2.6/3.0 in october.</p>

<p>Beside not having python 3 available on your target platforms, it will take some time until important external python libraries will be ported and usable on python 3.</p>

<p>So as Matthew suggests staying at 2.4/2.5 and keeping the <a href=""http://www.python.org/dev/peps/pep-3000/#compatibility-and-transition"" rel=""nofollow"">transition</a> plan to python 3 in mind is a solid choice.</p>
"
47212,720,2008-09-06T02:49:38Z,47207,2,"<p>If you use <a href=""https://docs.djangoproject.com/en/1.2/topics/http/urls/#naming-url-patterns"" rel=""nofollow"">named url patterns</a> you can do the follwing in your template</p>

<pre><code>{% url create_object %}
</code></pre>
"
47213,680,2008-09-06T02:50:08Z,47207,0,"<p>The preferred way of creating the URL is by adding a <code>get_absolute_url</code> method to your model classes. You can hardcode the path there so you at least get closer to following the KISS philosophy.</p>

<p>You can go further by utilizing the <code>permalink</code> decorator that figures the path based on the urls configuration.</p>

<p>You can read more in the django documentation <a href=""https://docs.djangoproject.com/en/dev/ref/models/instances/#get-absolute-url"" rel=""nofollow"">here</a>.</p>
"
47264,479,2008-09-06T05:25:47Z,47198,1,"<p>You can use different versions of python on each machine. </p>

<p>Coding something new, I would not use anything less than python2.5. You can do <code>apt-get install python2.5</code> on stock debian stable. </p>

<p>For windows, don't really worry about it. It's very easy to install the python2.5 msi. </p>

<p>If the users can't be bothered to do that, you can deploy an executable with py2exe (so simple) and build an installer with inno setup (again simple) then it will behave like a standard windows application and will use its own python dlls, so no need to have python installed. </p>

<p>Like Peter said: keep in mind the transition to 3.0 but don't build on it yet.</p>
"
47266,3560,2008-09-06T05:32:39Z,47253,20,"<p>There shouldn't be any need to use FastCGI. There exists a <a href=""https://github.com/hexdump42/isapi-wsgi"">ISAPI extension for WSGI</a>.</p>
"
47304,1057,2008-09-06T07:22:52Z,47207,15,"<p>You can use <code>get_absolute_url</code>, but that will only work for a particular object.  Since your object hasn't been created yet, it won't work in this case.</p>

<p>You want to use <a href=""https://docs.djangoproject.com/en/1.2/topics/http/urls/#naming-url-patterns"" rel=""nofollow"">named URL patterns</a>.  Here's a quick intro:</p>

<p>Change the line in your urls.py to:</p>

<pre><code>(r'^manage/products/add/$', create_object, {'model': Product, 'post_save_redirect': ''}, ""create-product""),
</code></pre>

<p>Then, in your template you use this to display the URL:</p>

<pre><code>{% url create-product %}
</code></pre>

<p>If you're using Django 1.5 or higher you need this:</p>

<pre><code>{% url 'create-product' %}
</code></pre>

<p>You can do some more powerful things with named URL patterns, they're very handy.  Note that they are only in the development version (and also 1.0).</p>
"
47744,4613,2008-09-06T19:08:14Z,47701,0,"<p>What platform are you attempting this on? Most debuggers allow you to attach to a running process by using the process id.
You can either output the process id via logging or using something like Task Manager.
Once that is achieved it will be possible to inspect individual threads and their call stacks.</p>

<p>EDIT: I don't have any experience with GNU Debugger (GDB), which is cross platform, however I found this <a href=""http://wiki.python.org/moin/DebuggingWithGdb"" rel=""nofollow"">link</a> and it may start you on the right path. It explains how to add debug symbols (handy for reading stack traces) and how to instruct gdb to attach to a running python process.</p>
"
47792,3560,2008-09-06T20:10:59Z,47789,59,"<p>Use list comprehensions when the result needs to be iterated over multiple times, or where speed is paramount. Use generator expressions where the range is large or infinite.</p>
"
47793,3002,2008-09-06T20:11:17Z,47789,89,"<p>Iterating over the <em>generator expression</em> or the <em>list comprehension</em> will do the same thing. However, the <em>list comprehension</em> will create the entire list in memory first while the <em>generator expression</em> will create the items on the fly, so you are able to use it for very large (and also infinite!) sequences.</p>
"
47826,1694,2008-09-06T20:54:08Z,47789,168,"<p>John's answer is good (that list comprehensions are better when you want to iterate over something multiple times).  However, it's also worth noting that you should use a list if you want to use any of the list methods.  For example, the following code won't work:</p>

<pre><code>def gen():
    return (something for something in get_some_stuff())

print gen()[:2]     # generators don't support indexing or slicing
print [5,6] + gen() # generators can't be added to lists
</code></pre>

<p>Basically, use a generator expression if all you're doing is iterating once.  If you want to store and use the generated results, then you're probably better off with a list comprehension.</p>

<p>Since performance is the most common reason to choose one over the other, my advice is to not worry about it and just pick one; if you find that your program is running too slowly, then and only then should you go back and worry about tuning your code.</p>
"
47956,2915,2008-09-06T23:39:33Z,47953,29,"<p>From the <a href=""http://peak.telecommunity.com/DevCenter/PythonEggs"">Python Enterprise Application Kit community</a>:</p>

<blockquote>
  <p><em>""Eggs are to Pythons as Jars are to Java...""</em></p>
  
  <p>Python eggs are a way of bundling
  additional information with a Python
  project, that allows the project's
  dependencies to be checked and
  satisfied at runtime, as well as
  allowing projects to provide plugins
  for other projects. There are several
  binary formats that embody eggs, but
  the most common is '.egg' zipfile
  format, because it's a convenient one
  for distributing projects. All of the
  formats support including
  package-specific data, project-wide
  metadata, C extensions, and Python
  code.</p>
  
  <p>The primary benefits of Python Eggs
  are:</p>
  
  <ul>
  <li><p>They enable tools like the ""Easy Install"" Python package manager</p></li>
  <li><p>.egg files are a ""zero installation"" format for a Python
  package; no build or install step is
  required, just put them on PYTHONPATH
  or sys.path and use them (may require
  the runtime installed if C extensions
  or data files are used)</p></li>
  <li><p>They can include package metadata, such as the other eggs they depend on</p></li>
  <li><p>They allow ""namespace packages"" (packages that just contain other
  packages) to be split into separate
  distributions (e.g. zope.<em>, twisted.</em>,
  peak.* packages can be distributed as
  separate eggs, unlike normal packages
  which must always be placed under the
  same parent directory. This allows
  what are now huge monolithic packages
  to be distributed as separate
  components.)</p></li>
  <li><p>They allow applications or libraries to specify the needed
  version of a library, so that you can
  e.g. require(""Twisted-Internet>=2.0"")
  before doing an import
  twisted.internet.</p></li>
  <li><p>They're a great format for distributing extensions or plugins to
  extensible applications and frameworks
  (such as Trac, which uses eggs for
  plugins as of 0.9b1), because the egg
  runtime provides simple APIs to locate
  eggs and find their advertised entry
  points (similar to Eclipse's
  ""extension point"" concept).</p></li>
  <li><p>There are also other benefits that may come from having a standardized
  format, similar to the benefits of
  Java's ""jar"" format.</p></li>
  </ul>
</blockquote>


"
47957,2386,2008-09-06T23:39:54Z,47953,2,"<p>.egg files are basically a nice way to deploy your python application. You can think of it as something like .jar files for Java. </p>

<p>More info <a href=""http://peak.telecommunity.com/DevCenter/PythonEggs"" rel=""nofollow"">here</a>.</p>
"
47958,2147,2008-09-06T23:43:21Z,47953,3,"<p>Eggs are a pretty good way to distribute python apps.  Think of it as a platform independent .deb file that will install all dependencies and whatnot.  The advantage is that it's easy to use for the end user.  The disadvantage are that it can be cumbersome to package your app up as a .egg file.</p>

<p>You should also offer an alternative means of installation in addition to .eggs.  There are some people who don't like using eggs because they don't like the idea of a software program installing whatever software it wants.  These usually tend to be sysadmin types.</p>
"
48136,3560,2008-09-07T04:20:06Z,48123,12,"<p>Use GtkBuilder instead of Glade, it's integrated into Gtk itself instead of a separate library.</p>

<p>The main benefit of Glade is that it's much, much easier to create the interface. It's a bit more work to connect signal handlers, but I've never felt that matters much.</p>
"
48175,4966,2008-09-07T05:21:11Z,47198,1,"<p>Python 2.3, or 2.2 if you can live without the many modules that were added (e.g. datetime, csv, logging, optparse, zipimport), aren't using SSL, and are willing to add boilerplate for True/False.</p>

<p>2.4 added decorators. generator expressions, reversed(), sorted(), and the subprocess and decimal modules.  Although these are all nice, it's easy to write Pythonic code without them (assuming that your project wouldn't make heavy use of them).</p>

<p>2.5 added with, relative imports, better 64 bit support, and quite a bit of speed.  You could live without all of those easily enough.</p>

<p>2.6 isn't released (although it's very close), so while it might appeal to developers, it doesn't have the compatibility you're after.</p>

<p>Take a look at the release notes for 2.3, 2.4, 2.5, and the upcoming 2.6 (use <a href=""http://www.python.org/download/releases/2.Y/highlights/"" rel=""nofollow"">http://www.python.org/download/releases/2.Y/highlights/</a> where 'Y' is the minor version).</p>

<p>FWIW, for SpamBayes we support 2.2 and above (2.2 requires installing the email package separately).  This isn't overly taxing, but the 2.3 additions are useful enough and 2.3 old enough that we'll probably drop 2.2 before long.</p>
"
48214,2653,2008-09-07T06:58:49Z,48176,2,"<p>Python includes a <a href=""http://www.python.org/doc/lib/module-telnetlib.html"" rel=""nofollow"">telnet client</a>, but not a telnet server.  You can implement a telnet server using <a href=""http://twistedmatrix.com"" rel=""nofollow"">Twisted</a>.  <a href=""http://twistedmatrix.com/pipermail/twisted-python/2004-August/008335.html"" rel=""nofollow"">Here's an example</a>.  As for hooking these things together, that's up to you.</p>
"
48262,2168,2008-09-07T08:49:51Z,32044,9,"<p>Django has a built in template helper for this exact scenario:</p>

<p><a href=""https://docs.djangoproject.com/en/dev/ref/templates/builtins/#unordered-list"" rel=""nofollow"">https://docs.djangoproject.com/en/dev/ref/templates/builtins/#unordered-list</a></p>
"
48266,3171,2008-09-07T09:17:40Z,48176,0,"<p>I think you should base your server class on the <a href=""http://www.python.org/doc/lib/module-SocketServer.html"" rel=""nofollow""><code>SocketServer</code></a> class from the standard library.  You'll need to write a <code>RequestHandler</code> to read and echo input but a lot of the heavy lifting is already done for you.</p>

<p>You can use the <a href=""http://docs.python.org/lib/node632.html"" rel=""nofollow""><code>ThreadingMixIn</code></a> to make the server multi-threaded very easily.  </p>
"
48284,2661,2008-09-07T10:03:48Z,43368,1,"<p><a href=""http://www.turbogears.org/"" rel=""nofollow"">TurboGears</a> currently uses <a href=""http://www.sqlobject.org/"" rel=""nofollow"">SQLObject</a> by default but you can use it with <a href=""http://docs.turbogears.org/1.0/SQLAlchemy"" rel=""nofollow"">SQLAlchemy</a>. They are saying that the next major release of TurboGears (1.1) will use SQLAlchemy by default.</p>
"
48414,5026,2008-09-07T13:12:28Z,42034,7,"<p>I like <a href=""http://jtauber.com/blog/2006/04/15/python_tuples_are_not_just_constant_lists/"">this explanation</a>.</p>

<p>Basically, you should use tuples when there's a constant structure (the 1st position always holds one type of value and the second another, and so forth), and lists should be used for lists of homogeneous values.</p>

<p>Of course there's always exceptions, but this is a good general guideline.</p>
"
48467,5042,2008-09-07T14:25:20Z,48458,1,"<p>I am not entirely up to date on the latest best practices, et cetera when it comes to code layout, but when I did my first GAE application, I used something along your second option, where the code and templates are next to eachother.</p>

<p>There was two reasons for this - one, it kept the code and template nearby, and secondly, I had the directory structure layout mimic that of the website - making it (for me) a bit easier too remember where everything was.</p>
"
48479,5036,2008-09-07T14:39:14Z,43368,1,"<p>I know that you specificity ask for a framework but I thought I would let you know about what I get up to here. I have just undergone converting my company's web application from a custom in-house ORM layer into sqlAlchemy so I am far from an expert but something that occurred to me was that sqlAlchemy has types for all of the attributes it maps from the database so why not use that to help output the right html onto the page. So we use sqlAlchemy for the back end and Cheetah templates for the front end but everything in between is basically our own still.</p>

<p>We have never managed to find a framework that does exactly what we want without compromise and prefer to get all the bits that work right for us and write the glue our selves. </p>

<p>Step 1. For each data type sqlAlchemy.types.INTEGER etc. Add an extra function toHtml (or many maybe toHTMLReadOnly, toHTMLAdminEdit whatever) and just have that return the template for the html, now you don't even have to care what data type your displaying if you just want to spit out a whole table you can just do (as a cheetah template or what ever your templating engine is).</p>

<p>Step 2</p>

<p><code>&lt;table&gt;</code></p>

<p><code> &lt;tr&gt;</code></p>

<p><code>  #for $field in $dbObject.c:</code></p>

<p><code>    &lt;th&gt;$field.name&lt;/th&gt;</code></p>

<p><code>  #end for  </code></p>

<p><code> &lt;/tr&gt; </code></p>

<p><code> &lt;tr&gt;</code></p>

<p><code>  #for $field in dbObject.c:</code></p>

<p><code>    &lt;td&gt;$field.type.toHtml($field.name, $field.value)&lt;/td&gt;</code></p>

<p><code>  #end for  </code></p>

<p><code> &lt;/tr&gt;</code></p>

<p><code>&lt;/table&gt;</code></p>

<p>Using this basic method and stretching pythons introspection to its potential, in an afternoon I managed to make create read update and delete code for our whole admin section of out database, not yet with the polish of django but more then good enough for my needs.</p>

<p>Step 3 Discovered the need for a third step just on Friday, wanted to upload files which as you know needs more then just the varchar data types default text box. No sweat, I just overrode the rows class in my table definition from VARCHAR to FilePath(VARCHAR) where the only difference was FilePath had a different toHtml method. Worked flawlessly.</p>

<p>All that said, if there is a shrink wrapped one out there that does just what you want, use that.</p>

<p>Disclaimer: This code was written from memory after midnight and probably wont produce a functioning web page.</p>
"
48575,5063,2008-09-07T16:48:51Z,48562,1,"<p>What exactly are you trying to do?</p>

<p>Of course, there are numerous places to learn about svn pre-commit hooks (e.g. <a href=""http://wordaligned.org/articles/a-subversion-pre-commit-hook"" rel=""nofollow""> here </a>, <a href=""http://www.windley.com/archives/2008/08/using_a_precommit_hook_to_check_puppet_syntax.shtml"" rel=""nofollow""> here</a>, and in the <a href=""http://svnbook.red-bean.com/nightly/en/svn.reposadmin.create.html"" rel=""nofollow"">Red Book</a>) but it depends what you're trying to do and what is available on your system.  </p>

<p>Can you be more specific? </p>
"
48734,1996,2008-09-07T20:09:47Z,48123,19,"<p>I would say that it depends: if you find that using Glade you can build the apps you want or need to make than that's absolutely fine. If however you actually want to learn how GTK works or you have some non-standard UI requirements you will <strong>have</strong> to dig into GTK internals (which are not that complicated).</p>

<p>Personally I'm usually about 5 minutes into a rich client when I need some feature or customization that is simply impossible through a designer such as Glade or <a href=""http://www.mono-project.com/Stetic"">Stetic</a>. Perhaps it's just me. Nevertheless it is still useful for me to bootstrap window design using a graphical tool.</p>

<p>My recommendation: if making rich clients using GTK is going to be a significant part of your job/hobby then learn GTK as well since you <strong>will</strong> need to write that code someday.</p>

<p>P.S. I personally find <a href=""http://www.mono-project.com/Stetic"">Stetic</a> to be superior to Glade for design work, if a little bit more unstable.</p>
"
48806,4919,2008-09-07T21:28:54Z,48777,4,"<p><code>core.exceptions</code> is part of django; what version of django do you have installed? The AppEngine comes with the appropriate version for whatever release you've downloaded (in the lib/django directory). It can be installed by going to that directory and running <strong><code>python setup.py install</code></strong></p>
"
48974,1694,2008-09-08T01:31:32Z,34243,0,"<p>Ruby and C# both easily let you create accessors by specifying getter/setter methods for an attribute, much like in Python.  However, this isn't designed to naturally let you write the code for these methods in another class the way that Python allows.  In practice, I'm not sure how much this matters, since every time I've seen an attribute defined through the descriptor protocol its been implemented in the same class.</p>

<p>EDIT: Darn my dyslexia (by which I mean careless reading).  For some reason I've always read ""descriptor"" as ""decorator"" and vice versa, even when I'm the one typing both of them.  I'll leave my post intact since it has valid information, albeit information which has absolutely nothing to do with the question.</p>

<p>The term ""decorator"" itself is actually the name of a design pattern described in the famous ""Design Patterns"" book.  The Wikipedia article contains many examples in different programming languages of decorator usage: <a href=""http://en.wikipedia.org/wiki/Decorator_pattern"" rel=""nofollow"">http://en.wikipedia.org/wiki/Decorator_pattern</a></p>

<p>However, the decorators in that article object-oriented; they have classes implementing a predefined interface which lets another existing class behave differently somehow, etc.  Python decorators act in a functional way by replacing a function at runtime with another function, allowing you to effectively modify/replace that function, insert code, etc.</p>

<p>This is known in the Java world as Aspect-Oriented programming, and the AspectJ Java compiler lets you do these kinds of things and compile your AspectJ code (which is a superset of Java) into Java bytecode.</p>

<p>I'm not familiar enough with C# or Ruby to know what their version of decorators would be.</p>
"
49148,716,2008-09-08T04:01:10Z,49137,15,"<p>Boost has a python interface library which could help you.</p>

<p><a href=""http://www.boost.org/doc/libs/release/libs/python/doc/index.html"" rel=""nofollow"">Boost.Python</a></p>
"
49169,3002,2008-09-08T04:33:39Z,49164,9,"<p><a href=""http://peak.telecommunity.com/DevCenter/setuptools"">Setuptools</a> is the software that creates <a href=""http://peak.telecommunity.com/DevCenter/PythonEggs"">.egg files</a>. It's an extension of the <a href=""http://docs.python.org/lib/module-distutils.html""><code>distutils</code></a> package in the standard library.</p>

<p>The process involves creating a <code>setup.py</code> file, then  <code>python setup.py bdist_egg</code> creates an .egg package.</p>
"
49175,4172,2008-09-08T04:47:44Z,49164,3,"<p>Also, if you need to get an .egg package off a single .py file app, check this link: <a href=""http://peak.telecommunity.com/DevCenter/EasyInstall#packaging-others-projects-as-eggs"" rel=""nofollow"">EasyInstall - Packaging others projects as eggs</a>.</p>
"
49319,5022,2008-09-08T08:36:45Z,49137,1,"<p>Embeding the Python interpreter inside your C++ app will let you run Python programs using your application run Python scripts. It will also make it easier possible for those scripts to call C++ functions in your application. If this is what you want then the Boost library mentioned previously may be what you want to make it easier to create the link. In the past I have used <a href=""http://www.swig.org/"" rel=""nofollow"">SWIG</a> to generate Python interfaces to C++ code. It was not clear from your question whether you wanted the Python scripts to call your C++ program or whether you just wanted the C++ to call Python.</p>

<p>Many of the Python functions use modules which are not built into the Python interpreter. If your Python scripts call these functions then you will either need to have your users install Python or include the python runtime files with your application. It will depend on what modules you import in you Python scripts.</p>
"
49439,4966,2008-09-08T10:37:53Z,49137,1,"<p>Boost is probably the best choice, however if you're wanting something that's more standalone, and if this is for use with Windows (which seems feasible given that they are the people least likely to have Python installed), then you can use <a href=""http://www.py2exe.org"" rel=""nofollow"">py2exe</a> to create a DLL with entry points suitable for COM objects.  You can then interface with the library via COM.  (Obviously this is not at all useful as a cross-platform solution).</p>
"
49485,3148,2008-09-08T11:12:56Z,49455,1,"<p>A plugin for GSview for viewing encrypted PDFs is <a href=""http://www.cs.cmu.edu/~dst/Adobe/Gallery/Keating/"" rel=""nofollow"">here</a>.</p>

<p>If this works for you, you may be able to look at the source.</p>
"
49492,4966,2008-09-08T11:16:54Z,38987,136,"<p>This probably won't be a popular answer, but you almost certainly do not want to do this.  If you want a copy that's a merge, then use copy (or <a href=""https://docs.python.org/2/library/copy.html"">deepcopy</a>, depending on what you want) and then update.  The two lines of code are much more readable - more Pythonic - than the single line creation with .items() + .items().  Explicit is better than implicit.</p>

<p>In addition, when you use .items() (pre Python 3.0), you're creating a new list that contains the items from the dict.  If your dictionaries are large, then that is quite a lot of overhead (two large lists that will be thrown away as soon as the merged dict is created).  update() can work more efficiently, because it can run through the second dict item-by-item.</p>

<p>In terms of <a href=""https://docs.python.org/2/library/timeit.html"">time</a>:</p>

<pre><code>&gt;&gt;&gt; timeit.Timer(""dict(x, **y)"", ""x = dict(zip(range(1000), range(1000)))\ny=dict(zip(range(1000,2000), range(1000,2000)))"").timeit(100000)
15.52571702003479
&gt;&gt;&gt; timeit.Timer(""temp = x.copy()\ntemp.update(y)"", ""x = dict(zip(range(1000), range(1000)))\ny=dict(zip(range(1000,2000), range(1000,2000)))"").timeit(100000)
15.694622993469238
&gt;&gt;&gt; timeit.Timer(""dict(x.items() + y.items())"", ""x = dict(zip(range(1000), range(1000)))\ny=dict(zip(range(1000,2000), range(1000,2000)))"").timeit(100000)
41.484580039978027
</code></pre>

<p>IMO the tiny slowdown between the first two is worth it for the readability.  In addition, keyword arguments for dictionary creation was only added in Python 2.3, whereas copy() and update() will work in older versions.</p>
"
49514,46,2008-09-08T11:34:08Z,49307,5,"<p>If I'm not mistaken the zip function you use in python <a href=""http://groups.google.com/group/comp.lang.python/browse_thread/thread/195e57735ff6ee56"">creates a pair of the items found in list1 and list2</a>. Basically it still is a for loop with the addition that it will retrieve the data from the two seperate lists for you, instead that you have to do it yourself.</p>

<p>So maybe your best option is to use a <em>standard</em> for loop like this:</p>

<pre><code>for i=1:length(a)
  c(i) = a(i) + b(i);
end
</code></pre>

<p>or whatever you have to do with the data.</p>

<p>If you really are talking about parallel computing then you should take a look at the <a href=""http://www.mathworks.com/products/parallel-computing/"">Parallel Computing Toolbox</a> for matlab, and more specifically at <a href=""http://www.mathworks.com/access/helpdesk/help/toolbox/distcomp/index.html?/access/helpdesk/help/toolbox/distcomp/brb2x2l-1.html"">parfor</a></p>
"
49828,3002,2008-09-08T14:40:36Z,49824,15,"<p>I think this pair of articles by Philip J. Eby does a great job discussing the differences between the two languages (mostly about philosophy/mentality rather than specific language features). </p>

<ul>
<li><a href=""http://dirtsimple.org/2004/12/python-is-not-java.html"">Python is Not Java</a></li>
<li><a href=""http://dirtsimple.org/2004/12/java-is-not-python-either.html"">Java is Not Python, either</a></li>
</ul>
"
49837,3171,2008-09-08T14:43:09Z,49824,4,"<p>One key difference in Python is <a href=""http://weblog.hotales.org/cgi-bin/weblog/nb.cgi/view/python/2005/02/19/1"" rel=""nofollow"">significant whitespace</a>.  This puts a lot of people off - me too for a long time - but once you get going it seems natural and makes much more sense  than <code>;</code>s everywhere.</p>

<p>From a personal perspective, Python has the following benefits over Java:</p>

<ul>
<li>No <a href=""http://en.wikipedia.org/wiki/Exception_handling#Checked_exceptions"" rel=""nofollow"">Checked Exceptions</a></li>
<li>Optional Arguments</li>
<li>Much less boilerplate and less verbose generally</li>
</ul>

<p>Other than those, <a href=""http://wiki.python.org/moin/LanguageComparisons"" rel=""nofollow"">this page on the Python Wiki</a> is a good place to look with lots of links to interesting articles.</p>
"
49911,2514,2008-09-08T15:13:58Z,49824,3,"<p>With <a href=""http://www.jython.org/Project/"" rel=""nofollow"">Jython</a> you can have both. It's only at Python 2.2, but still very useful if you need an embedded interpreter that has access to the Java runtime.</p>
"
49929,2598,2008-09-08T15:21:43Z,49926,0,"<p>There is a program called <a href=""http://www.scilab.org/"" rel=""nofollow"">SciLab</a> that is a MATLAB clone.</p>

<p>I haven't used it at all, but it is open source and might have the function you are looking for.</p>
"
49930,1428,2008-09-08T15:22:49Z,49926,3,"<p><a href=""http://www.gnu.org/software/octave/"" rel=""nofollow"">GNU Octave</a> is another MATLAB clone that might have what you need.</p>
"
49953,1694,2008-09-08T15:35:32Z,49824,40,"<ol>
<li><p>List comprehensions.  I often find myself filtering/mapping lists, and being able to say <code>[line.replace(""spam"",""eggs"") for line in open(""somefile.txt"") if line.startswith(""nee"")]</code> is really nice.</p></li>
<li><p>Functions are first class objects.  They can be passed as parameters to other functions, defined inside other function, and have lexical scope.  This makes it really easy to say things like <code>people.sort(key=lambda p: p.age)</code> and thus sort a bunch of people on their age without having to define a custom comparator class or something equally verbose.</p></li>
<li><p>Everything is an object.  Java has basic types which aren't objects, which is why many classes in the standard library define 9 different versions of functions (for boolean, byte, char, double, float, int, long, Object, short).  <code>Array.sort</code> is a good example.  Autoboxing helps, although it makes things awkward when something turns out to be null.</p></li>
<li><p>Properties.  Python lets you create classes with read-only fields, lazily-generated fields, as well as fields which are checked upon assignment to make sure they're never 0 or null or whatever you want to guard against, etc.'</p></li>
<li><p>Default and keyword arguments.  In Java if you want a constructor that can take up to 5 optional arguments, you must define 6 different versions of that constructor.  And there's no way at all to say <code>Student(name=""Eli"", age=25)</code></p></li>
<li><p>Functions can only return 1 thing.  In Python you have tuple assignment, so you can say <code>spam, eggs = nee()</code> but in Java you'd need to either resort to mutable out parameters or have a custom class with 2 fields and then have two additional lines of code to extract those fields.</p></li>
<li><p>Built-in syntax for lists and dictionaries.</p></li>
<li><p>Operator Overloading.</p></li>
<li><p>Generally better designed libraries.  For example, to parse an XML document in Java, you say<br />
<code>Document doc = DocumentBuilderFactory.newInstance().newDocumentBuilder().parse(""test.xml"");</code><br />
and in Python you say<br />
<code>doc = parse(""test.xml"")</code></p></li>
</ol>

<p>Anyway, I could go on and on with further examples, but Python is just overall a much more flexible and expressive language.  It's also dynamically typed, which I really like, but which comes with some disadvantages.</p>

<p>Java has much better performance than Python and has way better tool support.  Sometimes those things matter a lot and Java is the better language than Python for a task; I continue to use Java for some new projects despite liking Python a lot more.  But as a language I think Python is superior for most things I find myself needing to accomplish.</p>
"
50041,2173,2008-09-08T16:02:04Z,49926,0,"<p>I don't know if it's in there, but there's a python distribution called <a href=""http://www.enthought.com/"" rel=""nofollow"">Enthought</a> that might have what you're looking for.  It was designed specifically for data analysis has over 60 additional libraries.</p>
"
50413,92,2008-09-08T18:53:37Z,50394,0,"<p>Another way to do it is to use <code>urllib2</code> module to parse some other page's whois service (many sites like that exist).  But that seems like even more of a hack that what you do now, and would give you a dependency on whatever whois site you chose, which is bad.</p>

<p>I hate to say it, but unless you want to re-implement <code>whois</code> in your program (which would be re-inventing the wheel), running <code>whois</code> on the OS and parsing the output (ie what you are doing now) seems like the right way to do it.</p>
"
50423,4172,2008-09-08T19:00:58Z,50394,0,"<p>Parsing another webpage woulnd't be as bad (assuming their html woulnd't be very bad), but it would actually tie me to them - if they're down, I'm down :) </p>

<p>Actually I found some old project on sourceforge: <a href=""http://sourceforge.net/projects/rwhois/"" rel=""nofollow"">rwhois.py</a>. What scares me a bit is that their last update is from 2003. But, it might seem as a good place to start reimplementation of what I do right now... Well, I felt obligued to post the link to this project anyway, just for further reference.</p>
"
50425,3117,2008-09-08T19:01:24Z,35948,30,"<p>I found a ""nicer""/""better"" solution for getting variables inside
Its not the nicest way, but it works.</p>

<p>You install a custom filter into django which gets the key of your dict as a parameter</p>

<p>To make it work in google app-engine you need to add a file to your main directory,
I called mine *django_hack.py* which contains this little piece of code</p>

<pre><code>from google.appengine.ext import webapp

register = webapp.template.create_template_register()

def hash(h,key):
    if key in h:
        return h[key]
    else:
        return None

register.filter(hash)
</code></pre>

<p>Now that we have this file, all we need to do is tell the app-engine to use it...
we do that by adding this little line to your main file</p>

<pre><code>webapp.template.register_template_library('django_hack')
</code></pre>

<p>and in your template view add this template instead of the usual code</p>

<pre><code>{{ user|hash:item }}
</code></pre>

<p>And its should work perfectly =)</p>
"
50502,1199,2008-09-08T19:42:56Z,50499,11,"<p>It's not entirely clear what you mean by ""the filepath of the file that is currently running within the process"".
<code>sys.argv[0]</code> usually contains the location of the script that was invoked by the Python interpreter.
Check the <a href=""https://docs.python.org/2/library/sys.html"" rel=""nofollow"">sys documentation</a> for more details.</p>

<p>As @Tim and @Pat Notz have pointed out, the __file__ attribute provides access to</p>

<blockquote>
  <p>the file from which the module was
  loaded, if it was loaded from a file</p>
</blockquote>
"
50505,825,2008-09-08T19:44:07Z,50499,5,"<p>I think it's just <code>__file__</code>   Sounds like you may also want to checkout the <a href=""https://docs.python.org/2/library/inspect.html"" rel=""nofollow"">inspect module</a>.</p>
"
50507,5063,2008-09-08T19:45:24Z,48562,4,"<p>I think you can avoid a commit hook script in this case by using the <code>svn:eol-style</code> property as described in the SVNBook:</p>

<ul>
<li><p><a href=""http://svnbook.red-bean.com/en/1.7/svn.advanced.props.file-portability.html#svn.advanced.props.special.eol-style"" rel=""nofollow"">End-of-Line Character Sequences</a></p></li>
<li><p><a href=""http://svnbook.red-bean.com/en/1.7/svn.ref.properties.html"" rel=""nofollow"">Subversion Properties</a></p></li>
</ul>

<p>This way SVN can worry about your line endings for you.</p>

<p>Good luck!</p>
"
50521,4883,2008-09-08T19:56:19Z,50499,7,"<p>The <code>__file__</code> attribute works for both the file containing the main execution code as well as imported modules.</p>

<p>See <a href=""https://web.archive.org/web/20090918095828/http://pyref.infogami.com/__file__"" rel=""nofollow"">https://web.archive.org/web/20090918095828/http://pyref.infogami.com/__file__</a></p>
"
50668,2990,2008-09-08T20:58:29Z,50568,25,"<p>The filesystem backend is only worth looking at if you're not going to use a database for any other part of your system. If you are using a database then the filesystem backend has nothing to recommend it.</p>

<p>The memcache backend is much quicker than the database backend, but you run the risk of a session being purged and some of your session data being lost.</p>

<p>If you're a really, really high traffic website and code carefully so you can cope with losing a session then use memcache. If you're not using a database use the file system cache, but the default database backend is the best, safest and simplest option in almost all cases.</p>
"
50905,825,2008-09-08T23:02:42Z,50499,168,"<p>p1.py:</p>

<pre><code>execfile(""p2.py"")
</code></pre>

<p>p2.py:</p>

<pre><code>import inspect, os
print inspect.getfile(inspect.currentframe()) # script filename (usually with path)
print os.path.dirname(os.path.abspath(inspect.getfile(inspect.currentframe()))) # script directory
</code></pre>
"
50929,1199,2008-09-08T23:13:16Z,50923,10,"<pre><code>&gt;&gt;&gt; import weakref
&gt;&gt;&gt; class Object:
...     pass
...
&gt;&gt;&gt; o = Object()
&gt;&gt;&gt; r = weakref.ref(o)
&gt;&gt;&gt; # if the reference is still active, r() will be o, otherwise None
&gt;&gt;&gt; do_something_with_o(r())
</code></pre>

<p>See the <a href=""http://docs.python.org/lib/module-weakref.html"">wearkref module docs</a> for more details.
You can also use <code>weakref.proxy</code> to create an object that proxies o. Will throw <code>ReferenceError</code> if used when the referent is no longer referenced.</p>
"
50986,394,2008-09-09T00:00:52Z,50499,3,"<p>You can use <code>inspect.stack()</code></p>

<pre><code>import inspect,os
inspect.stack()[0]  =&gt; (&lt;frame object at 0x00AC2AC0&gt;, 'g:\\Python\\Test\\_GetCurrentProgram.py', 15, '&lt;module&gt;', ['print inspect.stack()[0]\n'], 0)
os.path.abspath (inspect.stack()[0][1]) =&gt; 'g:\\Python\\Test\\_GetCurrentProgram.py'
</code></pre>
"
51015,4257,2008-09-09T00:37:28Z,51010,1,"<p>It seems that this isn't supported, since there wouldn't be a good way to deal with overflows in datetime.time.  I know this isn't an answer directly, but maybe someone with more python experience than me can take this a little further.  For more info, see this: <a href=""http://bugs.python.org/issue3250"" rel=""nofollow"">http://bugs.python.org/issue3250</a></p>
"
51023,5169,2008-09-09T00:42:31Z,51010,5,"<p>You could transform both into <a href=""http://docs.python.org/lib/datetime-timedelta.html"" rel=""nofollow"">timedelta objects</a> and subtract these from each other, which will take care to of the carry-overs. For example:</p>

<pre><code>&gt;&gt;&gt; import datetime as dt
&gt;&gt;&gt; t1 = dt.time(23, 5, 5, 5)
&gt;&gt;&gt; t2 = dt.time(10, 5, 5, 5)
&gt;&gt;&gt; dt1 = dt.timedelta(hours=t1.hour, minutes=t1.minute, seconds=t1.second, microseconds=t1.microsecond)
&gt;&gt;&gt; dt2 = dt.timedelta(hours=t2.hour, minutes=t2.minute, seconds=t2.second, microseconds=t2.microsecond)
&gt;&gt;&gt;  print(dt1-dt2)
13:00:00
&gt;&gt;&gt; print(dt2-dt1)
-1 day, 11:00:00
&gt;&gt;&gt; print(abs(dt2-dt1))
13:00:00
</code></pre>

<p>Negative timedelta objects in Python get a negative day field, with the other fields positive. You could check beforehand: comparison works on both time objects and timedelta objects:</p>

<pre><code>&gt;&gt;&gt; dt2 &lt; dt1
True
&gt;&gt;&gt; t2 &lt; t1
True
</code></pre>
"
51029,2193,2008-09-09T00:47:48Z,51010,-2,"<p>Firstly, note that a datetime.time is a time of day, independent of a given day, and so the different between any two datetime.time values is going to be less than 24 hours.</p>

<p>One approach is to convert both datetime.time values into comparable values (such as milliseconds), and find the difference.</p>

<pre><code>t1, t2 = datetime.time(...), datetime.time(...)

t1_ms = (t1.hour*60*60 + t1.minute*60 + t1.second)*1000 + t1.microsecond
t2_ms = (t2.hour*60*60 + t2.minute*60 + t2.second)*1000 + t2.microsecond

delta_ms = max([t1_ms, t2_ms]) - min([t1_ms, t2_ms])
</code></pre>

<p>It's a little lame, but it works.</p>
"
51042,1199,2008-09-09T00:53:24Z,51010,16,"<p>Also a little silly, but you could try picking an arbitrary day and embedding each time in it, using <code>datetime.datetime.combine</code>, then subtracting:</p>

<pre><code>&gt;&gt;&gt; import datetime
&gt;&gt;&gt; t1 = datetime.time(2,3,4)
&gt;&gt;&gt; t2 = datetime.time(18,20,59)
&gt;&gt;&gt; dummydate = datetime.date(2000,1,1)
&gt;&gt;&gt; datetime.datetime.combine(dummydate,t2) - datetime.datetime.combine(dummydate,t1)
datetime.timedelta(0, 58675)
</code></pre>
"
51132,NA,2008-09-09T02:25:33Z,28668,2,"<p>If your leaning is to Python, you may be interested in checking out the Python Wrapper for Filemaker.   It provides two way access to the Filemaker data via Filemaker's built-in XML services.   You can find some quite thorough information on this at:</p>

<p><a href=""http://code.google.com/p/pyfilemaker/"" rel=""nofollow"">http://code.google.com/p/pyfilemaker/</a></p>
"
51137,3148,2008-09-09T02:32:46Z,49307,3,"<p>Tested only in octave... (no matlab license). Variations of arrayfun() exist, check the documentation.</p>

<pre><code>#!/usr/bin/octave -qf

function result = dostuff(my_ten, my_one)
  result = my_ten + my_one
endfunction

tens = [ 10 20 30 ];
ones = [ 1 2 3];

x = arrayfun(@dostuff, tens, ones);

x
</code></pre>

<p>Yields...</p>

<pre><code>x =

   11   22   33
</code></pre>
"
51200,5222,2008-09-09T03:56:09Z,42034,0,"<p>In addition to the places where they're syntactically required like the string % operation and for multiple return values, I use tuples as a form of lightweight classes.  For example, suppose you have an object that passes out an opaque cookie to a caller from one method which is then passed into another method.  A tuple is a good way to pack multiple values into that cookie without having to define a separate class to contain them.</p>

<p>I try to be judicious about this particular use, though.  If the cookies are used liberally throughout the code, it's better to create a class because it helps document their use. If they are only used in one place (e.g. one pair of methods) then I might use a tuple. In any case, because it's Python you can start with a tuple and then change it to an instance of a custom class without having to change any code in the caller.</p>
"
51214,5066,2008-09-09T04:14:37Z,51212,4,"<p>If you use the <code>curses</code>  package, you have much greater control of the console. It also comes at a higher cost in code complexity and is probably unnecessary unless you are developing a large console-based app.</p>

<p>For a simple solution, you can always put the spinning wheel at the end of the status messge (the sequence of characters <code>|, \, -, /</code> which actually looks nice under blinking cursor.</p>
"
51218,4659,2008-09-09T04:21:09Z,51212,13,"<p>You might also try:</p>

<pre><code>sys.stdout.write(""\r%2d%%"" % percent)
sys.stdout.flush()
</code></pre>

<p>Using a single carriage return at the beginning of your string rather than several backspaces. Your cursor will still blink, but it'll blink after the percent sign rather than under the first digit, and with one control character instead of three you may get less flicker.</p>
"
51239,4883,2008-09-09T04:48:28Z,51212,16,"<p>There's a text progress bar library for python at  <a href=""http://pypi.python.org/pypi/progressbar/2.2"">http://pypi.python.org/pypi/progressbar/2.2</a> that you might find useful: </p>

<blockquote>
  <p>This library provides a text mode progressbar. This is tipically used to display the progress of a long running operation, providing a visual clue that processing is underway.</p>
  
  <p>The ProgressBar class manages the progress, and the format of the line is given by a number of widgets. A widget is an object that may display diferently depending on the state of the progress. There are three types of widget: - a string, which always shows itself; - a ProgressBarWidget, which may return a diferent value every time it's update method is called; and - a ProgressBarWidgetHFill, which is like ProgressBarWidget, except it expands to fill the remaining width of the line.</p>
  
  <p>The progressbar module is very easy to use, yet very powerful. And automatically supports features like auto-resizing when available.</p>
</blockquote>
"
51240,720,2008-09-09T04:49:38Z,51233,44,"<p>I'll always use <a href=""http://lxml.de/"">lxml</a> for such tasks. You could use <a href=""http://www.crummy.com/software/BeautifulSoup/"">beautifulsoup</a> as well.</p>

<pre><code>import lxml.html
t = lxml.html.parse(url)
print t.find("".//title"").text
</code></pre>
"
51242,5190,2008-09-09T04:51:09Z,51233,5,"<p>This is probably overkill for such a simple task, but if you plan to do more than that, then it's saner to start from these tools (mechanize, BeautifulSoup) because they are much easier to use than the alternatives (urllib to get content and regexen or some other parser to parse html)</p>

<p>Links:
<a href=""http://crummy.com/software/BeautifulSoup"" rel=""nofollow"">BeautifulSoup</a> 
<a href=""http://wwwsearch.sourceforge.net/mechanize/"" rel=""nofollow"">mechanize</a></p>

<pre><code>#!/usr/bin/env python
#coding:utf-8

from BeautifulSoup import BeautifulSoup
from mechanize import Browser

#This retrieves the webpage content
br = Browser()
res = br.open(""https://www.google.com/"")
data = res.get_data() 

#This parses the content
soup = BeautifulSoup(data)
title = soup.find('title')

#This outputs the content :)
print title.renderContents()
</code></pre>
"
51263,3571,2008-09-09T05:45:39Z,51233,10,"<p>The mechanize Browser object has a title() method. So the code from <a href=""http://stackoverflow.com/questions/51233/how-can-i-retrieve-the-page-title-of-a-webpage-using-python#51242"" rel=""nofollow"">this post</a> can be rewritten as:</p>

<pre><code>from mechanize import Browser
br = Browser()
br.open(""http://www.google.com/"")
print br.title()
</code></pre>
"
51414,3355,2008-09-09T08:49:02Z,51412,1,"<p>Some experimentation and I figured this one out:</p>

<p>def methodA(arg, **kwargs):
    methodB(""argvalue"", **kwargs)</p>

<p>Seems obvious now...</p>
"
51415,680,2008-09-09T08:50:34Z,51412,32,"<p>Put the asterisks before the kwargs variable. This makes Python pass the variable (which is assumed to be a dictionary) as keyword arguments.</p>

<pre><code>methodB(""argvalue"", **kwargs)
</code></pre>
"
51505,1709,2008-09-09T10:08:28Z,51502,8,"<p>You could try increasing the indent size, but in general I would just say, relax, it will come with time. I don't think trying to make Python look like C is a very good idea.</p>
"
51511,4702,2008-09-09T10:11:33Z,50568,19,"<p>I'm no Django expert, so this answer is about session stores generally. Downvote if I'm wrong.</p>

<h2>Performance and Scalability</h2>

<p>Choice of session store has an effect on performance and scalability. This should only be a big problem if you have a very popular application.</p>

<p>Both database and filesystem session stores are (usually) backed by disks so you can have a lot of sessions cheaply (because disks are cheap), but requests will often have to wait for the data to be read (because disks are slow). Memcached sessions use RAM, so will cost more to support the same number of concurrent sessions (because RAM is expensive), but may be faster (because RAM is fast).</p>

<p>Filesystem sessions are tied to the box where your application is running, so you can't load balance between multiple application servers if your site gets huge. Database and memcached sessions let you have multiple application servers talking to a shared session store.</p>

<h2>Simplicity</h2>

<p>Choice of session store will also impact how easy it is to deploy your site. Changing away from the default will cost some complexity. Memcached and RDBMSs both have their own complexities, but your application is probably going to be using an RDBMS anyway.</p>

<p>Unless you have a very popular application, simplicity should be the larger concern.</p>

<h2>Bonus</h2>

<p>Another approach is to store <a href=""https://docs.djangoproject.com/en/1.8/topics/http/sessions/#using-cookie-based-sessions"" rel=""nofollow"">session data in cookies</a> (all of it, not just an ID). This has the advantage that the session store automatically scales with the number of users, but it has disadvantages too. You (or your framework) need to be careful to stop users forging session data. You also need to keep each session small because the whole thing will be sent with every request.</p>
"
51512,3785,2008-09-09T10:11:54Z,49824,2,"<p>Apart from what Eli Courtwright said:</p>

<ul>
<li>I find iterators in Python more concise. You can use <em>for i in something</em>, and it works with pretty much everything. Yeah, Java has gotten better since 1.5, but for example you can iterate through a string in python with this same construct.</li>
<li>Introspection: In python you can get at runtime information about an object or a module about its symbols, methods, or even its docstrings. You can also instantiate them dynamically. Java has some of this, but usually in Java it takes half a page of code to get an instance of a class, whereas in Python it is about 3 lines. And as far as I know the docstrings thing is not available in Java</li>
</ul>
"
51523,5026,2008-09-09T10:21:03Z,51520,424,"<pre><code>&gt;&gt;&gt; import os
&gt;&gt;&gt; os.path.abspath(""mydir/myfile.txt"")
</code></pre>
"
51531,5026,2008-09-09T10:24:46Z,51502,3,"<p>Perhaps the best thing would be to turn on ""show whitespace"" in your editor.  Then you would have a visual indication of how far in each line is tabbed (usually a bunch of dots), and it will be more apparent when that changes.</p>
"
51539,4702,2008-09-09T10:28:26Z,51520,32,"<pre><code>&gt;&gt;&gt; import os
&gt;&gt;&gt; os.path.abspath('mydir/myfile.txt')
'C:\\example\\cwd\\mydir\\myfile.txt'
&gt;&gt;&gt;
</code></pre>
"
51550,4279,2008-09-09T10:32:54Z,51233,54,"<p>Here's a simplified version of <a href=""http://stackoverflow.com/a/51242/4279"">@Vinko Vrsalovic's answer</a>:</p>

<pre><code>import urllib2
from BeautifulSoup import BeautifulSoup

soup = BeautifulSoup(urllib2.urlopen(""https://www.google.com""))
print soup.title.string
</code></pre>

<p>NOTE:</p>

<ul>
<li><p><em>soup.title</em> finds the first <em>title</em> element <strong>anywhere</strong> in the html document</p></li>
<li><p><em>title.string</em> assumes it has only <strong>one</strong> child node, and that child node is a <strong>string</strong></p></li>
</ul>

<p>For <a href=""http://www.crummy.com/software/BeautifulSoup/bs4/doc/"">beautifulsoup 4.x</a>, use different import:</p>

<pre><code>from bs4 import BeautifulSoup
</code></pre>
"
51551,4702,2008-09-09T10:33:05Z,51502,15,"<p>I like to put blank lines around blocks to make control flow more obvious. For example:</p>

<pre><code>if foo:
   bar = baz

   while bar not biz:
      bar = i_am_going_to_find_you_biz_i_swear_on_my_life()

did_i_not_warn_you_biz()
my_father_is_avenged()
</code></pre>
"
51570,4977,2008-09-09T10:43:27Z,51502,7,"<p>Rather than focusing on making your existing structures more readable, you should focus on making more logical structures.  Make smaller blocks, try not to nest blocks excessively, make smaller functions, and try to think through your code flow more.</p>

<p>If you come to a point where you can't quickly determine the structure of your code, you should probably consider refactoring and adding some comments.  Code flow should always be immediately apparent -- the more you have to think about it, the less maintainable your code becomes.</p>
"
51663,893,2008-09-09T11:40:26Z,51658,1,"<p>The <a href=""https://docs.python.org/2.7/library/os.html"" rel=""nofollow"">os.statvfs()</a> function is a better way to get that information for Unix-like platforms (including OS X). The Python documentation says ""Availability: Unix"" but it's worth checking whether it works on Windows too in your build of Python (ie. the docs might not be up to date).</p>

<p>Otherwise, you can use the <a href=""http://sourceforge.net/projects/pywin32/"" rel=""nofollow"">pywin32</a> library to directly call the <a href=""http://msdn.microsoft.com/en-us/library/aa364937(VS.85).aspx"" rel=""nofollow"">GetDiskFreeSpaceEx</a> function.</p>
"
51668,3631,2008-09-09T11:43:10Z,51553,0,"<p>I don't think that your results are all that surprising -- if anything it is that Postgres is so fast.</p>

<p>Does the Postgres query run faster a second time once it has had a chance to cache the data?  To be a little fairer your test for Java and Python should cover the cost of acquiring the data in the first place (ideally loading it off disk).</p>

<p>If this performance level is a problem for your application in practice but you need a RDBMS for other reasons then you could look at <a href=""http://www.danga.com/memcached/"" rel=""nofollow"">memcached</a>.  You would then have faster cached access to raw data and could do the calculations in code.</p>
"
51675,4111,2008-09-09T11:47:20Z,51658,0,"<p>I Don't know of any cross-platform way to achieve this, but maybe a good workaround for you would be to write a wrapper class that checks the operating system and uses the best method for each.</p>

<p>For Windows, there's the <a href=""http://aspn.activestate.com/ASPN/docs/ActivePython/2.2/PyWin32/win32api__GetDiskFreeSpaceEx_meth.html"" rel=""nofollow"">GetDiskFreeSpaceEx</a> method in the win32 extensions.</p>
"
51745,2077,2008-09-09T12:31:26Z,51553,13,"<p>I would say your test scheme is not really useful. To fulfill the db query, the db server goes through several steps:</p>

<ol>
<li>parse the SQL</li>
<li>work up a query plan, i. e. decide on which indices to use (if any), optimize etc.</li>
<li>if an index is used, search it for the pointers to the actual data, then go to the appropriate location in the data or</li>
<li>if no index is used, scan <i>the whole table</i> to determine which rows are needed</li>
<li>load the data from disk into a temporary location (hopefully, but not necessarily, memory)</li>
<li>perform the count() and avg() calculations</li>
</ol>

<p>So, creating an array in Python and getting the average basically skips all these steps save the last one. As disk I/O is among the most expensive operations a program has to perform, this is a major flaw in the test (see also the answers to <a href=""http://stackoverflow.com/questions/26021/how-is-data-compression-more-effective-than-indexing-for-search-performance"">this question</a> I asked here before). Even if you read the data from disk in your other test, the process is completely different and it's hard to tell how relevant the results are.</p>

<p>To obtain more information about where Postgres spends its time, I would suggest the following tests:</p>

<ul>
<li>Compare the execution time of your query to a SELECT without the aggregating functions (i. e. cut step 5)</li>
<li>If you find that the aggregation leads to a significant slowdown, try if Python does it faster, obtaining the raw data through the plain SELECT from the comparison.</li>
</ul>

<p>To speed up your query, reduce disk access first. I doubt very much that it's the aggregation that takes the time.</p>

<p>There's several ways to do that:</p>

<ul>
<li>Cache data (in memory!) for subsequent access, either via the db engine's own capabilities or with tools like memcached</li>
<li>Reduce the size of your stored data</li>
<li>Optimize the use of indices. Sometimes this can mean to skip index use altogether (after all, it's disk access, too). For MySQL, I seem to remember that it's recommended to skip indices if you assume that the query fetches more than 10% of all the data in the table.</li>
<li>If your query makes good use of indices, I know that for MySQL databases it helps to put indices and data on separate physical disks. However, I don't know whether that's applicable for Postgres.</li>
<li>There also might be more sophisticated problems such as swapping rows to disk if for some reason the result set can't be completely processed in memory. But I would leave that kind of research until I run into serious performance problems that I can't find another way to fix, as it requires knowledge about a lot of little under-the-hood details in your process.</li>
</ul>

<p><b>Update:</b></p>

<p><i>I just realized that you seem to have no use for indices for the above query and most likely aren't using any, too, so my advice on indices probably wasn't helpful. Sorry. Still, I'd say that the aggregation is not the problem but disk access is. I'll leave the index stuff in, anyway, it might still have some use.</i></p>
"
51817,533,2008-09-09T13:04:15Z,51553,0,"<p>One other thing that an RDBMS generally does for you is to provide concurrency by protecting you from simultaneous access by another process.  This is done by placing locks, and there's some overhead from that.</p>

<p>If you're dealing with entirely static data that never changes, and especially if you're in a basically ""single user"" scenario, then using a relational database doesn't necessarily gain you much benefit.</p>
"
51933,5357,2008-09-09T13:50:18Z,51553,3,"<p>Those are very detailed answers, but they mostly beg the question, how do I get these benefits without leaving Postgres given that the data easily fits into memory, requires concurrent reads but no writes and is queried with the same query over and over again.</p>

<p>Is it possible to precompile the query and optimization plan? I would have thought the stored procedure would do this, but it doesn't really help.</p>

<p>To avoid disk access it's necessary to cache the whole table in memory, can I force Postgres to do that?  I think it's already doing this though, since the query executes in just 200 ms after repeated runs.</p>

<p>Can I tell Postgres that the table is read only, so it can optimize any locking code?</p>

<p>I think it's possible to estimate the query construction costs with an empty table (timings range from 20-60 ms) </p>

<p>I still can't see why the Java/Python tests are invalid.  Postgres just isn't doing that much more work (though I still haven't addressed the concurrency aspect, just the caching and query construction)</p>

<p>UPDATE: 
I don't think it's fair to compare the SELECTS as suggested by pulling 350,000 through the driver and serialization steps into Python to run the aggregation, nor even to omit the aggregation as the overhead in formatting and displaying is hard to separate from the timing.  If both engines are operating on in memory data, it should be an apples to apples comparison, I'm not sure how to guarantee that's already happening though.</p>

<p>I can't figure out how to add comments, maybe i don't have enough reputation?</p>
"
51976,4918,2008-09-09T14:10:06Z,51553,0,"<p>You need to increase postgres' caches to the point where the whole working set fits into memory before you can expect to see perfomance comparable to doing it in-memory with a program.</p>
"
52006,3839,2008-09-09T14:26:28Z,51553,8,"<p>Postgres is doing a lot more than it looks like (maintaining data consistency for a start!)</p>

<p>If the values don't have to be 100% spot on, or if the table is updated rarely, but you are running this calculation often, you might want to look into Materialized Views to speed it up.</p>

<p>(Note, I have not used materialized views in Postgres, they look at little hacky, but might suite your situation).</p>

<p><a href=""http://jonathangardner.net/tech/w/PostgreSQL/Materialized_Views"">Materialized Views</a></p>

<p>Also consider the overhead of actually connecting to the server and the round trip required to send the request to the server and back.</p>

<p>I'd consider 200ms for something like this to be pretty good, A quick test on my oracle server, the same table structure with about 500k rows and no indexes, takes about 1 - 1.5 seconds, which is almost all just oracle sucking the data off disk.</p>

<p>The real question is, is 200ms fast enough?</p>

<p>-------------- More --------------------</p>

<p>I was interested in solving this using materialized views, since I've never really played with them. This is in oracle.</p>

<p>First I created a MV which refreshes every minute.</p>

<pre><code>create materialized view mv_so_x 
build immediate 
refresh complete 
START WITH SYSDATE NEXT SYSDATE + 1/24/60
 as select count(*),avg(a),avg(b),avg(c),avg(d) from so_x;
</code></pre>

<p>While its refreshing, there is no rows returned</p>

<pre><code>SQL&gt; select * from mv_so_x;

no rows selected

Elapsed: 00:00:00.00
</code></pre>

<p>Once it refreshes, its MUCH faster than doing the raw query</p>

<pre><code>SQL&gt; select count(*),avg(a),avg(b),avg(c),avg(d) from so_x;

  COUNT(*)     AVG(A)     AVG(B)     AVG(C)     AVG(D)
---------- ---------- ---------- ---------- ----------
   1899459 7495.38839 22.2905454 5.00276131 2.13432836

Elapsed: 00:00:05.74
SQL&gt; select * from mv_so_x;

  COUNT(*)     AVG(A)     AVG(B)     AVG(C)     AVG(D)
---------- ---------- ---------- ---------- ----------
   1899459 7495.38839 22.2905454 5.00276131 2.13432836

Elapsed: 00:00:00.00
SQL&gt;
</code></pre>

<p>If we insert into the base table, the result is not immediately viewable view the MV.</p>

<pre><code>SQL&gt; insert into so_x values (1,2,3,4,5);

1 row created.

Elapsed: 00:00:00.00
SQL&gt; commit;

Commit complete.

Elapsed: 00:00:00.00
SQL&gt; select * from mv_so_x;

  COUNT(*)     AVG(A)     AVG(B)     AVG(C)     AVG(D)
---------- ---------- ---------- ---------- ----------
   1899459 7495.38839 22.2905454 5.00276131 2.13432836

Elapsed: 00:00:00.00
SQL&gt;
</code></pre>

<p>But wait a minute or so, and the MV will update behind the scenes, and the result is returned fast as you could want.</p>

<pre><code>SQL&gt; /

  COUNT(*)     AVG(A)     AVG(B)     AVG(C)     AVG(D)
---------- ---------- ---------- ---------- ----------
   1899460 7495.35823 22.2905352 5.00276078 2.17647059

Elapsed: 00:00:00.00
SQL&gt;
</code></pre>

<p>This isn't ideal. for a start, its not realtime, inserts/updates will not be immediately visible. Also, you've got a query running to update the MV whether you need it or not (this can be tune to whatever time frame, or on demand). But, this does show how much faster an MV can make it seem to the end user, if you can live with values which aren't quite upto the second accurate.</p>
"
52090,2600,2008-09-09T14:58:52Z,51502,23,"<p>Part of learning a new programming language is learning to read code in that language.  A crutch like this may make it easier to read your own code, but it's going to impede the process of learning how to read anyone else's Python code.  I really think you'd be better off getting rid of the end of block comments and getting used to normal Python.</p>
"
52111,5434,2008-09-09T15:09:04Z,51502,-1,"<p>I would look in to understanding more details about Python syntax. Often times if a piece of code looks odd, there usually is a better way to write it. For example, in the above example:</p>

<pre><code>bar = foo if baz else None
while bar not biz:
    bar = i_am_going_to_find_you_biz_i_swear_on_my_life()

did_i_not_warn_you_biz()
my_father_is_avenged()
</code></pre>

<p>While it is a small change, it might help the readability. Also, in all honesty, I've never used a while loop, so there is a good change you would end up with a nice concise list comprehension or for loop instead. ;)</p>
"
52136,5434,2008-09-09T15:18:50Z,47801,1,"<p>I don't think AuthKit is actively maintained anymore. It does use the Paste (<a href=""http://pythonpaste.org"" rel=""nofollow"">http://pythonpaste.org</a>) libs though for things like HTTP Basic/Digest authentication. I would probably go ahead and take a look at the source for some inspiration and then use the Paste tools if you want to use HTTP authentication. </p>

<p>There is also OpenID which is very easy to setup. The python-openid libs have an excellent example that is easy to translate to WSGI for wrapping a Pylons app. You can look at an example:</p>

<p><a href=""http://ionrock.org/hg/brightcontent-main/file/d87b7dcc606c/brightcontent/plugins/openidauth.py"" rel=""nofollow"">http://ionrock.org/hg/brightcontent-main/file/d87b7dcc606c/brightcontent/plugins/openidauth.py</a></p>
"
52179,5357,2008-09-09T15:34:19Z,51553,0,"<p>Thanks for the Oracle timings, that's the kind of stuff I'm looking for (disappointing though :-)</p>

<p>Materialized views are probably worth considering as I think I can precompute the most interesting forms of this query for most users.</p>

<p>I don't think query round trip time should be very high as i'm running the the queries on the same machine that runs Postgres, so it can't add much latency?</p>

<p>I've also done some checking into the cache sizes, and it seems Postgres relies on the OS to handle caching, they specifically mention BSD as the ideal OS for this, so I thinking Mac OS ought to be pretty smart about bringing the table into memory.  Unless someone has more specific params in mind I think more specific caching is out of my control.</p>

<p>In the end I can probably put up with 200 ms response times, but knowing that 7 ms is a possible target makes me feel unsatisfied, as even 20-50 ms times would enable more users to have more up to date queries and get rid of a lots of caching and precomputed hacks.</p>

<p>I just checked the timings using MySQL 5 and they are slightly worse than Postgres.  So barring some major caching breakthroughs, I guess this is what I can expect going the relational db route.</p>

<p>I wish I could up vote some of your answers, but I don't have enough points yet.</p>
"
52191,2555,2008-09-09T15:37:18Z,23397,2,"<p>The Threading example from Eli will run the thread, but not do any of the work after that line.  </p>

<p>I'm going to look into the processing module and the subprocess module.  I think the com method I'm running needs to be in another process, not just in another thread.</p>
"
53036,4883,2008-09-09T22:19:25Z,53027,6,"<p>Yes, take a look at the ""6.4 Packages"" section in <a href=""http://docs.python.org/tut/node8.html"" rel=""nofollow"">http://docs.python.org/tut/node8.html</a>:</p>

<p>Basically, you can place a bunch of files into a directory and add an __init__.py file to the directory.  If the directory is in your PYTHONPATH or sys.path, you can do ""import directoryname"" to import everything in the directory or ""import directoryname.some_file_in_directory"" to import a specific file that is in the directory.</p>

<blockquote>
  <p>The __init__.py files are required to make Python treat the directories as containing packages; this is done to prevent directories with a common name, such as ""string"", from unintentionally hiding valid modules that occur later on the module search path. In the simplest case, __init__.py can just be an empty file, but it can also execute initialization code for the package or set the __all__ variable, described later. </p>
</blockquote>
"
53037,4279,2008-09-09T22:21:04Z,53027,8,"<ol>
<li>Put files in one folder. </li>
<li>Add &#95;&#95;init&#95;&#95;.py file to the folder. Do necessary imports in &#95;&#95;init&#95;&#95;.py</li>
<li><p>Replace multiple imports by one:</p>

<p>import folder_name  </p></li>
</ol>

<p>See <a href=""http://docs.python.org/tut/node8.html#SECTION008400000000000000000"" rel=""nofollow"">Python Package Management</a></p>
"
53170,4279,2008-09-09T23:48:07Z,51658,-2,"<p>You can use <a href=""http://man.he.net/?section=all&amp;topic=df"" rel=""nofollow"">df</a> as a cross-platform way. It is a part of <a href=""http://www.gnu.org/software/coreutils/"" rel=""nofollow"">GNU core utilities</a>. These are the core utilities which are expected to exist on every operating system. However, they are not installed on Windows by default (Here, <a href=""http://getgnuwin32.sourceforge.net/"" rel=""nofollow"">GetGnuWin32</a> comes in handy).</p>

<p><em>df</em> is a command-line utility, therefore a wrapper required for scripting purposes.
For example: </p>

<pre><code>from subprocess import PIPE, Popen

def free_volume(filename):
    """"""Find amount of disk space available to the current user (in bytes) 
       on the file system containing filename.""""""
    stats = Popen([""df"", ""-Pk"", filename], stdout=PIPE).communicate()[0]
    return int(stats.splitlines()[1].split()[3]) * 1024
</code></pre>
"
53173,1666,2008-09-09T23:48:30Z,53162,12,"<p>Put a <code>\</code> at the end of your line or enclose the statement in parens <code>( .. )</code>. From <a href=""http://www.ibm.com/developerworks/opensource/library/os-python5/"">IBM</a>:</p>

<pre><code>b = ((i1 &lt; 20) and
     (i2 &lt; 30) and
     (i3 &lt; 40))
</code></pre>

<p>or</p>

<pre><code>b = (i1 &lt; 20) and \
    (i2 &lt; 30) and \
    (i3 &lt; 40)
</code></pre>
"
53180,1057,2008-09-09T23:52:05Z,53162,615,"<p>What is the line?  You can just have arguments on the next line without any problems:</p>

<pre><code>a = dostuff(blahblah1, blahblah2, blahblah3, blahblah4, blahblah5, 
            blahblah6, blahblah7)
</code></pre>

<p>Otherwise you can do something like this:</p>

<pre><code>if a == True and \
   b == False
</code></pre>

<p>Check the <a href=""http://www.python.org/dev/peps/pep-0008/"">style guide</a> for more information.</p>

<p>From your example line:</p>

<pre><code>a = '1' + '2' + '3' + \
    '4' + '5'
</code></pre>

<p>Or:</p>

<pre><code>a = ('1' + '2' + '3' +
    '4' + '5')
</code></pre>

<p>Note that the style guide says that using the implicit continuation with parentheses is preferred, but in this particular case just adding parentheses around your expression is probably the wrong way to go.</p>
"
53182,3920,2008-09-09T23:53:17Z,53162,9,"<blockquote>
  <p>From the horse's mouth: <a href=""http://docs.python.org/ref/explicit-joining.html"">Explicit line
  joining </a></p>
  
  <p>Two or more physical lines may be
  joined into logical lines using
  backslash characters (<code>\</code>), as follows:
  when a physical line ends in a
  backslash that is not part of a string
  literal or comment, it is joined with
  the following forming a single logical
  line, deleting the backslash and the
  following end-of-line character. For
  example:</p>

<pre><code>if 1900 &lt; year &lt; 2100 and 1 &lt;= month &lt;= 12 \
   and 1 &lt;= day &lt;= 31 and 0 &lt;= hour &lt; 24 \
   and 0 &lt;= minute &lt; 60 and 0 &lt;= second &lt; 60:   # Looks like a valid date
        return 1
</code></pre>
  
  <p>A line ending in a backslash cannot
  carry a comment. A backslash does not
  continue a comment. A backslash does
  not continue a token except for string
  literals (i.e., tokens other than
  string literals cannot be split across
  physical lines using a backslash). A
  backslash is illegal elsewhere on a
  line outside a string literal. </p>
</blockquote>
"
53200,4279,2008-09-10T00:06:39Z,53162,119,"<p>From <a href=""http://www.python.org/dev/peps/pep-0008/"">Style Guide for Python Code</a>:</p>

<blockquote>
  <p><strong>The preferred way of wrapping long lines is by using Python's implied line continuation inside parentheses, brackets and braces.</strong> Long lines can be broken over multiple lines by wrapping expressions in parentheses. These should be used in preference to using a backslash for line continuation.</p>
  
  <p>Backslashes may still be appropriate at times. For example, long, multiple with-statements cannot use implicit continuation, so backslashes are acceptable:</p>

<pre><code>with open('/path/to/some/file/you/want/to/read') as file_1, \
        open('/path/to/some/file/being/written', 'w') as file_2:
    file_2.write(file_1.read())
</code></pre>
  
  <p>Another such case is with assert statements.</p>
  
  <p>Make sure to indent the continued line appropriately. The preferred place to break around a binary operator is <strong>after</strong> the operator, not before it. Some examples:</p>

<pre><code>class Rectangle(Blob):

    def __init__(self, width, height,
                 color='black', emphasis=None, highlight=0):
        if (width == 0 and height == 0 and
                color == 'red' and emphasis == 'strong' or
                highlight &gt; 100):
            raise ValueError(""sorry, you lose"")
        if width == 0 and height == 0 and (color == 'red' or
                                           emphasis is None):
            raise ValueError(""I don't think so -- values are %s, %s"" %
                             (width, height))
        Blob.__init__(self, width, height,
                      color, emphasis, highlight)
</code></pre>
</blockquote>

<p>EDIT: PEP8 now recommends the <em>opposite convention</em> (for breaking at binary operations) used by Mathematicians and their publishers to improve readability. </p>

<p>Donald Knuth's style of breaking <strong>before</strong> a binary operator aligns operators vertically, thus reducing the eye's workload when determining which items are added and subtracted.</p>

<p>From <a href=""http://legacy.python.org/dev/peps/pep-0008/#should-a-line-break-before-or-after-a-binary-operator"">PEP8: Should a line break before or after a binary operator?</a>:</p>

<blockquote>
  <p>Donald Knuth explains the traditional rule in his Computers and Typesetting series: ""Although formulas within a paragraph always break after binary operations and relations, displayed formulas always break before binary operations""[3].</p>
  
  <p>Following the tradition from mathematics usually results in more readable code:</p>

<pre><code># Yes: easy to match operators with operands
income = (gross_wages
          + taxable_interest
          + (dividends - qualified_dividends)
          - ira_deduction
          - student_loan_interest)
</code></pre>
  
  <p>In Python code, it is permissible to break before or after a binary operator, as long as the convention is consistent locally. For new code Knuth's style is suggested.</p>
</blockquote>

<p>[3]: Donald Knuth's The TeXBook, pages 195 and 196</p>
"
53237,1659,2008-09-10T00:42:13Z,53225,3,"<p><a href=""http://docs.python.org/ref/types.html"" rel=""nofollow""><strong>im_self</strong> attribute</a></p>
"
53255,5357,2008-09-10T00:58:03Z,47789,3,"<p>Sometimes you can get away with the <em>tee</em> function from <a href=""https://docs.python.org/3/library/itertools.html"" rel=""nofollow"">itertools</a>, it returns multiple iterators for the same generator that can be used independently.</p>
"
53303,2199,2008-09-10T01:47:32Z,51553,2,"<p>I'm a MS-SQL guy myself, and we'd use <a href=""http://msdn.microsoft.com/en-us/library/ms178015.aspx"" rel=""nofollow"">DBCC PINTABLE</a> to keep a table cached, and <a href=""http://msdn.microsoft.com/en-us/library/ms184361.aspx"" rel=""nofollow"">SET STATISTICS IO</a> to see that it's reading from cache, and not disk. </p>

<p>I can't find anything on Postgres to mimic PINTABLE, but <a href=""http://www.postgresql.org/docs/current/static/pgbuffercache.html"" rel=""nofollow"">pg_buffercache</a> seems to give details on what is in the cache - you may want to check that, and see if your table is actually being cached.</p>

<p>A quick back of the envelope calculation makes me suspect that you're paging from disk. Assuming Postgres uses 4-byte integers, you have (6 * 4) bytes per row, so your table is a minimum of (24 * 350,000) bytes ~ 8.4MB. Assuming 40 MB/s sustained throughput on your HDD, you're looking at right around 200ms to read the data (which, <a href=""http://stackoverflow.com/questions/51553/why-are-sql-aggregate-functions-so-much-slower-than-python-and-java-or-poor-man#51668"" rel=""nofollow"">as pointed out</a>, should be where almost all of the time is being spent). </p>

<p>Unless I screwed up my math somewhere, I don't see how it's possible that you are able to read 8MB into your Java app and process it in the times you're showing - unless that file is already cached by either the drive or your OS.</p>
"
53322,4279,2008-09-10T02:19:09Z,53225,27,"<pre><code>def isbound(method):
    return method.im_self is not None

def instance(bounded_method):
    return bounded_method.im_self
</code></pre>

<p><a href=""http://docs.python.org/ref/types.html"">User-defined methods:</a></p>

<blockquote>
  <p>When a user-defined method object is
  created by retrieving a user-defined
  function object from a class, its
  <code>im_self</code> attribute is <code>None</code> and the
  method object is said to be unbound.
  When one is created by retrieving a
  user-defined function object from a
  class via one of its instances, its
  <code>im_self</code> attribute is the instance, and
  the method object is said to be bound.
  In either case, the new method's
  <code>im_class</code> attribute is the class from
  which the retrieval takes place, and
  its <code>im_func</code> attribute is the original
  function object.</p>
</blockquote>

<p>In Python <a href=""http://docs.python.org/dev/whatsnew/2.6.html"">2.6 and 3.0</a>:</p>

<blockquote>
  <p>Instance method objects have new
  attributes for the object and function
  comprising the method; the new synonym
  for <code>im_self</code> is <code>__self__</code>, and <code>im_func</code>
  is also available as <code>__func__</code>. The old
  names are still supported in Python
  2.6, but are gone in 3.0.</p>
</blockquote>
"
53333,5357,2008-09-10T02:29:45Z,51553,5,"<p>I retested with MySQL specifying ENGINE = MEMORY and it doesn't change a thing (still 200 ms).  Sqlite3 using an in-memory db gives similar timings as well (250 ms).</p>

<p>The math <a href=""http://stackoverflow.com/questions/51553/why-are-sql-aggregate-functions-so-much-slower-than-python-and-java-or-poor-man#53303"" rel=""nofollow"">here</a> looks correct (at least the size, as that's how big the sqlite db is :-)</p>

<p>I'm just not buying the disk-causes-slowness argument as there is every indication the tables are in memory (the postgres guys all warn against trying too hard to pin tables to memory as they swear the OS will do it better than the programmer)</p>

<p>To clarify the timings, the Java code is not reading from disk, making it a totally unfair comparison if Postgres is reading from the disk and calculating a complicated query, but that's really besides the point, the DB should be smart enough to bring a small table into memory and precompile a stored procedure IMHO.</p>

<p>UPDATE (in response to the first comment below):</p>

<p><em>I'm not sure how I'd test the query without using an aggregation function in a way that would be fair, since if i select all of the rows it'll spend tons of time serializing and formatting everything.  I'm not saying that the slowness is due to the aggregation function, it could still be just overhead from concurrency, integrity, and friends.  I just don't know how to isolate the aggregation as the sole independent variable.</em></p>
"
53522,429,2008-09-10T06:28:05Z,53513,2388,"<pre><code>if not a:
  print(""List is empty"")
</code></pre>

<p>Using the implicit booleanness of the empty list <code>a</code> is quite pythonic.</p>
"
53523,5066,2008-09-10T06:28:39Z,53513,35,"<p>I have seen the below as preferred, as it will catch the null list as well:</p>

<pre><code>if not a:
    print ""The list is empty or null""
</code></pre>
"
53525,720,2008-09-10T06:31:22Z,53513,65,"<p>An empty list is itself considered false in true value testing (see <a href=""https://docs.python.org/2/library/stdtypes.html#truth-value-testing"">python documentation</a>):</p>

<pre><code>a = []
if a:
     print ""not empty""
</code></pre>

<p>@Daren Thomas</p>

<blockquote>
  <p>EDIT: Another point against testing
  the empty list as False: What about
  polymorphism? You shouldn't depend on
  a list being a list. It should just
  quack like a duck - how are you going
  to get your duckCollection to quack
  ''False'' when it has no elements?</p>
</blockquote>

<p>Your duckCollection should implement <code>__nonzero__</code> or <code>__len__</code> so the if a: will work without problems.</p>
"
53533,5342,2008-09-10T06:43:14Z,53513,4,"<p>I prefer the following:</p>

<pre><code>if a == []:
   print ""The list is empty.""
</code></pre>

<p>Readable and you don't have to worry about calling a function like <code>len()</code> to iterate through the variable. Although I'm not entirely sure what the BigO notation of something like this is... but Python's so blazingly fast I doubt it'd matter unless <code>a</code> was gigantic.</p>
"
53549,2260,2008-09-10T07:07:59Z,53543,14,"<p>If you <em>do</em> find you need to write unique code for an environment, use pythons </p>

<pre><code>import mymodule_jython as mymodule

import mymodule_cpython as mymodule
</code></pre>

<p>have this stuff in a simple module (''module_importer''?) and write your code like this:</p>

<pre><code>from module_importer import mymodule
</code></pre>

<p>This way, all you need to do is alter <code>module_importer.py</code> per platform.</p>
"
53713,4997,2008-09-10T09:45:20Z,51553,1,"<p>Are you using TCP to access the Postgres? In that case Nagle is messing with your timing.</p>
"
53752,1057,2008-09-10T10:33:38Z,53513,565,"<p>The pythonic way to do it is from the <a href=""https://www.python.org/dev/peps/pep-0008"">PEP 8 style guide</a>:</p>

<blockquote>
  <p>For sequences, (strings, lists, tuples), use the fact that empty sequences are false.
  </p>

<pre><code><b>Yes:</b> if not seq:
     if seq:

<b>No:</b>  if len(seq):
     if not len(seq):
</code></pre>
</blockquote>
"
53791,5190,2008-09-10T11:20:27Z,53786,1,"<p>Why don't you try <a href=""http://grinder.sourceforge.net"" rel=""nofollow"">The Grinder 3</a> to load test your server, it comes with all this and more prebuilt, and it supports python as a scripting language</p>
"
54008,3171,2008-09-10T13:14:54Z,53997,12,"<p>As Google Web Toolkit is a <a href=""http://code.google.com/support/bin/answer.py?answer=54830&amp;topic=10208"" rel=""nofollow"">subset of Java</a> it works best when you Java at the backend too.  Since Google App Engine is currently <a href=""http://code.google.com/appengine/kb/general.html#language"" rel=""nofollow"">Python only</a> I think you'd have to do a lot of messing about to get your server and client to talk nicely to each other.</p>

<p>jQuery seems to be the most popular JavaScript library option in the <a href=""http://www.djangosnippets.org/tags/ajax/?page=1"" rel=""nofollow"">AJAX Tag at DjangoSnippets.com</a>.</p>

<p><strong>Edit:</strong> The above is only true of Google App Engine applications written in Python.  As Google App Engine now supports Java, GWT could now be a good choice for writing an AJAX front end.  <a href=""http://code.google.com/webtoolkit/doc/latest/tutorial/appengine.html"" rel=""nofollow"">Google even have a tutorial showing you how to do it.</a></p>
"
54015,4276,2008-09-10T13:19:51Z,53997,3,"<p>I'd recommend looking into a pure javascript framework (probably Jquery) for your client-side code, and write JSON services in python- that seems to be the easiest / bestest way to go.</p>

<p>Google Web Toolkit lets you write the UI in Java and compile it to javascript. As Dave says, it may be a better choice where the backend is in Java, as it has nice RPC hooks for that case.</p>
"
54034,3757,2008-09-10T13:29:54Z,53997,1,"<p>jQuery is a fine library, but also check out the <a href=""http://www.prototypejs.org/"" rel=""nofollow"">Prototype JavaScript framework</a>. It really turns JavaScript from being an occasionally awkward language into a beautiful and elegant language.</p>
"
54313,1530,2008-09-10T15:04:33Z,48123,5,"<p>Glade is very useful for creating interfaces, it means you can easily change the GUI without doing much coding. You'll find that if you want to do anything useful (e.g. build a treeview) you will have to get familiar with various parts of the GTK documentation  - in practice finding a good tutorial/examples. </p>
"
54873,1659,2008-09-10T18:02:43Z,54867,340,"<p>From <a href=""http://docs.python.org/2/reference/datamodel.html#new-style-and-classic-classes"">http://docs.python.org/2/reference/datamodel.html#new-style-and-classic-classes</a> :</p>

<blockquote>
  <p>Up to Python 2.1, old-style classes were the only flavour available to the user. The concept of (old-style) class is unrelated to the concept of type: if <code>x</code> is an instance of an old-style class, then <code>x.__class__</code> designates the class of <code>x</code>, but <code>type(x)</code> is always <code>&lt;type 'instance'&gt;</code>. This reflects the fact that all old-style instances, independently of their class, are implemented with a single built-in type, called instance. </p>
  
  <p><strong>New-style classes were introduced in Python 2.2 to unify the concepts of class and type</strong>. A new-style class is simply a user-defined type, no more, no less. If x is an instance of a new-style class, then <code>type(x)</code> is typically the same as <code>x.__class__</code> (although this is not guaranteed – a new-style class instance is permitted to override the value returned for <code>x.__class__</code>).</p>
  
  <p><strong>The major motivation for introducing new-style classes is to provide a unified object model with a full meta-model</strong>. It also has a number of immediate benefits, like the ability to subclass most built-in types, or the introduction of ""descriptors"", which enable computed properties. </p>
  
  <p><strong>For compatibility reasons, classes are still old-style by default</strong>. New-style classes are created by specifying another new-style class (i.e. a type) as a parent class, or the ""top-level type"" object if no other parent is needed. The behaviour of new-style classes differs from that of old-style classes in a number of important details in addition to what type returns. Some of these changes are fundamental to the new object model, like the way special methods are invoked. Others are ""fixes"" that could not be implemented before for compatibility concerns, like the method resolution order in case of multiple inheritance. </p>
  
  <p><strong>Python 3 only has new-style classes</strong>. No matter if you subclass from <code>object</code> or not, classes are new-style in Python 3. It is however recommended that you still subclass from <code>object</code>.</p>
</blockquote>
"
55041,5035,2008-09-10T19:00:38Z,53997,4,"<p>There is no reason why you shouldn't use GAE and Google Web Toolkit (GWT) together. You write your backend code in Python and the frontend code in Java (and possibly some JavaScript), which is then compiled to JavaScript. When using another AJAX framework you will also have this difference between server and client side language.</p>

<p>GWT has features that make remote invocation of java code on the server easier, but these are entirely optional. You can just use JSON or XML interfaces, just like with other AJAX frameworks.</p>

<p>GWT 1.5 also comes with JavaScript Overlay Types, that basically allow you to treat a piece of JSON data like a Java object when developing the client side code. You can read more about this <a href=""http://googlewebtoolkit.blogspot.com/2008/08/getting-to-really-know-gwt-part-2.html"" rel=""nofollow"">here</a>.</p>

<p><strong>Update:</strong></p>

<p>Now that Google has added Java support for Google App Engine, you can develop both backend and frontend code in Java on a full Google stack - if you like. There is a nice <a href=""http://code.google.com/eclipse/"" rel=""nofollow"">Eclipse plugin</a> from Google that makes it very easy to develop and deploy applications that use GAE, GWT or both.</p>
"
55188,4977,2008-09-10T20:08:48Z,55180,1,"<p>This snippet will do so.  If you're going to do it frequently, you might want to make a 'sortkeys' method or somesuch to make it easier on the eyes.</p>

<pre><code>keys = list(d.keys())
keys.sort()
for key in keys:
    print d[key]
</code></pre>

<p>Edit:  dF's solution is better -- I forgot all about sorted().</p>
"
55193,3002,2008-09-10T20:10:05Z,55180,16,"<p>Do you mean that you need the values sorted by the value of the key?
In that case, this should do it:</p>

<pre><code>for key in sorted(d):
    print d[key]
</code></pre>

<p><strong>EDIT:</strong> changed to use sorted(d) instead of sorted(d.keys()), thanks <a href=""http://stackoverflow.com/users/1694/eli-courtwright"" rel=""nofollow"">Eli</a>!</p>
"
55194,893,2008-09-10T20:10:51Z,55180,16,"<p>Or shorter,</p>

<pre><code>for key, value in sorted(d.items()):
    print value
</code></pre>
"
55197,2603,2008-09-10T20:11:55Z,55180,1,"<pre><code>&gt;&gt;&gt; d = {'b' : 'this is b', 'a': 'this is a' , 'c' : 'this is c'}
&gt;&gt;&gt; for k,v in sorted(d.items()):
...     print v, k
... 
this is a a
this is b b
this is c c
</code></pre>
"
55202,338,2008-09-10T20:12:48Z,55180,0,"<pre><code>d = {'b' : 'this is b', 'a': 'this is a' , 'c' : 'this is c'}
ks = d.keys()
ks.sort()
for k in ks:
    print ""this is "" + k
</code></pre>
"
55312,3594,2008-09-10T21:00:04Z,53543,10,"<p>@<a href=""#53549"" rel=""nofollow"">Daren Thomas</a>: I agree, but you should use the <a href=""http://docs.python.org/dev/library/platform.html#platform.python_implementation"" rel=""nofollow"">platform module</a> to determine which interpreter you're running.</p>
"
55354,4966,2008-09-10T21:23:53Z,54867,4,"<p>Or rather, you should always use new-style classes, <em>unless</em> you have code that needs to work with versions of Python older than 2.2.</p>
"
55385,3594,2008-09-10T21:44:53Z,50394,4,"<p>There's nothing wrong with using a command line utility to do what you want. If you put a nice wrapper around the service, you can implement the internals however you want! For example:</p>

<pre><code>class Whois(object):
    _whois_by_query_cache = {}

    def __init__(self, query):
        """"""Initializes the instance variables to defaults. See :meth:`lookup`
        for details on how to submit the query.""""""
        self.query = query
        self.domain = None
        # ... other fields.

    def lookup(self):
        """"""Submits the `whois` query and stores results internally.""""""
        # ... implementation
</code></pre>

<p>Now, whether or not you roll your own using urllib, wrap around a command line utility (like you're doing), or import a third party library and use that (like <a href=""http://stackoverflow.com/questions/50394#50423"" rel=""nofollow"">you're saying</a>), this interface stays the same.</p>

<p>This approach is generally not considered ugly at all -- <strong>sometimes command utilities do what you want and you should be able to leverage them</strong>. If speed ends up being a bottleneck, your abstraction makes the process of switching to a native Python implementation transparent to your client code.</p>

<p><a href=""http://www.python.org/dev/peps/pep-0020/"" rel=""nofollow"">Practicality beats purity</a> -- that's what's Pythonic. :)</p>
"
55399,238,2008-09-10T21:56:05Z,55391,0,"<pre><code>/&lt;input type=""hidden"" name=""fooId"" value=""([\d-]+)"" \/&gt;/
</code></pre>
"
55401,234,2008-09-10T21:57:00Z,55391,5,"<p>Parsing is one of those areas where you really don't want to roll your own if you can avoid it, as you'll be chasing down the edge-cases and bugs for years go come</p>

<p>I'd recommend using <a href=""http://www.crummy.com/software/BeautifulSoup/"" rel=""nofollow"">BeautifulSoup</a>. It has a very good reputation and looks from the docs like it's pretty easy to use.</p>
"
55404,4977,2008-09-10T21:59:47Z,55391,8,"<pre><code>import re
reg = re.compile('&lt;input type=""hidden"" name=""([^""]*)"" value=""&lt;id&gt;"" /&gt;')
value = reg.search(inputHTML).group(1)
print 'Value is', value
</code></pre>
"
55424,5190,2008-09-10T22:16:24Z,55391,27,"<p>For this particular case, BeautifulSoup is harder to write than a regex, but it is much more robust... I'm just contributing with the BeautifulSoup example, given that you already know which regexp to use :-)</p>

<pre><code>from BeautifulSoup import BeautifulSoup

#Or retrieve it from the web, etc. 
html_data = open('/yourwebsite/page.html','r').read()

#Create the soup object from the HTML data
soup = BeautifulSoup(html_data)
fooId = soup.find('input',name='fooId',type='hidden') #Find the proper tag
value = fooId.attrs[2][1] #The value of the third attribute of the desired tag 
                          #or index it directly via fooId['value']
</code></pre>
"
55493,NA,2008-09-10T23:33:46Z,55365,2,"<p>There's a program for Windows called XKeymacs that allows you to specify emacs keybindings for different programs.  It should work with IDLE.</p>

<p><a href=""http://www.cam.hi-ho.ne.jp/oishi/indexen.html"" rel=""nofollow"">http://www.cam.hi-ho.ne.jp/oishi/indexen.html</a></p>

<p>-Mark</p>
"
55654,3560,2008-09-11T01:39:33Z,48176,1,"<p>Use Twisted Manhole. Docs are a bit lacking, but it's easy enough to set up a telnet-based remote server and it comes with a GTK-based GUI.</p>

<ul>
<li><a href=""http://twistedmatrix.com/"" rel=""nofollow"">Main Twisted site</a></li>
<li><a href=""http://twistedmatrix.com/documents/8.1.0/api/twisted.manhole.html"" rel=""nofollow"">twisted.manhole API docs</a></li>
</ul>
"
55734,5700,2008-09-11T03:05:27Z,43290,8,"<p>I'm using two different approaches in my <code>models.py</code>. The first is the <code>permalink</code> decorator:</p>

<pre><code>from django.db.models import permalink

def get_absolute_url(self): 
    """"""Construct the absolute URL for this Item.""""""
    return ('project.app.views.view_name', [str(self.id)])
get_absolute_url = permalink(get_absolute_url)
</code></pre>

<p>You can also call <code>reverse</code> directly:</p>

<pre><code>from django.core.urlresolvers import reverse

def get_absolute_url(self): 
    """"""Construct the absolute URL for this Item.""""""
    return reverse('project.app.views.view_name', None, [str(self.id)])
</code></pre>
"
56008,680,2008-09-11T08:18:07Z,55365,6,"<p>IDLE provides Emacs keybindings without having to install other software. </p>

<ol>
<li>Open up the menu item Options -> Configure IDLE...</li>
<li>Go to Keys tab</li>
<li>In the drop down menu on the right
side of the dialog change the select
to ""IDLE Classic Unix""</li>
</ol>

<p>It's not the true emacs key bindings but you get the basics like movement, saving/opening, ...</p>
"
56032,2963,2008-09-11T08:30:23Z,53786,0,"<p>Instead of giving the number of requests as a fixed value, why not use a scaling factor instead? At the moment, you're treating requests as a limited quantity, and randomising the days on which those requests fall. It would seem more reasonable to treat your requests-per-day as independent.</p>

<pre><code>from datetime import *
from random import *

timeline = []
scaling = 10
start_date = date(2008, 5, 1)
end_date = date(2008, 6, 1)

num_days = (end_date - start_date).days + 1
days = [start_date + timedelta(i) for i in range(num_days)]
requests = [int(scaling * weibullvariate(0.5, 2)) for i in range(num_days)]
timeline = zip(days, requests)
timeline
</code></pre>
"
56102,5357,2008-09-11T09:11:50Z,53786,0,"<p>I rewrote the code above to be shorter (but maybe it's too obfuscated now?)</p>

<pre><code>timeline = (start_date + timedelta(days=days) for days in count(0))
how_many_days = (end_date - start_date).days
pick_a_day = lambda _:int(how_many_days * weibullvariate(0.5, 2))
days = sorted(imap(pick_a_day, xrange(how_many_responses)))
histogram = zip(timeline, (len(list(responses)) for day, responses in groupby(days)))
print '\n'.join((d.strftime('%Y-%m-%d ') + ""*"" * c) for d,c in histogram)
</code></pre>
"
56134,5757,2008-09-11T09:34:47Z,55180,1,"<pre><code>for key in sorted(d):
  print d[key]
</code></pre>
"
56144,5757,2008-09-11T09:41:15Z,55391,0,"<pre><code>/&lt;input\s+type=""hidden""\s+name=""([A-Za-z0-9_]+)""\s+value=""([A-Za-z0-9_\-]*)""\s*/&gt;/

&gt;&gt;&gt; import re
&gt;&gt;&gt; s = '&lt;input type=""hidden"" name=""fooId"" value=""12-3456789-1111111111"" /&gt;'
&gt;&gt;&gt; re.match('&lt;input\s+type=""hidden""\s+name=""([A-Za-z0-9_]+)""\s+value=""([A-Za-z0-9_\-]*)""\s*/&gt;', s).groups()
('fooId', '12-3456789-1111111111')
</code></pre>
"
56247,2963,2008-09-11T10:47:06Z,53786,1,"<p>Slightly longer but probably more readable rework of your last four lines:</p>

<pre><code>samples = [0 for i in xrange(how_many_days + 1)]
for s in xrange(how_many_responses):
    samples[min(int(how_many_days * weibullvariate(0.5, 2)), how_many_days)] += 1
histogram = zip(timeline, samples)
print '\n'.join((d.strftime('%Y-%m-%d ') + ""*"" * c) for d,c in histogram)
</code></pre>

<p>This always drops the samples within the date range, but you get a corresponding bump at the end of the timeline from all of the samples that are above the [0, 1] range.</p>
"
56262,2260,2008-09-11T10:55:44Z,56229,4,"<p>don't you actually want something like:</p>

<pre><code>html(head(script(type='text/javascript', content='var a = ...')),
body(h1('And I like the fact that 3 &lt; 1'), p('just some paragraph'))
</code></pre>

<p>I think I saw something like that somewhere. This would be wonderful.</p>

<p><strong>EDIT:</strong> Actually, I went and wrote a library today to do <em>just that</em>: <a href=""http://pypi.python.org/pypi/magictree"" rel=""nofollow"">magictree</a></p>

<p>You can use it like this:</p>

<pre><code>from magictree import html, head, script, body, h1, p
root = html(
         head(
           script('''var a = 'I love &amp;amp;aacute; letters''', 
                  type='text/javascript')),
         body(
           h1('And I like the fact that 3 &gt; 1')))

# root is a plain Element object, like those created with ET.Element...
# so you can write it out using ElementTree :)
tree = ET.ElementTree(root)
tree.write('foo.xhtml')
</code></pre>

<p>The magic in <code>magictree</code> lies in how the importing works: The <code>Element</code> factories are created when needed. Have a <a href=""http://code.google.com/p/pymagictree/source/browse/trunk/magictree.py"" rel=""nofollow"">look at the source</a>, it is <a href=""http://stackoverflow.com/questions/2447353/getattr-on-a-module"">based on an answer to another StackOverflow question</a>.</p>
"
56269,720,2008-09-11T11:04:15Z,56229,28,"<p>Another way is using the <a href=""http://codespeak.net/lxml/tutorial.html#the-e-factory"" rel=""nofollow"">E Factory</a> builder from lxml (available in <a href=""http://effbot.org/zone/element-builder.htm"" rel=""nofollow"">Elementtree</a> too)</p>

<pre><code>&gt;&gt;&gt; from lxml import etree

&gt;&gt;&gt; from lxml.builder import E

&gt;&gt;&gt; def CLASS(*args): # class is a reserved word in Python
...     return {""class"":' '.join(args)}

&gt;&gt;&gt; html = page = (
...   E.html(       # create an Element called ""html""
...     E.head(
...       E.title(""This is a sample document"")
...     ),
...     E.body(
...       E.h1(""Hello!"", CLASS(""title"")),
...       E.p(""This is a paragraph with "", E.b(""bold""), "" text in it!""),
...       E.p(""This is another paragraph, with a"", ""\n      "",
...         E.a(""link"", href=""http://www.python.org""), "".""),
...       E.p(""Here are some reserved characters: &lt;spam&amp;egg&gt;.""),
...       etree.XML(""&lt;p&gt;And finally an embedded XHTML fragment.&lt;/p&gt;""),
...     )
...   )
... )

&gt;&gt;&gt; print(etree.tostring(page, pretty_print=True))
&lt;html&gt;
  &lt;head&gt;
    &lt;title&gt;This is a sample document&lt;/title&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;h1 class=""title""&gt;Hello!&lt;/h1&gt;
    &lt;p&gt;This is a paragraph with &lt;b&gt;bold&lt;/b&gt; text in it!&lt;/p&gt;
    &lt;p&gt;This is another paragraph, with a
      &lt;a href=""http://www.python.org""&gt;link&lt;/a&gt;.&lt;/p&gt;
    &lt;p&gt;Here are some reservered characters: &amp;lt;spam&amp;amp;egg&amp;gt;.&lt;/p&gt;
    &lt;p&gt;And finally an embedded XHTML fragment.&lt;/p&gt;
  &lt;/body&gt;
&lt;/html&gt;
</code></pre>
"
56470,1694,2008-09-11T12:53:06Z,56229,10,"<p>I assume that you're actually creating an XML DOM tree, because you want to validate that what goes into this file is valid XML, since otherwise you'd just write a static string to a file.  If validating your output is indeed your goal, then I'd suggest</p>

<pre><code>from xml.dom.minidom import parseString

doc = parseString(""""""&lt;html&gt;
    &lt;head&gt;
        &lt;script type=""text/javascript""&gt;
            var a = 'I love &amp;amp;aacute; letters'
        &lt;/script&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;h1&gt;And I like the fact that 3 &amp;gt; 1&lt;/h1&gt;
    &lt;/body&gt;
    &lt;/html&gt;"""""")

with open(""foo.xhtml"", ""w"") as f:
    f.write( doc.toxml() )
</code></pre>

<p>This lets you just write the XML you want to output, validate that it's correct (since parseString will raise an exception if it's invalid) and have your code look much nicer.</p>

<p>Presumably you're not just writing the same static XML every time and want some substitution.  In this case I'd have lines like</p>

<pre><code>var a = '%(message)s'
</code></pre>

<p>and then use the % operator to do the substitution, like</p>

<pre><code>&lt;/html&gt;"""""" % {""message"": ""I love &amp;amp;aacute; letters""})
</code></pre>
"
56510,5577,2008-09-11T13:19:10Z,47701,8,"<p>Yeah, gdb is good for lower level debugging.</p>

<p>You can change threads with the <em>thread</em> command.</p>

<p>e.g</p>

<pre><code>(gdb) thr 2
[Switching to thread 2 (process 6159 thread 0x3f1b)]
(gdb) backtrace
....
</code></pre>

<p>You could also check out Python specific debuggers like <a href=""http://winpdb.org/about/"">Winpdb</a>, or <a href=""http://bashdb.sourceforge.net/pydb/"">pydb</a>. Both platform independent. </p>
"
56548,2963,2008-09-11T13:40:31Z,53786,1,"<p>This is quick and probably not that accurate, but if you calculate the PDF yourself, then at least you make it easier to lay several smaller/larger ones on a single timeline. <code>dev</code> is the std deviation in the Guassian noise, which controls the roughness. Note that this is <em>not</em> the 'right' way to generate what you want, but it's easy.</p>

<pre><code>import math
from datetime import datetime, timedelta, date
from random import gauss

how_many_responses = 1000
start_date = date(2008, 5, 1)
end_date = date(2008, 6, 1)
num_days = (end_date - start_date).days + 1
timeline = [start_date + timedelta(i) for i in xrange(num_days)]

def weibull(x, k, l):
    return (k / l) * (x / l)**(k-1) * math.e**(-(x/l)**k)

dev = 0.1
samples = [i * 1.25/(num_days-1) for i in range(num_days)]
probs = [weibull(i, 2, 0.5) for i in samples]
noise = [gauss(0, dev) for i in samples]
simdata = [max(0., e + n) for (e, n) in zip(probs, noise)]
events = [int(p * (how_many_responses / sum(probs))) for p in simdata]

histogram = zip(timeline, events)

print '\n'.join((d.strftime('%Y-%m-%d ') + ""*"" * c) for d,c in histogram)
</code></pre>
"
56832,5733,2008-09-11T15:11:04Z,56820,-4,"<p>What about:</p>

<pre><code>round(n,1)+epsilon
</code></pre>
"
56833,4435,2008-09-11T15:11:41Z,56820,66,"<p>can't help the way it's stored, but at least formatting works correctly: </p>

<pre><code>'%.1f' % round(n, 1) # gives you '5.6'
</code></pre>
"
56840,338,2008-09-11T15:12:19Z,56820,5,"<p>You can switch the data type to a integer:</p>

<pre><code>&gt;&gt;&gt; n = 5.59
&gt;&gt;&gt; int(n * 10) / 10.0
5.5
&gt;&gt;&gt; int(n * 10 + 0.5) 
56
</code></pre>

<p>And then display the number by inserting the locale's decimal separator.</p>

<p>However, <a href=""http://stackoverflow.com/questions/56820/round-in-python-doesnt-seem-to-be-rounding-properly#56833"" rel=""nofollow"">Jimmy's answer</a> is better.</p>
"
56841,157,2008-09-11T15:12:25Z,56820,3,"<p>You can use the string format operator <code>%</code>, similar to sprintf.</p>

<pre><code>mystring = ""%.2f"" % 5.5999
</code></pre>
"
56844,616,2008-09-11T15:13:28Z,56820,9,"<p>You get '5.6' if you do <code>str(round(n, 1))</code> instead of just <code>round(n, 1)</code>.</p>
"
56845,3347,2008-09-11T15:13:32Z,56820,5,"<p>Floating point math is vulnerable to slight, but annoying, precision inaccuracies.  If you can work with integer or fixed point, you will be guaranteed precision.</p>
"
56849,3920,2008-09-11T15:14:15Z,56820,3,"<p><strong>printf</strong> the sucker.</p>

<pre><code>print '%.1f' % 5.59  # returns 5.6
</code></pre>
"
56850,5190,2008-09-11T15:14:22Z,56820,81,"<p>Formatting works correctly even without having to round:</p>

<pre><code>""%.1f"" % n
</code></pre>
"
57704,4702,2008-09-11T21:27:35Z,56820,15,"<p><code>round(5.59, 1)</code> is working fine. The problem is that 5.6 cannot be represented exactly in binary floating point.</p>

<pre><code>&gt;&gt;&gt; 5.6
5.5999999999999996
&gt;&gt;&gt;
</code></pre>

<p>As Vinko says, you can use string formatting to do rounding for display.</p>

<p>Python has a <a href=""http://docs.python.org/lib/module-decimal.html"">module for decimal arithmetic</a> if you need that.</p>
"
57745,4279,2008-09-11T21:52:28Z,57708,7,"<p>You could find an answer here -- <a href=""http://stackoverflow.com/questions/53224/getting-international-characters-from-a-web-page#53246"">Getting international characters from a web page?</a></p>

<p><strong>EDIT</strong>: It seems like <code>BeautifulSoup</code> doesn't convert entities written in hexadecimal form. It can be fixed:</p>

<pre><code>import copy, re
from BeautifulSoup import BeautifulSoup

hexentityMassage = copy.copy(BeautifulSoup.MARKUP_MASSAGE)
# replace hexadecimal character reference by decimal one
hexentityMassage += [(re.compile('&amp;#x([^;]+);'), 
                     lambda m: '&amp;#%d;' % int(m.group(1), 16))]

def convert(html):
    return BeautifulSoup(html,
        convertEntities=BeautifulSoup.HTML_ENTITIES,
        markupMassage=hexentityMassage).contents[0].string

html = '&lt;html&gt;&amp;#x01ce;&amp;#462;&lt;/html&gt;'
print repr(convert(html))
# u'\u01ce\u01ce'
</code></pre>

<p><strong>EDIT</strong>: </p>

<p><a href=""http://effbot.org/zone/re-sub.htm#unescape-html"" rel=""nofollow""><code>unescape()</code></a> function mentioned by <a href=""http://stackoverflow.com/questions/57708/convert-xml-html-entities-into-unicode-string-in-python/58125#58125"">@dF</a> which uses  <code>htmlentitydefs</code> standard module and <code>unichr()</code> might be more appropriate in this case.</p>
"
57833,4702,2008-09-11T22:42:14Z,683,29,"<p>Using a list comprehension would build a temporary list, which could eat all your memory if the sequence being searched is large. Even if the sequence is not large, building the list means iterating over the whole of the sequence before <code>in</code> could start its search.</p>

<p>The temporary list can be avoiding by using a generator expression:</p>

<pre><code>foo = 12
foo in (obj.id for obj in bar)
</code></pre>

<p>Now, as long as <code>obj.id == 12</code> near the start of <code>bar</code>, the search will be fast, even if <code>bar</code> is infinitely long.</p>

<p>As @Matt suggested, it's a good idea to use <code>hasattr</code> if any of the objects in <code>bar</code> can be missing an <code>id</code> attribute:</p>

<pre><code>foo = 12
foo in (obj.id for obj in bar if hasattr(obj, 'id'))
</code></pre>
"
57877,5169,2008-09-11T23:09:08Z,57708,18,"<p>Use the builtin <code>unichr</code> -- BeautifulSoup isn't necessary:</p>

<pre><code>&gt;&gt;&gt; entity = '&amp;#x01ce'
&gt;&gt;&gt; unichr(int(entity[3:],16))
u'\u01ce'
</code></pre>
"
58125,3002,2008-09-12T01:40:41Z,57708,55,"<p>Python has the <a href=""https://docs.python.org/2/library/htmllib.html#module-htmlentitydefs"">htmlentitydefs</a> module, but this doesn't include a function to unescape HTML entities.</p>

<p>Python developer Fredrik Lundh (author of elementtree, among other things) has  such a function <a href=""http://effbot.org/zone/re-sub.htm#unescape-html"">on his website</a>, which works with decimal, hex and named entities:</p>

<pre><code>import re, htmlentitydefs

##
# Removes HTML or XML character references and entities from a text string.
#
# @param text The HTML (or XML) source text.
# @return The plain text, as a Unicode string, if necessary.

def unescape(text):
    def fixup(m):
        text = m.group(0)
        if text[:2] == ""&amp;#"":
            # character reference
            try:
                if text[:3] == ""&amp;#x"":
                    return unichr(int(text[3:-1], 16))
                else:
                    return unichr(int(text[2:-1]))
            except ValueError:
                pass
        else:
            # named entity
            try:
                text = unichr(htmlentitydefs.name2codepoint[text[1:-1]])
            except KeyError:
                pass
        return text # leave as is
    return re.sub(""&amp;#?\w+;"", fixup, text)
</code></pre>
"
58129,1199,2008-09-12T01:42:38Z,58119,9,"<p>Well, <code>re.compile</code> certainly may:</p>

<pre><code>&gt;&gt;&gt; import re
&gt;&gt;&gt; re.compile('he(lo')
Traceback (most recent call last):
  File ""&lt;stdin&gt;"", line 1, in &lt;module&gt;
  File ""C:\Python25\lib\re.py"", line 180, in compile
    return _compile(pattern, flags)
  File ""C:\Python25\lib\re.py"", line 233, in _compile
    raise error, v # invalid expression
sre_constants.error: unbalanced parenthesis
</code></pre>

<p><a href=""http://docs.python.org/lib/node46.html#l2h-408"">The documentation</a> does support this, in a roundabout way - check the bottom of the ""Module Contents"" page for (brief) description of the <code>error</code> exception.</p>

<p>Unfortunately, I don't have any answer to the general question. I suppose the documentation for the various modules varies in quality and thoroughness. If there were particular modules you were interested in, you might be able to <a href=""http://www.depython.net/"">decompile</a> them (if written in Python) or even <a href=""http://www.python.org/download/"">look at the source</a>, if they're in the standard library.</p>
"
58168,188,2008-09-12T02:10:16Z,58119,6,"<p>Unlike Java, where there are exceptions that must be declared to be raised (and some that don't have to be, but that's another story), any Python code may raise any exception at any time.</p>

<p>There are a list of <a href=""http://docs.python.org/lib/module-exceptions.html"">built-in exceptions</a>, which generally has some description of when these exceptions might be raised.  Its up to you as to how much exception handling you will do, and if you will handle stuff gracefully, or just fail with a traceback.</p>
"
58296,3560,2008-09-12T04:23:53Z,58294,7,"<p>This isn't possible without cooperation from an external server, because there could be any number of NATs between you and the other computer. If it's a custom protocol, you could ask the other system to report what address it's connected to.</p>
"
58299,4977,2008-09-12T04:24:34Z,58294,4,"<p>The only way I can think of that's guaranteed to give it to you is to hit a service like <a href=""http://whatismyip.com/"" rel=""nofollow"">http://whatismyip.com/</a> to get it.</p>
"
58417,3715,2008-09-12T06:53:25Z,51520,13,"<p>Better still, install the <a href=""http://pypi.python.org/pypi/path.py/2.2""><code>path.py</code></a> module, it wraps all the <code>os.path</code> functions and other related functions into methods on an object that can be used wherever strings are used:</p>

<pre><code>&gt;&gt;&gt; from path import path
&gt;&gt;&gt; path('mydir/myfile.txt').abspath()
'C:\\example\\cwd\\mydir\\myfile.txt'
&gt;&gt;&gt;
</code></pre>
"
58460,3577,2008-09-12T07:48:15Z,56229,0,"<p>Try <a href=""http://uche.ogbuji.net/tech/4suite/amara"" rel=""nofollow"">http://uche.ogbuji.net/tech/4suite/amara</a>. It is quite complete and has a straight forward set of access tools. Normal Unicode support, etc. </p>

<pre><code>#
#Output the XML entry
#
def genFileOLD(out,label,term,idval):
    filename=entryTime() + "".html""
    writer=MarkupWriter(out, indent=u""yes"")
    writer.startDocument()
    #Test element and attribute writing
    ans=namespace=u'http://www.w3.org/2005/Atom'
    xns=namespace=u'http://www.w3.org/1999/xhtml'
    writer.startElement(u'entry',
       ans,
       extraNss={u'x':u'http://www.w3.org/1999/xhtml' ,
                 u'dc':u'http://purl.org/dc/elements/1.1'})
    #u'a':u'http://www.w3.org/2005/Atom',
    #writer.attribute(u'xml:lang',unicode(""en-UK""))

    writer.simpleElement(u'title',ans,content=unicode(label))
    #writer.simpleElement(u'a:subtitle',ans,content=u' ')
    id=unicode(""http://www.dpawson.co.uk/nodesets/""+afn.split(""."")[0])
    writer.simpleElement(u'id',ans,content=id)
    writer.simpleElement(u'updated',ans,content=unicode(dtime()))
    writer.startElement(u'author',ans)
    writer.simpleElement(u'name',ans,content=u'Dave ')
    writer.simpleElement(u'uri',ans,
      content=u'http://www.dpawson.co.uk/nodesets/'+afn+"".xml"")
    writer.endElement(u'author')
    writer.startElement(u'category', ans)
    if (prompt):
        label=unicode(raw_input(""Enter label ""))
    writer.attribute(u'label',unicode(label))
    if (prompt):
        term = unicode(raw_input(""Enter term to use ""))
    writer.attribute(u'term', unicode(term))
    writer.endElement(u'category')
    writer.simpleElement(u'rights',ans,content=u'\u00A9 Dave 2005-2008')
    writer.startElement(u'link',ans)
    writer.attribute(u'href',
         unicode(""http://www.dpawson.co.uk/nodesets/entries/""+afn+"".html""))
    writer.attribute(u'rel',unicode(""alternate""))
    writer.endElement(u'link')
    writer.startElement(u'published', ans)
    dt=dtime()
    dtu=unicode(dt)
    writer.text(dtu)
    writer.endElement(u'published')
    writer.simpleElement(u'summary',ans,content=unicode(label))
    writer.startElement(u'content',ans)
    writer.attribute(u'type',unicode(""xhtml""))
    writer.startElement(u'div',xns)
    writer.simpleElement(u'h3',xns,content=unicode(label))
    writer.endElement(u'div')
    writer.endElement(u'content')
    writer.endElement(u'entry')
</code></pre>
"
58701,1199,2008-09-12T11:11:03Z,58622,30,"<p>This is <a href=""http://www.stack.nl/~dimitri/doxygen/docblocks.html#pythonblocks"">documented on the doxygen website</a>, but to summarize here:</p>

<p>You can use doxygen to document your Python code. You can either use the Python documentation string syntax:</p>

<pre><code>""""""@package docstring
Documentation for this module.

More details.
""""""

def func():
    """"""Documentation for a function.

    More details.
    """"""
    pass
</code></pre>

<p>In which case the comments will be extracted by doxygen, but you won't be able to use any of the <a href=""http://www.stack.nl/~dimitri/doxygen/commands.html#cmd_intro"">special doxygen commands</a>.</p>

<p><strong>Or</strong> you can (similar to C-style languages under doxygen) double up the comment marker (<code>#</code>) on the first line before the member:</p>

<pre><code>## @package pyexample
#  Documentation for this module.
#
#  More details.

## Documentation for a function.
#
#  More details.
def func():
    pass
</code></pre>

<p>In that case, you can use the special doxygen commands. There's no particular Python output mode, but you can apparently improve the results by setting <code>OPTMIZE_OUTPUT_JAVA</code> to <code>YES</code>.</p>

<p>Honestly, I'm a little surprised at the difference - it seems like once doxygen can detect the comments in ## blocks or """""" blocks, most of the work would be done and you'd be able to use the special commands in either case. Maybe they expect people using """""" to adhere to more Pythonic documentation practices and that would interfere with the special doxygen commands?</p>
"
58917,5616,2008-09-12T13:13:57Z,58711,7,"<p>You could actually pull this off, but it would require using metaclasses, which are <em>deep</em> magic (there be dragons). If you want an intro to metaclasses, there's a series of <a href=""http://www.ibm.com/developerworks/linux/library/l-pymeta.html"" rel=""nofollow"">articles from IBM</a> which manage to introduce the ideas without melting your brain.</p>

<p>The source code from an ORM like SQLObject might help, too, since it uses this same kind of declarative syntax.</p>
"
58990,3002,2008-09-12T13:40:35Z,58711,2,"<p>Maybe not as slick as the Ruby version, but how about something like this:</p>

<pre><code>from Boots import App, Para, Button, alert

def Shoeless(App):
    t = Para(text = 'Not Clicked')
    b = Button(label = 'The label')

    def on_b_clicked(self):
        alert('You clicked the button!')
        self.t.text = 'Clicked!'
</code></pre>

<p><a href=""http://stackoverflow.com/questions/58711/how-would-you-design-a-very-pythonic-ui-framework#58917"" rel=""nofollow"">Like Justin said</a>, to implement this you would need to use a custom metaclass on class <code>App</code>, and a bunch of properties on <code>Para</code> and <code>Button</code>. This actually wouldn't be too hard.</p>

<p>The problem you run into next is: how do you keep track of the <em>order</em> that things appear in the class definition? In Python 2.x, there is no way to know if <code>t</code> should be above <code>b</code> or the other way around, since you receive the contents of the class definition as a python <code>dict</code>.</p>

<p>However, in Python 3.0 <a href=""http://www.python.org/dev/peps/pep-3115/"" rel=""nofollow"">metaclasses are being changed</a> in a couple of (minor) ways. One of them is the <code>__prepare__</code> method, which allows you to supply your own custom dictionary-like object to be used instead -- this means you'll be able to track the order in which items are defined, and position them accordingly in the window.</p>
"
59018,720,2008-09-12T13:48:59Z,58622,11,"<p>An other very good documentation tool is <a href=""http://sphinx.pocoo.org/"">sphinx</a>. It will be used for the upcoming python 2.6 <a href=""http://docs.python.org/dev/"">documentation</a> and is used by <a href=""http://docs.djangoproject.com/en/dev/"">django</a> and a lot of other python projects.</p>

<p>From the sphinx website:</p>

<ul>
<li><strong>Output formats</strong>: HTML (including Windows HTML Help) and LaTeX, for printable PDF versions</li>
<li><strong>Extensive cross-references</strong>: semantic markup and automatic links for functions, classes, glossary terms and similar pieces of information</li>
<li><strong>Hierarchical structure</strong>: easy definition of a document tree, with automatic links to siblings, parents and children</li>
<li><strong>Automatic indices</strong>: general index as well as a module index</li>
<li><strong>Code handling</strong>: automatic highlighting using the Pygments highlighter</li>
<li><strong>Extensions</strong>: automatic testing of code snippets, inclusion of docstrings from Python modules, and more</li>
</ul>
"
59179,985,2008-09-12T14:51:51Z,47701,3,"<p>If you mean the pydb, there is no way to do it. There was some effort in that direction:
<a href=""http://svn.python.org/projects/sandbox/trunk/pdb/mpdb.py"" rel=""nofollow"">see the svn commit</a>, but it was abandoned. Supposedly <a href=""http://winpdb.org/docs/launch-time/"" rel=""nofollow"">winpdb supports it</a>.</p>
"
59235,1952,2008-09-12T15:11:00Z,55180,1,"<p>You can also sort a dictionary by value and control the sort order:</p>

<pre><code>import operator

d = {'b' : 'this is 3', 'a': 'this is 2' , 'c' : 'this is 1'}

for key, value in sorted(d.iteritems(), key=operator.itemgetter(1), reverse=True):
    print key, "" "", value
</code></pre>

<p>Output:<br />
b   this is 3<br />
a   this is 2<br />
c   this is 1</p>
"
59662,4960,2008-09-12T18:14:01Z,59648,2,"<p>Are you talking about doing this?</p>

<pre><code>&gt;&gt;&gt; a = [ ['a', 'b'], ['c', 'd'] ]
&gt;&gt;&gt; a[1]
['c', 'd']
&gt;&gt;&gt; a[1][1]
'd'
</code></pre>
"
59663,3002,2008-09-12T18:14:04Z,59648,1,"<p>Lists in python can contain any type of object -- If I understand the question correctly, will a <code>list</code> of <code>list</code>s do the job? Something like this (assuming you have a function <code>generate_poll_data()</code> which creates your data:</p>

<pre><code>data = []

for in xrange(num_iterations):
    data.append(generate_poll_data())
</code></pre>

<p>Then, <code>data[n]</code> will be the list of data from the <code>(n-1)</code>th run.</p>
"
59709,2260,2008-09-12T18:31:04Z,59648,1,"<p>since you are thinking in <em>variables</em>, you might prefer a dictionary over a list of lists:</p>

<pre><code>data = {}
data['a'] = [generate_poll_data()]
data['b'] = [generate_poll_data()]
</code></pre>

<p>etc.</p>
"
59762,6171,2008-09-12T19:01:00Z,59648,1,"<p>I would strongly consider using <a href=""http://numpy.scipy.org"" rel=""nofollow"">NumPy</a> to do this. You get efficient N-dimensional arrays that you can quickly and easily process.</p>
"
59778,3002,2008-09-12T19:08:38Z,59648,2,"<p>Would something like this work?</p>

<pre><code>from random import randint    

mcworks = []

for n in xrange(NUM_ITERATIONS):
    mctest = [randint(0, 100) for i in xrange(5)]
    if sum(mctest[:3])/3 == mcavg[2]:
        mcworks.append(mctest) # mcavg is real data
</code></pre>

<p>In the end, you are left with a list of valid <code>mctest</code> lists.</p>

<p>What I changed:</p>

<ul>
<li>Used a <a href=""http://docs.python.org/tut/node7.html#SECTION007140000000000000000"" rel=""nofollow"">list comprehension</a> to build the data instead of a for loop</li>
<li>Used <code>random.randint</code> to get random integers</li>
<li>Used <a href=""http://docs.python.org/tut/node5.html"" rel=""nofollow"">slices</a> and <code>sum</code> to calculate the average of the first three items</li>
<li>(To answer your actual question :-) ) Put the results in a list <code>mcworks</code>, instead of creating a new variable for every iteration</li>
</ul>
"
59841,1199,2008-09-12T20:08:10Z,59825,197,"<p>Two options that don't require copying the whole set:</p>

<pre><code>for e in s:
    break
# e is now an element from s
</code></pre>

<p>Or...</p>

<pre><code>e = next(iter(s))
</code></pre>

<p>But in general, sets don't support indexing or slicing.</p>
"
59928,825,2008-09-12T20:52:06Z,59825,1,"<p>Another option is to use a dictionary with values you don't care about.  E.g.,</p>

<pre><code>
poor_man_set = {}
poor_man_set[1] = None
poor_man_set[2] = None
poor_man_set[3] = None
...
</code></pre>

<p>You can treat the keys as a set except that they're just an array:</p>

<pre><code>
keys = poor_man_set.keys()
print ""Some key = %s"" % keys[0]
</code></pre>

<p>A side effect of this choice is that your code will be backwards compatible with older, pre-<code>set</code> versions of Python.  It's maybe not the best answer but it's another option.</p>

<p>Edit: You can even do something like this to hide the fact that you used a dict instead of an array or set:</p>

<pre><code>
poor_man_set = {}
poor_man_set[1] = None
poor_man_set[2] = None
poor_man_set[3] = None
poor_man_set = poor_man_set.keys()
</code></pre>
"
59955,6043,2008-09-12T21:04:48Z,58622,18,"<p>Sphinx is mainly a tool for formatting docs written independently from the source code, as I understand it.</p>

<p>For generating API docs from Python docstrings, the leading tools are <a href=""https://github.com/BurntSushi/pdoc"" rel=""nofollow"">pdoc</a> and <a href=""https://launchpad.net/pydoctor"" rel=""nofollow"">pydoctor</a>. Here's pydoctor's generated API docs for <a href=""http://twistedmatrix.com/documents/current/api"" rel=""nofollow"">Twisted</a> and <a href=""http://starship.python.net/crew/mwh/bzrlibapi/"" rel=""nofollow"">Bazaar</a>.</p>

<p>Of course, if you just want to have a look at the docstrings while you're working on stuff, there's the ""<a href=""https://docs.python.org/2/library/pydoc.html"" rel=""nofollow"">pydoc</a>"" command line tool and as well as the <code>help()</code> function available in the interactive interpreter.</p>
"
60027,3002,2008-09-12T21:43:27Z,59825,15,"<p>Since you want a random element, this will also work:</p>

<pre><code>&gt;&gt;&gt; import random
&gt;&gt;&gt; s = set([1,2,3])
&gt;&gt;&gt; random.sample(s, 1)
[2]
</code></pre>

<p>The documentation doesn't seem to mention performance of <code>random.sample</code>. From a really quick empirical test with a huge list and a huge set, it seems to be constant time for a list but not for the set. Also, iteration over a set isn't random; the order is undefined but predictable:</p>

<pre><code>&gt;&gt;&gt; list(set(range(10))) == range(10)
True
</code></pre>

<p>If randomness is important and you need a bunch of elements in constant time (large sets), I'd use <code>random.sample</code> and convert to a list first:</p>

<pre><code>&gt;&gt;&gt; lst = list(s) # once, O(len(s))?
...
&gt;&gt;&gt; e = random.sample(lst, 1)[0] # constant time
</code></pre>
"
60211,893,2008-09-13T00:38:24Z,60208,616,"<p>You could use a dictionary:</p>

<pre><code>def f(x):
    return {
        'a': 1,
        'b': 2,
    }[x]
</code></pre>
"
60215,305,2008-09-13T00:41:46Z,60208,156,"<p>I've always liked doing it this way</p>

<pre><code>result = {
  'a': lambda x: x * 5,
  'b': lambda x: x + 7,
  'c': lambda x: x - 2
}[value](x)
</code></pre>

<p><a href=""http://blog.simonwillison.net/post/57956755106/switch"">From here</a></p>
"
60216,1155,2008-09-13T00:43:49Z,60208,1,"<p>If you are really just returning a predetermined, fixed value, you could create a dictionary with all possible input indexes as the keys, along with their corresponding values. Also, you might not really want a function to do this - unless you're computing the return value somehow.</p>

<p>Oh, and if you feel like doing something switch-like, see <a href=""https://web.archive.org/web/20120216013404/http://www.mustap.com/pythonzone_post_224_python-switch-statement?"" rel=""nofollow"">here</a>.</p>
"
60218,4727,2008-09-13T00:46:40Z,60152,0,"<p>The languages of choice of Firefox is Javascript. Unless you have a specific requirement that requires Python, I would advice you to use that.</p>
"
60219,3561,2008-09-13T00:48:35Z,60152,5,"<p>You could try <a href=""http://selenium.openqa.org/"">selenium</a>.</p>
"
60233,2168,2008-09-13T01:07:38Z,59825,37,"<p>Least code would be:</p>

<pre><code>&gt;&gt;&gt; s = set([1, 2, 3])
&gt;&gt;&gt; list(s)[0]
1
</code></pre>

<p>Obviously this would create a new list which contains each member of the set, so not great if your set is very large.</p>
"
60236,188,2008-09-13T01:10:58Z,60208,127,"<p>In addition to the dictionary methods (which I really like, BTW), you can also use if-elif-else to obtain the switch/case/default functionality:</p>

<pre><code>if x == 'a':
    # Do the thing
elif x == 'b':
    # Do the other thing
if x in 'bc':
    # Fall-through by not using elif, but now the default case includes case 'a'!
elif x in 'xyz':
    # Do yet another thing
else:
    # Do the default
</code></pre>

<p>This of course is not identical to switch/case - you cannot have fall-through as easily as leaving off the break; statement, but you can have a more complicated test.  Its formatting is nicer than a series of nested ifs, even though functionally that's what it is closer to.</p>
"
60243,NA,2008-09-13T01:26:26Z,60208,32,"<p>There's a pattern that I learned from Twisted Python code.</p>

<pre><code>class SMTP:
    def lookupMethod(self, command):
        return getattr(self, 'do_' + command.upper(), None)
    def do_HELO(self, rest):
        return 'Howdy ' + rest
    def do_QUIT(self, rest):
        return 'Bye'

SMTP().lookupMethod('HELO')('foo.bar.com') # =&gt; 'Howdy foo.bar.com'
SMTP().lookupMethod('QUIT')('') # =&gt; 'Bye'
</code></pre>

<p>You can use it any time you need to dispatch on a token and execute extended piece of code. In a state machine you would have <code> state_ </code> methods, and dispatch on <code>self.state</code>. This switch can be cleanly extended by inheriting from base class and defining your own <code> do_ </code> methods. Often times you won't even have <code> do_ </code> methods in the base class.</p>

<p><em>Edit: how exactly is that used</em></p>

<p>In case of SMTP you will receive <code>HELO</code> from the wire. The relevant code (from <code>twisted/mail/smtp.py</code>, modified for our case) looks like this</p>

<pre><code>class SMTP:
    # ...

    def do_UNKNOWN(self, rest):
        raise NotImplementedError, 'received unknown command'

    def state_COMMAND(self, line):
        line = line.strip()
        parts = line.split(None, 1)
        if parts:
            method = self.lookupMethod(parts[0]) or self.do_UNKNOWN
            if len(parts) == 2:
                return method(parts[1])
            else:
                return method('')
        else:
            raise SyntaxError, 'bad syntax'

SMTP().state_COMMAND('   HELO   foo.bar.com  ') # =&gt; Howdy foo.bar.com
</code></pre>

<p>You'll receive <code>'  HELO   foo.bar.com '</code> (or you might get <code>'QUIT'</code> or <code>'RCPT TO: foo'</code>). This is tokenized into <code>parts</code> as <code>['HELO', 'foo.bar.com']</code>. The actual method lookup name is taken from <code>parts[0]</code>.</p>

<p>(The original method is also called <code>state_COMMAND</code>, because it uses the same pattern to implement a state machine, i.e. <code>getattr(self, 'state_' + self.mode)</code>)</p>
"
60431,NA,2008-09-13T09:19:56Z,60352,7,"<p>In Python, <code>__init__.py</code> files actually have a meaning! They mean that the folder they are in is a Python module. As such, they have a real role in your code and should most probably be stored in Version Control.</p>

<p>You could well imagine a folder in your source tree that is NOT a Python module, for example a folder containing only resources (e.g. images) and no code. That folder would not need to have a <code>__init__.py</code> file in it. Now how do you make the difference between folders where distutils should create those files and folders where it should not ?</p>
"
60448,123,2008-09-13T10:03:55Z,60446,9,"<p><H2>Python CE</H2>
Python port for Windows CE (Pocket PC) devices. Intended to be as close to desktop version as possible (console, current directory support, testsuite passed). </p>

<p><a href=""http://pythonce.sourceforge.net/""><img src=""http://pythonce.sourceforge.net/images/python-logo.jpg"" alt=""Python CE"" /></a></p>

<p><img src=""http://sourceforge.net/dbimage.php?id=76454"" alt=""alt text"" /></p>
"
60460,2686,2008-09-13T10:29:26Z,60446,1,"<p>If the IronPython and .Net Compact Framework teams work together, Visual Studio may one day support Python for Windows Mobile development out-of-the-box. Unfortunately, <a href=""http://www.codeplex.com/IronPython/WorkItem/View.aspx?WorkItemId=9191"" rel=""nofollow"">this feature request has been sitting on their issue tracker for ages</a>...</p>
"
60506,3002,2008-09-13T12:46:50Z,60352,4,"<p>Is there a reason you want to <em>avoid</em> putting empty <code>__init__.py</code> files in version control? If you do this you won't be able to <code>import</code> your packages from the source directory wihout first running distutils.</p>

<p>If you really want to, I suppose you can create <code>__init__.py</code> in <code>setup.py</code>. It has to be <em>before</em> running <code>distutils.setup</code>, so <code>setup</code> itself is able to find your packages:</p>

<pre><code>from distutils import setup
import os

for path in [my_package_directories]:
    filename = os.path.join(pagh, '__init__.py')
    if not os.path.exists(filename):
        init = open(filename, 'w')
        init.close()

setup(
...
)
</code></pre>

<p>but... what would you gain from this, compared to having the empty <code>__init__.py</code> files there in the first place? </p>
"
60548,6267,2008-09-13T13:51:57Z,60152,1,"<p>See if <a href=""http://twill.idyll.org/"" rel=""nofollow"">twill</a> can help you. It can be used as a command line tool or as a python library.</p>
"
60552,NA,2008-09-13T14:06:18Z,60152,0,"<p>Install <a href=""http://hyperstruct.net/projects/mozlab"" rel=""nofollow"">Mozlab</a> in Firefox and enable the telnet server, then open a socket.</p>
"
60563,6267,2008-09-13T14:20:42Z,58711,2,"<p>This could be an oversimplification, i don't think it would be a good idea to try to make a general purpose ui library this way. On the other hand you could use this approach (metaclasses and friends) to simplify the definition of certain classes of user interfaces for an existing ui library and depending of the application that could actually save you a significant amount of time and code lines.</p>
"
60630,4999,2008-09-13T15:48:18Z,60152,2,"<p>I use <a href=""http://selenium-rc.openqa.org/python.html"" rel=""nofollow"">Selenium RC</a>. All my tests are written in Python and are run with test suite.</p>

<p>One minor thing is that You either have to start selenium manually and point Your tests to it or start selenium from test suite which requires little bit of coding. But it's doable.</p>

<p>Generally I'm very pleased with this solution.</p>
"
60660,3153,2008-09-13T16:19:10Z,60649,13,"<p>For C++, check out <a href=""http://www.boost.org/doc/libs/1_36_0/doc/html/interprocess.html"">Boost IPC</a>.<br />
You can probably create or find some bindings for the scripting languages as well.  </p>

<p>Otherwise if it's really important to be able to interface with scripting languages your best bet is simply to use files, pipes or sockets or even a higher level abstraction like HTTP. </p>
"
60662,4869,2008-09-13T16:21:24Z,60649,5,"<p>How about <a href=""http://incubator.apache.org/thrift/"">Facebook's Thrift</a>?</p>

<blockquote>
  <p>Thrift is a software framework for scalable cross-language services development. It combines a software stack with a code generation engine to build services that work efficiently and seamlessly between C++, Java, Python, PHP, Ruby, Erlang, Perl, Haskell, C#, Cocoa, Smalltalk, and OCaml.</p>
</blockquote>
"
60668,1733,2008-09-13T16:27:20Z,60649,4,"<p>It doesn't get more simple than using pipes, which are supported on every OS I know of, and can be accessed in pretty much every language.</p>

<p>Check out <a href=""http://web.archive.org/web/20080919054639/http://www.utdallas.edu/~kcooper/teaching/3375/Tutorial6a/tutorial6.htm"" rel=""nofollow"">this</a> tutorial.</p>
"
60692,5640,2008-09-13T17:03:28Z,60649,2,"<p>TCP sockets to localhost FTW.</p>
"
60702,3978,2008-09-13T17:17:20Z,60649,5,"<p>I think you'll want something based on sockets. </p>

<p>If you want RPC rather than just IPC I would suggest something like XML-RPC/SOAP which runs over HTTP, and can be used from any language.</p>
"
60723,3978,2008-09-13T17:46:14Z,60685,5,"<p>This is a simple test program I knocked up:</p>

<pre><code>#!/usr/bin/env python

TEST1=""""""
#include ""Foo.h""
#define bar foo\\
    x
#include ""Bar.h""
""""""

TEST2=""""""
#define bar foo
#define x 1 \\
    12 \\
    2 \\\\ 3
Foobar
""""""

TEST3=""""""
#define foo(x) if(x) \\
doSomething(x)
""""""

TEST4=""""""
#define foo(x) if(x) \\
doSomething(x)
normalCode();
""""""

import re
matcher = re.compile(r""^[ \t]*#define(.*\\\n)+.*$"",re.MULTILINE)

def extractDefines(s):
    mo = matcher.search(s)
    if not mo:
    	print mo
    	return
    print mo.group(0)

extractDefines(TEST1)
extractDefines(TEST2)
extractDefines(TEST3)
extractDefines(TEST4)
</code></pre>

<p>The re I used:</p>

<pre><code>r""^[ \t]*#define(.*\\\n)+.*$""
</code></pre>

<p>Is very similar to the one use used, the changes:</p>

<ol>
<li>[ \t] To avoid newlines at the start
of the define.</li>
<li>I rely on + being
greedy, so I can use a simple .*$ at
the end to get the first line of the
define that doesn't end with \</li>
</ol>
"
60729,4279,2008-09-13T17:53:30Z,60685,3,"<pre><code>start        = r""^\s*#define\s+""
continuation = r""(?:.*\\\n)+""
lastline     = r"".*$""

re_multiline_macros = re.compile(start + continuation + lastline, 
                                 re.MULTILINE)
</code></pre>
"
60753,1694,2008-09-13T18:22:06Z,60680,27,"<p>Sure; just start two different servers on two different ports in two different threads that each use the same handler.  Here's a complete, working example that I just wrote and tested.  If you run this code then you'll be able to get a Hello World webpage at both <a href=""http://localhost:1111/"">http://localhost:1111/</a> and <a href=""http://localhost:2222/"">http://localhost:2222/</a></p>

<pre><code>from threading import Thread
from SocketServer import ThreadingMixIn
from BaseHTTPServer import HTTPServer, BaseHTTPRequestHandler

class Handler(BaseHTTPRequestHandler):
    def do_GET(self):
        self.send_response(200)
        self.send_header(""Content-type"", ""text/plain"")
        self.end_headers()
        self.wfile.write(""Hello World!"")

class ThreadingHTTPServer(ThreadingMixIn, HTTPServer):
    pass

def serve_on_port(port):
    server = ThreadingHTTPServer((""localhost"",port), Handler)
    server.serve_forever()

Thread(target=serve_on_port, args=[1111]).start()
serve_on_port(2222)
</code></pre>
"
60754,3978,2008-09-13T18:23:10Z,60680,4,"<p>Not easily. You could have two ThreadingHTTPServer instances, write your own serve_forever() function (don't worry it's not a complicated function).</p>

<p>The existing function:</p>

<pre><code>def serve_forever(self, poll_interval=0.5):
    """"""Handle one request at a time until shutdown.

    Polls for shutdown every poll_interval seconds. Ignores
    self.timeout. If you need to do periodic tasks, do them in
    another thread.
    """"""
    self.__serving = True
    self.__is_shut_down.clear()
    while self.__serving:
        # XXX: Consider using another file descriptor or
        # connecting to the socket to wake this up instead of
        # polling. Polling reduces our responsiveness to a
        # shutdown request and wastes cpu at all other times.
        r, w, e = select.select([self], [], [], poll_interval)
        if r:
            self._handle_request_noblock()
    self.__is_shut_down.set()
</code></pre>

<p>So our replacement would be something like:</p>

<pre><code>def serve_forever(server1,server2):
    while True:
        r,w,e = select.select([server1,server2],[],[],0)
        if server1 in r:
            server1.handle_request()
        if server2 in r:
            server2.handle_request()
</code></pre>
"
60811,6266,2008-09-13T20:04:11Z,60805,-4,"<p>Theres a couple of ways through SQL, depending on which data base is being used.</p>

<p>(I think SQLAlchemy can use all these anyways)</p>

<p>mysql:</p>

<pre><code>SELECT colum FROM table
ORDER BY RAND()
LIMIT 1
</code></pre>

<p>PostgreSQL:</p>

<pre><code>SELECT column FROM table
ORDER BY RANDOM()
LIMIT 1
</code></pre>

<p>MSSQL:</p>

<pre><code>SELECT TOP 1 column FROM table
ORDER BY NEWID()
</code></pre>

<p>IBM DB2:</p>

<pre><code>SELECT column, RAND() as IDX
FROM table
ORDER BY IDX FETCH FIRST 1 ROWS ONLY
</code></pre>

<p>Oracle:</p>

<pre><code>SELECT column FROM
(SELECT column FROM table
ORDER BY dbms_random.value)
WHERE rownum = 1
</code></pre>

<p>However I don't know of any standard way</p>
"
60815,4999,2008-09-13T20:09:28Z,60805,63,"<p>This is very much a database-specific issue.</p>

<p>I know that PostgreSQL and MySQL have the ability to order by a random function, so you can use this in SQLAlchemy:</p>

<pre><code>from  sqlalchemy.sql.expression import func, select

select.order_by(func.random()) # for PostgreSQL, SQLite

select.order_by(func.rand()) # for MySQL

select.order_by('dbms_random.value') # For Oracle
</code></pre>

<p>Next, you need to limit the query by the number of records you need (for example using <code>.limit()</code>).</p>

<p>Bear in mind that at least in PostgreSQL, selecting random record has severe perfomance issues; <a href=""http://www.depesz.com/index.php/2007/09/16/my-thoughts-on-getting-random-row/"">here</a> is good article about it.</p>
"
60852,4977,2008-09-13T20:39:58Z,60848,6,"<p>You can't do this with the base dict class -- it's ordered by hash.  You could build your own dictionary that is really a list of key,value pairs or somesuch, which would be ordered.</p>
"
60862,3002,2008-09-13T20:48:36Z,60848,44,"<p>The standard python <code>dict</code> isn't able to do this.</p>

<p>There is a proposal (<a href=""http://www.python.org/dev/peps/pep-0372/"">PEP 372</a>) to add an ""ordered dictionary"" (that keeps track of the order of insertion) to the <code>collections</code> module in the standard library. It includes links to <a href=""http://babel.edgewall.org/browser/trunk/babel/util.py?rev=374#L178"">various</a>  <a href=""http://www.xs4all.nl/~anthon/Python/ordereddict/"">implementations</a> <a href=""http://code.djangoproject.com/browser/django/trunk/django/utils/datastructures.py?rev=7140#L53"">of</a> <a href=""http://pypi.python.org/pypi/StableDict/0.2"">ordered</a> <a href=""http://codespeak.net/svn/user/arigo/hack/pyfuse/OrderedDict.py"">dictionaries</a> (see also these <a href=""http://code.activestate.com/recipes/107747/"">two</a> <a href=""http://code.activestate.com/recipes/496761/"">recipes</a> in the Python Cookbook).</p>

<p>You might want to stick with the reference implementation in the PEP if you want your code to be compatible with the ""official"" version (if the proposal is eventually accepted).</p>

<p>EDIT: The PEP was accepted and added in python 2.7 and 3.1. See <a href=""http://docs.python.org/library/collections.html#ordereddict-objects"">the docs</a>.</p>
"
60945,2898,2008-09-13T22:30:01Z,60446,9,"<p>(I used to write customer apps for Windows Mobile.)</p>

<p>Forget about python. Even if it's technically possible:</p>

<ul>
<li>your app will be big (you'll have to bundle the whole python runtime with your app)</li>
<li>your app will use lots of memory (python is a memory hog, relative to C/C++)</li>
<li>your app will be slow</li>
<li>you wont find any documentation or discussion groups to help you when you (inevitably) encounter problems</li>
</ul>

<p>Go with C/C++ (or C#). Visual Studio 2005/2008 have decent tools for those (SDK for winmo built-in, debugging on the emulator or device connected through USB), the best documentation is for those technologies plus there are active forums/discussion groups/mailing lists where you can ask for help.</p>
"
61031,1694,2008-09-14T00:58:30Z,60848,16,"<p>The other answers are correct; it's not possible, but you could write this yourself.  However, in case you're unsure how to actually implement something like this, here's a complete and working implementation that subclasses dict which I've just written and tested. (Note that the order of values passed to the constructor is undefined but will come before values passed later, and you could always just not allow ordered dicts to be initialized with values.)</p>

<pre><code>class ordered_dict(dict):
    def __init__(self, *args, **kwargs):
        dict.__init__(self, *args, **kwargs)
        self._order = self.keys()

    def __setitem__(self, key, value):
        dict.__setitem__(self, key, value)
        if key in self._order:
            self._order.remove(key)
        self._order.append(key)

    def __delitem__(self, key):
        dict.__delitem__(self, key)
        self._order.remove(key)

    def order(self):
        return self._order[:]

    def ordered_items(self):
        return [(key,self[key]) for key in self._order]


od = ordered_dict()
od[""hello""] = ""world""
od[""goodbye""] = ""cruel world""
print od.order()            # prints ['hello', 'goodbye']

del od[""hello""]
od[""monty""] = ""python""
print od.order()            # prints ['goodbye', 'monty']

od[""hello""] = ""kitty""
print od.order()            # prints ['goodbye', 'monty', 'hello']

print od.ordered_items()
# prints [('goodbye','cruel world'), ('monty','python'), ('hello','kitty')]
</code></pre>
"
61140,5222,2008-09-14T04:57:51Z,59825,4,"<p>I use a utility function I wrote.  Its name is somewhat misleading because it kind of implies it might be a random item or something like that.</p>

<pre><code>def anyitem(iterable):
    try:
        return iter(iterable).next()
    except StopIteration:
        return None
</code></pre>
"
61168,3119,2008-09-14T06:46:03Z,61151,10,"<p>I don't believe there is an established ""best practice"".</p>

<p>I put my tests in another directory outside of the app code. I then add the main app directory to sys.path (allowing you to import the modules from anywhere) in my test runner script (which does some other stuff as well) before running all the tests. This way I never have to remove the tests directory from the main code when I release it, saving me time and effort, if an ever so tiny amount.</p>
"
61169,680,2008-09-14T06:46:14Z,61151,36,"<p>A common practice is to put the tests directory in the same parent directory as your module/package. So if your module was called foo.py your directory layout would look like:</p>

<pre><code>parent_dir/
  foo.py
  tests/
</code></pre>

<p>Of course there is no one way of doing it. You could also make a tests subdirectory and import the module using <a href=""http://www.python.org/dev/peps/pep-0328/"">absolute import</a>.</p>

<p>Wherever you put your tests, I would recommend you use <a href=""http://nose.readthedocs.org/en/latest/"">nose</a> to run them. <a href=""http://nose.readthedocs.org/en/latest/"">Nose</a> searches through your directories for tests. This way, you can put tests wherever they make the most sense organizationally.</p>
"
61322,2900,2008-09-14T13:15:51Z,60680,6,"<p>I would say that threading for something this simple is overkill.  You're better off using some form of asynchronous programming.</p>

<p>Here is an example using <a href=""http://twistedmatrix.com/"">Twisted</a>:</p>

<pre><code>from twisted.internet import reactor
from twisted.web import resource, server

class MyResource(resource.Resource):
    isLeaf = True
    def render_GET(self, request):
        return 'gotten'

site = server.Site(MyResource())

reactor.listenTCP(8000, site)
reactor.listenTCP(8001, site)
reactor.run()
</code></pre>

<p>I also thinks it looks a lot cleaner to have each port be handled in the same way, instead of having the main thread handle one port and an additional thread handle the other.  Arguably that can be fixed in the thread example, but then you're using three threads.</p>
"
61518,4834,2008-09-14T18:02:12Z,61151,-1,"<p>I've recently started to program in Python, so I've not really had chance to find out best practice yet.
But, I've written a module that goes and finds all the tests and runs them.</p>

<p>So, I have:</p>

<pre>
app/
 appfile.py
test/
 appfileTest.py
</pre>

<p>I'll have to see how it goes as I progress to larger projects.</p>
"
61522,3002,2008-09-14T18:07:55Z,61517,45,"<p>The <code>dir</code> builtin will give you all the object's attributes, including special methods like <code>__str__</code>, <code>__dict__</code> and a whole bunch of others which you probably don't want. But you can do something like:</p>

<pre><code>&gt;&gt;&gt; class Foo(object):
...     bar = 'hello'
...     baz = 'world'
...
&gt;&gt;&gt; f = Foo()
&gt;&gt;&gt; [name for name in dir(f) if not name.startswith('__')]
[ 'bar', 'baz' ]
&gt;&gt;&gt; dict((name, getattr(f, name)) for name in dir(f) if not name.startswith('__')) 
{ 'bar': 'hello', 'baz': 'world' }
</code></pre>

<p>So can extend this to only return data attributes and not methods, by defining your <code>props</code> function like this:</p>

<pre><code>import inspect

def props(obj):
    pr = {}
    for name in dir(obj):
        value = getattr(obj, name)
        if not name.startswith('__') and not inspect.ismethod(value):
            pr[name] = value
    return pr
</code></pre>
"
61531,3560,2008-09-14T18:18:58Z,61151,13,"<p>I use a <code>tests/</code> directory, and then import the main application modules using relative imports. So in MyApp/tests/foo.py, there might be:</p>

<pre><code>from .. import foo
</code></pre>

<p>to import the <code>MyApp.foo</code> module.</p>
"
61551,2148,2008-09-14T18:50:52Z,61517,19,"<p>I've settled with a combination of both answers:</p>

<pre><code>dict((key, value) for key, value in f.__dict__.iteritems() 
    if not callable(value) and not key.startswith('__'))
</code></pre>
"
61614,985,2008-09-14T20:26:02Z,47801,1,"<p>This actually got me interested:<a href=""http://groups.google.com/group/pylons-discuss/browse_thread/thread/644deb53612af362?hl=en"" rel=""nofollow"">Check out this mailing on the pylons list</a>. So AuthKit is being developed, and I will follow the book and get back on the results.</p>
"
61629,2193,2008-09-14T20:42:01Z,61605,24,"<p>Firstly, note that Python allows for the following (no need for the parenthesis):</p>

<pre><code>q, r = divide(22, 7)
</code></pre>

<p>Regarding your question, there's no hard and fast rule either way. For simple (and usually contrived) examples, it may seem that it's always possible for a given function to have a single purpose, resulting in a single value. However, when using Python for real-world applications, you quickly run into many cases where returning multiple values is necessary, and results in cleaner code.</p>

<p>So, I'd say do whatever makes sense, and don't try to conform to an artificial convention. Python supports multiple return values, so use it when appropriate.</p>
"
61636,4279,2008-09-14T20:54:14Z,61605,84,"<p>Absolutely (for the example you provided).</p>

<h3>Tuples are first class citizens in Python</h3>

<p>There is a builtin function <a href=""http://docs.python.org/lib/built-in-funcs.html""><code>divmod()</code></a> that does exactly that.</p>

<pre><code>q, r = divmod(x, y) # ((x - x%y)/y, x%y) Invariant: div*y + mod == x
</code></pre>

<p>There are other examples: <code>zip</code>, <code>enumerate</code>, <code>dict.items</code>. </p>

<pre><code>for i, e in enumerate([1, 3, 3]):
    print ""index=%d, element=%s"" % (i, e)

# reverse keys and values in a dictionary
d = dict((v, k) for k, v in adict.items()) # or 
d = dict(zip(adict.values(), adict.keys()))
</code></pre>

<p>BTW, parentheses are not necessary most of the time.
Citation from <a href=""http://docs.python.org/lib/typesseq.html"">Python Library Reference</a>: </p>

<blockquote>
  <p><em>Tuples are constructed by the comma
  operator</em> (not within square brackets),
  with or without enclosing parentheses,
  but an empty tuple must have the
  enclosing parentheses, such as a, b, c
  or (). A single item tuple must have a
  trailing comma, such as (d,).</p>
</blockquote>

<h3>Functions should serve single purpose</h3>

<p>Therefore they should return a single object. In your case this object is a tuple. Consider tuple as an ad-hoc compound data structure. There are languages where almost every single function returns multiple values (list in Lisp).</p>

<p>Sometimes it is sufficient to return <code>(x, y)</code> instead of <code>Point(x, y)</code>.</p>

<h3>Named tuples</h3>

<p>With the introduction of named tuples in Python 2.6 it is preferable in many cases to return named tuples instead of plain tuples.</p>

<pre><code>&gt;&gt;&gt; import collections
&gt;&gt;&gt; Point = collections.namedtuple('Point', 'x y')
&gt;&gt;&gt; x, y = Point(0, 1)
&gt;&gt;&gt; p = Point(x, y)
&gt;&gt;&gt; x, y, p
(0, 1, Point(x=0, y=1))
&gt;&gt;&gt; p.x, p.y, p[0], p[1]
(0, 1, 0, 1)
&gt;&gt;&gt; for i in p:
...   print(i)
...
0
1
</code></pre>
"
61637,5848,2008-09-14T20:55:28Z,61605,12,"<p>The example you give is actually a python builtin function, called <code>divmod</code>. So someone, at some point in time, thought that it was pythonic enough to include in the core functionality.</p>

<p>To me, if it makes the code cleaner, it is pythonic. Compare these two code blocks:</p>

<pre><code>seconds = 1234
minutes, seconds = divmod(seconds, 60)
hours, minutes = divmod(minutes, 60)

seconds = 1234
minutes = seconds / 60
seconds = seconds % 60
hours = minutes / 60
minutes = minutes % 60
</code></pre>
"
61746,6372,2008-09-15T00:11:21Z,535,13,"<p>We use both Buildbot and Hudson for Jython development.  Both are useful, but have different strengths and weaknesses.</p>

<p>Buildbot's configuration is pure Python and quite simple once you get the hang of it (look at the epydoc-generated API docs for the most current info).  Buildbot makes it easier to define non-testing tasks and distribute the testers.  However, it really has no concept of individual tests, just textual, HTML, and summary output, so if you want to have multi-level browsable test output and so forth you'll have to build it yourself, or just use Hudson.</p>

<p>Hudson has terrific support for drilling down from overall results into test suites and individual tests; it also is great for comparing test output between builds, but the distributed (master/slave) stuff is comparatively more complicated because you need a Java environment on the slaves too; also, Hudson is less tolerant of flaky network links between the master and slaves.</p>

<p>So, to get the benefits of both tools, we run a single instance of Hudson, which catches the common test failures, then we do multi-platform regression with Buildbot.</p>

<p>Here are our instances:</p>

<ul>
<li><a href=""http://bob.underboss.org:8080/job/jython/lastBuild/testReport/"">Jython Hudson</a></li>
<li><a href=""http://www.acm.uiuc.edu/jython-buildbot/waterfall"">Jython buildbot</a></li>
</ul>
"
61820,6364,2008-09-15T03:09:29Z,61151,1,"<p>In C#, I've generally separated the tests into a separate assembly.</p>

<p>In Python -- so far -- I've tended to either write doctests, where the test is in the docstring of a function, or put them in the <code>if __name__ == ""__main__""</code> block at the bottom of the module.</p>
"
61842,2147,2008-09-15T03:58:29Z,61781,2,"<p>You could also do it <a href=""http://www.4guysfromrolla.com/webtech/082201-1.shtml"" rel=""nofollow"">this way</a>.</p>
"
61918,6364,2008-09-15T05:50:48Z,53513,28,"<p><a href=""http://books.google.com/books?id=vpTAq4dnmuAC&amp;pg=RA1-PA479&amp;lpg=RA1-PA479&amp;dq=Python+len+big+O&amp;source=web&amp;ots=AOM6A1K9Fy&amp;sig=iQo8mV6Xf9KdzuNSa-Jkr8wDEuw&amp;hl=en&amp;sa=X&amp;oi=book_result&amp;resnum=4&amp;ct=result""><code>len()</code> is an O(1) operation</a> for Python lists, strings, dicts, and sets. Python internally keeps track of the number of elements in these containers.</p>

<p>JavaScript <a href=""http://www.isolani.co.uk/blog/javascript/TruthyFalsyAndTypeCasting"">has a similar notion of truthy/falsy</a>.</p>
"
61933,6364,2008-09-15T06:28:30Z,53162,46,"<p>The danger in using a backslash to end a line is that if whitespace is added after the backslash (which, of course, is very hard to see), the backslash is no longer doing what you thought it was.</p>

<p>See Python Idioms and Anti-Idioms (for <a href=""https://docs.python.org/2/howto/doanddont.html#using-backslash-to-continue-statements"">Python 2</a> or <a href=""https://docs.python.org/3.1/howto/doanddont.html#using-backslash-to-continue-statements"">Python 3</a>) for more.</p>
"
62094,5190,2008-09-15T10:18:05Z,62079,4,"<p>If your idea is to compare the languages, I'd say anything outside them is not relevant for comparison purposes. </p>

<p>Nonetheless you can use the time command to measure everything and can compare it with the timing within a script.</p>

<p>Like this:</p>

<pre><code>$ time script.php
HI!

real    0m3.218s
user    0m0.080s
sys     0m0.064s
</code></pre>

<p>It will give you clock time, user time (php interpreter) and sys time (OS time)</p>

<p>If you are thinking web, then it gets a lot harder because you would be mixing webserver overhead and that is not always easy to compare if, say, you are using WSGI v/s mod_php. Then you'd have to hook probes into the webserving parts of the chain as well</p>
"
62097,6436,2008-09-15T10:20:04Z,62079,1,"<ol>
<li><p>It's worth taking speed into account if you're optimizing code. You should generally know why you're optimizing code (as in: a specific task in your existing codebase is taking too long, not ""I heard PHP is slower than Python""). It's <em>not</em> worth taking speed into account if you don't actually plan on switching languages. Just because one tiny module does something slightly faster doesn't mean rewriting your app in another language is a good idea. There are many other factors to choosing a language besides speed.</p></li>
<li><p>You benchmark, of course. Run the two codebases multiple times and compare the timing. You can use the <a href=""http://unixhelp.ed.ac.uk/CGI/man-cgi?time"" rel=""nofollow"">time</a> command if both scripts are executable from the shell, or use respective benchmarking functionality from each language; the latter case depends heavily on the actual language, naturally.</p></li>
</ol>
"
62099,122,2008-09-15T10:23:55Z,62079,1,"<p>Well, you can use the ""time"" command to help:</p>

<pre><code>you@yourmachine:~$ time echo ""hello world""
hello world

real    0m0.000s
user    0m0.000s
sys 0m0.000s
you@yourmachine:~$
</code></pre>

<p>And this will get around timing outside of the environment.</p>

<p>As for whether you need to actually time that extra work... that entirely depends on what you are doing.  I assume this is for some kind of web application of some sort, so it depends on how the framework you use actually works... does it cache some kind of compiled (or parsed) version of the script?  If so, then startup time will be totally irrelevant (since the first hit will be the only one that startup time exists in).</p>

<p>Also, make sure to run your tests in a loop so you can discount the first run (and include the cost on the first run in your report if you want).  I have done some tests in Java, and the first run is always slowest due to the JIT doing its job (and the same sort of hit may exist in PHP, Python and any other languages you try).</p>
"
62121,6267,2008-09-15T10:37:02Z,61894,1,"<p>The <code>dirname</code> function returns an absolute path, use relative paths. See what is the current directory when your controllers are executed with <code>os.path.abspath(os.path.curdir)</code> and build a path to the templates relative to that location (without the <code>os.path.abspath</code> part of course).</p>

<p>This will only work if the current directory is somewhere inside <em>siteroot</em>, else you could do something like this:</p>

<pre><code>template_dir = os.path.join(os.path.dirname(__file__), os.path.pardir, ""templates"")
</code></pre>
"
62157,5190,2008-09-15T11:00:37Z,56229,3,"<p>I ended up using saxutils.escape(str) to generate valid XML strings and then validating it with Eli's approach to be sure I didn't miss any tag</p>

<pre><code>from xml.sax import saxutils
from xml.dom.minidom import parseString
from xml.parsers.expat import ExpatError

xml = '''&lt;?xml version=""1.0"" encoding=""%s""?&gt;\n
&lt;contents title=""%s"" crawl_date=""%s"" in_text_date=""%s"" 
url=""%s""&gt;\n&lt;main_post&gt;%s&lt;/main_post&gt;\n&lt;/contents&gt;''' %
(self.encoding, saxutils.escape(title), saxutils.escape(time), 
saxutils.escape(date), saxutils.escape(url), saxutils.escape(contents))
try:
    minidoc = parseString(xml)
catch ExpatError:
    print ""Invalid xml""
</code></pre>
"
62527,6868,2008-09-15T12:52:00Z,61151,102,"<p>For a file <code>module.py</code>, the unit test should normally be called <code>test_module.py</code>, following Pythonic naming conventions.</p>

<p>There are several commonly accepted places to put <code>test_module.py</code>:</p>

<ol>
<li>In the same directory as <code>module.py</code>.</li>
<li>In <code>../tests/test_module.py</code> (at the same level as the code directory).</li>
<li>In <code>tests/test_module.py</code> (one level under the code directory).</li>
</ol>

<p>I prefer #1 for its simplicity of finding the tests and importing them. Whatever build system you're using can easily be configured to run files starting with <code>test_</code>. Actually, the <a href=""https://docs.python.org/library/unittest.html#test-discovery"">default <code>unittest</code> pattern used for test discovery is <code>test*.py</code></a>.</p>
"
62680,6868,2008-09-15T13:08:56Z,61517,227,"<p>Note that best practice in current versions of Python is to use <i>new-style</i> classes, i.e.</p>

<pre><code>class Foo(object):
...
</code></pre>

<p>Also, there's a difference between an 'object' and a 'class'. To build a dictionary from an arbitrary <i>object</i>, it's sufficient to use <code>__dict__</code>. Usually, you'll declare your methods at class level and your attributes at instance level, so <code>__dict__</code> should be fine. For example:</p>

<pre><code>&gt;&gt;&gt; class A(object):
...   def __init__(self):
...     self.b = 1
...     self.c = 2
...   def do_nothing(self):
...     pass
...
&gt;&gt;&gt; a = A()
&gt;&gt;&gt; a.__dict__
{'c': 2, 'b': 1}
</code></pre>

<p>Alternatively, depending on what you want to do, it might be nice to inherit from dict. Then your class is <em>already</em> a dictionary, and if you want you can override getattr and/or setattr to call through and set the dict. For example:</p>

<pre><code> class Foo(dict):
     def __init__(self):
         pass
     def __getattr__(self, attr):
         return self[attr]

     # etc...
</code></pre>
"
62780,7182,2008-09-15T13:18:54Z,58711,3,"<p>With some Metaclass magic to keep the ordering I have the following working. I'm not sure how pythonic it is but it is good fun for creating simple things. </p>

<pre><code>class w(Wndw):
  title='Hello World'
  class txt(Txt):  # either a new class
    text='Insert name here'
  lbl=Lbl(text='Hello') # or an instance
  class greet(Bbt):
    text='Greet'
    def click(self): #on_click method
      self.frame.lbl.text='Hello %s.'%self.frame.txt.text

app=w()
</code></pre>
"
62976,7424,2008-09-15T13:43:08Z,53997,0,"<p>If you want to be able to invoke method calls from JavaScript to Python, <a href=""http://json-rpc.org/wiki/python-json-rpc"" rel=""nofollow"">JSON-RPC</a> works well with Google App Engine.  See Google's article, ""<a href=""http://code.google.com/appengine/articles/rpc.html"" rel=""nofollow"">Using AJAX to Enable Client RPC Requests</a>"", for details.</p>
"
63093,7498,2008-09-15T13:56:32Z,63086,0,"<p>No. How would Python parse your script if there was a way to disable this?</p>
"
63094,7483,2008-09-15T13:56:47Z,63086,33,"<p>No.  Indentation-as-grammar is an integral part of the Python language, for better and worse.</p>
"
63095,572,2008-09-15T13:56:55Z,63086,2,"<p>I do not believe so, as Python is a whitespace-delimited language. Perhaps a text editor or IDE with auto-indentation would be of help. What are you currently using?</p>
"
63111,6899,2008-09-15T13:59:18Z,63086,3,"<p>No, there isn't. Indentation is syntax for Python. You can:</p>

<ol>
<li>Use tabnanny.py to check your code</li>
<li>Use a syntax-aware editor that highlights such mistakes (vi does that, emacs I bet it does, and then, most IDEs do too)</li>
<li>(far-fetched) write a preprocessor of your own to convert braces (or whatever block delimiters you love) into indentation</li>
</ol>
"
63119,305,2008-09-15T13:59:45Z,63086,5,"<p>All of the whitespace issues I had when I was starting Python were the result mixing tabs and spaces.  Once I configured everything to just use one or the other, I stopped having problems.</p>

<p>In my case I configured UltraEdit &amp; vim to use spaces in place of tabs.</p>
"
63122,1412,2008-09-15T14:00:05Z,63086,2,"<p>You should disable tab characters in your editor when you're working with Python (always, actually, IMHO, but especially when you're working with Python). Look for an option like ""Use spaces for tabs"": any decent editor should have one.</p>
"
63124,92,2008-09-15T14:00:23Z,63086,1,"<p>Not really.  There are a few ways to modify whitespace rules for a given line of code, but you will still need indent levels to determine scope.</p>

<p>You can terminate statements with <code>;</code> and then begin a new statement on the same line. (Which people often do when <a href=""http://codegolf.com/"" rel=""nofollow"">golfing.)</a></p>

<p>If you want to break up a single line into multiple lines you can finish a line with the <code>\</code> character which means the current line effectively continues from the first non-whitespace character of the next line.  This visually <em>appears</em> violate the usual whitespace rules but is legal.</p>

<p>My advice: don't use tabs if you are having tab/space confusion.  Use spaces, and choose either 2 or 3 spaces as your indent level.  </p>

<p>A good editor will make it so you don't have to worry about this. (python-mode for <a href=""http://www.gnu.org/software/emacs/"" rel=""nofollow"">emacs,</a> for example, you can just use the tab key and it will keep you honest).</p>
"
63196,NA,2008-09-15T14:06:46Z,63086,2,"<p>It's possible to write a pre-processor which takes randomly-indented code with pseudo-python keywords like ""endif"" and ""endwhile"" and properly indents things. I had to do this when using python as an ""ASP-like"" language, because the whole notion of ""indentation"" gets a bit fuzzy in such an environment.</p>

<p>Of course, even with such a thing you really ought to indent sanely, at which point the conveter becomes superfluous.</p>
"
63216,7432,2008-09-15T14:09:10Z,63086,2,"<p>I agree with justin and others -- pick a good editor and use spaces rather than tabs for indentation and the whitespace thing becomes a non-issue.  I only recently started using Python, and while I thought the whitespace issue would be a real annoyance it turns out to not be the case. For the record I'm using emacs though I'm sure there are other editors out there that do an equally fine job.</p>

<p>If you're really dead-set against it, you can always pass your scripts through a pre-processor but that's a bad idea on many levels. If you're going to learn a language, embrace the features of that language rather than try to work around them. Otherwise, what's the point of learning a new language?</p>
"
63289,7706,2008-09-15T14:16:37Z,63086,1,"<p>Getting your indentation to work correctly is going to be important in any language you use. </p>

<p>Even though it won't affect the execution of the program in most other languages, incorrect indentation can be very confusing for anyone trying to read your program, so you need to invest the time in figuring out how to configure your editor to align things correctly.</p>

<p>Python is pretty liberal in how it lets you indent. You can pick between tabs and spaces (but you really should use spaces) and can pick how many spaces. The only thing it requires is that you are consistent which ultimately is important no matter what language you use.</p>
"
63357,5661,2008-09-15T14:22:30Z,63086,4,"<blockquote>
  <p>I'm currently using NotePad++. Is
  there maybe an IDE that would take
  care of the tabs and indenting?</p>
</blockquote>

<p>I liked <a href=""http://pydev.sourceforge.net/"" rel=""nofollow"">pydev</a> extensions of eclipse for that.</p>
"
63403,7666,2008-09-15T14:28:27Z,63086,2,"<p>Tabs and spaces confusion can be fixed by setting your editor to use spaces instead of tabs. </p>

<p>To make whitespace completely intuitive, you can use a stronger code editor or an IDE (though you don't need a full-blown IDE if all you need is proper automatic code indenting). </p>

<p>A list of editors can be found in the Python wiki, though that one is a bit too exhausting: 
- <a href=""http://wiki.python.org/moin/PythonEditors"" rel=""nofollow"">http://wiki.python.org/moin/PythonEditors</a></p>

<p>There's already a question in here which tries to slim that down a bit: </p>

<ul>
<li><a href=""http://stackoverflow.com/questions/60784/poll-which-python-ideeditor-is-the-best"">http://stackoverflow.com/questions/60784/poll-which-python-ideeditor-is-the-best</a></li>
</ul>

<p>Maybe you should add a more specific question on that: ""Which Python editor or IDE do you prefer on Windows - and why?""</p>
"
63450,7237,2008-09-15T14:34:34Z,63086,0,"<p>I was a bit reluctant to learn Python because of tabbing. However, I almost didn't notice it when I used Vim.</p>
"
63528,4702,2008-09-15T14:43:01Z,61605,0,"<p>It's fine to return multiple values using a tuple for simple functions such as <code>divmod</code>. If it makes the code readable, it's Pythonic.</p>

<p>If the return value starts to become confusing, check whether the function is doing too much and split it if it is. If a big tuple is being used like an object, make it an object. Also, consider using <a href=""http://code.activestate.com/recipes/500261/"" rel=""nofollow"">named tuples</a>, which will be part of the standard library in Python 2.6.</p>
"
63549,7706,2008-09-15T14:46:06Z,61605,1,"<p>It's definitely pythonic. The fact that you can return multiple values from a function the boilerplate you would have in a language like C where you need to define a struct for every combination of types you return somewhere.</p>

<p>However, if you reach the point where you are returning something crazy like 10 values from a single function, you should seriously consider bundling them in a class because at that point it gets unwieldy.</p>
"
63606,157,2008-09-15T14:52:58Z,63488,1,"<p>Take a look at the hgweb stuff. You can set up RSS feeds and see all the revisions, et cetera.</p>
"
63635,7706,2008-09-15T14:56:01Z,61517,10,"<blockquote>
  <p>To build a dictionary from an arbitrary <i>object</i>, it's sufficient to use <code>__dict__</code>.</p>
</blockquote>

<p>This misses attributes that the object inherits from its class. For example,</p>

<pre><code>class c(object):
    x = 3
a = c()
</code></pre>

<p>hasattr(a, 'x') is true, but 'x' does not appear in a.__dict__</p>
"
63636,8019,2008-09-15T14:56:06Z,63488,2,"<p>I really enjoy what I did with my custom hook.  I have it post a message to my campfire account (campfire is a group based app).  It worked out really well. Because I had my clients in there and it could show him my progress.</p>
"
63645,7779,2008-09-15T14:56:35Z,61151,0,"<p>When writing a package called ""foo"", I will put unit tests into a separate package ""foo_test"". Modules and subpackages will then have the same name as the SUT package module. E.g. tests for a module foo.x.y are found in foo_test.x.y. The __init__.py files of each testing package then contain an AllTests suite that includes all test suites of the package. setuptools provides a convenient way to specify the main testing package, so that after ""python setup.py develop"" you can just use ""python setup.py test"" or ""python setup.py test -s foo_test.x.SomeTestSuite"" to the just a specific suite.</p>
"
63767,8002,2008-09-15T15:10:03Z,63681,0,"<p>Threads by definition are part of the same process.  If you want them to keep running, they need to be forked off into a new process; see os.fork() and friends.</p>

<p>You'll probably want the new process to end (via exit() or the like) immediately after spawning the script.</p>
"
63794,6267,2008-09-15T15:12:27Z,63681,0,"<p>If a process dies all it's threads die with it, so a solution might be a separate process.</p>

<p>See if creating a xmlrpc server might help you, that is a simple solution for interprocess communication.</p>
"
63809,4421,2008-09-15T15:14:04Z,61605,1,"<p>Returning a tuple is cool. Also note the new namedtuple
which was added in python 2.6 which may make this more palatable for you:
<a href=""http://docs.python.org/dev/library/collections.html#collections.namedtuple"" rel=""nofollow"">http://docs.python.org/dev/library/collections.html#collections.namedtuple</a></p>
"
63819,8140,2008-09-15T15:15:07Z,63086,2,"<p>I find it hard to understand when people flag this as a problem with Python. I took to it immediately and actually find it's one of my favourite 'features' of the language :)</p>

<p>In other languages I have two jobs:
1. Fix the braces so the computer can parse my code
2. Fix the indentation so I can parse my code.</p>

<p>So in Python I have half as much to worry about ;-)</p>

<p>(nb the only time I ever have problem with indendation is when Python code is in a blog and a forum that messes with the white-space but this is happening less and less as the apps get smarter)</p>
"
63943,7779,2008-09-15T15:28:30Z,51412,2,"<p>As an aside: When using functions instead of methods, you could also use functools.partial:</p>

<pre><code>import functools

def foo(arg, **kwargs):
    ...

bar = functools.partial(foo, ""argvalue"")
</code></pre>

<p>The last line will define a function ""bar"" that, when called, will call foo with the first argument set to ""argvalue"" and all other functions just passed on:</p>

<pre><code>bar(5, myarg=""value"")
</code></pre>

<p>will call</p>

<pre><code>foo(""argvalue"", 5, myarg=""value"")
</code></pre>

<p>Unfortunately that will not work with methods.</p>
"
63956,7458,2008-09-15T15:29:29Z,63086,1,"<p>If you're looking for a recommendation for a Python IDE, after extensive research, I've been most happy with Wing Software's WingIDE:</p>

<p><a href=""http://www.wingware.com/products"" rel=""nofollow"">http://www.wingware.com/products</a></p>

<p>There is a free trial version, so you have nothing to lose.  It supports all the major OSes, and is only about $60 for the full version.</p>

<p>I also like SciTE a lot, which is totally free, free, free!</p>

<p><a href=""http://scintilla.sourceforge.net/SciTEDownload.html"" rel=""nofollow"">http://scintilla.sourceforge.net/SciTEDownload.html</a></p>
"
64110,6592,2008-09-15T15:47:23Z,61605,3,"<p>Yes, returning multiple values (i.e., a tuple) is definitely pythonic.  As others have pointed out, there are plenty of examples in the Python standard library, as well as in well-respected Python projects.  Two additional comments:</p>

<ol>
<li>Returning multiple values is sometimes very, very useful.  Take, for example, a method that optionally handles an event (returning some value in doing so) and also returns success or failure.  This might arise in a chain of responsibility pattern.  In other cases, you want to return multiple, closely linked pieces of data---as in the example given.  In this setting, returning multiple values is akin to returning a single instance of an anonymous class with several member variables.</li>
<li><p>Python's handling of method arguments necessitates the ability to directly return multiple values.  In C++, for example, method arguments can be passed by reference, so you can assign output values to them, in addition to the formal return value.  In Python, arguments are passed ""by reference"" (but in the sense of Java, not C++).  You can't assign new values to method arguments and have it reflected outside method scope.  For example:</p>

<pre><code>// C++
void test(int&amp; arg)
{
    arg = 1;
}

int foo = 0;
test(foo); // foo is now 1!
</code></pre>

<p>Compare with:</p>

<pre><code># Python
def test(arg):
    arg = 1

foo = 0
test(foo) # foo is still 0
</code></pre></li>
</ol>
"
64130,7980,2008-09-15T15:49:50Z,44834,483,"<p>Linked to, but not explicitly mentioned here, is exactly when <code>__all__</code> is used. It is a list of strings defining what symbols in a module will be exported when <code>from &lt;module&gt; import *</code> is used on the module.</p>

<p>For example, the following code in a <code>foo.py</code> explicitly exports the symbols <code>bar</code> and <code>baz</code>:</p>

<pre><code>__all__ = ['bar', 'baz']

waz = 5
bar = 10
def baz(): return 'baz'
</code></pre>

<p>These symbols can then be imported like so:</p>

<pre><code>from foo import *

print bar
print baz

# The following will trigger an exception, as ""waz"" is not exported by the module
print waz
</code></pre>

<p>If the <code>__all__</code> above is commented out, this code will then execute to completion, as the default behaviour of <code>import *</code> is to import all symbols that do not begin with an underscore, from the given namespace.</p>

<p>Reference: <a href=""https://docs.python.org/3.5/tutorial/modules.html#importing-from-a-package"">https://docs.python.org/3.5/tutorial/modules.html#importing-from-a-package</a></p>

<p><strong>NOTE:</strong> <code>__all__</code> affects the <code>from &lt;module&gt; import *</code> behavior only. Members that are not mentioned in <code>__all__</code> are still accessible from outside the module and can be imported with <code>from &lt;module&gt; import &lt;member&gt;</code>.</p>
"
64163,1384652,2008-09-15T15:54:52Z,64141,5,"<p>A class is a template, it allows you to create a blueprint, you can then have multiple instances of a class each with different numbers, like so.</p>

<pre><code>class dog(object):
	def __init__(self, height, width, lenght):
		self.height = height
		self.width = width
		self.length = length

	def revert(self):
		self.height = 1
		self.width = 2
		self.length = 3

dog1 = dog(5, 6, 7)
dog2 = dog(2, 3, 4)

dog1.revert()
</code></pre>
"
64186,8206,2008-09-15T15:57:56Z,63086,0,"<p>Many Python IDEs and generally-capable text/source editors can handle the whitespace for you.</p>

<p>However, it is best to just ""let go"" and enjoy the whitespace rules of Python. With some practice, they won't get into your way at all, and you will find they have many merits, the most important of which are:</p>

<ol>
<li>Because of the forced whitespace, Python code is simpler to understand. You will find that as you read code written by others, it is easier to grok than code in, say, Perl or PHP.</li>
<li>Whitespace saves you quite a few keystrokes of control characters like { and }, which litter code written in C-like languages. Less {s and }s means, among other things, less RSI and wrist pain. This is not a matter to take lightly.</li>
</ol>
"
64195,8420,2008-09-15T15:59:11Z,64141,1,"<p>Classes don't have values. Objects do. Is what you want basically a class that can reset an instance (object) to a set of default values? </p>

<p>How about just providing a reset method, that resets the properties of your object to whatever is the default?</p>

<p>I think you should simplify your question, or tell us what you really want to do. It's not at all clear.</p>
"
64206,8393,2008-09-15T16:00:31Z,64141,1,"<p>I think you are confused. You should re-check the meaning of ""class"" and ""instance"".</p>

<p>I think you are trying to first declare a Instance of a certain Class, and then declare a instance of other Class, use the data from the first one, and then find a way to convert the data in the second instance and use it on the first instance...</p>

<p>I recommend that you use operator overloading to assign the data.</p>
"
64216,8433,2008-09-15T16:01:20Z,64141,1,"<pre><code>class ABC(self):
   numbers = [0,1,2,3]

class DEF(ABC):
   def __init__(self):
      self.new_numbers = super(ABC,self).numbers

   def setnums(self, numbers):
      self.new_numbers = numbers

   def getnums(self):
     return self.new_numbers

   def reset(self):
     __init__()
</code></pre>
"
64266,NA,2008-09-15T16:07:04Z,60848,0,"<p>if you don't need the dict functionality, and only need to return tuples in the order you've inserted them, wouldn't a queue work better?</p>
"
64308,7829,2008-09-15T16:12:39Z,64237,7,"<p>I tend to create new applications for each logically separate set of models. e.g.:</p>

<ul>
<li>User Profiles</li>
<li>Forum Posts</li>
<li>Blog posts</li>
</ul>
"
64356,3926,2008-09-15T16:18:30Z,63086,3,"<p><a href=""http://timhatch.com/projects/pybraces/"" rel=""nofollow"">pybraces</a></p>

<p>It's unsupported.</p>
"
64399,7829,2008-09-15T16:24:30Z,64141,1,"<p>Just FYI, here's an alternate implementation... Probably violates about 15 million pythonic rules, but I publish it per information/observation:</p>

<pre><code>class Resettable(object):
    base_dict = {}
    def reset(self):
            self.__dict__ = self.__class__.base_dict

    def __init__(self):
            self.__dict__ = self.__class__.base_dict.copy()

class SomeClass(Resettable):
    base_dict = {
            'number_one': 1,
            'number_two': 2,
            'number_three': 3,
            'number_four': 4,
            'number_five': 5,
    }
    def __init__(self):
            Resettable.__init__(self)


p = SomeClass()
p.number_one = 100
print p.number_one
p.reset()
print p.number_one
</code></pre>
"
64464,8290,2008-09-15T16:32:07Z,64237,11,"<p>I prefer to think of Django applications as reusable modules or components than as ""applications"". </p>

<p>This helps me encapsulate and decouple certain features from one another, improving re-usability should I decide to share a particular ""app"" with the community at large, and maintainability.</p>

<p>My general approach is to bucket up specific features or feature sets into ""apps"" as though I were going to release them publicly. The hard part here is figuring out how big each bucket is. </p>

<p>A good trick I use is to imagine how my apps would be used if they were released publicly. This often encourages me to shrink the buckets and more clearly define its ""purpose"".</p>
"
64471,7829,2008-09-15T16:33:05Z,64426,5,"<p><a href=""http://pyro.sf.net"">Pyro</a> (Python Remote Objects) is fairly clever if all your server/clients are going to be in Python. I use <a href=""http://www.xmpp.org"">XMPP</a> alot though since I'm communicating with hosts that are not always Python. XMPP lends itself to being extended fairly easily too.</p>

<p>There is an excellent XMPP library for python called <a href=""http://pyxmpp.jajcus.net"">PyXMPP</a> which is reasonably up to date and has no dependancy on Twisted.</p>
"
64486,7829,2008-09-15T16:34:29Z,510348,330,"<p>You can use the sleep() function in the time module. It can take a float argument for sub second resolution.</p>

<pre><code>from time import sleep
sleep(0.1) # Time in seconds.
</code></pre>
"
64487,4945,2008-09-15T16:34:45Z,64426,1,"<p>I'd use http and start with understanding what the Python <a href=""http://docs.python.org/lib/asyncore-example.html"" rel=""nofollow"">library</a> offers. </p>

<p>Then I'd move onto the more industrial strength <a href=""http://wiki.python.org/moin/Twisted-Examples"" rel=""nofollow"">Twisted</a> library.</p>
"
64489,4702,2008-09-15T16:34:53Z,64426,3,"<p><a href=""http://www.ietf.org/rfc/rfc2616.txt"" rel=""nofollow"">HTTP</a> seems to suit your requirements and is very well supported in Python. </p>

<p><a href=""http://twistedmatrix.com/"" rel=""nofollow"">Twisted</a> is good for serious asynchronous network programming in Python, but it has a steep learning curve, so it might be worth using something simpler unless you know your system will need to handle a lot of concurrency.</p>

<p>To start, I would suggest using <a href=""http://www.python.org/doc/lib/module-urllib2.html"" rel=""nofollow""><code>urllib</code></a> for the client and a <a href=""http://code.google.com/p/modwsgi/"" rel=""nofollow"">WSGI service behind Apache</a> for the server. Apache can be set up to deal with HTTPS fairly simply.</p>
"
64492,8570,2008-09-15T16:35:16Z,64237,25,"<p>James Bennett has a wonderful <a href=""http://www.b-list.org/weblog/2008/mar/15/slides/"" rel=""nofollow"">set of slides</a> on how to organize reusable apps in Django.</p>
"
64554,8002,2008-09-15T16:43:36Z,64505,6,"<p>The main gotcha I see is that you're not handling any errors: .login() and .sendmail() both have documented exceptions that they can throw, and it seems like .connect() must have some way to indicate that it was unable to connect - probably an exception thrown by the underlying socket code.</p>
"
64572,8450,2008-09-15T16:45:13Z,64426,-1,"<p>In the RPC field, Json-RPC will bring a big performance improvement over xml-rpc: 
<a href=""http://json-rpc.org/wiki/python-json-rpc"" rel=""nofollow"">http://json-rpc.org/wiki/python-json-rpc</a></p>
"
64580,3978,2008-09-15T16:46:00Z,64505,3,"<p>You should make sure you format the date in the correct format - <a href=""http://www.faqs.org/rfcs/rfc2822.html"" rel=""nofollow"">RFC2822</a>.</p>
"
64673,5987,2008-09-15T16:55:57Z,64505,5,"<p>Make sure you don't have any firewalls blocking SMTP.  The first time I tried to send an email, it was blocked both by Windows Firewall and McAfee - took forever to find them both.</p>
"
64690,8675,2008-09-15T16:58:29Z,64426,0,"<p>XMLRPC is very simple to get started with, and at my previous job, we used it extensively for intra-node communication in a distributed system. As long as you keep track of the fact that the None value can't be easily transferred, it's dead easy to work with, and included in Python's standard library. </p>

<p>Run it over https and add a username/password parameter to all calls, and you'll have simple security in place. Not sure about how easy it is to verify server certificate in Python, though.</p>

<p>However, if you are transferring large amounts of data, the coding into XML might become a bottleneck, so using a <a href=""http://sv.wikipedia.org/wiki/REST"" rel=""nofollow"">REST</a>-inspired architecture over https may be as good as xmlrpclib.</p>
"
64756,NA,2008-09-15T17:06:26Z,60208,-1,"<p>The switch statement is just syntactical sugar which is probably why Python doesn't have it. You can use if else statements for this functionality easily.</p>

<p>Like Matthew Schinckel said, you can use if and elif and else.</p>

<p>It is also a simple matter to have ""fall-through"" capabilities like most switch statements. All you have to do is not  use elif.</p>

<pre><code>if x == 1:
    # 1
if x == 2:
    # fall-through
elif x == 3:
    # not fall-through
</code></pre>
"
64890,8935,2008-09-15T17:24:40Z,64505,74,"<p>The script I use is quite similar; I post it here as an example of how to use the email.* modules to generate MIME messages; so this script can be easily modified to attach pictures, etc.</p>

<p>I rely on my ISP to add the date time header.</p>

<p>My ISP requires me to use a secure smtp connection to send mail, I rely on the ssmtplib module (downloadable at <a href=""http://www1.cs.columbia.edu/~db2501/ssmtplib.py"" rel=""nofollow"">http://www1.cs.columbia.edu/~db2501/ssmtplib.py</a>)</p>

<p>As in your script, the username and password, (given dummy values below), used to authenticate on the SMTP server, are in plain text in the source. This is a security weakness; but the best alternative depends on how careful you need (want?) to be about protecting these.</p>

<p>=======================================</p>

<pre><code>#! /usr/local/bin/python


SMTPserver = 'smtp.att.yahoo.com'
sender =     'me@my_email_domain.net'
destination = ['recipient@her_email_domain.com']

USERNAME = ""USER_NAME_FOR_INTERNET_SERVICE_PROVIDER""
PASSWORD = ""PASSWORD_INTERNET_SERVICE_PROVIDER""

# typical values for text_subtype are plain, html, xml
text_subtype = 'plain'


content=""""""\
Test message
""""""

subject=""Sent from Python""

import sys
import os
import re

from smtplib import SMTP_SSL as SMTP       # this invokes the secure SMTP protocol (port 465, uses SSL)
# from smtplib import SMTP                  # use this for standard SMTP protocol   (port 25, no encryption)

# old version
# from email.MIMEText import MIMEText
from email.mime.text import MIMEText

try:
    msg = MIMEText(content, text_subtype)
    msg['Subject']=       subject
    msg['From']   = sender # some SMTP servers will do this automatically, not all

    conn = SMTP(SMTPserver)
    conn.set_debuglevel(False)
    conn.login(USERNAME, PASSWORD)
    try:
        conn.sendmail(sender, destination, msg.as_string())
    finally:
        conn.quit()

except Exception, exc:
    sys.exit( ""mail failed; %s"" % str(exc) ) # give a error message
</code></pre>
"
64899,NA,2008-09-15T17:25:34Z,63086,0,"<p>In Python, indentation is a semantic element as well as providing visual grouping for readability.</p>

<p>Both space and tab can indicate indentation. This is unfortunate, because:</p>

<ul>
<li><p>The interpretation(s) of a tab varies
among editors and IDEs and is often
configurable (and often configured).</p></li>
<li><p>OTOH, some editors are not
configurable but apply their own
rules for indentation.</p></li>
<li><p>Different sequences of
spaces and tabs may be visually
indistinguishable.</p></li>
<li><p>Cut and pastes can alter whitespace.</p></li>
</ul>

<p>So, unless you know that a given piece of code will only be modified by yourself with a single tool and an unvarying config, you must avoid tabs for indentation (configure your IDE) and make sure that you are warned if they are introduced (search for tabs in leading whitespace).</p>

<p>And you can still expect to be bitten now and then, as long as arbitrary semantics are applied to control characters.</p>
"
64983,7182,2008-09-15T17:35:44Z,55391,18,"<p>I agree with Vinko <a href=""http://www.crummy.com/software/BeautifulSoup/"">BeautifulSoup</a> is the way to go. However I suggest using <code>fooId['value']</code> to <a href=""http://www.crummy.com/software/BeautifulSoup/documentation.html#The%20attributes%20of%20Tags"">get the attribute</a> rather than relying on value being the third attribute.</p>

<pre><code>from BeautifulSoup import BeautifulSoup
#Or retrieve it from the web, etc.
html_data = open('/yourwebsite/page.html','r').read()
#Create the soup object from the HTML data
soup = BeautifulSoup(html_data)
fooId = soup.find('input',name='fooId',type='hidden') #Find the proper tag
value = fooId['value'] #The value attribute
</code></pre>
"
65122,2260,2008-09-15T17:53:33Z,65076,42,"<p>I use this on my macbook:</p>

<pre><code>"" configure expanding of tabs for various file types
au BufRead,BufNewFile *.py set expandtab
au BufRead,BufNewFile *.c set noexpandtab
au BufRead,BufNewFile *.h set noexpandtab
au BufRead,BufNewFile Makefile* set noexpandtab

"" --------------------------------------------------------------------------------
"" configure editor with tabs and nice stuff...
"" --------------------------------------------------------------------------------
set expandtab           "" enter spaces when tab is pressed
set textwidth=120       "" break lines when line length increases
set tabstop=4           "" use 4 spaces to represent tab
set softtabstop=4
set shiftwidth=4        "" number of spaces to use for auto indent
set autoindent          "" copy indent from current line when starting a new line

"" make backspaces more powerfull
set backspace=indent,eol,start

set ruler                           "" show line and column number
syntax on   			"" syntax highlighting
set showcmd 			"" show (partial) command in status line
</code></pre>

<p>(edited to only show stuff related to indent / tabs)</p>
"
65255,NA,2008-09-15T18:08:41Z,44778,2,"<pre><code>l=['a', 1, 'b', 2]

print str(l)[1:-1]

Output: ""'a', 1, 'b', 2""
</code></pre>
"
65326,9212,2008-09-15T18:15:46Z,60848,4,"<p>I've used StableDict before with good success.</p>

<p><a href=""http://pypi.python.org/pypi/StableDict/0.2"" rel=""nofollow"">http://pypi.python.org/pypi/StableDict/0.2</a></p>
"
65333,6267,2008-09-15T18:16:24Z,65266,2,"<p>Note that each module initializes itself only once during the life of an app, no matter how many times you import it. So if you compile your expressions at the module's global scope (ie. not in a function) you should be fine.</p>
"
65440,3560,2008-09-15T18:29:51Z,65266,12,"<blockquote>
  <p>Is it possible to store these regular expressions in a cache on disk in a pre-compiled manner to avoid having to execute the regex compilations on each import?</p>
</blockquote>

<p>Not easily. You'd have to write a custom serializer that hooks into the C <code>sre</code> implementation of the Python regex engine. Any performance benefits would be vastly outweighed by the time and effort required.</p>

<p>First, have you actually profiled the code? I doubt that compiling regexes is a significant part of the application's run-time. Remember that they are only compiled the first time the module is imported in the current execution -- thereafter, the module and its attributes are cached in memory.</p>

<p>If you have a program that basically spawns once, compiles a bunch of regexes, and then exits, you could try re-engineering it to perform multiple tests in one invocation. Then you could re-use the regexes, as above.</p>

<p>Finally, you could compile the regexes into C-based state machines and then link them in with an extension module. While this would likely be more difficult to maintain, it would eliminate regex compilation entirely from your application.</p>
"
65579,1447,2008-09-15T18:45:37Z,65266,-1,"<p>It's possible to place each regex (or group of regexs) into a separate file and then dynamically import the file that you need using the imp module.  I doubt that it scales very well but it could be what you need.</p>
"
65682,7851,2008-09-15T18:57:29Z,65400,2,"<p>I think what you want to do is this:</p>

<pre><code>&gt;&gt;&gt; class Foo():
...   def __init__(self, x):
...     self.x = x
... 
&gt;&gt;&gt; def bar(self):
...   print 'bar:', self.x
... 
&gt;&gt;&gt; bar.func_name = 'foobar'
&gt;&gt;&gt; Foo.foobar = bar
&gt;&gt;&gt; f = Foo(12)
&gt;&gt;&gt; f.foobar()
bar: 12
&gt;&gt;&gt; f.foobar.func_name
'foobar'
</code></pre>

<p>Now you are free to pass <code>Foo</code>s to a library that expects <code>Foo</code> instances to have a method named <code>foobar</code>.</p>

<p>Unfortunately, (1) I don't know how to use metaclasses and (2) I'm not sure I read your question correctly, but I hope this helps. </p>

<p>Note that <code>func_name</code> is only assignable in Python 2.4 and higher.</p>
"
65716,2603,2008-09-15T19:01:27Z,65400,10,"<p>Try dynamically extending the bases that way you can take advantage of the mro and the methods are actual methods:</p>

<pre><code>class Parent(object):
    def bar(self):
        print ""bar""

class MetaFoo(type):
    def __new__(cls, name, bases, dict):
    	return type(name, (Parent,) + bases, dict)

class Foo(object):
    __metaclass__ = MetaFoo

if __name__ == ""__main__"":
    f = Foo()
    f.bar()
    print f.bar.func_name
</code></pre>
"
65757,2153,2008-09-15T19:05:12Z,63681,2,"<p>Python has its own threading module that comes standard, if it helps. You can create thread objects using the threading module.</p>

<p><a href=""http://docs.python.org/lib/module-threading.html"" rel=""nofollow"">threading Documentation</a></p>

<p><a href=""http://docs.python.org/lib/module-thread.html"" rel=""nofollow"">thread Documentation</a></p>

<p>The thread module offers low level threading and synchronization using simple Lock objects.</p>

<p>Again, not sure if this helps since you're using Python under a Delphi environment.</p>
"
65771,391806,2008-09-15T19:07:07Z,63086,0,"<p>The real answer to your question is that if you are going to use the language you need to learn its syntax.  Just as an error in indenting python can generate a compiler error, an error using braces in various other languages can also generate a compiler error.</p>

<p>Even worse it can be silently misinterpreted by the compiler to do the wrong thing.   This is particularly dangerous when the indenting doesn't match the desired meaning. I.e. in many other languages:</p>

<pre><code>If(first condition)
   if (second condition)
      do something interesting;
else
  do something different;
</code></pre>

<p>Will lead to unpleasant surprises.</p>

<p>Python forces you to write code that <em>looks</em> like what it does.  This is a good thing for other programmers who have to read your code, or for you when you try to read your own code after a month or so.</p>
"
65844,825,2008-09-15T19:14:24Z,65266,0,"<p>The <a href=""http://docs.python.org/lib/module-shelve.html"" rel=""nofollow"">shelve</a> module appears to work just fine:</p>

<pre><code>
import re
import shelve
a_pattern = ""a.*b""
b_pattern = ""c.*d""
a = re.compile(a_pattern)
b = re.compile(b_pattern)

x = shelve.open('re_cache')
x[a_pattern] = a
x[b_pattern] = b
x.close()

# ...
x = shelve.open('re_cache')
a = x[a_pattern]
b = x[b_pattern]
x.close()

</code></pre>

<p>You can then make a nice wrapper class that automatically handles the caching for you so that it becomes transparent to the user... an exercise left to the reader.</p>
"
65903,8272,2008-09-15T19:20:15Z,49307,12,"<p>If x and y are column vectors, you can do:</p>

<pre><code>for i=[x';y']
# do stuff with i(1) and i(2)
end
</code></pre>

<p>(with row vectors, just use <code>x</code> and <code>y</code>).</p>

<p>Here is an example run:</p>

<pre class=""lang-matlab prettyprint-override""><code>&gt;&gt; x=[1 ; 2; 3;]

x =

     1
     2
     3

&gt;&gt; y=[10 ; 20; 30;]

y =

    10
    20
    30

&gt;&gt; for i=[x';y']
disp(['size of i = ' num2str(size(i)) ', i(1) = ' num2str(i(1)) ', i(2) = ' num2str(i(2))])
end
size of i = 2  1, i(1) = 1, i(2) = 10
size of i = 2  1, i(1) = 2, i(2) = 20
size of i = 2  1, i(1) = 3, i(2) = 30
&gt;&gt; 
</code></pre>
"
65924,8458,2008-09-15T19:22:37Z,60649,42,"<p>In terms of speed, the best cross-platform IPC mechanism will be pipes.  That assumes, however, that you want cross-platform IPC on the same machine.  If you want to be able to talk to processes on remote machines, you'll want to look at using sockets instead.  Luckily, if you're talking about TCP at least, sockets and pipes behave pretty much the same behavior.  While the APIs for setting them up and connecting them are different, they both just act like streams of data.</p>

<p>The difficult part, however, is not the communication channel, but the messages you pass over it.  You really want to look at something that will perform verification and parsing for you.  I recommend looking at Google's <a href=""http://code.google.com/apis/protocolbuffers/docs/overview.html"">Protocol Buffers</a>. You basically create a spec file that describes the object you want to pass between processes, and there is a compiler that generates code in a number of different languages for reading and writing objects that match the spec.  It's much easier (and less bug prone) than trying to come up with a messaging protocol and parser yourself.</p>
"
65991,372664,2008-09-15T19:31:43Z,60848,5,"<p>Or, just make the key a tuple with time.now() as the first field in the tuple.</p>

<p>Then you can retrieve the keys with dictname.keys(), sort, and voila!</p>

<p>Gerry</p>
"
66069,2193,2008-09-15T19:39:28Z,60649,4,"<p>If you're willing to try something a little different, there's the <a href=""http://zeroc.com/ice.html"" rel=""nofollow"">ICE</a> platform from <a href=""http://zeroc.com"" rel=""nofollow"">ZeroC</a>. It's open source, and is supported on pretty much every OS you can think of, as well as having language support for C++, C#, Java, Ruby, Python and PHP. Finally, it's very easy to drive (the language mappings are tailored to fit naturally into each language). It's also fast and efficient. There's even a cut-down version for devices.</p>
"
66440,2351,2008-09-15T20:09:09Z,61781,1,"<p>I don't believe that VBScript as hosted by IIS has any way of executing an external process.  If you are using python as an AXscripting engine then you could just use the sys module.  If the script you're calling is actually meant to be a cgi script you'll have to mimic all the environment variables that the cgi uses.  The alternative is to put the script on the python path, import it and hope that it is modular enough that you can call the pieces you need and bypass the cgi handling code.</p>
"
66666,9951,2008-09-15T20:34:12Z,65266,-1,"<p>Hum,</p>

<p>Doesn't shelve use pickle ?</p>

<p>Anyway, I agree with the previous anwsers. Since a module is processed only once, I doubt compiling regexps will be your app bottle neck. And Python re module is wicked fast since it's coded in C :-)</p>

<p>But the good news is that Python got a nice community, so I am sure you can find somebody currently hacking just what you need.</p>

<p>I googled 5 sec and found : <a href=""http://home.gna.org/oomadness/en/cerealizer/index.html"" rel=""nofollow"">http://home.gna.org/oomadness/en/cerealizer/index.html</a>.</p>

<p>Don't know if it will do it but if not, good luck in you research :-)</p>
"
66670,3560,2008-09-15T20:34:53Z,66636,3,"<p>What are you trying to accomplish? If I saw such a construct in live Python code, I would consider beating the original programmer.</p>
"
66818,3363,2008-09-15T20:50:36Z,65076,2,"<p>Ensure you are editing the correct configuration file for VIM. Especially if you are using windows, where the file could be named _vimrc instead of .vimrc as on other platforms.</p>

<p>In vim type</p>

<p><code>:help vimrc</code></p>

<p>and check your path to the _vimrc/.vimrc file with</p>

<p><code>:echo $HOME</code></p>

<p><code>:echo $VIM</code></p>

<p>Make sure you are only using one file. If you want to split your configuration into smaller chunks you can source other files from inside your _vimrc file.</p>

<p><code>:help source</code></p>
"
66846,NA,2008-09-15T20:53:14Z,65266,0,"<p>Open /usr/lib/python2.5/re.py and look for ""def _compile"". You'll find re.py's internal cache mechanism. </p>
"
66847,9493,2008-09-15T20:53:20Z,66636,3,"<p>I'm also not entirely sure what the exact behaviour you want is, but assuming its that you want bar.meth1(42) to be equivalent to foo.meth1 being a classmethod of bar (with ""self"" being the class), then you can acheive this with:</p>

<pre><code>def convert_to_classmethod(method):
    return classmethod(method.im_func)

class bar(foo):
    meth1 = convert_to_classmethod(foo.meth1)
</code></pre>

<p>The problem with classmethod(foo.meth1) is that foo.meth1 has already been converted to a method, with a special meaning for the first parameter.  You need to undo this and look at the underlying function object, reinterpreting what ""self"" means.</p>

<p>I'd also caution that this is a pretty odd thing to do, and thus liable to cause confusion to anyone reading your code.  You are probably better off thinking through a different solution to your problem.</p>
"
66883,7779,2008-09-15T20:57:10Z,66730,4,"<p>Here is how:</p>

<pre><code>import gobject

class MyGObjectClass(gobject.GObject):
    ...

gobject.signal_new(""signal-name"", MyGObjectClass, gobject.SIGNAL_RUN_FIRST,
    None, (str, int))
</code></pre>

<p>Where the second to last argument is the return type and the last argument is a tuple of argument types.</p>
"
66924,182896,2008-09-15T21:01:02Z,64185,2,"<p>After a brief amount of Googling, I found nothing that looks like a wrapper for this API, but I'm not quite sure if a wrapper is what is necessary for GeoPlanet.  </p>

<p>According to Yahoo's <a href=""http://developer.yahoo.com/geo/guide/api_docs.html#api_overview"" rel=""nofollow"">documentation</a> for GeoPlanet, requests are made in the form of an HTTP GET messages which can very easily be made using Python's <a href=""http://docs.python.org/lib/module-httplib.html"" rel=""nofollow"">httplib module</a>, and <a href=""http://developer.yahoo.com/geo/guide/response_formats.html"" rel=""nofollow"">responses</a> can take one of several forms including XML and JSON.  Python can very easily parse these formats.  In fact, Yahoo! itself even offers libraries for parsing both <a href=""http://developer.yahoo.com/python/python-xml.html"" rel=""nofollow"">XML</a>  and <a href=""http://developer.yahoo.com/python/python-json.html"" rel=""nofollow"">JSON</a> with Python.  </p>

<p>I know it sounds like a lot of libraries, but all the hard work has already been done for the programmer.  It would just take a little ""gluing together"" and you would have yourself a nice interface to Yahoo! GeoPlanet using the power of Python.</p>
"
66936,NA,2008-09-15T21:02:08Z,66636,0,"<p>The question, as posed, seems quite odd to me: I can't see why anyone would want to do that. It is possible that you are misunderstanding just what a ""classmethod"" is in Python (it's a bit different from, say, a static method in Java).</p>

<p>A normal method is more-or-less just a function which takes as its first argument (usually called ""self""), an instance of the class, and which is invoked as ""."".</p>

<p>A classmethod is more-or-less just a function which takes as its first argument (often called ""cls""), a class, and which can be invoked as ""."" OR as ""."".</p>

<p>With this in mind, and your code shown above, what would you expect to have happen if someone creates an instance of bar and calls meth1 on it?</p>

<pre><code>bar1 = bar()
bar1.meth1(""xyz"")
</code></pre>

<p>When the code to meth1 is called, it is passed two arguments 'self' and 'val'. I guess that you expect ""xyz"" to be passed for 'val', but what are you thinking gets passed for 'self'? Should it be the bar1 instance (in this case, no override was needed)? Or should it be the class bar (what then would this code DO)?</p>
"
66967,10077,2008-09-15T21:05:57Z,61605,1,"<p>I'm fairly new to Python, but the tuple technique seems very pythonic to me.  However, I've had another idea that may enhance readability.  Using a dictionary allows access to the different values by name rather than position.  For example:</p>

<pre><code>def divide(x, y):
    return {'quotient': x/y, 'remainder':x%y }

answer = divide(22, 7)
print answer['quotient']
print answer['remainder']
</code></pre>
"
67450,293,2008-09-15T22:00:13Z,60208,2,"<p>I would just use if/elif/else statements. I think that it's good enough to replace the switch statement.</p>
"
67477,9555,2008-09-15T22:03:03Z,67454,1,"<p>Can't you just write a link to a ""zip server"" or whatnot?  Why does the zip archive itself need to be served from Django?  A 90's era CGI script to generate a zip and spit it to stdout is really all that's required here, at least as far as I can see.</p>
"
67527,680,2008-09-15T22:09:50Z,67454,6,"<p>Django doesn't directly handle the generation of dynamic content (specifically Zip files). That work would be done by Python's standard library. You can take a look at how to dynamically create a Zip file in Python <a href=""https://docs.python.org/2/library/zipfile.html#zipfile-objects"" rel=""nofollow"">here</a>.</p>

<p>If you're worried about it slowing down your server you can cache the requests if you expect to have many of the same requests. You can use Django's <a href=""http://docs.djangoproject.com/en/dev/topics/cache/#topics-cache"" rel=""nofollow"">cache framework</a> to help you with that.</p>

<p>Overall, zipping files can be CPU intensive but Django shouldn't be any slower than another Python web framework.</p>
"
67532,10042,2008-09-15T22:11:03Z,60649,7,"<p>You might want to try <a href=""http://www.msobczak.com/prog/yami/"">YAMI</a> , it's very simple yet functional, portable and comes with binding to few languages</p>
"
67533,10289,2008-09-15T22:11:12Z,48458,5,"<p>I think the first option is considered the best practice. And make the code folder your first package. The Rietveld project developed by Guido van Rossum is a very good model to learn from. Have a look at it: <a href=""http://code.google.com/p/rietveld"" rel=""nofollow"">http://code.google.com/p/rietveld</a></p>

<p>With regard to Django 1.0, I suggest you start using the Django trunk code instead of the GAE built in django port. Again, have a look at how it's done in Rietveld.</p>
"
67672,10035,2008-09-15T22:37:24Z,67631,3,"<p>I believe you can use <a href=""https://docs.python.org/2/library/imp.html#imp.find_module"" rel=""nofollow""><code>imp.find_module()</code></a> and <a href=""https://docs.python.org/2/library/imp.html#imp.load_module"" rel=""nofollow""><code>imp.load_module()</code></a> to load the specified module.  You'll need to split the module name off of the path, i.e. if you wanted to load <code>/home/mypath/mymodule.py</code> you'd need to do:</p>

<pre><code>imp.find_module('mymodule', '/home/mypath/')
</code></pre>

<p>...but that should get the job done.</p>
"
67692,7779,2008-09-15T22:41:16Z,67631,575,"<p>For Python 3.5+ use:</p>

<pre><code>import importlib.util
spec = importlib.util.spec_from_file_location(""module.name"", ""/path/to/file.py"")
foo = importlib.util.module_from_spec(spec)
spec.loader.exec_module(foo)
foo.MyClass()
</code></pre>

<p>For Python 3.3 and 3.4 use:</p>

<pre><code>from importlib.machinery import SourceFileLoader

foo = SourceFileLoader(""module.name"", ""/path/to/file.py"").load_module()
foo.MyClass()
</code></pre>

<p>(Although this has been deprecated in Python 3.4.)</p>

<p>Python 2 use:</p>

<pre><code>import imp

foo = imp.load_source('module.name', '/path/to/file.py')
foo.MyClass()
</code></pre>

<p>There are equivalent convenience functions for compiled Python files and DLLs.</p>

<p>See also. <a href=""http://bugs.python.org/issue21436"">http://bugs.python.org/issue21436</a>.</p>
"
67693,9812,2008-09-15T22:41:24Z,67631,12,"<p>You can use the </p>

<pre><code>load_source(module_name, path_to_file) 
</code></pre>

<p>method from <a href=""https://docs.python.org/library/imp.html"">imp module</a>.</p>
"
67705,10370,2008-09-15T22:43:20Z,67631,2,"<p><strong>Import package modules at runtime (Python recipe)</strong> </p>

<p><a href=""http://code.activestate.com/recipes/223972/"" rel=""nofollow"">http://code.activestate.com/recipes/223972/</a></p>

<pre><code>###################
##                #
## classloader.py #
##                #
###################

import sys, types

def _get_mod(modulePath):
    try:
        aMod = sys.modules[modulePath]
        if not isinstance(aMod, types.ModuleType):
            raise KeyError
    except KeyError:
        # The last [''] is very important!
        aMod = __import__(modulePath, globals(), locals(), [''])
        sys.modules[modulePath] = aMod
    return aMod

def _get_func(fullFuncName):
    """"""Retrieve a function object from a full dotted-package name.""""""

    # Parse out the path, module, and function
    lastDot = fullFuncName.rfind(u""."")
    funcName = fullFuncName[lastDot + 1:]
    modPath = fullFuncName[:lastDot]

    aMod = _get_mod(modPath)
    aFunc = getattr(aMod, funcName)

    # Assert that the function is a *callable* attribute.
    assert callable(aFunc), u""%s is not callable."" % fullFuncName

    # Return a reference to the function itself,
    # not the results of the function.
    return aFunc

def _get_class(fullClassName, parentClass=None):
    """"""Load a module and retrieve a class (NOT an instance).

    If the parentClass is supplied, className must be of parentClass
    or a subclass of parentClass (or None is returned).
    """"""
    aClass = _get_func(fullClassName)

    # Assert that the class is a subclass of parentClass.
    if parentClass is not None:
        if not issubclass(aClass, parentClass):
            raise TypeError(u""%s is not a subclass of %s"" %
                            (fullClassName, parentClass))

    # Return a reference to the class itself, not an instantiated object.
    return aClass


######################
##       Usage      ##
######################

class StorageManager: pass
class StorageManagerMySQL(StorageManager): pass

def storage_object(aFullClassName, allOptions={}):
    aStoreClass = _get_class(aFullClassName, StorageManager)
    return aStoreClass(allOptions)
</code></pre>
"
67708,10322,2008-09-15T22:44:50Z,67631,13,"<p>You can also do something like this and add the directory that the configuration file is sitting in to the Python load path, and then just do a normal import, assuming you know the name of the file in advance, in this case ""config"".</p>

<p>Messy, but it works.</p>

<pre><code>configfile = '~/config.py'

import os
import sys

sys.path.append(os.path.dirname(os.path.expanduser(configfile)))

import config
</code></pre>
"
67715,70142,2008-09-15T22:46:35Z,67631,8,"<p>Do you mean load or import?</p>

<p>You can manipulate the sys.path list specify the path to your module, then import your module. For example, given a module at:</p>

<pre><code>/foo/bar.py
</code></pre>

<p>You could do:</p>

<pre><code>import sys
sys.path[0:0] = '/foo' # puts the /foo directory at the start of your path
import bar
</code></pre>
"
67743,9567,2008-09-15T22:52:27Z,66730,10,"<p>You can also define signals inside the class definition:</p>

<pre><code>class MyGObjectClass(gobject.GObject):
    __gsignals__ = {
      ""some-signal"": (gobject.SIGNAL_RUN_FIRST, gobject.TYPE_NONE, (object, )),
    }
</code></pre>

<p>The contents of the tuple are the the same as the three last arguments to <code>gobject.signal_new</code>.</p>
"
67769,1943957,2008-09-15T22:56:37Z,64237,0,"<p>An 'app' could be many different things, it all really comes down to taste. For example, let's say you are building a blog. Your app could be the entire blog, or you could have an 'admin' app, a 'site' app for all of the public views, an 'rss' app, a 'services' app so developers can interface with the blog in their own ways, etc.</p>

<p>I personally would make the blog itself the app, and break out the functionality within it. The blog could then be reused rather easily in other websites.</p>

<p>The nice thing about Django is that it will recognize any models.py file within any level of your directory tree as a file containing Django models. So breaking your functionality out into smaller 'sub apps' within an 'app' itself won't make anything more difficult.</p>
"
67921,8061,2008-09-15T23:24:55Z,67223,1,"<p>I don't know personally, but I noticed that you haven't posted to <a href=""http://groups.google.com/group/pyglet-users"" rel=""nofollow"">the pyglet mailing list</a> about this. More Pyglet users, as well as the primary developer, read that list.</p>
"
68002,10485,2008-09-15T23:42:29Z,65076,0,"<p>for more advanced python editing consider installing the <a href=""http://eigenclass.org/hiki/simplefold"" rel=""nofollow"">simplefold</a> vim plugin. it allows you do advanced code folding using regular expressions. i use it to fold my class and method definitions for faster editing.</p>
"
68052,8819,2008-09-15T23:53:40Z,63086,1,"<p>If you don't want to use an IDE/text editor with automatic indenting, you can use the pindent.py script that comes in the Tools\Scripts directory. It's a preprocessor that can convert code like:</p>

<pre><code>def foobar(a, b):
if a == b:
a = a+1
elif a &lt; b:
b = b-1
if b &gt; a: a = a-1
end if
else:
print 'oops!'
end if
end def foobar
</code></pre>

<p>into:</p>

<pre><code>def foobar(a, b):
   if a == b:
       a = a+1
   elif a &lt; b:
       b = b-1
       if b &gt; a: a = a-1
       # end if
   else:
       print 'oops!'
   # end if
# end def foobar
</code></pre>

<p>Which is valid python.</p>
"
68061,10470,2008-09-15T23:56:17Z,63086,9,"<p>Emacs! Seriously, its use of ""tab is a <em>command</em>, not a <em>character</em>"", is absolutely perfect for python development.</p>
"
68086,8819,2008-09-16T00:01:11Z,64237,1,"<p>The rule I follow is it should be a new app if I want to reuse the functionality in a different project.</p>

<p>If it needs deep understanding of the models in your project, it's probably more cohesive to stick it with the models.</p>
"
68218,6899,2008-09-16T00:23:53Z,50394,1,"<p>I don't know if gwhois does something special with the server output; however, you can plainly connect to the whois server on port whois (43), send your query, read all the data in the reply and parse them. To make life a little easier, you could use the telnetlib.Telnet class (even if the whois protocol is much simpler than the telnet protocol) instead of plain sockets.</p>

<p>The tricky parts:</p>

<ul>
<li>which whois server will you ask? RIPE, ARIN, APNIC, LACNIC, AFRINIC, JPNIC, VERIO etc LACNIC could be a useful fallback, since they tend to reply with useful data to requests outside of their domain.</li>
<li>what are the exact options and arguments for each whois server? some offer help, others don't. In general, plain domain names work without any special options.</li>
</ul>
"
68320,8819,2008-09-16T00:47:18Z,68282,37,"<p>It's to minimize the difference between methods and functions. It allows you to easily generate methods in metaclasses, or add methods at runtime to pre-existing classes.</p>

<p>e.g.</p>

<pre><code>&gt;&gt;&gt; class C(object):
...     def foo(self):
...         print ""Hi!""
...
&gt;&gt;&gt;
&gt;&gt;&gt; def bar(self):
...     print ""Bork bork bork!""
...
&gt;&gt;&gt;
&gt;&gt;&gt; c = C()
&gt;&gt;&gt; C.bar = bar
&gt;&gt;&gt; c.bar()
Bork bork bork!
&gt;&gt;&gt; c.foo()
Hi!
&gt;&gt;&gt;
</code></pre>

<p>It also (as far as I know) makes the implementation of the python runtime easier.</p>
"
68324,10661,2008-09-16T00:47:55Z,68282,68,"<p>I like to quote Peters' Zen of Python.  ""Explicit is better than implicit.""</p>

<p>In Java and C++, '<code>this.</code>' can be deduced, except when you have variable names that make it impossible to deduce.   So you sometimes need it and sometimes don't.</p>

<p>Python elects to make things like this explicit rather than based on a rule.  </p>

<p>Additionally, since nothing is implied or assumed, parts of the implementation are exposed.  <code>self.__class__</code>, <code>self.__dict__</code> and other ""internal"" structures are available in an obvious way.</p>
"
68329,802,2008-09-16T00:49:26Z,68282,-1,"<p>There is also another very simple answer: according to the <a href=""http://www.python.org/dev/peps/pep-0020/"" rel=""nofollow"">zen of python</a>, ""explicit is better than implicit"".</p>
"
68365,8598,2008-09-16T00:55:43Z,68335,21,"<p>If you want the simple approach, this should work.</p>

<p>You'll want to "".close()"" the file first so you know it's flushed to disk from Python.</p>

<pre><code>import os
os.system(""scp FILE USER@SERVER:PATH"")
#e.g. os.system(""scp foo.bar joe@srvr.net:/path/to/foo.bar"")
</code></pre>

<p>You need to generate (on the source machine) and install (on the destination machine) an ssh key beforehand so that the scp automatically gets authenticated with your public ssh key (in other words, so your script doesn't ask for a password).  </p>

<p><a href=""http://www.modwest.com/help/kb20-90.html"">ssh-keygen example</a></p>
"
68377,9434,2008-09-16T00:56:31Z,68335,-1,"<p>Kind of hacky, but the following should work :)</p>

<pre><code>import os
filePath = ""/foo/bar/baz.py""
serverPath = ""/blah/boo/boom.py""
os.system(""scp ""+filePath+"" user@myserver.com:""+serverPath)
</code></pre>
"
68382,1199,2008-09-16T00:58:49Z,68335,23,"<p>You'd probably use the <a href=""http://docs.python.org/lib/module-subprocess.html"" rel=""nofollow"">subprocess module</a>. Something like this:</p>

<pre><code>import subprocess
p = subprocess.Popen([""scp"", myfile, destination])
sts = os.waitpid(p.pid, 0)
</code></pre>

<p>Where <code>destination</code> is probably of the form <code>user@remotehost:remotepath</code>. Thanks to
@Charles Duffy for pointing out the weakness in my original answer, which used a single string argument to specify the scp operation <code>shell=True</code> - that wouldn't handle whitespace in paths.</p>

<p>The module documentation has <a href=""http://docs.python.org/lib/node536.html"" rel=""nofollow"">examples of error checking that you may want to perform in conjunction with this operation.</a></p>

<p>Ensure that you've set up proper credentials so that you can perform an <a href=""http://www.debian.org/devel/passwordlessssh"" rel=""nofollow"">unattended, passwordless scp between the machines</a>. There is a <a href=""http://stackoverflow.com/questions/7260/how-do-i-setup-public-key-authentication"">stackoverflow question for this already</a>.</p>
"
68455,1694,2008-09-16T01:12:22Z,68327,1,"<p>Sure; just use the <code>bind</code> method to specify the callback after the button has been created.  I've just written and tested the example below.  You can find a nice tutorial on doing this at <a href=""http://www.pythonware.com/library/tkinter/introduction/events-and-bindings.htm"" rel=""nofollow"">http://www.pythonware.com/library/tkinter/introduction/events-and-bindings.htm</a></p>

<pre><code>from Tkinter import Tk, Button

root = Tk()
button = Button(root, text=""Click Me!"")
button.pack()

def callback(event):
    print ""Hello World!""

button.bind(""&lt;Button-1&gt;"", callback)
root.mainloop()
</code></pre>
"
68472,10710,2008-09-16T01:15:16Z,68282,10,"<p>Python doesn't force you on using ""self"". You can give it whatever name you want. You just have to remember that the first argument in a method definition header is a reference to the object.</p>
"
68502,3560,2008-09-16T01:21:20Z,68477,18,"<p>Yes. You'd use the <code>urllib2</code> module, and encode using the <code>multipart/form-data</code> content type. Here is some sample code to get you started -- it's a bit more than just file uploading, but you should be able to read through it and see how it works:</p>

<pre><code>user_agent = ""image uploader""
default_message = ""Image $current of $total""

import logging
import os
from os.path import abspath, isabs, isdir, isfile, join
import random
import string
import sys
import mimetypes
import urllib2
import httplib
import time
import re

def random_string (length):
    return ''.join (random.choice (string.letters) for ii in range (length + 1))

def encode_multipart_data (data, files):
    boundary = random_string (30)

    def get_content_type (filename):
    	return mimetypes.guess_type (filename)[0] or 'application/octet-stream'

    def encode_field (field_name):
    	return ('--' + boundary,
    	        'Content-Disposition: form-data; name=""%s""' % field_name,
    	        '', str (data [field_name]))

    def encode_file (field_name):
    	filename = files [field_name]
    	return ('--' + boundary,
    	        'Content-Disposition: form-data; name=""%s""; filename=""%s""' % (field_name, filename),
    	        'Content-Type: %s' % get_content_type(filename),
    	        '', open (filename, 'rb').read ())

    lines = []
    for name in data:
    	lines.extend (encode_field (name))
    for name in files:
    	lines.extend (encode_file (name))
    lines.extend (('--%s--' % boundary, ''))
    body = '\r\n'.join (lines)

    headers = {'content-type': 'multipart/form-data; boundary=' + boundary,
               'content-length': str (len (body))}

    return body, headers

def send_post (url, data, files):
    req = urllib2.Request (url)
    connection = httplib.HTTPConnection (req.get_host ())
    connection.request ('POST', req.get_selector (),
                        *encode_multipart_data (data, files))
    response = connection.getresponse ()
    logging.debug ('response = %s', response.read ())
    logging.debug ('Code: %s %s', response.status, response.reason)

def make_upload_file (server, thread, delay = 15, message = None,
                      username = None, email = None, password = None):

    delay = max (int (delay or '0'), 15)

    def upload_file (path, current, total):
    	assert isabs (path)
    	assert isfile (path)

    	logging.debug ('Uploading %r to %r', path, server)
    	message_template = string.Template (message or default_message)

    	data = {'MAX_FILE_SIZE': '3145728',
    	        'sub': '',
    	        'mode': 'regist',
    	        'com': message_template.safe_substitute (current = current, total = total),
    	        'resto': thread,
    	        'name': username or '',
    	        'email': email or '',
    	        'pwd': password or random_string (20),}
    	files = {'upfile': path}

    	send_post (server, data, files)

    	logging.info ('Uploaded %r', path)
    	rand_delay = random.randint (delay, delay + 5)
    	logging.debug ('Sleeping for %.2f seconds------------------------------\n\n', rand_delay)
    	time.sleep (rand_delay)

    return upload_file

def upload_directory (path, upload_file):
    assert isabs (path)
    assert isdir (path)

    matching_filenames = []
    file_matcher = re.compile (r'\.(?:jpe?g|gif|png)$', re.IGNORECASE)

    for dirpath, dirnames, filenames in os.walk (path):
    	for name in filenames:
    		file_path = join (dirpath, name)
    		logging.debug ('Testing file_path %r', file_path)
    		if file_matcher.search (file_path):
    			matching_filenames.append (file_path)
    		else:
    			logging.info ('Ignoring non-image file %r', path)

    total_count = len (matching_filenames)
    for index, file_path in enumerate (matching_filenames):
    	upload_file (file_path, index + 1, total_count)

def run_upload (options, paths):
    upload_file = make_upload_file (**options)

    for arg in paths:
    	path = abspath (arg)
    	if isdir (path):
    		upload_directory (path, upload_file)
    	elif isfile (path):
    		upload_file (path)
    	else:
    		logging.error ('No such path: %r' % path)

    logging.info ('Done!')
</code></pre>
"
68507,10322,2008-09-16T01:22:03Z,68477,1,"<p>This <a href=""http://code.activestate.com/recipes/146306/"" rel=""nofollow"">code</a> might be of use to you</p>
"
68524,145,2008-09-16T01:24:37Z,68327,12,"<p>Though <a href=""http://stackoverflow.com/questions/68327/change-command-method-for-tkinter-button-in-python#68455"">Eli Courtwright's</a> program will work fine¹, what you really seem to want though is just a way to reconfigure after instantiation any attribute which you could have set when you instantiated².  How you do so is by way of the configure() method.</p>

<pre><code>from Tkinter import Tk, Button

def goodbye_world():
    print ""Goodbye World!\nWait, I changed my mind!""
    button.configure(text = ""Hello World!"", command=hello_world)

def hello_world():
    print ""Hello World!\nWait, I changed my mind!""
    button.configure(text = ""Goodbye World!"", command=goodbye_world)

root = Tk()
button = Button(root, text=""Hello World!"", command=hello_world)
button.pack()

root.mainloop()
</code></pre>

<p>¹ ""fine"" if you use only the mouse; if you care about tabbing and using [Space] or [Enter] on buttons, then you will have to implement (duplicating existing code) keypress events too. Setting the <code>command</code> option through <code>.configure</code> is much easier.</p>

<p>² the only attribute that can't change after instantiation is <code>name</code>.</p>
"
68566,NA,2008-09-16T01:32:08Z,68335,10,"<p>There are a couple of different ways to approach the problem:</p>

<ol>
<li>Wrap command-line programs</li>
<li>use a Python library that provides SSH capabilities (eg - <a href=""http://www.lag.net/paramiko/"">Paramiko</a> or <a href=""http://twistedmatrix.com/trac/wiki/TwistedConch"">Twisted Conch</a>)</li>
</ol>

<p>Each approach has its own quirks. You will need to setup SSH keys to enable password-less logins if you are wrapping system commands like ""ssh"", ""scp"" or ""rsync."" You can embed a password in a script using Paramiko or some other library, but you might find the lack of documentation frustrating, especially if you are not familiar with the basics of the SSH connection (eg - key exchanges, agents, etc). It probably goes without saying that SSH keys are almost always a better idea than passwords for this sort of stuff.</p>

<p>NOTE: its hard to beat rsync if you plan on transferring files via SSH, especially if the alternative is plain old scp.</p>

<p>I've used Paramiko with an eye towards replacing system calls but found myself drawn back to the wrapped commands due to their ease of use and immediate familiarity. You might be different. I gave Conch the once-over some time ago but it didn't appeal to me.</p>

<p>If opting for the system-call path, Python offers an array of options such as os.system or the commands/subprocess modules. I'd go with the subprocess module if using version 2.4+.</p>
"
68628,10769,2008-09-16T01:43:04Z,67631,9,"<pre><code>def import_file(full_path_to_module):
    try:
        import os
        module_dir, module_file = os.path.split(full_path_to_module)
        module_name, module_ext = os.path.splitext(module_file)
        save_cwd = os.getcwd()
        os.chdir(module_dir)
        module_obj = __import__(module_name)
        module_obj.__file__ = full_path_to_module
        globals()[module_name] = module_obj
        os.chdir(save_cwd)
    except:
        raise ImportError

import_file('/home/somebody/somemodule.py')
</code></pre>
"
68638,10322,2008-09-16T01:45:39Z,68630,1,"<p>Tuples should be slightly more efficient and because of that, faster, than lists because they are immutable.</p>
"
68672,1199,2008-09-16T01:51:06Z,68645,1030,"<p>Variables declared inside the class definition, but not inside a method are class or static variables:</p>

<pre><code>&gt;&gt;&gt; class MyClass:
...     i = 3
...
&gt;&gt;&gt; MyClass.i
3 
</code></pre>

<p>As @<a href=""http://stackoverflow.com/questions/68645/static-class-variables-in-python#answer-69067"">millerdev</a> points out, this creates a class-level ""i"" variable, but this is distinct from any instance-level ""i"" variable, so you could have</p>

<pre><code>&gt;&gt;&gt; m = MyClass()
&gt;&gt;&gt; m.i = 4
&gt;&gt;&gt; MyClass.i, m.i
&gt;&gt;&gt; (3, 4)
</code></pre>

<p>This is different from C++ and Java, but not so different from C#, where a static member can't be accessed using a reference to an instance.</p>

<p>See <a href=""https://docs.python.org/2/tutorial/classes.html#class-objects"">what the Python tutorial has to say on the subject of classes and class objects</a>.</p>

<p>@Steve Johnson has already answered regarding <a href=""http://web.archive.org/web/20090214211613/http://pyref.infogami.com/staticmethod"">static methods</a>, also documented under <a href=""https://docs.python.org/2/library/functions.html#staticmethod"">""Built-in Functions"" in the Python Library Reference</a>.</p>

<pre><code>class C:
    @staticmethod
    def f(arg1, arg2, ...): ...
</code></pre>

<p>@beidy recommends <a href=""https://docs.python.org/2/library/functions.html#classmethod"">classmethod</a>s over staticmethod, as the method then receives the class type as the first argument, but I'm still a little fuzzy on the advantages of this approach over staticmethod. If you are too, then it probably doesn't matter.</p>
"
68702,10769,2008-09-16T01:55:09Z,63086,36,"<pre><code>from __future__ import braces
</code></pre>
"
68712,3002,2008-09-16T01:57:10Z,68630,131,"<p>In general, you might expect tuples to be slightly faster. However you should definitely test your specific case (if the difference might impact the performance of your program --  remember ""premature optimization is the root of all evil"").</p>

<p>Python makes this very easy: <a href=""https://docs.python.org/2/library/timeit.html"">timeit</a> is your friend.</p>

<pre><code>$ python -m timeit ""x=(1,2,3,4,5,6,7,8)""
10000000 loops, best of 3: 0.0388 usec per loop

$ python -m timeit ""x=[1,2,3,4,5,6,7,8]""
1000000 loops, best of 3: 0.363 usec per loop
</code></pre>

<p>and...</p>

<pre><code>$ python -m timeit -s ""x=(1,2,3,4,5,6,7,8)"" ""y=x[3]""
10000000 loops, best of 3: 0.0938 usec per loop

$ python -m timeit -s ""x=[1,2,3,4,5,6,7,8]"" ""y=x[3]""
10000000 loops, best of 3: 0.0649 usec per loop
</code></pre>

<p>So in this case, instantiation is almost an order of magnitude faster for the tuple, but item access is actually somewhat faster for the list! So if you're creating a few tuples and accessing them many many times, it may actually be faster to use lists instead.</p>

<p>Of course if you want to <em>change</em> an item, the list will definitely be faster since you'd need to create an entire new tuple to change one item of it (since tuples are immutable).</p>
"
68747,10739,2008-09-16T02:02:45Z,68645,9,"<p>Personally I would use a classmethod whenever I needed a static method. Mainly because I get the class as an argument.</p>

<pre><code>class myObj(object):
   def myMethod(cls)
     ...
   myMethod = classmethod(myMethod)
</code></pre>

<p>or use a decorator</p>

<pre><code>class myObj(object):
   @classmethod
   def myMethod(cls)
</code></pre>

<p>For static properties.. Its time you look up some python definition.. variable can always change. There are two types of them mutable and immutable.. Also, there are class attributes and instance attributes.. Nothing really like static attributes in the sense of java &amp; c++</p>

<p>Why use static method in pythonic sense, if it has no relation whatever to the class! If I were you, I'd either use classmethod or define the method independent from the class.</p>
"
68770,1943957,2008-09-16T02:05:49Z,68645,5,"<p>Static methods in python are called <a href=""http://pyref.infogami.com/classmethod"" rel=""nofollow"">classmethod</a>s. Take a look at the following code</p>

<pre><code>class MyClass:
    def myInstanceMethod(self):
        print 'output from an instance method'
    @classmethod
    def myStaticMethod(cls):
        print 'output from a static method'
MyClass.myInstanceMethod()

Traceback (most recent call last):
  File ""&lt;stdin&gt;"", line 1, in &lt;module&gt;
TypeError: unbound method myInstanceMethod() must be called [...]
MyClass.myStaticMethod()
</code></pre>

<p>output from a static method</p>

<p>Notice that when we call the method <em>myInstanceMethod</em>, we get an error. This is because it requires that method be called on an instance of this class. The method <em>myStaticMethod</em> is set as a classmethod using the <a href=""http://www.python.org/dev/peps/pep-0318/"" rel=""nofollow"">decorator</a> <em>@classmethod</em>.</p>

<p>Just for kicks and giggles, we could call <em>myInstanceMethod</em> on the class by passing in an instance of the class, like so:</p>

<pre><code>&gt;&gt;&gt; MyClass.myInstanceMethod(MyClass())
output from an instance method
</code></pre>
"
68796,2128,2008-09-16T02:09:46Z,68774,55,"<p>Opening sockets in python is pretty simple. You really just need something like this:</p>

<pre><code>import socket
sock = socket.socket()
sock.connect((address, port))
</code></pre>

<p>and then you can <code>send()</code> and <code>recv()</code> like any other socket</p>
"
68817,116,2008-09-16T02:13:29Z,68630,88,"<p>The <a href=""https://docs.python.org/3/library/dis.html""><code>dis</code></a> module disassembles the byte code for a function and is useful to see the difference between tuples and lists.</p>

<p>In this case, you can see that accessing an element generates identical code, but that assigning a tuple is much faster than assigning a list.</p>

<pre><code>&gt;&gt;&gt; def a():
...     x=[1,2,3,4,5]
...     y=x[2]
...
&gt;&gt;&gt; def b():
...     x=(1,2,3,4,5)
...     y=x[2]
...
&gt;&gt;&gt; import dis
&gt;&gt;&gt; dis.dis(a)
  2           0 LOAD_CONST               1 (1)
              3 LOAD_CONST               2 (2)
              6 LOAD_CONST               3 (3)
              9 LOAD_CONST               4 (4)
             12 LOAD_CONST               5 (5)
             15 BUILD_LIST               5
             18 STORE_FAST               0 (x)

  3          21 LOAD_FAST                0 (x)
             24 LOAD_CONST               2 (2)
             27 BINARY_SUBSCR
             28 STORE_FAST               1 (y)
             31 LOAD_CONST               0 (None)
             34 RETURN_VALUE
&gt;&gt;&gt; dis.dis(b)
  2           0 LOAD_CONST               6 ((1, 2, 3, 4, 5))
              3 STORE_FAST               0 (x)

  3           6 LOAD_FAST                0 (x)
              9 LOAD_CONST               2 (2)
             12 BINARY_SUBSCR
             13 STORE_FAST               1 (y)
             16 LOAD_CONST               0 (None)
             19 RETURN_VALUE
</code></pre>
"
68892,6043,2008-09-16T02:28:38Z,68774,9,"<p>For developing portable network programs of any sort in Python, <a href=""http://twistedmatrix.com"" rel=""nofollow"">Twisted</a> is quite useful. One of its benefits is providing a convenient layer above low-level socket APIs.</p>
"
68911,5324,2008-09-16T02:31:24Z,68774,13,"<p>OK, this code worked</p>

<pre><code>s = socket.socket()
s.connect((ip,port))
s.send(""my request\r"")
print s.recv(256)
s.close()
</code></pre>

<p>It was quite difficult to work that out from the Python socket module documentation. So I'll accept The.Anti.9's answer.</p>
"
69064,10688,2008-09-16T03:03:31Z,63086,0,"<p>Check the options of your editor or find an editor/IDE that allows you to convert TABs to spaces. I usually set the options of my editor to substitute the TAB character with 4 spaces, and I never run into any problems.</p>
"
69067,10840,2008-09-16T03:04:08Z,68645,400,"<p>@Blair Conrad said static variables declared inside the class definition, but not inside a method are class or ""static"" variables:</p>

<pre><code>&gt;&gt;&gt; class Test(object):
...     i = 3
...
&gt;&gt;&gt; Test.i
3
</code></pre>

<p>There are a few gotcha's here. Carrying on from the example above:</p>

<pre><code>&gt;&gt;&gt; t = Test()
&gt;&gt;&gt; t.i     # static variable accessed via instance
3
&gt;&gt;&gt; t.i = 5 # but if we assign to the instance ...
&gt;&gt;&gt; Test.i  # we have not changed the static variable
3
&gt;&gt;&gt; t.i     # we have overwritten Test.i on t by creating a new attribute t.i
5
&gt;&gt;&gt; Test.i = 6 # to change the static variable we do it by assigning to the class
&gt;&gt;&gt; t.i
5
&gt;&gt;&gt; Test.i
6
&gt;&gt;&gt; u = Test()
&gt;&gt;&gt; u.i
6           # changes to t do not affect new instances of Test

# Namespaces are one honking great idea -- let's do more of those!
&gt;&gt;&gt; Test.__dict__
{'i': 6, ...}
&gt;&gt;&gt; t.__dict__
{'i': 5}
&gt;&gt;&gt; u.__dict__
{}
</code></pre>

<p>Notice how the instance variable <code>t.i</code> got out of sync with the ""static"" class variable when the attribute <code>i</code> was set directly on <code>t</code>. This is because <code>i</code> was re-bound within the <code>t</code> namespace, which is distinct from the <code>Test</code> namespace. If you want to change the value of a ""static"" variable, you must change it within the scope (or object) where it was originally defined. I put ""static"" in quotes because Python does not really have static variables in the sense that C++ and Java do.</p>

<p>Although it doesn't say anything specific about static variables or methods, the <a href=""http://docs.python.org/tut/"">Python tutorial</a> has some relevant information on <a href=""https://docs.python.org/2/tutorial/classes.html"">classes and class objects</a>. </p>

<p>@Steve Johnson also answered regarding static methods, also documented under ""Built-in Functions"" in the Python Library Reference.</p>

<pre><code>class Test(object):
    @staticmethod
    def f(arg1, arg2, ...):
        ...
</code></pre>

<p>@beid also mentioned classmethod, which is similar to staticmethod. A classmethod's first argument is the class object. Example:</p>

<pre><code>class Test(object):
    i = 3 # class (or static) variable
    @classmethod
    def g(cls, arg):
        # here we can use 'cls' instead of the class name (Test)
        if arg &gt; cls.i:
            cls.i = arg # would the the same as  Test.i = arg1
</code></pre>
"
69513,5728,2008-09-16T05:01:08Z,68541,3,"<p>Check your path (run 'echo $PATH')</p>
"
69596,4966,2008-09-16T05:27:59Z,68335,76,"<p>To do this in Python (i.e. not wrapping scp through subprocess.Popen or similar) with the <a href=""http://www.lag.net/paramiko/"">Paramiko</a> library, you would do something like this:</p>

<pre><code>import os
import paramiko

ssh = paramiko.SSHClient() 
ssh.load_host_keys(os.path.expanduser(os.path.join(""~"", "".ssh"", ""known_hosts"")))
ssh.connect(server, username=username, password=password)
sftp = ssh.open_sftp()
sftp.put(localpath, remotepath)
sftp.close()
ssh.close()
</code></pre>

<p>(You would probably want to deal with unknown hosts, errors, creating any directories necessary, and so on).</p>
"
69867,11265,2008-09-16T06:41:51Z,60152,3,"<p>The <a href=""https://developer.mozilla.org/en/PyXPCOM"" rel=""nofollow"">PyXPCOM extension</a> is one possibility.</p>

<p>But looking at what firewatir provides, I have to 2nd the suggestion for twill. It's based on <a href=""http://wwwsearch.sourceforge.net/mechanize/"" rel=""nofollow"">mechanize</a>, which might also be useful in this context.</p>
"
69989,5190,2008-09-16T07:10:04Z,69979,1,"<p>You could use HTTP Authentication, if supported.</p>

<p>You'd have to add SSL, as all methods, POST, GET and HTTP Auth (well, except Digest HHTP authentication) send plaintext.</p>

<p>GET is basically just like POST, it just has a limit on the amount of data you can send which is usually a lot smaller than POST and a semantic difference which makes GET not a good candidate from that point of view, even if technically they both can do it.</p>

<p>As for examples, what are you using? There are many choices in Python, like the cgi module or some framework like Django, CherryPy, and so on</p>
"
69995,10943,2008-09-16T07:10:40Z,69979,5,"<p>You can actually do it all with GET methods.  However, you'll want to use a full challenge response protocol for the logins.  (You can hash on the client side using javascript.  You just need to send out a unique challenge each time.)  You'll also want to use SSL to ensure that no one can see the strings as they go across.</p>

<p>In some senses there's no real security difference between GET and POST requests as they both go across in plaintext, in other senses and in practice... GET is are a hell of a lot easier to intercept and is all over most people's logs and your web browser's history. :)</p>

<p>(Or as suggested by the other posters, use a different method entirely like HTTP auth, digest auth or some higher level authentication scheme like AD, LDAP, kerberos or shib.  However I kinda assumed that if you didn't have POST you wouldn't have these either.)</p>
"
70003,11192,2008-09-16T07:12:42Z,69979,0,"<p>With a bit of JavaScript, you could have the client hash the entered password and a server-generated nonce, and use that in an HTTP GET.</p>
"
70025,83819,2008-09-16T07:19:07Z,69979,-1,"<p>Logging in securely is very subjective.  Full 'security' is not easy to achieve (if at all possible...debatable). However, you can come close.  </p>

<p>If POST is not an option, maybe you can use a directory security method such as .htaccess or windows authentication depending on what system you're on.</p>

<p>Both of the above will get you the pop-up window that allows for a username and password to be entered.</p>

<p>To use POST as the method to send the login credentials, you'd just use an HTML form with method=""post"" and retrieve the information from, say, a PHP or ASP page, using the $_POST['varname'] method in PHP or the request.form(""varname"") method in ASP.  From the PHP or ASP page, as an example, you can do a lookup in a database of users, to see if that username/password combination exists, and if so, redirect them to the appropriate page.</p>

<p>As reference, use <a href=""http://www.w3schools.com/ASP/showasp.asp?filename=demo_simpleform"" rel=""nofollow"">http://www.w3schools.com/ASP/showasp.asp?filename=demo_simpleform</a> for the HTML/ASP portion</p>
"
70051,3978,2008-09-16T07:24:13Z,69645,3,"<p>A short search turned up <a href=""http://www.flagar.com/en/software/gtkshots"" rel=""nofollow"">gtkShots</a> looks like it might help you, as it's a GPLed python screenshot program, so should have what you need in it.</p>
"
70145,11181,2008-09-16T07:44:03Z,69979,0,"<p>A good choice: <a href=""http://advosys.ca/viewpoints/2006/08/http-digest-authentication/"" rel=""nofollow"">HTTP Digest authentication</a></p>

<p>Harder to pull off well, but an option: <a href=""http://blog.paranoidferret.com/index.php/2007/07/22/secure-authentication-without-ssl-using-javascript/"" rel=""nofollow"">Client-side hashing with Javascript</a></p>
"
70237,37141,2008-09-16T08:01:18Z,69645,7,"<pre><code>import ImageGrab
img = ImageGrab.grab()
img.save('test.jpg','JPEG')
</code></pre>

<p>this requires Python Imaging Library</p>
"
70271,10708,2008-09-16T08:10:50Z,48458,96,"<p>First, I would suggest you have a look at ""<a href=""http://sites.google.com/site/io/rapid-development-with-python-django-and-google-app-engine"">Rapid Development with Python, Django, and Google App Engine</a>""</p>

<p>GvR describes a general/standard project layout on page 10 of his <a href=""http://sites.google.com/site/io/rapid-development-with-python-django-and-google-app-engine/rapid_development_with_django_gae.pdf?attredirects=0"">slide presentation</a>.  </p>

<p>Here I'll post a slightly modified version of the layout/structure from that page. I pretty much follow this pattern myself. You also mentioned you had trouble with packages. Just make sure each of your sub folders has an __init__.py file. It's ok if its empty.</p>

<h2>Boilerplate files</h2>

<ul>
<li>These hardly vary between projects</li>
<li>app.yaml: direct all non-static requests to main.py </li>
<li>main.py: initialize app and send it all requests </li>
</ul>

<h2>Project lay-out</h2>

<ul>
<li>static/*: static files; served directly by App Engine</li>
<li>myapp/*.py: app-specific python code
<ul>
<li>views.py, models.py, tests.py, __init__.py, and more</li>
</ul></li>
<li>templates/*.html: templates (or myapp/templates/*.html)</li>
</ul>

<p>Here are some code examples that may help as well:</p>

<h2>main.py</h2>

<pre><code>import wsgiref.handlers

from google.appengine.ext import webapp
from myapp.views import *

application = webapp.WSGIApplication([
  ('/', IndexHandler),
  ('/foo', FooHandler)
], debug=True)

def main():
  wsgiref.handlers.CGIHandler().run(application)
</code></pre>

<h2>myapp/views.py</h2>

<pre><code>import os
import datetime
import logging
import time

from google.appengine.api import urlfetch
from google.appengine.ext.webapp import template
from google.appengine.api import users
from google.appengine.ext import webapp
from models import *

class IndexHandler(webapp.RequestHandler):
  def get(self):
    date = ""foo""
    # Do some processing		
    template_values = {'data': data }
    path = os.path.join(os.path.dirname(__file__) + '/../templates/', 'main.html')
    self.response.out.write(template.render(path, template_values))

class FooHandler(webapp.RequestHandler):
  def get(self):
    #logging.debug(""start of handler"")
</code></pre>

<h2>myapp/models.py</h2>

<pre><code>from google.appengine.ext import db

class SampleModel(db.Model):
</code></pre>

<p>I think this layout works great for new and relatively small to medium projects. For larger projects I would suggest breaking up the views and models to have their own sub-folders with something like:</p>

<h2>Project lay-out</h2>

<ul>
<li>static/: static files; served directly by App Engine
<ul>
<li>js/*.js</li>
<li>images/*.gif|png|jpg</li>
<li>css/*.css</li>
</ul></li>
<li>myapp/: app structure
<ul>
<li>models/*.py</li>
<li>views/*.py</li>
<li>tests/*.py</li>
<li>templates/*.html: templates</li>
</ul></li>
</ul>
"
70555,11387,2008-09-16T09:03:45Z,70528,116,"<p>From <a href=""http://www.faqs.org/docs/diveintopython/fileinfo_private.html"">http://www.faqs.org/docs/diveintopython/fileinfo_private.html</a></p>

<blockquote>
  <p>Strictly speaking, private methods are
  accessible outside their class, just
  not easily accessible. Nothing in
  Python is truly private; internally,
  the names of private methods and
  attributes are mangled and unmangled
  on the fly to make them seem
  inaccessible by their given names. You
  can access the __parse method of the
  MP3FileInfo class by the name
  _MP3FileInfo__parse. Acknowledge that this is interesting, then promise to
  never, ever do it in real code.
  Private methods are private for a
  reason, but like many other things in
  Python, their privateness is
  ultimately a matter of convention, not
  force.</p>
</blockquote>
"
70562,1733,2008-09-16T09:04:57Z,70528,24,"<p>It's not like you absolutly can't get around privateness of members in any language (pointer arithmetics in C++, Reflections in .NET/Java).</p>

<p>The point is that you get an error if you try to call the private method by accident. But if you want to shoot yourself in the foot, go ahead and do it.</p>

<p>Edit: You don't try to secure your stuff by OO-encapsulation, do you?</p>
"
70567,1026,2008-09-16T09:05:52Z,70528,9,"<p>The <code>class.__stuff</code> naming convention lets the programmer know he isn't meant to access <code>__stuff</code> from outside. The name mangling makes it unlikely anyone will do it by accident.</p>

<p>True, you still can work around this, it's even easier than in other languages (which BTW also let you do this), but no Python programmer would do this if he cares about encapsulation.</p>
"
70583,10322,2008-09-16T09:09:32Z,70528,10,"<p>Its just one of those language design choices. On some level they are justified. They make it so you need to go pretty far out of your way to try and call the method, and if you really need it that badly, you must have a pretty good reason! Debugging hooks and testing come to mind as possible applications, used responsibly of course.</p>
"
70712,6267,2008-09-16T09:27:28Z,70653,3,"<p>I think you should make your own authentication method as you can make it fit your application best but use a library for encryption, such as <a href=""http://www.pycrypto.org"" rel=""nofollow"">pycrypto</a> or some other more lightweight library.</p>

<p>btw, if you need windows binaries for pycrypto you can get them <a href=""http://www.voidspace.org.uk/python/modules.shtml#pycrypto"" rel=""nofollow"">here</a></p>
"
70736,4966,2008-09-16T09:33:18Z,70528,66,"<p>The phrase commonly used is ""we're all consenting adults here"".  By prepending a single underscore (don't expose) or double underscore (hide), you're telling the user of your class that you intend the member to be 'private' in some way.  However, you're trusting everyone else to behave responsibly and respect that, unless they have a compelling reason not to (e.g. debuggers, code completion).</p>

<p>If you truly must have something that is private, then you can implement it in an extension (e.g. in C for CPython).  In most cases, however, you simply learn the Pythonic way of doing things.</p>
"
70778,11521,2008-09-16T09:41:03Z,11060,0,"<p>Just wanted to point out that you can still achieve fine-grained testing while verifying the results: you can test individual chunks of code by nesting them inside some setup and verification code:</p>

<pre><code>int x = 0;
GENERATED_CODE
assert(x == 100);
</code></pre>

<p>Provided you have your generated code assembled from smaller chunks, and the chunks do not change frequently, you can exercise more conditions and test a little better, and hopefully avoid having all your tests break when you change specifics of one chunk.</p>
"
70798,1856916,2008-09-16T09:45:06Z,49926,13,"<p>The open source Python package,<a href=""http://www.scipy.org/"">SciPy</a>, has quite a large set of optimization routines including some for multivariable problems with constraints (which is what fmincon does I believe).  Once you have SciPy installed type the following at the Python command prompt</p>

<p>help(scipy.optimize)</p>

<p>The resulting document is extensive and includes the following which I believe might be of use to you.</p>

<pre><code>   Constrained Optimizers (multivariate)

   fmin_l_bfgs_b -- Zhu, Byrd, and Nocedal's L-BFGS-B constrained optimizer
                      (if you use this please quote their papers -- see help)

   fmin_tnc      -- Truncated Newton Code originally written by Stephen Nash and
                      adapted to C by Jean-Sebastien Roy.

   fmin_cobyla   -- Constrained Optimization BY Linear Approximation
</code></pre>
"
70814,11530,2008-09-16T09:48:16Z,70797,296,"<pre><code>var = raw_input(""Please enter something: "")
print ""you entered"", var
</code></pre>
"
70818,3171,2008-09-16T09:48:40Z,70797,22,"<p>The best way to process command line arguments is the <a href=""https://docs.python.org/library/argparse.html"" rel=""nofollow""><code>argparse</code> module.</a></p>

<p>Use <code>raw_input()</code> to get user input.  If you import the <a href=""https://docs.python.org/library/readline.html"" rel=""nofollow""><code>readline module</code></a> your users will have line editing and history.</p>
"
70832,4966,2008-09-16T09:50:34Z,70653,0,"<p>If you want simple, then use a dictionary where the keys are the usernames and the values are the passwords (encrypted with something like SHA256).  <a href=""http://docs.python.org/lib/module-pickle.html"" rel=""nofollow"">Pickle</a> it to/from disk (as this is a desktop application, I'm assuming the overhead of keeping it in memory will be negligible).</p>

<p>For example:</p>

<pre><code>import pickle
import hashlib

# Load from disk
pwd_file = ""mypasswords""
if os.path.exists(pwd_file):
    pwds = pickle.load(open(pwd_file, ""rb""))
else:
    pwds = {}

# Save to disk
pickle.dump(pwds, open(pwd_file, ""wb""))

# Add password
pwds[username] = hashlib.sha256(password).hexdigest()

# Check password
if pwds[username] = hashlib.sha256(password).hexdigest():
   print ""Good""
else:
   print ""No match""
</code></pre>

<p>Note that this stores the passwords as a <a href=""http://docs.python.org/lib/module-hashlib.html"" rel=""nofollow"">hash</a> - so they are essentially unrecoverable.  If you lose your password, you'd get allocated a new one, not get the old one back.</p>
"
70833,8570,2008-09-16T09:50:40Z,70797,182,"<p>To read user input you can try <a href=""http://docs.python.org/2/library/cmd.html"">the cmd module</a> for easily creating a mini-command line interpreter (with help texts and autocompletion) and <a href=""http://docs.python.org/2/library/functions.html#raw_input"">raw_input</a> for less fancy stuff (just reading a line of text from the user).</p>

<p>Command line inputs are in sys.argv. Try this in your script for Python 2:</p>

<pre><code>import sys
print sys.argv
</code></pre>

<p>For Python 3:</p>

<pre><code>import sys
print(sys.argv)
</code></pre>

<p>Since print has changed from a keyword in Python 2 into a function call in Python 3. </p>

<p>There are two modules for parsing command line options: <a href=""http://docs.python.org/2/library/optparse.html"">optparse</a> and <a href=""http://docs.python.org/2/library/getopt.html"">getopt</a>. If you just want to input files to your script, behold the power of <a href=""http://docs.python.org/2/library/fileinput.html"">fileinput</a>.</p>

<p>The <a href=""http://docs.python.org/2/library/"">Python library reference is your friend</a>.</p>
"
70841,6063,2008-09-16T09:52:24Z,70797,5,"<p>Use 'raw_input' for input from a console/terminal.</p>

<p>if you just want a command line argument like a file name or something e.g. </p>

<pre><code>$ python my_prog.py file_name.txt
</code></pre>

<p>then you can use sys.argv...</p>

<pre><code>import sys
print sys.argv
</code></pre>

<p>sys.argv is a list where 0 is the program name, so in the above example sys.argv[1] would be ""file_name.txt""</p>

<p>If you want to have full on command line options use the optparse module.</p>

<p>Pev</p>
"
70869,11234,2008-09-16T09:58:33Z,70797,10,"<p>Careful not to use the <code>input</code> function, unless you know what you're doing. Unlike <code>raw_input</code>, <code>input</code> will accept any python expression, so it's kinda like <code>eval</code></p>
"
70895,3978,2008-09-16T10:04:43Z,68541,0,"<p>I would suspect the permissions on the library. Can you do a strace or similar to find out the filenames it's looking for, and then check the permissions on them?</p>
"
70896,917,2008-09-16T10:04:53Z,70681,2,"<p>I think your code looks like this at the moment:</p>

<pre><code>l = ""a very long ... text"".split()
for e in l:
    cursor.execute(""INSERT INTO yourtable (yourcol) VALUES ('"" + e + ""')"")
</code></pre>

<p>So try to change it into something like this:</p>

<pre><code>l = ""a very long ... text"".split()
for e in l:
    cursor.execute(""INSERT INTO yourtable (yourcol) VALUES (%s)"", (e,))
</code></pre>

<p>so never forget to pass your parameters in the parameters list, then you don't have to care about your quotes and stuff, it is also more secure. You can read more about it at <a href=""http://www.python.org/dev/peps/pep-0249/"" rel=""nofollow"">http://www.python.org/dev/peps/pep-0249/</a></p>

<p>also have a look there at the method .executemany() which is specially designed to execute the same statement multiple times.</p>
"
70900,9464,2008-09-16T10:06:07Z,70528,354,"<p>The name scrambling is used to ensure that subclasses don't accidentally override the private methods and attributes of their superclasses. It's not designed to prevent deliberate access from outside.</p>

<p>For example:</p>

<pre><code>&gt;&gt;&gt; class Foo(object):
...     def __init__(self):
...         self.__baz = 42
...     def foo(self):
...         print self.__baz
...     
&gt;&gt;&gt; class Bar(Foo):
...     def __init__(self):
...         super(Bar, self).__init__()
...         self.__baz = 21
...     def bar(self):
...         print self.__baz
...
&gt;&gt;&gt; x = Bar()
&gt;&gt;&gt; x.foo()
42
&gt;&gt;&gt; x.bar()
21
&gt;&gt;&gt; print x.__dict__
{'_Bar__baz': 21, '_Foo__baz': 42}
</code></pre>

<p>Of course, it breaks down if two different classes have the same name.</p>
"
70915,745,2008-09-16T10:08:57Z,70653,0,"<p>Treat the following as pseudo-code..</p>

<pre><code>try:
    from hashlib import sha as hasher
except ImportError:
    # You could probably exclude the try/except bit,
    # but older Python distros dont have hashlib.
    try:
        import sha as hasher
    except ImportError:
        import md5 as hasher


def hash_password(password):
    """"""Returns the hashed version of a string
    """"""
    return hasher.new( str(password) ).hexdigest()

def load_auth_file(path):
    """"""Loads a comma-seperated file.
    Important: make sure the username
    doesn't contain any commas!
    """"""
    # Open the file, or return an empty auth list.
    try:
        f = open(path)
    except IOError:
        print ""Warning: auth file not found""
        return {}

    ret = {}
    for line in f.readlines():
        split_line = line.split("","")
        if len(split_line) &gt; 2:
            print ""Warning: Malformed line:""
            print split_line
            continue # skip it..
        else:
            username, password = split_line
            ret[username] = password
        #end if
    #end for
    return ret

def main():
    auth_file = ""/home/blah/.myauth.txt""
    u = raw_input(""Username:"")
    p = raw_input(""Password:"") # getpass is probably better..
    if auth_file.has_key(u.strip()):
        if auth_file[u] == hash_password(p):
            # The hash matches the stored one
            print ""Welcome, sir!""
</code></pre>

<p>Instead of using a comma-separated file, I would recommend using SQLite3 (which could be used for other settings and such.</p>

<p>Also, remember that this isn't very secure - if the application is local, evil users could probably just replace the <code>~/.myauth.txt</code> file.. Local application auth is difficult to do well. You'll have to encrypt any data it reads using the users password, and generally be very careful.</p>
"
70968,6899,2008-09-16T10:16:52Z,68630,26,"<p>Tuples, being immutable, are more memory efficient; lists, for efficiency, overallocate memory in order to allow appends without constant <code>realloc</code>s. So, if you want to iterate through a constant sequence of values in your code (eg <code>for direction in 'up', 'right', 'down', 'left':</code>), tuples are preferred, since such tuples are pre-calculated in compile time.</p>

<p>Access speeds should be the same (they are both stored as contiguous arrays in the memory).</p>

<p>But, <code>alist.append(item)</code> is much preferred to <code>atuple+= (item,)</code> when you deal with mutable data. Remember, tuples are intended to be treated as records without field names.</p>
"
71161,10776,2008-09-16T10:51:40Z,71151,12,"<p>Try:</p>

<pre><code>import HTMLParser
</code></pre>

<p>In Python 3.0, the HTMLParser module has been renamed to html.parser
you can check about this <a href=""http://docs.python.org/library/htmlparser.html"">here</a></p>

<p>Python 3.0</p>

<pre><code>import html.parser
</code></pre>

<p>Python 2.2 and above</p>

<pre><code>import HTMLParser
</code></pre>
"
71168,6763,2008-09-16T10:52:39Z,71151,1,"<p>There's a link to an example on the bottom of (<a href=""http://docs.python.org/2/library/htmlparser.html"" rel=""nofollow"">http://docs.python.org/2/library/htmlparser.html</a>) , it just doesn't work with the original python or python3.  It has to be python2 as it says on the top.</p>
"
71174,5190,2008-09-16T10:54:05Z,71151,22,"<p>You probably really want <a href=""http://stackoverflow.com/questions/55391/python-regular-expression-for-html-parsing-beautifulsoup#55424"">BeautifulSoup</a>, check the link for an example. </p>

<p>But in any case</p>

<pre><code>&gt;&gt;&gt; import HTMLParser
&gt;&gt;&gt; h = HTMLParser.HTMLParser()
&gt;&gt;&gt; h.feed('&lt;html&gt;&lt;/html&gt;')
&gt;&gt;&gt; h.get_starttag_text()
'&lt;html&gt;'
&gt;&gt;&gt; h.close()
</code></pre>
"
71176,4869,2008-09-16T10:54:21Z,71151,4,"<p>I would recommend using <a href=""http://www.crummy.com/software/BeautifulSoup/"" rel=""nofollow"">Beautiful Soup</a> module instead and it has <a href=""http://www.crummy.com/software/BeautifulSoup/documentation.html"" rel=""nofollow"">good documentation</a>.</p>
"
71186,8570,2008-09-16T10:55:20Z,71151,1,"<p>For real world HTML processing I'd recommend <a href=""http://www.crummy.com/software/BeautifulSoup/"" rel=""nofollow"">BeautifulSoup</a>. It is great and takes away much of the pain. Installation is easy.</p>
"
71295,NA,2008-09-16T11:14:08Z,68630,6,"<p>You should also consider the <code>array</code> module in the standard library if all the items in your list or tuple are of the same type.  It can be faster and take less memory.</p>
"
71614,10682,2008-09-16T12:14:04Z,71151,4,"<p>You should also look at <a href=""http://code.google.com/p/html5lib/"" rel=""nofollow"">html5lib</a> for Python as it tries to parse HTML in a way that very much resembles what web browsers do, especially when dealing with invalid HTML (which is more than 90% of today's web).</p>
"
72100,10776,2008-09-16T13:21:55Z,71151,3,"<p>I don't recommend BeautifulSoup if you want speed. lxml is much, much faster, and you can fall back in lxml's BS soupparser if the default parser doesn't work.</p>
"
72126,5868,2008-09-16T13:25:12Z,71817,0,"<p>Well the doc-string is stored in <code>__doc__</code> so it wouldn't be too hard to re-assign it based on the doc-string of <code>_execute</code> after the fact.</p>

<p>Basically:</p>

<p><code></p>

<pre>
class MyClass(object):
    def execute(self):
        '''original doc-string'''
        self._execute()

class SubClass(MyClass):
    def _execute(self):
        '''sub-class doc-string'''
        pass

    # re-assign doc-string of execute
    def execute(self,*args,**kw):
        return MyClass.execute(*args,**kw)
    execute.__doc__=_execute.__doc__

</pre>

<p></code></p>

<p>Execute has to be re-declared to that the doc string gets attached to the version of execute for the <code>SubClass</code> and not for <code>MyClass</code> (which would otherwise interfere with other sub-classes).</p>

<p>That's not a very tidy way of doing it, but from the POV of the user of a library it should give the desired result.  You could then wrap this up in a meta-class to make it easier for people who are sub-classing.</p>
"
72180,12138,2008-09-16T13:30:56Z,67454,36,"<p>The solution is as follows.</p>

<p>Use Python module <a href=""http://docs.python.org/lib/module-zipfile.html"">zipfile</a> to create zip archive, but as the file specify <a href=""http://docs.python.org/lib/module-StringIO.html"">StringIO</a> object (ZipFile constructor requires file-like object). Add files you want to compress. Then in your Django application return the content of StringIO object in <code>HttpResponse</code> with mimetype set to <code>application/x-zip-compressed</code> (or at least <code>application/octet-stream</code>). If you want, you can set <code>content-disposition</code> header, but this should not be really required.</p>

<p>But beware, creating zip archives on each request is bad idea and this may kill your server (not counting timeouts if the archives are large). Performance-wise approach is to cache generated output somewhere in filesystem and regenerate it only if source files have changed. Even better idea is to prepare archives in advance (eg. by cron job) and have your web server serving them as usual statics.</p>
"
72192,3002,2008-09-16T13:31:44Z,71817,2,"<p>Is there a reason you can't override the base class's <code>execute</code> function directly?</p>

<pre><code>class Base(object):
    def execute(self):
        ...

class Derived(Base):
    def execute(self):
        """"""Docstring for derived class""""""
        Base.execute(self)
        ...stuff specific to Derived...
</code></pre>

<p>If you don't want to do the above:</p>

<p>Method objects don't support writing to the <code>__doc__</code> attribute, so you have to change <code>__doc__</code> in the actual function object. Since you don't want to override the one in the base class, you'd have to give each subclass its own copy of <code>execute</code>:</p>

<pre><code>class Derived(Base):
    def execute(self):
        return Base.execute(self)

    class _execute(self):
        """"""Docstring for subclass""""""
        ...

    execute.__doc__= _execute.__doc__
</code></pre>

<p>but this is similar to a roundabout way of redefining <code>execute</code>...</p>
"
72249,12138,2008-09-16T13:36:56Z,43290,4,"<p>Be aware that using <code>reverse()</code> requires that your urlconf module is 100% error free and can be processed - iow no <code>ViewDoesNotExist</code> errors or so, or you get the dreaded <code>NoReverseMatch</code> exception (errors in templates usually fail silently resulting in <code>None</code>).</p>
"
72284,12138,2008-09-16T13:39:39Z,38601,57,"<p>As the solution is hackish, I think using your own date/time widget with some JavaScript is more feasible.</p>
"
72359,12138,2008-09-16T13:44:51Z,20927,1,"<p>DateTime fields with auto_now are automatically updated upon calling <code>save()</code>, so you do not need to update them manually. Django will do this work for you.</p>
"
72449,NA,2008-09-16T13:52:02Z,72393,1,"<p>Are you using the re.match() or re.search() method? My understanding is that re.match() assumes a ""^"" at the begining of your expression and will only search at the beginning of the text, while re.search() acts more like the Perl regular expressions and will only match the beginning of the text if you include a ""^"" at the beginning of your expression. Hope that helps.</p>
"
72470,6592,2008-09-16T13:53:03Z,72393,19,"<p>In Python, there's a distinction between ""match"" and ""search""; match only looks for the pattern at the start of the string, and search looks for the pattern starting at any location within the string.</p>

<p><a href=""http://docs.python.org/lib/module-re.html"" rel=""nofollow"">Python regex docs</a><br />
<a href=""http://docs.python.org/lib/matching-searching.html"" rel=""nofollow"">Matching vs searching</a></p>
"
72498,12213,2008-09-16T13:54:38Z,72422,0,"<p>If I recall correctly in that test framework the setUp method is run before each test</p>
"
72501,2603,2008-09-16T13:54:56Z,72393,3,"<pre><code>&gt;&gt;&gt; import re
&gt;&gt;&gt; pattern = re.compile(""url"")
&gt;&gt;&gt; string = ""   url""
&gt;&gt;&gt; pattern.match(string)
&gt;&gt;&gt; pattern.search(string)
&lt;_sre.SRE_Match object at 0xb7f7a6e8&gt;
</code></pre>
"
72504,8002,2008-09-16T13:55:02Z,72422,11,"<p>From <a href=""http://docs.python.org/lib/minimal-example.html"">http://docs.python.org/lib/minimal-example.html</a> :</p>

<blockquote>
  <p>When a setUp() method is defined, the
  test runner will run that method prior
  to each test.</p>
</blockquote>

<p>So setUp() gets run before both testA and testB, setting i to 1 each time.  Behind the scenes, the entire test object is actually being re-instantiated for each test, with setUp() being run on each new instantiation before the test is executed.</p>
"
72521,12213,2008-09-16T13:56:13Z,72393,1,"<p>You are probably being tripped up by the different methods re.search and re.match.</p>
"
72596,5353,2008-09-16T14:02:38Z,71817,4,"<p>Well, if you don't mind copying the original method in the subclass, you can use the following technique.</p>

<pre><code>import new

def copyfunc(func):
    return new.function(func.func_code, func.func_globals, func.func_name,
                        func.func_defaults, func.func_closure)

class Metaclass(type):
    def __new__(meta, name, bases, attrs):
        for key in attrs.keys():
            if key[0] == '_':
                skey = key[1:]
                for base in bases:
                    original = getattr(base, skey, None)
                    if original is not None:
                        copy = copyfunc(original)
                        copy.__doc__ = attrs[key].__doc__
                        attrs[skey] = copy
                        break
        return type.__new__(meta, name, bases, attrs)

class Class(object):
    __metaclass__ = Metaclass
    def execute(self):
        '''original doc-string'''
        return self._execute()

class Subclass(Class):
    def _execute(self):
        '''sub-class doc-string'''
        pass
</code></pre>
"
72702,7589,2008-09-16T14:12:08Z,72422,-1,"<p>The setUp method, as everyone else has said, runs before every test method you write. So, when testB runs, the value of i is 1, not 3.</p>

<p>You can also use a tearDown method which runs after every test method. However if one of your tests crashes, your tearDown method will never run.</p>
"
72785,1694,2008-09-16T14:17:43Z,71817,0,"<p>I agree that the simplest, most Pythonic way of approaching this is to simply redefine execute in your subclasses and have it call the execute method of the base class:</p>

<pre><code>class Sub(Base):
    def execute(self):
        """"""New docstring goes here""""""
        return Base.execute(self)
</code></pre>

<p>This is very little code to accomplish what you want; the only downside is that you must repeat this code in every subclass that extends Base.  However, this is a small price to pay for the behavior you want.</p>

<p>If you want a sloppy and verbose way of making sure that the docstring for execute is dynamically generated, you can use the descriptor protocol, which would be significantly less code than the other proposals here.  This is annoying because you can't just set a descriptor on an existing function, which means that execute must be written as a separate class with a <code>__call__</code> method.</p>

<p>Here's the code to do this, but keep in mind that my above example is much simpler and more Pythonic:</p>

<pre><code>class Executor(object):
    __doc__ = property(lambda self: self.inst._execute.__doc__)

    def __call__(self):
        return self.inst._execute()

class Base(object):
    execute = Executor()

class Sub(Base):
    def __init__(self):
        self.execute.inst = self

    def _execute(self):
        """"""Actually does something!""""""
        return ""Hello World!""

spam = Sub()
print spam.execute.__doc__  # prints ""Actually does something!""
help(spam)                  # the execute method says ""Actually does something!""
</code></pre>
"
72904,11457,2008-09-16T14:27:57Z,72852,-8,"<p>Why you even need this? Why you just do not import it as</p>

<pre><code>from app.sub2 import mod2
</code></pre>
"
72950,11457,2008-09-16T14:31:52Z,72899,7,"<p>You have to implement your own comparison function that will compare the dictionaries by values of name keys. See <a href=""http://wiki.python.org/moin/HowTo/Sorting"">Sorting Mini-HOW TO from PythonInfo Wiki</a></p>
"
72987,8250,2008-09-16T14:34:30Z,67180,1,"<p>check the max_packet setting in your my.cnf file. this determines the largest amount of data you can send to your mysql server in a single statement. exceeding this values results in that error.</p>
"
73009,7363,2008-09-16T14:36:25Z,72852,-7,"<p>I think that what you have to ask yourself is:</p>

<ul>
<li>Why i need to do this?</li>
<li>Is my package separation well done?</li>
</ul>

<p>I don't know the context why you want to do it this way. But for me a cleaner design would be to have the following packages structure:</p>

<pre><code>app/
   __init__.py
   sub1/
      __init__.py
      mod1.py
      sub12/
           __init__.py
           mod2.py
</code></pre>

<p>Then you only have to do:</p>

<pre><code>from sub12 import mod2
</code></pre>
"
73019,985,2008-09-16T14:36:54Z,72899,7,"<p>I guess you've meant:</p>

<pre><code>[{'name':'Homer', 'age':39}, {'name':'Bart', 'age':10}]
</code></pre>

<p>This would be sorted like this:</p>

<pre><code>sorted(l,cmp=lambda x,y: cmp(x['name'],y['name']))
</code></pre>
"
73044,8002,2008-09-16T14:39:11Z,72899,12,"<pre><code>my_list = [{'name':'Homer', 'age':39}, {'name':'Bart', 'age':10}]

my_list.sort(lambda x,y : cmp(x['name'], y['name']))
</code></pre>

<p><code>my_list</code> will now be what you want.</p>

<p><strong>(3 years later) Edited to add:</strong></p>

<p>The new <code>key</code> argument is more efficient and neater.  A better answer now looks like:</p>

<pre><code>my_list = sorted(my_list, key=lambda k: k['name'])
</code></pre>

<p>...the lambda is, IMO, easier to understand than <code>operator.itemgetter</code>, but YMMV.</p>
"
73050,3785,2008-09-16T14:39:44Z,72899,1147,"<p>It may look cleaner using a key instead a cmp:</p>

<pre class=""lang-py prettyprint-override""><code>newlist = sorted(list_to_be_sorted, key=lambda k: k['name']) 
</code></pre>

<p>or as J.F.Sebastian and others suggested,</p>

<pre class=""lang-py prettyprint-override""><code>from operator import itemgetter
newlist = sorted(list_to_be_sorted, key=itemgetter('name')) 
</code></pre>

<p>For completeness (as pointed out in comments by fitzgeraldsteele), add <code>reverse=True</code> to sort descending</p>

<pre class=""lang-py prettyprint-override""><code>newlist = sorted(l, key=itemgetter('name'), reverse=True)
</code></pre>
"
73060,6043,2008-09-16T14:40:26Z,72852,-14,"<p>Don't do relative imports. They'll only make your code more fragile. If you do an absolute import as Matej suggested, you'll be less vulnerable to changes in sys.path and changes in file locations.</p>
"
73098,12320,2008-09-16T14:43:51Z,72899,13,"<pre><code>import operator
a_list_of_dicts.sort(key=operator.itemgetter('name'))
</code></pre>

<p>'key' is used to sort by an arbitrary value and 'itemgetter' sets that value to each item's 'name' attribute.</p>
"
73149,9597,2008-09-16T14:48:56Z,72852,189,"<p>Everyone seems to want to tell you what you should be doing rather than just answering the question.</p>

<p>The problem is that you're running the module as '__main__' by passing the mod1.py as an argument to the interpreter.</p>

<p>From <a href=""http://www.python.org/dev/peps/pep-0328/"">PEP 328</a>:</p>

<blockquote>
  <p>Relative imports use a module's __name__ attribute to determine that module's position in the package hierarchy. If the module's name does not contain any package information (e.g. it is set to '__main__') then relative imports are resolved as if the module were a top level module, regardless of where the module is actually located on the file system.</p>
</blockquote>

<p>In Python 2.6, they're adding the ability to reference modules relative to the main module.  <a href=""http://python.org/dev/peps/pep-0366/"">PEP 366</a> describes the change.</p>

<p><strong>Update</strong>: According to Nick Coghlan, the recommended alternative is to run the module inside the package using the -m switch.</p>
"
73153,1694,2008-09-16T14:49:20Z,72945,3,"<p>I'd recommend just creating an entirely separate model for this.</p>

<pre><code>class Assignment(Model):
    user = ForeignKey(User)
    role = ForeignKey(Role)
    event = ForeignKey(Event)
</code></pre>

<p>This lets you do all the usual model stuff, such as</p>

<pre><code>user.assignment_set.filter(role__name=""Chaperon"")
role.assignment_set.filter(event__name=""Silly Walkathon"")
</code></pre>

<p>The only thing left is to enforce your one-role-per-user-per-event restriction.  You can do this in the Assignment class by either overriding the save method (<a href=""http://docs.djangoproject.com/en/dev/topics/db/models/#overriding-predefined-model-methods"" rel=""nofollow"">http://docs.djangoproject.com/en/dev/topics/db/models/#overriding-predefined-model-methods</a>) or using signals (<a href=""http://docs.djangoproject.com/en/dev/topics/signals/"" rel=""nofollow"">http://docs.djangoproject.com/en/dev/topics/signals/</a>)</p>
"
73186,12592,2008-09-16T14:52:14Z,72899,8,"<p>You could use a custom comparison function, or you could pass in a function that calculates a custom sort key. That's usually more efficient as the key is only calculated once per item, while the comparison function would be called many more times.</p>

<p>You could do it this way:</p>

<pre><code>def mykey(adict): return adict['name']
x = [{'name': 'Homer', 'age': 39}, {'name': 'Bart', 'age':10}]
sorted(x, key=mykey)
</code></pre>

<p>But the standard library contains a generic routine for getting items of arbitrary objects: <code>itemgetter</code>. So try this instead:</p>

<pre><code>from operator import itemgetter
x = [{'name': 'Homer', 'age': 39}, {'name': 'Bart', 'age':10}]
sorted(x, key=itemgetter('name'))
</code></pre>
"
73281,6899,2008-09-16T14:59:37Z,5415,32,"<pre><code>&gt;&gt;&gt; import struct
&gt;&gt;&gt; struct.pack('f', 3.141592654)
b'\xdb\x0fI@'
&gt;&gt;&gt; struct.unpack('f', b'\xdb\x0fI@')
(3.1415927410125732,)
&gt;&gt;&gt; struct.pack('4f', 1.0, 2.0, 3.0, 4.0)
'\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@'
</code></pre>
"
73325,12426,2008-09-16T15:03:47Z,63086,0,"<p>Strange - No one mentioned GEdit (Gnome) or OpenKomodo (Windows, Mac, GNU/Linux...). Both of them are great!</p>

<p>OpenKomodo especially deals with tabs and spaces very well. And - it's free. Whee! When I need a lighter weight thingy, I just use GEdit.</p>

<p>Download OpenKomodo here - 
<a href=""http://www.openkomodo.com/"" rel=""nofollow"">http://www.openkomodo.com/</a></p>
"
73465,NA,2008-09-16T15:18:14Z,72899,68,"<pre><code>import operator
</code></pre>

<p>To sort the list of dictionaries by key='name':</p>

<pre><code>list_of_dicts.sort(key=operator.itemgetter('name'))
</code></pre>

<p>To sort the list of dictionaries by key='age':</p>

<pre><code>list_of_dicts.sort(key=operator.itemgetter('age'))
</code></pre>
"
73473,NA,2008-09-16T15:19:05Z,71817,1,"<p>Look at the functools.wraps() decorator; it does all of this, but I don't know offhand if you can get it to run in the right context</p>
"
73594,7363,2008-09-16T15:29:37Z,73439,1,"<p>You can accomplish this using Microsoft COM objects. You can take a look at <a href=""http://www.boddie.org.uk/python/COM.html"" rel=""nofollow"">here</a> on how to start using them.</p>
"
73617,12683,2008-09-16T15:31:39Z,67454,1,"<p>I suggest to use separate model for storing those temp zip files. You can create zip on-fly, save to model with filefield and finally send url to user.</p>

<p>Advantages:</p>

<ul>
<li>Serving static zip files with django media mechanism (like usual uploads).</li>
<li>Ability to cleanup stale zip files by regular cron script execution (which can use date field from zip file model).</li>
</ul>
"
73673,8002,2008-09-16T15:36:36Z,73663,644,"<pre><code>import sys
sys.exit()
</code></pre>

<p>details from the <a href=""https://docs.python.org/2/library/constants.html#exit""><code>sys</code> module documentation</a>:</p>

<blockquote>
  <p><code>sys.<strong>exit</strong>([<em>arg</em>])</code></p>
  
  <blockquote>
    <p>Exit from Python. This is implemented by raising the
    <a href=""https://docs.python.org/2/library/exceptions.html#SystemExit""><code>SystemExit</code></a> exception, so cleanup actions specified by finally clauses
    of <a href=""https://docs.python.org/2/reference/compound_stmts.html#try""><code>try</code></a> statements are honored, and it is possible to intercept the
    exit attempt at an outer level.</p>
    
    <p>The optional argument <em>arg</em> can be an integer giving the exit status
    (defaulting to zero), or another type of object. If it is an integer,
    zero is considered “successful termination” and any nonzero value is
    considered “abnormal termination” by shells and the like. Most systems
    require it to be in the range 0-127, and produce undefined results
    otherwise. Some systems have a convention for assigning specific
    meanings to specific exit codes, but these are generally
    underdeveloped; Unix programs generally use 2 for command line syntax
    errors and 1 for all other kind of errors. If another type of object
    is passed, None is equivalent to passing zero, and any other object is
    printed to <a href=""https://docs.python.org/2/library/sys.html#sys.stderr""><code>stderr</code></a> and results in an exit code of 1. In particular,
    <code>sys.exit(""some error message"")</code> is a quick way to exit a program when
    an error occurs.</p>
    
    <p>Since <a href=""https://docs.python.org/2/library/constants.html#exit""><code>exit()</code></a> ultimately “only” raises an exception, it will only exit
    the process when called from the main thread, and the exception is not
    intercepted.</p>
  </blockquote>
</blockquote>

<p>Note that this is the 'nice' way to exit.  @<a href=""http://stackoverflow.com/questions/73663/terminating-a-python-script#76374"">glyphtwistedmatrix</a> below points out that if you want a 'hard exit', you can use os._exit(<em>errorcode</em>), though it's likely os-specific to some extent (it might not take an errorcode under windows, for example), and it definitely is less friendly since it doesn't let the interpreter do any cleanup before the process dies.</p>
"
73680,11234,2008-09-16T15:37:13Z,73663,72,"<p>Another way is:</p>

<pre><code>raise SystemExit
</code></pre>
"
73695,29503,2008-09-16T15:38:28Z,73663,16,"<pre><code>from sys import exit
exit()
</code></pre>

<p>As a parameter you can pass an exit code, which will be returned to OS. Default is 0.</p>
"
73791,7779,2008-09-16T15:47:30Z,72422,9,"<p>Each test is run using a new instance of the MyTest class. That means if you change self in one test, changes will not carry over to other tests, since self will refer to a different instance.</p>

<p>Additionally, as others have pointed out, setUp is called before each test.</p>
"
73807,12677,2008-09-16T15:49:06Z,73781,3,"<p>It's quite common to just use the sendmail command from Python using os.popen</p>

<p>Personally, for scripts i didn't write myself, I think just using the SMTP-protocol is better, since it wouldn't require installing say an sendmail clone to run on windows.</p>

<p><a href=""https://docs.python.org/library/smtplib.html"" rel=""nofollow"">https://docs.python.org/library/smtplib.html</a></p>
"
73811,12568,2008-09-16T15:49:21Z,73781,-4,"<p>The easiest answer is the smtplib, you can find docs on it <a href=""http://docs.python.org/lib/SMTP-example.html"" rel=""nofollow"">here</a>. </p>

<p>All you need to do is configure your local sendmail to accept connection from localhost, which it probably already does by default.  Sure, you're still using SMTP for the transfer, but it's the local sendmail, which is basically the same as using the commandline tool. </p>
"
73844,5822,2008-09-16T15:51:40Z,73781,24,"<p>This is a simple python function that uses the unix sendmail to deliver a mail.</p>

<pre><code>def sendMail():
    sendmail_location = ""/usr/sbin/sendmail"" # sendmail location
    p = os.popen(""%s -t"" % sendmail_location, ""w"")
    p.write(""From: %s\n"" % ""from@somewhere.com"")
    p.write(""To: %s\n"" % ""to@somewhereelse.com"")
    p.write(""Subject: thesubject\n"")
    p.write(""\n"") # blank line separating headers from body
    p.write(""body of the mail"")
    status = p.close()
    if status != 0:
           print ""Sendmail exit status"", status
</code></pre>
"
74084,8427,2008-09-16T16:12:37Z,73781,79,"<p>Header injection isn't a factor in how you send the mail, it's a factor in how you construct the mail.  Check the <a href=""https://docs.python.org/2/library/email.html"">email</a> package, construct the mail with that, serialise it, and send it to <code>/usr/sbin/sendmail</code> using the <a href=""https://docs.python.org/2/library/subprocess.html"">subprocess</a> module:</p>

<pre><code>from email.mime.text import MIMEText
from subprocess import Popen, PIPE

msg = MIMEText(""Here is the body of my message"")
msg[""From""] = ""me@example.com""
msg[""To""] = ""you@example.com""
msg[""Subject""] = ""This is the subject.""
p = Popen([""/usr/sbin/sendmail"", ""-t"", ""-oi""], stdin=PIPE)
p.communicate(msg.as_string())
</code></pre>
"
74138,8427,2008-09-16T16:18:26Z,74092,2,"<pre><code>if hasattr(obj, '__call__'): pass
</code></pre>

<p>This also fits in better with Python's ""duck typing"" philosophy, because you don't really care <em>what</em> it is, so long as you can call it.</p>

<p>It's worth noting that <code>callable()</code> is being removed from Python and is not present in 3.0.</p>
"
74295,3002,2008-09-16T16:35:51Z,74092,5,"<p>If you want to exclude classes and other random objects that may have a <code>__call__</code> method, and only check for functions and methods, these three functions in the <a href=""http://docs.python.org/lib/module-inspect.html""><code>inspect</code> module</a></p>

<pre><code>inspect.isfunction(obj)
inspect.isbuiltin(obj)
inspect.ismethod(obj)
</code></pre>

<p>should do what you want in a future-proof way.</p>
"
74327,8015,2008-09-16T16:38:56Z,21934,5,"<p>Garbage collection is faster (more time efficient) than reference counting, if you have enough memory. For example, a copying gc traverses the ""live"" objects and copies them to a new space, and can reclaim all the ""dead"" objects in one step by marking a whole memory region. This is very efficient, <em>if</em> you have enough memory. Generational collections use the knowledge that ""most objects die young""; often only a few percent of objects have to be copied.</p>

<p>[This is also the reason why gc can be faster than malloc/free]</p>

<p>Reference counting is much more space efficient than garbage collection, since it reclaims memory the very moment it gets unreachable. This is nice when you want to attach finalizers to objects (e.g. to close a file once the File object gets unreachable). A reference counting system can work even when only a few percent of the memory is free. But the management cost of having to increment and decrement counters upon each pointer assignment cost a lot of time, and some kind of garbage collection is still needed to reclaim cycles.</p>

<p>So the trade-off is clear: if you have to work in a memory-constrained environment, or if you need precise finalizers, use reference counting. If you have enough memory and need the speed, use garbage collection.</p>
"
74445,9805,2008-09-16T16:51:27Z,74430,2,"<p>I think you need to give some more information.  It's not really possible to answer why it's not working based on the information in the question.  The basic documentation for random is at: 
<a href=""https://docs.python.org/library/random.html"" rel=""nofollow"">https://docs.python.org/library/random.html</a></p>

<p>You might check there.  </p>
"
74452,8450,2008-09-16T16:51:46Z,535,4,"<p>We are using <a href=""http://bitten.edgewall.org/"" rel=""nofollow"">Bitten</a> wich is integrated with trac. And it's python based.</p>
"
74459,4558,2008-09-16T16:52:11Z,74430,0,"<p>Can you post an example of what you're trying to do?  It's not clear from your question what the actual problem is.</p>

<p>Here's an example of how to use the random module:</p>

<pre><code>import random
print random.randint(0,10)
</code></pre>
"
74476,5190,2008-09-16T16:53:00Z,74430,1,"<pre><code>Python 2.5.2 (r252:60911, Jun 16 2008, 18:27:58)
[GCC 3.3.4 (pre 3.3.5 20040809)] on linux2
Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.
&gt;&gt;&gt; import random
&gt;&gt;&gt; random.seed()
&gt;&gt;&gt; dir(random)
['BPF', 'LOG4', 'NV_MAGICCONST', 'RECIP_BPF', 'Random', 'SG_MAGICCONST', 'SystemRandom', 'TWOPI', 'WichmannHill', '_BuiltinMethodType', '_MethodType', '__all__', '__builtins__', '__doc__', '__file__', '__name__', '_acos', '_ceil', '_cos', '_e', '_exp', '_hexlify', '_inst', '_log', '_pi', '_random', '_sin', '_sqrt', '_test', '_test_generator', '_urandom', '_warn', 'betavariate', 'choice', 'expovariate', 'gammavariate', 'gauss', 'getrandbits', 'getstate', 'jumpahead', 'lognormvariate', 'normalvariate', 'paretovariate', 'randint', 'random', 'randrange', 'sample', 'seed', 'setstate', 'shuffle', 'uniform', 'vonmisesvariate', 'weibullvariate']
&gt;&gt;&gt; random.randint(0,3)
3
&gt;&gt;&gt; random.randint(0,3)
1
&gt;&gt;&gt;
</code></pre>
"
74485,422,2008-09-16T16:53:43Z,74430,0,"<p>Seems to work fine for me. Check out the methods in the <a href=""http://docs.python.org/lib/module-random.html"" rel=""nofollow"">official python documentation</a> for random:</p>

<pre><code>&gt;&gt;&gt; import random
&gt;&gt;&gt; random.random()
0.69130806168332215
&gt;&gt;&gt; random.uniform(1, 10)
8.8384170917436293
&gt;&gt;&gt; random.randint(1, 10)
4
</code></pre>
"
74590,42219,2008-09-16T17:04:46Z,60649,8,"<p>Why not D-Bus?  It's a very simple message passing system that runs on almost all platforms and is designed for robustness.  It's supported by pretty much every scripting language at this point.</p>

<p><a href=""http://freedesktop.org/wiki/Software/dbus"">http://freedesktop.org/wiki/Software/dbus</a></p>
"
74615,9530,2008-09-16T17:07:42Z,60649,0,"<p>Python has a pretty good IPC library: see <a href=""https://docs.python.org/2/library/ipc.html"" rel=""nofollow""><a href=""https://docs.python.org/2/library/ipc.html"" rel=""nofollow"">https://docs.python.org/2/library/ipc.html</a></a></p>
"
75158,8925,2008-09-16T18:03:09Z,68477,0,"<p>You may also want to have a look at <a href=""http://code.google.com/p/httplib2/"" rel=""nofollow"">httplib2</a>, with <a href=""http://bitworking.org/projects/httplib2/doc/html/libhttplib2.html#examples"" rel=""nofollow"">examples</a>. I find using httplib2 is more concise than using the built-in HTTP modules.</p>
"
75186,4558,2008-09-16T18:05:01Z,68477,59,"<p>Blatant self-promotion:</p>

<p>check out my <a href=""http://atlee.ca/software/poster/"">poster</a> module for python.  It handles the multipart/form-data encoding, as well as supporting streaming uploads (so you don't have to load the entire file into memory before submitting the HTTP POST request).</p>
"
75360,2900,2008-09-16T18:19:19Z,74430,0,"<p>Works for me:</p>

<pre><code>Python 2.5.1 (r251:54863, Jun 15 2008, 18:24:51) 
[GCC 4.3.0 20080428 (Red Hat 4.3.0-8)] on linux2
Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.
&gt;&gt;&gt; import random
&gt;&gt;&gt; brothers = ['larry', 'curly', 'moe']
&gt;&gt;&gt; random.choice(brothers)
'moe'
&gt;&gt;&gt; random.choice(brothers)
'curly'
</code></pre>
"
75370,9310,2008-09-16T18:20:47Z,74092,1,"<p>Depending on what you mean by 'class':</p>

<pre><code>callable( obj ) and not inspect.isclass( obj )
</code></pre>

<p>or:</p>

<pre><code>callable( obj ) and not isinstance( obj, types.ClassType )
</code></pre>

<p>For example, results are different for 'dict':</p>

<pre><code>&gt;&gt;&gt; callable( dict ) and not inspect.isclass( dict )
False
&gt;&gt;&gt; callable( dict ) and not isinstance( dict, types.ClassType )
True
</code></pre>
"
75427,12773,2008-09-16T18:26:02Z,74430,34,"<p>You probably have a file named random.py or random.pyc in your working directory.  That's shadowing the built-in random module.  You need to rename random.py to something like my_random.py and/or remove the random.pyc file.</p>

<p>To tell for sure what's going on, do this:</p>

<pre><code>&gt;&gt;&gt; import random
&gt;&gt;&gt; print random.__file__
</code></pre>

<p>That will show you exactly which file is being imported.</p>
"
75456,8453,2008-09-16T18:27:58Z,75440,28,"<p>It's not a method, it's a field.  The field is called <code>__name__</code>.  <code>class.__name__</code> will give the name of the class as a string.  <code>object.__class__.__name__</code> will give the name of the class of an object.</p>
"
75467,6093,2008-09-16T18:28:51Z,75440,33,"<pre><code>In [1]: class test(object):
   ...:     pass
   ...: 

In [2]: test.__name__
Out[2]: 'test'
</code></pre>
"
75507,9310,2008-09-16T18:34:03Z,74092,13,"<p>The inspect module has exactly what you want:</p>

<pre><code>inspect.isroutine( obj )
</code></pre>

<p>FYI, the code is:</p>

<pre><code>def isroutine(object):
    """"""Return true if the object is any kind of function or method.""""""
    return (isbuiltin(object)
            or isfunction(object)
            or ismethod(object)
            or ismethoddescriptor(object))
</code></pre>
"
75815,5616,2008-09-16T19:07:39Z,75621,0,"<p>You can pass a dictionary of initial values to your form:</p>

<pre><code>if request.method == ""GET"":
    # calculate my_start_date and my_end_date here...
    form = MyForm( { 'start_date': my_start_date, 'end_date': my_end_date} )
...
</code></pre>

<p>See the <a href=""http://docs.djangoproject.com/en/dev/ref/forms/api/"" rel=""nofollow"">official forms API documentation</a>, where they demonstrate this.</p>

<p><strong>edit</strong>: Based on answers from other users, maybe this is the cleanest solution:</p>

<pre><code>if request.method == ""GET"":
    form = MyForm()
    form['start_date'] = form['start_date'].field.initial
    form['end_date'] = form['end_date'].field.initial
else:
    form = MyForm(request.method.POST)
if form.is_valid():
    do_query(form.cleaned_data['start_date'], form.cleaned_data['end_date'])
</code></pre>

<p>I haven't tried this though; can someone confirm that this works? I think this is better than creating a new method, because this approach doesn't require other code (possibly not written by you) to know about your new 'magic' accessor.</p>
"
75923,2123,2008-09-16T19:18:57Z,75621,4,"<p>If you add this method to your form class:</p>

<pre><code>def get_cleaned_or_initial(self, fieldname):
        if hasattr(self, 'cleaned_data'):
            return self.cleaned_data.get(fieldname)
        else:
            return self[fieldname].field.initial
</code></pre>

<p>you could then re-write your code as:</p>

<pre><code>if request.method == 'GET':
    form = MyForm()
else:
    form = MyForm(request.method.POST)
    form.is_valid()

do_query(form.get_cleaned_or_initial('start_date'), form.get_cleaned_or_initial('end_date'))
</code></pre>
"
76198,6801,2008-09-16T19:49:26Z,75798,1,"<p>cakephp.org</p>

<p>Cakephp is really good, really close to ruby on rails (1.2).  It is in php, works very well on shared hosts and is easy to implement. </p>

<p>The only downside is that the documentation is somewhat lacking, but you quickly get it and quickly start doing cool stuff.</p>

<p>I totally recommend cakephp.</p>
"
76221,2603,2008-09-16T19:51:09Z,72945,0,"<p>I'd model Role as an association class between Users and Roles, thus,</p>

<pre><code>class User(models.Model):
     ...

class Event(models.Model):
     ...

class Role(models.Model):
     user = models.ForeignKey(User)
     event = models.ForeignKey(Event)
</code></pre>

<p>And enforce the one role per user per event in either a manager or SQL constraints.</p>
"
76374,13564,2008-09-16T20:08:04Z,73663,48,"<p>While you should generally prefer <code>sys.exit</code> because it is more ""friendly"" to other code, all it actually does is raise an exception.</p>

<p>If you are sure that you need to exit a process immediately, and you might be inside of some exception handler which would catch <code>SystemExit</code>, there is another function - <code>os._exit</code> - which terminates immediately at the C level and does not perform any of the normal tear-down of the interpreter; for example, hooks registered with the ""atexit"" module are not executed.</p>
"
76404,6899,2008-09-16T20:11:09Z,74430,1,"<p>Is it possible that the script you run is called random.py itself?</p>
"
76453,13468,2008-09-16T20:15:54Z,76096,3,"<p>As far as I know, GTK TextView doesn't include an undo function. So while I am not familiar with Python's GTK library, I would think it doesn't have one.</p>

<p>The Ruby-GNOME2 project has a <a href=""http://ruby-gnome2.sourceforge.jp/hiki.cgi?Simple+Text+Editor"" rel=""nofollow"">sample text editor</a> that has undo/redo functionality. Basically they are connecting to the insert_text and delete_range signals of the TextView widget and recording the events and associated data in a list.</p>
"
76560,13564,2008-09-16T20:23:37Z,64426,9,"<p>If you are looking to do file transfers, XMLRPC is likely a bad choice.  It will require that you encode all of your data as XML (and load it into memory).</p>

<p>""Data requests"" and ""file transfers"" sounds a lot like plain old HTTP to me, but your statement of the problem doesn't make your requirements clear.  What kind of information needs to be encoded in the request?  Would a URL like ""http://yourserver.example.com/service/request?color=yellow&amp;flavor=banana"" be good enough?</p>

<p>There are lots of HTTP clients and servers in Python, none of which are especially great, but all of which I'm sure will get the job done for basic file transfers.  You can do security the ""normal"" web way, which is to use HTTPS and passwords, which will probably be sufficient.</p>

<p>If you want two-way communication then HTTP falls down, and a protocol like Twisted's <a href=""http://twistedmatrix.com/projects/core/documentation/howto/pb-intro.html"" rel=""nofollow"">perspective broker (PB)</a> or <a href=""http://twistedmatrix.com/documents/8.1.0/api/twisted.protocols.amp.html"" rel=""nofollow"">asynchronous messaging protocol (AMP)</a> might suit you better.  These protocols are certainly well-supported by Twisted.</p>
"
77093,115,2008-09-16T21:06:27Z,77086,1,"<p>If it ain't broke don't fix it.</p>

<p>Just write a quick test, but bear in mind that each language will be faster with certain functions then the other.</p>
"
77112,13289,2008-09-16T21:08:06Z,77086,0,"<p>The only right answer is ""It depends"". There's a lot of variables that can affect the performance, and you can optimize many things in either situation.</p>
"
77114,NA,2008-09-16T21:08:07Z,68541,0,"<p>The path was the mistake. Thanks. I was looking at everything else to be wrong :-)</p>
"
77138,8123,2008-09-16T21:09:32Z,77086,1,"<p>Check out the programming languages shootout:</p>

<p><a href=""http://dada.perl.it/shootout/"" rel=""nofollow"">http://dada.perl.it/shootout/</a></p>
"
77145,NA,2008-09-16T21:10:12Z,61151,0,"<p>If the tests are simple, simply put them in the docstring -- most of the test frameworks for Python will be able to use that:</p>

<pre><code>&gt;&gt;&gt; import module
&gt;&gt;&gt; module.method('test')
'testresult'
</code></pre>

<p>For other more involved tests, I'd put them either in <code>../tests/test_module.py</code> or in <code>tests/test_module.py</code>.</p>
"
77166,8815,2008-09-16T21:11:49Z,77086,1,"<p>You need to be able to make a business case for switching, not just that ""it's faster"".  If a site built on technology B costs 20% more in developer time for maintenance over a set period (say, 3 years), it would likely be cheaper to add another webserver to the system running technology A to bridge the performance gap.</p>

<p>Just saying ""we should switch to technology B because technology B is <em>faster!</em>"" doesn't really work.</p>

<p>Since Python is far less ubiquitous than PHP, I wouldn't be surprised if hosting, developer, and other maintenance costs for it (long term) would have it fit this scenario.</p>
"
77174,7706,2008-09-16T21:13:00Z,77086,2,"<p>It's about the same. The difference shouldn't be large enough to be the reason to pick one or the other. Don't try to compare them by writing your own tiny benchmarks (<code>""hello world""</code>) because you will probably not have results that are representative of a real web site generating a more complex page.</p>
"
77220,1666,2008-09-16T21:16:15Z,77086,2,"<p>PHP and Python are similiar enough to not warrent any kind of switching.</p>

<p>Any performance improvement you might get from switching from one language to another would be vastly outgunned by simply not spending the money on converting the code (you don't code for free right?) and just buy more hardware.</p>
"
77222,NA,2008-09-16T21:16:24Z,75440,1,"<p>In [8]: <code>str('2'.__class__)</code><br />
Out[8]: <code>""&lt;type 'str'&gt;""</code><br /></p>

<p>In [9]: <code>str(len.__class__)</code><br />
Out[9]: <code>""&lt;type 'builtin_function_or_method'&gt;""</code><br /></p>

<p>In [10]: <code>str(4.6.__class__)</code><br />
Out[10]: <code>""&lt;type 'float'&gt;""</code><br /></p>

<p>Or, as was pointed out before,<br /></p>

<p>In [11]: <code>4.6.__class__.__name__</code><br />
Out[11]: <code>'float'</code></p>
"
77297,3542,2008-09-16T21:24:46Z,77086,27,"<p>There's no point in attempting to convince your employer to port from PHP to Python, especially not for an existing system, which is what I think you implied in your question.</p>

<p>The reason for this is that you already have a (presumably) working system, with an existing investment of time and effort (and experience). To discard this in favour of a trivial performance gain (not that I'm claiming there would be one) would be foolish, and no manager worth his salt ought to endorse it.</p>

<p>It may also create a problem with maintainability, depending on who else has to work with the system, and their experience with Python.</p>
"
77458,11855,2008-09-16T21:42:49Z,77198,1,"<p>Good question. I'm not a ruby guy (i use java with flex), but what I believe differentiates blazeds vs commercial livecycle ds is</p>

<ol>
<li>Streaming protocol support (rtmp) - competition for comet and such, delivering video</li>
<li>Some advanced stuff for hibernate detached objects and large resultset caching that I don't fully understand or need
<ol>
<li>support?
Might be others but those are the ones I know off the top of my head.</li>
</ol></li>
</ol>
"
77563,8209,2008-09-16T21:52:12Z,77552,3,"<p>Because it's the name of a builtin function.</p>
"
77600,6267,2008-09-16T21:54:56Z,77552,3,"<p>It's bad to name any variable after a built in function. One of the reasons is because it can be confusing to a reader that doesn't know the name is overridden.</p>
"
77606,5926,2008-09-16T21:55:32Z,77552,1,"<p>'id' is a built-in method in Python. Assigning a value to 'id' will overwrite the method. It is best to use either an identifier before as in ""some_id"" or use it in a different capitalization method.</p>

<p>The built in method takes a single parameter and returns an integer for the memory address of the object that you passed.</p>

<p><code>&gt;&gt;&gt;</code>id(1)</p>

<p>9787760</p>

<p><code>&gt;&gt;&gt;</code>x = 1</p>

<p><code>&gt;&gt;&gt;</code>id(x)</p>

<p>9787760</p>
"
77612,14028,2008-09-16T21:55:59Z,77552,87,"<p><code>id()</code> is a fundamental built-in:</p>

<blockquote>
  <p>Help on built-in function <code>id</code> in module
  <code>__builtin__</code>:</p>
  
  <pre class=""lang-none prettyprint-override""><code>id(...)

    id(object) -&gt; integer

    Return the identity of an object.  This is guaranteed to be unique among
    simultaneously existing objects.  (Hint: it's the object's memory
    address.)
</code></pre>
</blockquote>

<p>In general, using variable names that eclipse a keyword or built-in function in any language is a bad idea, even if it is allowed.</p>
"
77693,9812,2008-09-16T22:02:55Z,75798,9,"<blockquote>
  <p>However it's written in Python which
  means there's little real support in
  the way of deployment/packaging,
  debugging, profilers and other tools
  that make building and maintaining
  applications much easier.</p>
</blockquote>

<p>Python has:</p>

<ol>
<li>a <a href=""http://docs.python.org/lib/module-pdb.html"">great interactive debugger</a>, which makes very good use of Python <a href=""http://en.wikipedia.org/wiki/REPL"">REPL</a>. </li>
<li><a href=""http://peak.telecommunity.com/DevCenter/EasyInstall"">easy_install</a> anv <a href=""http://pypi.python.org/pypi/virtualenv"">virtualenv</a> for dependency management, packaging and deployment.</li>
<li><a href=""http://docs.python.org/lib/profile.html"">profiling features</a> comparable to other languages</li>
</ol>

<p>So IMHO you shouldn't worry about this things, use Python and Django and live happily :-)</p>

<p>Lucky for you, newest version of <a href=""http://blog.leosoto.com/2008/08/django-on-jython-its-here.html"">Django runs on Jython</a>, so you don't need to leave your whole Java ecosystem behind.</p>

<p>Speaking of frameworks, I evaluated this year:</p>

<ol>
<li><a href=""http://pylonshq.com/"">Pylons</a> (Python)</li>
<li><a href=""http://webpy.org/"">webpy</a> (Python)</li>
<li><a href=""http://www.symfony-project.org/"">Symfony</a> (PHP)</li>
<li><a href=""http://www.cakephp.org/"">CakePHP</a> (PHP)</li>
</ol>

<p>None of this frameworks comes close to the power of Django or Ruby on Rails. Based on my collegue opinion I could recommend you <a href=""http://www.kohanaphp.com/home"">kohana</a> framework. The downside is, it's written in PHP and, as far as I know, PHP doesn't have superb tools for debugging, profiling and packaging of apps.</p>

<p><strong>Edit:</strong> Here is a very good <a href=""http://bud.ca/blog/pony"">article about packaging and deployment of Python apps</a> (specifically Django apps). It's a hot topic in Django community now.</p>
"
77859,9167,2008-09-16T22:17:30Z,77731,1,"<p>Perhaps SQLAlchemy SQL Expression support is suitable. See the <a href=""http://docs.sqlalchemy.org/en/rel_0_5/sqlexpression.html"" rel=""nofollow"">documentation</a>. </p>
"
77898,9812,2008-09-16T22:22:52Z,72945,8,"<p><strong>zacherates</strong> writes:</p>

<blockquote>
  <p>I'd model Role as an association class between Users and Roles (...)</p>
</blockquote>

<p>I'd also reccomed this solution, but you can also make use of some syntactical sugar provided by Django: <a href=""http://docs.djangoproject.com/en/dev/topics/db/models/#extra-fields-on-many-to-many-relationships"">ManyToMany relation with extra fields</a>.</p>

<p>Example:</p>

<pre><code>class User(models.Model):
    name = models.CharField(max_length=128)

class Event(models.Model):
    name = models.CharField(max_length=128)
    members = models.ManyToManyField(User, through='Role')

    def __unicode__(self):
        return self.name

class Role(models.Model):
    person = models.ForeignKey(User)
    group = models.ForeignKey(Event)
    date_joined = models.DateField()
    invite_reason = models.CharField(max_length=64)
</code></pre>
"
77925,7779,2008-09-16T22:27:26Z,77552,30,"<p>I might say something unpopular here: <code>id()</code> is a rather specialized built-in function that is rarely used in business logic. Therefore I don't see a problem in using it as a variable name in a tight and well-written function, where it's clear that id doesn't mean the built-in function.</p>
"
77962,NA,2008-09-16T22:30:56Z,75829,2,"<p>via the <code>__table__</code> attribute on your declarative class</p>
"
77978,11192,2008-09-16T22:33:06Z,77936,12,"<p>Nope, that is the only formula for the centroid of a collection of points.  See Wikipedia: <a href=""http://en.wikipedia.org/wiki/Centroid"">http://en.wikipedia.org/wiki/Centroid</a></p>
"
77985,13313,2008-09-16T22:33:34Z,77936,-1,"<p>You got it.  What you are calculating is the centroid, or the mean vector.</p>
"
77997,1994377,2008-09-16T22:34:34Z,77936,-1,"<p>A ""more accurate centroid"" I believe centroid is defined the way you calculated it hence there can be no ""more accurate centroid"".</p>
"
78046,NA,2008-09-16T22:40:36Z,77936,3,"<p>you can use increase accuracy summation - Kahan summation - was that what you had in mind? </p>
"
78058,NA,2008-09-16T22:42:12Z,77936,0,"<p>Yes that is the correct formula.</p>

<p>If you have a large number of points you can exploit the symmetry of the problem (be it cylindrical, spherical, mirror). Otherwise, you can borrow from statistics and average a random number of the points and just have a bit of error.</p>
"
78072,4279,2008-09-16T22:44:42Z,72393,4,"<pre><code>from BeautifulSoup import BeautifulSoup 

soup = BeautifulSoup(your_html)
for a in soup.findAll('a', href=True):
    # do something with `a` w/ href attribute
    print a['href']
</code></pre>
"
78147,10661,2008-09-16T22:53:33Z,77731,10,"<p>iBatis sequesters the SQL DML (or the definitions of the SQL) in an XML file.  It specifically focuses on the mapping between the SQL and some object model defined elsewhere.</p>

<p>SQL Alchemy can do this -- but it isn't really a very complete solution.  Like iBatis, you can merely have SQL table definitions and a mapping between the tables and Python class definitions. </p>

<p>What's more complete is to have a class definition that is <em>also</em> the SQL database definition.  If the class definition generates the SQL Table DDL as well as the query and processing DML, that's much more complete.  </p>

<p>I flip-flop between SQLAlchemy and the Django ORM.  SQLAlchemy can be used in an iBatis like manner.  But I prefer to make the object design central and leave the SQL implementation be derived from the objects by the toolset.</p>

<p>I use SQLAlchemy for large, batch, stand-alone projects.  DB Loads, schema conversions, DW reporting and the like work out well.  In these projects, the focus is on the relational view of the data, not the object model.  The SQL that's generated may be moved into PL/SQL stored procedures, for example.</p>

<p>I use Django for web applications, exploiting its built-in ORM capabilities.  You can, with a little work, segregate the Django ORM from the rest of the Django environment.  You can <a href=""http://docs.djangoproject.com/en/dev/topics/settings/#using-settings-without-setting-django-settings-module"">provide global settings</a> to bind your app to a specific database without using a separate settings module.</p>

<p>Django includes a number of common relationships (Foreign Key, Many-to-Many, One-to-One) for which it can manage the SQL implementation.  It generates key and index definitions for the attached database.</p>

<p>If your problem is largely object-oriented, with the database being used for persistence, then the nearly transparent ORM layer of Django has advantages.</p>

<p>If your problem is largely relational, with the SQL processing central, then the capability of seeing the generated SQL in SQLAlchemy has advantages.</p>
"
78304,14337,2008-09-16T23:22:30Z,74430,3,"<p>This is happening because you have a random.py file in the python search path, most likely the current directory.</p>

<p>Python is searching for modules using sys.path, which normally includes the current directory before the standard site-packages, which contains the expected random.py.</p>

<p>This is expected to be fixed in Python 3.0, so that you can't import modules from the current directory without using a special import syntax.</p>

<p>Just remove the random.py + random.pyc in the directory you're running python from and it'll work fine.</p>
"
78397,1666,2008-09-16T23:39:31Z,78238,1,"<p>You might want to look at <a href=""http://clutter-project.org/"" rel=""nofollow"">Clutter</a>, it looks pretty cool. I haven't used it yet but I intend to in an upcoming personal project.</p>
"
78404,NA,2008-09-16T23:41:09Z,78238,12,"<p>This is not an answer, more of a plea: Please don't do that.</p>

<p>Your reimplemented widgets will lack all sorts of functionality that users will miss. Will your text-entry boxes support drag'n'drop? Copy/paste? Right-to-left scripts? Drag-select? Double-click-select? Will all these mechanisms follow the native conventions of each platform you support?</p>

<p>With Wx your widgets might look inconsistant with the app, but at least they'll look consistant with the OS which is just as important. And more importantly, they'll do what users expect.</p>

<p>(edit) Three posts, and -3 points? Screw this den of karma-whores. Original poster: I have implemented a basic set of widgets in OpenGL (for a game UI) and it was an endless nightmare of a job.</p>
"
78424,13091,2008-09-16T23:45:56Z,75798,3,"<p>I have two friends who originally started writing an application using Ruby on Rails, but ran into a number of issues and limitations.  After about 8 weeks of working on it, they decided to investigate other alternatives.</p>

<p>They settled on the <a href=""http://www.catalystframework.org"" rel=""nofollow"">Catalyst Framework</a>, and Perl.  That was about 4 months ago now, and they've repeatedly talked about how much better the application is going, and how much more flexibility they have.</p>

<p>With Perl, you have all of CPAN available to you, along with the large quantity of tools included.  I'd suggest taking a look at it, at least.</p>
"
78433,14345,2008-09-16T23:47:16Z,77552,-6,"<p>Because python is a dynamic language, it's not usually a good idea to give a variable and a function the same name.  id() is a function in python, so it's recommend not to use a variable named id.  Bearing that in mind, that applies to all functions that you might use... a variable shouldn't have the same name as a function.</p>
"
78459,14424,2008-09-16T23:53:40Z,78431,2,"<p>There is also the commands module:</p>

<pre><code>import commands

status, output = commands.getstatusoutput(""gvimdiff &lt;(hg cat file.txt) file.txt"")
</code></pre>

<p>There is also the popen set of functions, if you want to actually grok the data from a command as it is running.</p>
"
78481,14424,2008-09-16T23:57:24Z,78431,-1,"<p>It just dawned on me that you are probably looking for one of the popen functions.</p>

<p>from: <a href=""http://docs.python.org/lib/module-popen2.html"" rel=""nofollow"">http://docs.python.org/lib/module-popen2.html</a></p>

<p>popen3(cmd[, bufsize[, mode]])
    Executes cmd as a sub-process. Returns the file objects (child_stdout, child_stdin, child_stderr). </p>

<p>namaste,
Mark</p>
"
78482,14122,2008-09-16T23:57:32Z,78431,8,"<p>It can be done. As of Python 2.5, however, this mechanism is Linux-specific and not portable:</p>

<pre><code>import subprocess
import sys

file = sys.argv[1]
p1 = subprocess.Popen(['hg', 'cat', file], stdout=subprocess.PIPE)
p2 = subprocess.Popen([
    'gvimdiff',
    '/proc/self/fd/%s' % p1.stdout.fileno(),
    file])
p2.wait()
</code></pre>

<p>That said, in the specific case of diff, you can simply take one of the files from stdin, and remove the need to use the bash-alike functionality in question:</p>

<pre><code>file = sys.argv[1]
p1 = subprocess.Popen(['hg', 'cat', file], stdout=subprocess.PIPE)
p2 = subprocess.Popen(['diff', '-', file], stdin=p1.stdout)
diff_text = p2.communicate()[0]
</code></pre>
"
78483,7829,2008-09-16T23:57:37Z,78238,1,"<p>Try Qt instead of wx.</p>

<p>QT is cross platform, and you can style things alot using CSS. It's extremely well documented and has excellent python bindings. In point of fact, I use the C++ documentation and not the PyQT documentation.</p>
"
78589,NA,2008-09-17T00:14:41Z,78238,3,"<p>Python + Qt + OpenGL -
I surely believe any application can be written faster and better using python.
QT4 is cross-platform, beautifull, implements everything you need from widgets (acessibility, etc...), and...it integrates with OpenGL. That means, you can simply have a widget that is a viewport to openGL stuff you render in your code.</p>

<p>Another 3D capable solution  that would cover most things, but not so nioce on user interface is to extend Blender3D with a python script. It has the 3d capabilities and rendering , you script it in python all of the same, and it would be cross platform - and you get higher level tools for woriking with the 3D things than openGL alone.
There are obvious drawbacks, mainly from the UI standpoint when compared with PyQT but it could be done. </p>
"
78702,3002,2008-09-17T00:40:54Z,78450,0,"<blockquote>
  <p>[...] In any style command <strong>the first row
  index</strong> may be set to one of the special strings [...]</p>
</blockquote>

<p>In your first example you're setting the <em>second</em> row index to a special string as well.</p>

<p>Not sure why the other two don't work... Are you sure this is where the exception is coming from?</p>
"
78855,12892,2008-09-17T01:11:41Z,78799,1,"<p>No, composition does not mean nesting.
It would make sense to have a nested class if you want to hide it more in the namespace of the outer class.</p>

<p>Anyway, I don't see any practical use for nesting in your case. It would make the code harder to read (understand) and it would also increase the indentation which would make the lines shorter and more prone to splitting.</p>
"
78858,3002,2008-09-17T01:12:59Z,78799,72,"<p>You might want to do this when the ""inner"" class is a one-off, which will never be used outside the <em>definition</em> of the outer class. For example to use a metaclass, it's sometimes handy to do</p>

<pre><code>class Foo(object):
    class __metaclass__(type):
        ....
</code></pre>

<p>instead of defining a metaclass separately, if you're only using it once.</p>

<p>The only other time I've used nested classes like that, I used the outer class only as a namespace to group a bunch of closely related classes together:</p>

<pre><code>class Group(object):
    class cls1(object):
       ...

    class cls2(object):
       ...
</code></pre>

<p>Then from another module, you can import Group and refer to these as Group.cls1, Group.cls2 etc. However one might argue that you can accomplish exactly the same (perhaps in a less confusing way) by using a module.</p>
"
78868,4850,2008-09-17T01:14:33Z,78799,14,"<p>I don't know Python, but your question seems very general. Ignore me if it's specific to Python.</p>

<p>Class nesting is all about scope. If you think that one class will only make sense in the context of another one, then the former is probably a good candidate to become a nested class.</p>

<p>It is a common pattern make helper classes as private, nested classes.</p>
"
78923,8002,2008-09-17T01:26:43Z,78431,2,"<p>This is actually an example in the <a href=""https://docs.python.org/2.4/lib/node242.html"" rel=""nofollow"">docs</a>:</p>

<pre><code>p1 = Popen([""dmesg""], stdout=PIPE)
p2 = Popen([""grep"", ""hda""], stdin=p1.stdout, stdout=PIPE)
output = p2.communicate()[0]
</code></pre>

<p>which means for you:</p>

<pre><code>import subprocess
import sys

file = sys.argv[1]
p1 = Popen([""hg"", ""cat"", file], stdout=PIPE)
p2 = Popen([""gvimdiff"", ""file.txt""], stdin=p1.stdout, stdout=PIPE)
output = p2.communicate()[0]
</code></pre>

<p>This removes the use of the linux-specific /proc/self/fd bits, making it probably work on other unices like Solaris and the BSDs (including MacOS) and maybe even work on Windows.</p>
"
78968,14107,2008-09-17T01:34:41Z,78799,2,"<p>You could be using a class as class generator. Like (in some off the cuff code :)</p>

<pre><code>class gen(object):
    class base_1(object): pass
    ...
    class base_n(object): pass

    def __init__(self, ...):
        ...
    def mk_cls(self, ..., type):
        '''makes a class based on the type passed in, the current state of
           the class, and the other inputs to the method'''
</code></pre>

<p>I feel like when you need this functionality it will be very clear to you. If you don't need to be doing something similar than it probably isn't a good use case.</p>
"
78990,6043,2008-09-17T01:38:24Z,78900,4,"<p>You've got a couple options. One is to write a supressions file for valgrind that turns off reporting of stuff that you're not working on. Python has such a file, for example: 
<a href=""http://svn.python.org/projects/python/trunk/Misc/valgrind-python.supp"" rel=""nofollow"">http://svn.python.org/projects/python/trunk/Misc/valgrind-python.supp</a></p>

<p>If valgrind doesn't like your setup, another possibility is using <code>libmudflap</code>; you compile your program with <code>gcc -fmudflap -lmudflap</code>, and the resulting code is instrumented for pointer debugging. Described in the gcc docs, and here: <a href=""http://gcc.gnu.org/wiki/Mudflap_Pointer_Debugging"" rel=""nofollow"">http://gcc.gnu.org/wiki/Mudflap_Pointer_Debugging</a></p>
"
79094,14648,2008-09-17T01:52:55Z,78799,4,"<p>There is really no benefit to doing this, except if you are dealing with metaclasses.</p>

<p>the class: suite really isn't what you think it is. It is a weird scope, and it does strange things. It really doesn't even make a class! It is just a way of collecting some variables - the name of the class, the bases, a little dictionary of attributes, and a metaclass.</p>

<p>The name, the dictionary and the bases are all passed to the function that is the metaclass, and then it is assigned to the variable 'name' in the scope where the class: suite was.</p>

<p>What you can gain by messing with metaclasses, and indeed by nesting classes within your stock standard classes, is harder to read code, harder to understand code, and odd errors that are terribly difficult to understand without being intimately familiar with why the 'class' scope is entirely different to any other python scope.</p>
"
79198,7851,2008-09-17T02:13:34Z,77552,38,"<p><code>id</code> is a built-in function that gives the memory address of an object. If you name one of your functions <code>id</code>, you will have to say <code>__builtins__.id</code> to get the original. Renaming <code>id</code> globally is confusing in anything but a small script. </p>

<p>However, reusing built-in names as variables isn't all that bad as long as the use is local. Python has a <em>lot</em> of built-in functions that (1) have common names and (2) you will not use much anyway. Using these as local variables or as members of an object is OK because it's obvious from context what you're doing:</p>

<p>Example:</p>

<pre><code>def numbered(filename):
  file = open(filename)
  for i,input in enumerate(file):
    print ""%s:\t%s"" % (i,input)
  file.close()
</code></pre>

<p>Some built-ins with tempting names: </p>

<ul>
<li><code>id</code></li>
<li><code>file</code></li>
<li><code>list</code></li>
<li><code>map</code></li>
<li><code>all</code>, <code>any</code></li>
<li><code>complex</code></li>
<li><code>dir</code></li>
<li><code>input</code></li>
<li><code>slice</code></li>
<li><code>buffer</code></li>
</ul>
"
79667,14640,2008-09-17T03:30:19Z,79454,-2,"<p>Unit tests are really useful when you refactor your code (ie. completely rewrite or move a module). As long as you have unit tests before you do the big changes, you'll have confidence that you havent forgotten to move or include something when you finish.</p>
"
79670,14648,2008-09-17T03:31:07Z,79602,3,"<p>There are some pretty serious concerns here for how to send email automatically, and here are a few:</p>

<p>Use an email library. Python includes one called 'email'. This is your friend, it will stop you from doing anything tragically wrong. Read an example from <a href=""http://docs.python.org/lib/node161.html"" rel=""nofollow"">the Python Manual</a>.</p>

<p>Some points that will stop you from getting blocked by spam filters:</p>

<p>Always send from a valid email address. You must be able to send email to this address and have it received (it can go into /dev/null after it's received, but it must be possible to /deliver/ there). This will stop spam filters that do Sender Address Verification from blocking your mail.</p>

<p>The email address you send from on the server.sendmail(fromaddr, [toaddr]) line will be where bounces go. The From: line in the email is a totally different address, and that's where mail will go when the user hits 'Reply:'. Use this to your advantage, bounces can go to one place, while reply goes to another.</p>

<p>Send email to a local mail server, I recommend postfix. This local server will receive your mail and be responsible for sending it to your upstream server. Once it has been delivered to the local server, treat it as 'sent' from a programmatic point of view.</p>

<p>If you have a site that is on a static ip in a datacenter of good reputation, don't be afraid to simply relay the mail directly to the internet. If you're in a datacenter full of script kiddies and spammers, you will need to relay this mail via a public MTA of good reputation, hopefully you will be able to work this out without a hassle.</p>

<p>Don't send an email in only HTML. Always send it in Plain and HTML, or just Plain. Be nice, I use a text only email client, and you don't want to annoy me.</p>

<p>Verify that you're not running SPF on your email domain, or get it configured to allow your server to send the mail. Do this by doing a TXT lookup on your domain.</p>

<pre><code>$ dig google.com txt
...snip...
;; ANSWER SECTION:
google.com. 	300	IN	TXT	""v=spf1 include:_netblocks.google.com ~all""
</code></pre>

<p>As you can see from that result, there's an SPF record there. If you don't have SPF, there won't be a TXT record. Read more about <a href=""http://en.wikipedia.org/wiki/Sender_Policy_Framework"" rel=""nofollow"">SPF on wikipedia</a>.</p>

<p>Hope that helps.</p>
"
79743,2424,2008-09-17T03:44:00Z,79602,2,"<p>Some general information with regards to automated mail processing...</p>

<p>First, the mail server ""brand"" itself isn't that important for broadcasting or receiving emails.  All of them support the standard smtp / pop3 communications protocol. Most even have IMAP support and have some level of spam filtering.  That said, try to use a current generation email server.</p>

<p>Second, be aware that in an effort to reduce spam a lot of the receiving mail servers out there will simply throw a message away instead of responding back that a mail account doesn't exist.  Which means you may not receive those.</p>

<p>Bear in mind that getting past spam filters is an art.  A number of isp's watch for duplicate messages, messages that <em>look</em> like spam based on keywords or other content, etc.  This is sometimes independent of the quantity of messages sent; I've seen messages with as few as 50 copies get blocked by AOL even though they were legitimate emails.  So, testing is your friend and look into <a href=""http://en.wikipedia.org/wiki/Anti-spam_techniques_(e-mail)"" rel=""nofollow"">this article on wikipedia</a> on anti-spam techniques.  Then make sure your not doing that crap.</p>

<p>**</p>

<p>As far as processing the messages, just remember it's a queued system.  Connect to the server via POP3 to retrieve messages, open it, do some action, delete the message or archive it, and move on.</p>

<p>With regards to bouncebacks, let the mail server do most of the work.  You should be able to configure it to notify a certain email account on the server in the event that it is unable to deliver a message.  You can check that account periodically and process the Non Delivery Reports as necessary.</p>
"
79744,14794,2008-09-17T03:44:12Z,77086,81,"<p>It sounds like you don't want to compare the two <strong>languages</strong>, but that you want to compare two <strong>web systems</strong>.</p>

<p>This is tricky, because there are many variables involved.</p>

<p>For example, Python web applications can take advantage of <a href=""http://code.google.com/p/modwsgi/"">mod_wsgi</a> to talk to web servers, which is faster than any of the typical ways that PHP talks to web servers (even mod_php ends up being slower if you're using Apache, because Apache can only use the Prefork MPM with mod_php rather than multi-threaded MPM like Worker).</p>

<p>There is also the issue of code compilation. As you know, Python is compiled just-in-time to byte code (.pyc files) when a file is run each time the file changes. Therefore, after the first run of a Python file, the compilation step is skipped and the Python interpreter simply fetches the precompiled .pyc file. Because of this, one could argue that Python has a native advantage over PHP. However, optimizers and caching systems can be installed for PHP websites (my favorite is <a href=""http://eaccelerator.net/"">eAccelerator</a>) to much the same effect.</p>

<p>In general, enough tools exist such that one can pretty much do everything that the other can do. Of course, as others have mentioned, there's more than just speed involved in the business case to switch languages. We have an app written in oCaml at my current employer, which turned out to be a mistake because the original author left the company and nobody else wants to touch it. Similarly, the PHP-web community is much larger than the Python-web community; Website hosting services are more likely to offer PHP support than Python support; etc.</p>

<p>But back to speed. You must recognize that the question of speed here involves many moving parts. Fortunately, many of these parts can be independently optimized, affording you various avenues to seek performance gains.</p>
"
79808,14877,2008-09-17T03:54:39Z,79797,20,"<pre><code>def local_to_utc(t):
    secs = time.mktime(t)
    return time.gmtime(secs)

def utc_to_local(t):
    secs = calendar.timegm(t)
    return time.localtime(secs)
</code></pre>

<p>Source: <a href=""http://feihonghsu.blogspot.com/2008/02/converting-from-local-time-to-utc.html"">http://feihonghsu.blogspot.com/2008/02/converting-from-local-time-to-utc.html</a></p>

<p>Example usage from <a href=""http://stackoverflow.com/users/8171/bd808"">bd808</a>: If your source is a <code>datetime.datetime</code> object <code>t</code>, call as:</p>

<pre><code>local_to_utc(t.timetuple())
</code></pre>
"
79826,6043,2008-09-17T03:58:24Z,79754,10,"<p>Don't try to run <code>unittest.main()</code> from IDLE. It's trying to access <code>sys.argv</code>, and it's getting the args that IDLE was started with. Either run your tests in a different way from IDLE, or call <code>unittest.main()</code> in its own Python process.</p>
"
79833,14057,2008-09-17T03:59:27Z,79754,10,"<p>Your example is exiting on my install too.  I can make it execute the tests and stay within Python by changing</p>

<pre><code>unittest.main()
</code></pre>

<p>to</p>

<pre><code>unittest.TextTestRunner().run(unittest.TestLoader().loadTestsFromTestCase(Test))
</code></pre>

<p>More information is available <a href=""http://docs.python.org/library/unittest.html#basic-example"" rel=""nofollow"">here</a> in the Python Library Reference.</p>
"
79840,14794,2008-09-17T04:01:08Z,68645,2,"<p>To avoid any potential confusion, I would like to contrast static variables and immutable objects.</p>

<p>Some primitive object types like integers, floats, strings, and touples are immutable in Python. This means that the object that is referred to by a given name cannot change if it is of one of the aforementioned object types. The name can be reassigned to a different object, but the object itself may not be changed.</p>

<p>Making a variable static takes this a step further by disallowing the variable name to point to any object but that to which it currently points. (Note: this is a general software concept and not specific to Python; please see others' posts for information about implementing statics in Python).</p>
"
79877,3560,2008-09-17T04:07:28Z,79797,137,"<p>First, parse the string into a naive datetime object. This is an instance of <code>datetime.datetime</code> with no attached timezone information. See documentation for <code>datetime.strptime</code> for information on parsing the date string.</p>

<p>Use the <a href=""http://pytz.sourceforge.net/""><code>pytz</code></a> module, which comes with a full list of time zones + UTC. Figure out what the local timezone is, construct a timezone object from it, and manipulate and attach it to the naive datetime.</p>

<p>Finally, use <code>datetime.astimezone()</code> method to convert the datetime to UTC.</p>

<p>Source code, using local timezone ""America/Los_Angeles"", for the string ""2001-2-3 10:11:12"":</p>

<pre><code>import pytz, datetime
local = pytz.timezone (""America/Los_Angeles"")
naive = datetime.datetime.strptime (""2001-2-3 10:11:12"", ""%Y-%m-%d %H:%M:%S"")
local_dt = local.localize(naive, is_dst=None)
utc_dt = local_dt.astimezone (pytz.utc)
</code></pre>

<p>From there, you can use the <code>strftime()</code> method to format the UTC datetime as needed:</p>

<pre><code>utc_dt.strftime (""%Y-%m-%d %H:%M:%S"")
</code></pre>
"
79913,3715,2008-09-17T04:15:39Z,79797,51,"<p>Thanks @rofly, the full conversion from string to string is as follows:</p>

<pre><code>time.strftime(""%Y-%m-%d %H:%M:%S"", 
              time.gmtime(time.mktime(time.strptime(""2008-09-17 14:04:00"", 
                                                    ""%Y-%m-%d %H:%M:%S""))))
</code></pre>

<p>My summary of the <code>time</code>/<code>calendar</code> functions:</p>

<p><code>time.strptime</code><br>
string --> tuple (no timezone applied, so matches string)</p>

<p><code>time.mktime</code><br>
local time tuple --> seconds since epoch (always local time)</p>

<p><code>time.gmtime</code><br>
seconds since epoch --> tuple in UTC</p>

<p>and </p>

<p><code>calendar.timegm</code><br>
tuple in UTC --> seconds since epoch</p>

<p><code>time.localtime</code><br>
seconds since epoch --> tuple in local timezone</p>
"
79932,3560,2008-09-17T04:19:45Z,79754,5,"<p>Pop open the source code to <code>unittest.py</code>. <code>unittest.main()</code> is hard-coded to call <code>sys.exit()</code> after running all tests. Use <code>TextTestRunner</code> to run test suites from the prompt.</p>
"
79985,14648,2008-09-17T04:27:32Z,79968,253,"<p>You want split, from the <a href=""https://docs.python.org/2/library/shlex.html"">shlex</a> module.</p>

<pre><code>&gt;&gt;&gt; import shlex
&gt;&gt;&gt; shlex.split('this is ""a test""')
['this', 'is', 'a test']
</code></pre>

<p>This should do exactly what you want.</p>
"
79989,6043,2008-09-17T04:27:59Z,79968,45,"<p>Have a look at the <code>shlex</code> module, particularly <code>shlex.split</code>.</p>

<blockquote>
  <p><code>&gt;&gt;&gt; import shlex</code></p>
  
  <p><code>&gt;&gt;&gt; shlex.split('This is ""a test""')</code></p>
  
  <p><code>['This', 'is', 'a test']</code></p>
</blockquote>
"
80000,14794,2008-09-17T04:29:45Z,70528,11,"<p>Similar behavior exists when module attribute names begin with a single underscore (e.g. _foo).</p>

<p>Module attributes named as such will not be copied into an importing module when using the <code>from*</code> method, e.g.:</p>

<pre><code>from bar import *
</code></pre>

<p>However, this is a convention and not a language constraint. These are not private attributes; they can be referenced and manipulated by any importer. Some argue that because of this, Python can not implement true encapsulation.</p>
"
80008,14107,2008-09-17T04:31:02Z,70653,9,"<p>dbr said:</p>

<blockquote>
<pre><code>def hash_password(password):
    """"""Returns the hashed version of a string
    """"""
    return hasher.new( str(password) ).hexdigest()
</code></pre>
</blockquote>

<p>This is a really insecure way to hash passwords. You <em>don't</em> want to do this. If you want to know why read the <a href=""http://www.openbsd.org/papers/bcrypt-paper.pdf"">Bycrypt Paper</a> by the guys who did the password hashing system for OpenBSD. Additionally if want a good discussion on how passwords are broken check out <a href=""http://www.securityfocus.com/columnists/388"">this interview</a> with the author of Jack the Ripper (the popular unix password cracker).</p>

<p>Now B-Crypt is great but I have to admit I don't use this system because I didn't have the EKS-Blowfish algorithm available and did not want to implement it my self. I use a slightly updated version of the FreeBSD system which I will post below. The gist is this. Don't just hash the password. Salt the password then hash the password and repeat 10,000 or so times.</p>

<p>If that didn't make sense here is the code: </p>

<pre><code>#note I am using the Python Cryptography Toolkit
from Crypto.Hash import SHA256

HASH_REPS = 50000

def __saltedhash(string, salt):
    sha256 = SHA256.new()
    sha256.update(string)
    sha256.update(salt)
    for x in xrange(HASH_REPS): 
        sha256.update(sha256.digest())
        if x % 10: sha256.update(salt)
    return sha256

def saltedhash_bin(string, salt):
    """"""returns the hash in binary format""""""
    return __saltedhash(string, salt).digest()

def saltedhash_hex(string, salt):
    """"""returns the hash in hex format""""""
    return __saltedhash(string, salt).hexdigest()
</code></pre>

<p>For deploying a system like this the key thing to consider is the HASH_REPS constant. This is the scalable cost factor in this system. You will need to do testing to determine what is the exceptable amount of time you want to wait for each hash to be computed versus the  risk of an offline dictionary based attack on your password file. </p>

<p>Security is hard, and the method I present is not the best way to do this, but it is significantly better than a simple hash. Additionally it is dead simple to implement. So even you don't choose a more complex solution this isn't the worst out there.</p>

<p>hope this helps,
Tim</p>
"
80015,8002,2008-09-17T04:31:38Z,79968,-2,"<p>Try this:</p>

<pre><code>  def adamsplit(s):
    result = []
    inquotes = False
    for substring in s.split('""'):
      if not inquotes:
        result.extend(substring.split())
      else:
        result.append(substring)
      inquotes = not inquotes
    return result
</code></pre>

<p>Some test strings:</p>

<pre><code>'This is ""a test""' -&gt; ['This', 'is', 'a test']
'""This is \'a test\'""' -&gt; [""This is 'a test'""]
</code></pre>
"
80028,1695,2008-09-17T04:33:46Z,79454,7,"<p><strong>If you are writing your tests after you've written your code and making them pass, you are not doing TDD</strong> (nor are you getting any benefits of Test-First or Test-Driven development.. check out SO questions for definitive books on TDD)</p>

<blockquote>
  <p>One of the things I've noticed with
  using mocker is that it's easier to
  write the application code first and
  then go back and write the tests
  second, since most of the time I'm
  mocking many method calls and the
  syntax to write the mocked calls is
  much more verbose (thus harder to
  write) than the application code. It's
  easier to write the app code and then
  model the test code off of that.</p>
</blockquote>

<p>Of course, its easier because you are just testing that the sky is orange after you made it orange by painting it with a specific kind of brush. 
This is retrofitting tests (for self-assurance). Mocks are good but you should know how and when to use them - Like the saying goes 'When you have a hammer everything looks like a nail' It's also easy to write a whole load of unreadable and not-as-helpful-as-can-be  tests. The time spent understanding what the test is about is time lost that can be used to fix broken ones. </p>

<p>And the point is: </p>

<ul>
<li>Read <a href=""http://martinfowler.com/articles/mocksArentStubs.html#ClassicalAndMockistTesting"">Mocks aren't stubs - Martin Fowler</a> if you haven't already. Google out some documented instances of good <a href=""http://martinfowler.com/eaaDev/ModelViewPresenter.html"">ModelViewPresenter</a> patterned GUIs (Fake/Mock out the UIs if necessary). </li>
<li>Study your options and choose wisely. I'll play the guy with the halo on your left shoulder in white saying 'Don't do it.' Read this question as to <a href=""http://stackoverflow.com/questions/59195/how-are-mocks-meant-to-be-used"">my reasons</a> -  St. Justin  is on your right shoulder. I believe he has also something to say:) </li>
</ul>
"
80361,14351,2008-09-17T05:46:57Z,79968,-1,"<p>If you don't care about sub strings than a simple</p>

<pre><code>&gt;&gt;&gt; 'a short sized string with spaces '.split()
</code></pre>

<p>Performance:</p>

<pre><code>&gt;&gt;&gt; s = "" ('a short sized string with spaces '*100).split() ""
&gt;&gt;&gt; t = timeit.Timer(stmt=s)
&gt;&gt;&gt; print ""%.2f usec/pass"" % (1000000 * t.timeit(number=100000)/100000)
171.39 usec/pass
</code></pre>

<p>Or string module</p>

<pre><code>&gt;&gt;&gt; from string import split as stringsplit; 
&gt;&gt;&gt; stringsplit('a short sized string with spaces '*100)
</code></pre>

<p>Performance: String module seems to perform better than string methods</p>

<pre><code>&gt;&gt;&gt; s = ""stringsplit('a short sized string with spaces '*100)""
&gt;&gt;&gt; t = timeit.Timer(s, ""from string import split as stringsplit"")
&gt;&gt;&gt; print ""%.2f usec/pass"" % (1000000 * t.timeit(number=100000)/100000)
154.88 usec/pass
</code></pre>

<p>Or you can use RE engine</p>

<pre><code>&gt;&gt;&gt; from re import split as resplit
&gt;&gt;&gt; regex = '\s+'
&gt;&gt;&gt; medstring = 'a short sized string with spaces '*100
&gt;&gt;&gt; resplit(regex, medstring)
</code></pre>

<p>Performance</p>

<pre><code>&gt;&gt;&gt; s = ""resplit(regex, medstring)""
&gt;&gt;&gt; t = timeit.Timer(s, ""from re import split as resplit; regex='\s+'; medstring='a short sized string with spaces '*100"")
&gt;&gt;&gt; print ""%.2f usec/pass"" % (1000000 * t.timeit(number=100000)/100000)
540.21 usec/pass
</code></pre>

<p>For very long strings you should not load the entire string into memory and instead either split the lines or use an iterative loop</p>
"
80362,11229,2008-09-17T05:47:09Z,80347,3,"<p>These may be a bit heavy for you depending on your needs but:
<a href=""http://www.nservicebus.com/"" rel=""nofollow"">http://www.nservicebus.com/</a>
<a href=""http://blog.phatboyg.com/masstransit/"" rel=""nofollow"">http://blog.phatboyg.com/masstransit/</a></p>
"
80420,9510,2008-09-17T06:01:53Z,79850,-2,"<p>As GAE builds on how data is managed in Django there is a lot of info on how to address similar questions in the Django documentation (for example see <a href=""http://www.djangobook.com/en/1.0/chapter05/"" rel=""nofollow"">here</a>, scroll down to 'Your first model').</p>

<p>In short you design you db model as a regular object model and let GAE sort out all of the object-relational mappings. </p>
"
80425,11521,2008-09-17T06:02:38Z,79850,18,"<p>Designing a bigtable schema is an open process, and basically requires you to think about:</p>

<ul>
<li>The access patterns you will be using and how often each will be used</li>
<li>The relationships between your types</li>
<li>What indices you are going to need</li>
<li>The write patterns you will be using (in order to effectively spread load)</li>
</ul>

<p>GAE's datastore automatically denormalizes your data. That is, each index contains a (mostly) complete copy of the data, and thus every index adds significantly to time taken to perform a write, and the storage space used.</p>

<p>If this were not the case, designing a Datastore schema would be a lot more work: You would have to think carefully about the primary key for each type, and consider the effect of your decision on the locality of data. For example, when rendering a blog post you would probably need to display the comments to go along with it, so each comment's key would probably begin with the associated post's key.</p>

<p>With Datastore, this is not such a big deal: The query you use will look something like ""Select * FROM Comment WHERE post_id = N."" (If you want to page the comments, you would also have a limit clause, and a possible suffix of "" AND comment_id > last_comment_id"".) Once you add such a query, Datastore will build the index for you, and your reads will be magically fast.</p>

<p>Something to keep in mind is that each additional index creates some additional cost: it is best if you can use as few access patterns as possible, since it will reduce the number of indices GAE will construct, and thus the total storage required by your data.</p>

<p>Reading over this answer, I find it a little vague. Maybe a hands-on design question would help to scope this down? :-)</p>
"
80449,15109,2008-09-17T06:08:38Z,79968,8,"<p>Since this question is tagged with regex, I decided to try a regex approach. I first replace all the spaces in the quotes parts with \x00, then split by spaces, then replace the \x00 back to spaces in each part.</p>

<p>Both versions do the same thing, but splitter is a bit more readable then splitter2.</p>

<pre><code>import re

s = 'this is ""a test"" some text ""another test""'

def splitter(s):
    def replacer(m):
        return m.group(0).replace("" "", ""\x00"")
    parts = re.sub('"".+?""', replacer, s).split()
    parts = [p.replace(""\x00"", "" "") for p in parts]
    return parts

def splitter2(s):
    return [p.replace(""\x00"", "" "") for p in re.sub('"".+?""', lambda m: m.group(0).replace("" "", ""\x00""), s).split()]

print splitter2(s)
</code></pre>
"
80596,11485,2008-09-17T06:45:50Z,80215,1,"<p>As far as I know that is not possible. It is not an open source database, so writing drivers for it is really hard.</p>
"
80737,14946,2008-09-17T07:15:12Z,49307,1,"<p>I second mattiast's answer.</p>

<p>But, to dig a little deeper, is there no way to vectorize what you're trying to accomplish and avoid the iterative for loop?  Perhaps with more details about what goes on inside the loop we could help vectorize the solution...</p>
"
80864,7829,2008-09-17T07:42:21Z,80347,0,"<p>Again, my be overkill, but the <a href=""http://ose.sf.net"" rel=""nofollow"">OSE</a> library allows thins kind of thing.</p>
"
80992,2963,2008-09-17T08:05:09Z,76096,3,"<p>Depending on just how dependency-averse you are, and what kind of text editor you're building, <a href=""http://projects.gnome.org/gtksourceview/"" rel=""nofollow"">GtkSourceView</a> adds undo/redo among many other things. Very worth looking at if you want some of the other <a href=""http://projects.gnome.org/gtksourceview/features.html"" rel=""nofollow"">features</a> it offers.</p>
"
81002,14351,2008-09-17T08:06:22Z,68645,19,"<p>You can also add class variables to classes on the fly</p>

<pre><code>&gt;&gt;&gt; class X:
...     pass
... 
&gt;&gt;&gt; X.bar = 0
&gt;&gt;&gt; x = X()
&gt;&gt;&gt; x.bar
0
&gt;&gt;&gt; x.foo
Traceback (most recent call last):
  File ""&lt;interactive input&gt;"", line 1, in &lt;module&gt;
AttributeError: X instance has no attribute 'foo'
&gt;&gt;&gt; X.foo = 1
&gt;&gt;&gt; x.foo
1
</code></pre>

<p>And class instances can change class variables</p>

<pre><code>class X:
  l = []
  def __init__(self):
    self.l.append(1)

print X().l
print X().l

&gt;python test.py
[1]
[1, 1]
</code></pre>
"
81051,14057,2008-09-17T08:15:58Z,80993,0,"<p>If you call</p>

<pre><code>import os
os._exit(0)
</code></pre>

<p>the exit handlers will not be called, yours or those registered by other modules in the application.</p>
"
81087,5353,2008-09-17T08:21:20Z,80993,5,"<p>I don't really know why you want to do that, but you can install an excepthook that will be called by Python whenever an uncatched exception is raised, and in it clear the array of registered function in the <code>atexit</code> module.</p>

<p>Something like that :</p>

<pre><code>import sys
import atexit

def clear_atexit_excepthook(exctype, value, traceback):
    atexit._exithandlers[:] = []
    sys.__excepthook__(exctype, value, traceback)

def helloworld():
    print ""Hello world!""

sys.excepthook = clear_atexit_excepthook
atexit.register(helloworld)

raise Exception(""Good bye cruel world!"")
</code></pre>

<p>Beware that it may behave incorrectly if the exception is raised from an <code>atexit</code> registered function (but then the behaviour would have been strange even if this hook was not used).</p>
"
81106,10432,2008-09-17T08:25:06Z,80617,0,"<p>If you aren't looking to use twisted there was a great guide I used a while back. Here is the <a href=""http://www.nightmare.com/pythonwin/async_sockets.html"" rel=""nofollow"">link to it</a>.</p>
"
81107,11527,2008-09-17T08:25:14Z,80993,0,"<p>In addition to calling os._exit() to avoid the registered exit handler you also need to catch the unhandled exception:</p>

<pre><code>import atexit
import os

def helloworld():
    print ""Hello World!""

atexit.register(helloworld)    

try:
    raise Exception(""Good bye cruel world!"")

except Exception, e:
    print 'caught unhandled exception', str(e)

    os._exit(1)
</code></pre>
"
81274,3171,2008-09-17T08:57:41Z,81191,3,"<p>My guess is as follows.  The PythonWin editor offers autocomplete for an object, i.e. when you type <code>myobject.</code> it offers a little popup of all the availble method names.  So I think when you type <code>X().</code> it's creating an instance of <code>X</code> in the background and doing a <code>dir</code> or similar to find out the attributes of the object.</p>

<p>So the constructor is only being run <em>once for each object</em> but to give you the interactivity it's creating objects silently in the background without telling you about it.</p>
"
81301,12138,2008-09-17T09:02:07Z,75621,1,"<p><em>Unbound</em> means there is no data associated with form (either initial or provided later), so the validation may fail. As mentioned in other answers (and in your own conclusion), you have to provide initial values and check for both bound data and initial values.</p>

<p>The use case for forms is form processing <strong>and</strong> validation, so you must have some data to validate before you accessing <code>cleaned_data</code>.</p>
"
81456,13564,2008-09-17T09:29:45Z,80617,63,"<p>Twisted contains a <a href=""http://twistedmatrix.com/projects/core/documentation/howto/index.html"">large number of examples</a>.  One in particular, the <a href=""http://twistedmatrix.com/projects/core/documentation/howto/tutorial/intro.html"">""evolution of Finger"" tutorial</a>, contains a thorough explanation of how an asynchronous program grows from a very small kernel up to a complex system with lots of moving parts.  Another one that might be of interest to you is the tutorial about simply <a href=""http://twistedmatrix.com/projects/core/documentation/howto/servers.html"">writing servers</a>.</p>

<p>The key thing to keep in mind about Twisted, or even other asynchronous networking libraries (such as <a href=""http://www.python.org/doc/current/lib/module-asyncore.html"">asyncore</a>, <a href=""http://mina.apache.org/"">MINA</a>, or <a href=""http://www.cs.wustl.edu/~schmidt/ACE-overview.html"">ACE</a>), is that your code only gets invoked when something happens.  The part that I've heard most often sound like ""voodoo"" is the management of callbacks: for example, <code>Deferred</code>.  If you're used to writing code that runs in a straight line, and only calls functions which return immediately with results, the idea of waiting for something to call you back might be confusing.  But there's nothing magical, no ""voodoo"" about callbacks.  At the lowest level, the reactor is just sitting around and waiting for one of a small number of things to happen:</p>

<ol>
<li>Data arrives on a connection (it will call <code>dataReceived</code> on a Protocol)</li>
<li>Time has passed (it will call a function registered with <code>callLater</code>).</li>
<li>A connection has been accepted (it will call <code>buildProtocol</code> on a factory registered with a <code>listenXXX</code> or <code>connectXXX</code> function).</li>
<li>A connection has been dropped (it will call <code>connectionLost</code> on the appropriate Protocol)</li>
</ol>

<p>Every asynchronous program starts by hooking up a few of these events and then kicking off the reactor to wait for them to happen.  Of course, events that happen lead to more events that get hooked up or disconnected, and so your program goes on its merry way.  Beyond that, there's nothing special about asynchronous program structure that are interesting or special; event handlers and callbacks are just objects, and your code is run in the usual way.</p>

<p>Here's a simple ""event-driven engine"" that shows you just how simple this process is.</p>

<pre><code># Engine
import time
class SimplestReactor(object):
    def __init__(self):
        self.events = []
        self.stopped = False

    def do(self, something):
        self.events.append(something)

    def run(self):
        while not self.stopped:
            time.sleep(0.1)
            if self.events:
                thisTurn = self.events.pop(0)
                thisTurn()

    def stop(self):
        self.stopped = True

reactor = SimplestReactor()

# Application    
def thing1():
    print 'Doing thing 1'
    reactor.do(thing2)
    reactor.do(thing3)

def thing2():
    print 'Doing thing 2'

def thing3():
    print 'Doing thing 3: and stopping'
    reactor.stop()

reactor.do(thing1)
print 'Running'
reactor.run()
print 'Done!'
</code></pre>

<p>At the core of libraries like Twisted, the function in the main loop is not <code>sleep</code>, but an operating system call like <code>select()</code> or <code>poll()</code>, as exposed by a module like <a href=""http://docs.python.org/lib/module-select.html"">the Python select module</a>.  I say ""like"" <code>select</code>, because this is an API that varies a lot between platforms, and almost every GUI toolkit has its own version.  Twisted currently provides an abstract interface to 14 different variations on this theme.  The common thing that such an API provides is provide a way to say ""Here are a list of events that I'm waiting for.  Go to sleep until one of them happens, then wake up and tell me which one of them it was.""</p>
"
81479,12388,2008-09-17T09:32:32Z,81451,1,"<p>You can not store files as there is not a traditional file system.  You can only store them in their own DataStore (in a field defined as a <a href=""http://code.google.com/appengine/docs/datastore/typesandpropertyclasses.html"" rel=""nofollow"">BlobProperty</a>)</p>

<p>There is an example in the previous link:</p>

<pre><code>class MyModel(db.Model):
  blob = db.BlobProperty()

obj = MyModel()
obj.blob = db.Blob( file_contents )
</code></pre>
"
81489,3171,2008-09-17T09:33:52Z,81451,0,"<p>There's no flat file storing in Google App Engine.  Everything has to go in to the <a href=""http://code.google.com/appengine/docs/datastore/"" rel=""nofollow"">Datastore</a> which is a bit like a relational database but not quite.</p>

<p>You could store the files as <a href=""http://code.google.com/appengine/docs/datastore/typesandpropertyclasses.html#TextProperty"" rel=""nofollow"">TextProperty</a> or <a href=""http://code.google.com/appengine/docs/datastore/typesandpropertyclasses.html#BlobProperty"" rel=""nofollow"">BlobProperty</a> attributes.</p>

<p>There is a 1MB limit on DataStore entries which may or may not be a problem.</p>
"
81699,12138,2008-09-17T10:12:02Z,75798,1,"<p>Personally I made some rather big projects with Django, but I can compare only with said ""montrosities"" (Spring, EJB) and really low-level stuff like Twisted.</p>

<p>Web frameworks using interpreted languages are mostly in its infancy and all of them (actively maintained, that is) are getting better with every day.</p>
"
81751,10661,2008-09-17T10:18:30Z,81191,1,"<p>Two small additional points.</p>

<p>First, <code>self.__class__.l.append(1)</code> isn't really sensible.</p>

<p>Just say <code>self.l.append(1)</code>.  Python searches the instance before it searches the class for the reference.</p>

<p>More importantly, class-level variables are rarely useful.  Class-level constants are sometimes sensible, but even then, they're hard to justify. </p>

<p>In C++ and Java, class-level ('<code>static</code>') variables seem handy, but don't do much of value.  They're hard to teach to n00bz -- often wasting lots of classroom time on minutia -- and they aren't very practical.  If you want to know all instances of an X that was created, it's probably better to create an XFactory class that doesn't rely on class variables.</p>

<pre><code>class XFactory( object ):
    def __init__( self ):
        self.listOfX= []
    def makeX( self, *args, **kw ):
        newX= X(*args,**kw)
        self.listOfX.append(newX)
        return newX
</code></pre>

<p>No class-level variable anomalies.  And, it doesn't conflate the X's with the collection of X's.  In the long run, I find it confusing when a class is both some thing and also some collection of things.</p>

<p>Simpler is better than Complex.</p>
"
82049,9403,2008-09-17T11:08:17Z,79454,-3,"<p><strong>Please remember that TDD is not a panaceum.</strong> It's hard, it's supposed to be hard, and it's especially hard to write mocking tests ""in advance"".</p>

<p>So I would say - do what works for you. Even it's not ""certified TDD"". I do basically the same thing.</p>

<p>You may want to provide your own API for GUI that would sit between controller code and GUI library code. That could be easier to mock, or you can even add some testing hooks to it.</p>

<p>Last but not least, your code doesn't look too unreadable to me. Code using mocks is generally harder to understand. Fortunately in Python mocking is much easier and cleaner than i n other languages.</p>
"
82117,9403,2008-09-17T11:19:11Z,71151,4,"<p>You may be interested in <a href=""http://codespeak.net/lxml/"" rel=""nofollow"">lxml</a>. It is a separate package and has C components, but is the fastest. It has also very nice API, allowing you to easily list links in HTML documents, or list forms, sanitize HTML, and more. It also has capabilities to parse not well-formed HTML (it's configurable).</p>
"
82258,12138,2008-09-17T11:44:49Z,82180,3,"<p>Qt's own OpenGL based surfaces (using QPainter) are known to be much faster than Cairo. Might you explain why you want specifically Cairo in Qt?</p>

<p>For the basics of using QPainter see <a href=""http://www.informit.com/articles/article.aspx?p=1174421"" rel=""nofollow"">this excerpt</a> from the book ""C++ GUI Programming with Qt4"", and while it's C++ code, the PyQt implementation will be parallel.</p>

<p>As for joining Cairo with Qt... <a href=""http://arstechnica.com/news.ars/post/20080818-nokia-helps-port-firefox-to-qt.html"" rel=""nofollow"">This article in ArsTechnica</a> sheds some light - it seems nothing that could help you exists currently (iow., nobody tried such marriage).</p>
"
82690,15460,2008-09-17T12:40:53Z,82653,3,"<p><b>Byteflow</b> is a blog engine, written on Python, using Django</p>
"
82717,1223,2008-09-17T12:43:37Z,82653,4,"<p>James Bennett has an <a href=""http://www.b-list.org/weblog/2007/nov/29/django-blog"" rel=""nofollow"">interesting take</a> on this question:</p>

<blockquote>
  <p>“where can I find a good Django-powered blogging application” is probably at the top of the frequently-asked questions list both on django-users and in the IRC; part of this is simply that, right now, there is no “definitive” Django blogging application; there are a bunch of them available if you go looking, but you’re not likely to get anyone to recommend one of them as “the” Django blogging app (unless the person doing the recommending happens to be the author of one of them). </p>
</blockquote>

<p>The <a href=""http://www.b-list.org/weblog/2007/nov/29/django-blog"" rel=""nofollow"">blog entry</a> also has a list.</p>
"
82739,13144,2008-09-17T12:45:14Z,82653,20,"<p>EDIT: Original link went dead so here's an updated link with extracts of the list sorted with the most recently updated source at the top.</p>

<p><a href=""http://blog.montylounge.com/2010/02/10/eleven-django-blog-engines-you-should-know/"">Eleven Django blog engines you should know</a></p>

<p>by Monty Lounge Industries</p>

<blockquote>
  <ul>
  <li><a href=""http://github.com/eldarion/biblion"">Biblion</a></li>
  <li><a href=""http://bitbucket.org/codekoala/django-articles/"">Django-article</a></li>
  <li><a href=""http://github.com/flother/flother"">Flother</a></li>
  <li><a href=""http://github.com/nathanborror/django-basic-apps"">Basic-Blog</a></li>
  <li><a href=""http://github.com/gregnewman/hello-newman"">Hello-Newman</a></li>
  <li><a href=""http://getbanjo.com/download/"">Banjo</a></li>
  <li><a href=""http://code.google.com/p/djangotechblog/"">djangotechblog</a></li>
  <li><a href=""http://github.com/f4nt/django-yaba/"">Django-YABA</a></li>
  <li><a href=""http://github.com/paltman/shiftingbits/"">Shifting Bits</a> (this is now just a <a href=""http://github.com/eldarion/biblion"">biblion</a> blog)</li>
  <li><a href=""http://github.com/mightylemon/mightylemon"">Mighty Lemon</a></li>
  <li><a href=""http://code.google.com/p/coltrane-blog/"">Coltrane</a></li>
  </ul>
</blockquote>
"
82753,3215,2008-09-17T12:46:38Z,82653,3,"<p>Django's powerful admin interface and easy ORM makes it a 30 minute job to build a blog that propably fits your needs; Why look for a 3rd party product when you can make it yourself very quickly?</p>
"
82836,215086,2008-09-17T12:55:48Z,82831,211,"<pre><code>import os.path

if os.path.isfile(filename):
</code></pre>
"
82841,6445,2008-09-17T12:56:22Z,82831,85,"<pre><code>import os
os.path.exists(filename)
</code></pre>
"
82846,7136,2008-09-17T12:57:08Z,82831,964,"<p>You have the <a href=""https://docs.python.org/2/library/os.path.html#os.path.exists""><code>os.path.exists</code></a> function:</p>

<pre><code>import os.path
os.path.exists(file_path)
</code></pre>

<p>This returns <code>True</code> for both files and directories but you can additionally use <code>os.path.isfile</code> to test if it's a file specifically.</p>
"
82852,15682,2008-09-17T12:57:51Z,82831,2356,"<p>You can also use <a href=""https://docs.python.org/2/library/os.path.html#os.path.isfile""><code>os.path.isfile</code></a></p>

<blockquote>
  <p>Return <code>True</code> if path is an existing regular file. This follows symbolic links, so both <a href=""https://docs.python.org/2/library/os.path.html#os.path.islink"">islink()</a> and <a href=""https://docs.python.org/2/library/os.path.html#os.path.isfile"">isfile()</a> can be true for the same path.</p>
</blockquote>

<pre><code>import os.path
os.path.isfile(fname) 
</code></pre>

<p>if you need to be sure it's a file.</p>

<p>Starting with Python 3.4, the <a href=""https://docs.python.org/3/library/pathlib.html#pathlib.Path.is_file""><code>pathlib</code> module</a> offers an object-oriented approach:</p>

<pre><code>from pathlib import Path

my_file = Path(""/path/to/file"")
if my_file.is_file():
    # file exists
</code></pre>
"
82868,15087,2008-09-17T12:59:30Z,82607,0,"<p>If you try this, what happens?</p>

<blockquote>
  <blockquote>
    <blockquote>
      <p>print myresolver.query('sources.org', 'ANY', 'RRSIG')</p>
    </blockquote>
  </blockquote>
</blockquote>
"
82969,13498,2008-09-17T13:09:44Z,64141,1,"<p>Here's another answer kind of like pobk's; it uses the instance's dict to do the work of saving/resetting variables, but doesn't require you to specify the names of them in your code.  You can call save() at any time to save the state of the instance and reset() to reset to that state.</p>

<pre><code>class MyReset:
    def __init__(self, x, y):
        self.x = x
        self.y = y
        self.save()

    def save(self):
        self.saved = self.__dict__.copy()

    def reset(self):
        self.__dict__ = self.saved.copy()

a = MyReset(20, 30)
a.x = 50
print a.x
a.reset()
print a.x
</code></pre>

<p>Why do you want to do this?  It might not be the best/only way.</p>
"
83012,12138,2008-09-17T13:13:31Z,82831,18,"<p>Additionally, <code>os.access()</code>:</p>

<pre><code>if os.access(""myfile"", os.R_OK):
    with open(""myfile"") as fp:
        return fp.read()
</code></pre>

<p>Being <code>R_OK</code>, <code>W_OK</code>, and <code>X_OK</code> the flags to test for permissions (<a href=""https://docs.python.org/3/library/os.html#os.access"">doc</a>).</p>
"
83014,NA,2008-09-17T13:13:50Z,77198,2,"<p>Adobe has two products: Livecycle Data Services ES (LCDS) and BlazeDS. BlazeDS contains a subset of LCDS features and was made open source. Unfortunately NIO channels (RTMP NIO/HTTP) and the DataManagement features are implemented only in LCDS, not BlazeDS.</p>

<p>BlazeDS can be used only to integrate Flex with Java backend. It offers not only remoting services using AMF serialization (as RubyAMF) but also messaging and collaboration features - take a look at this link (<a href=""http://livedocs.adobe.com/blazeds/1/blazeds_devguide/help.html?content=lcoverview_3.html"" rel=""nofollow"">http://livedocs.adobe.com/blazeds/1/blazeds_devguide/help.html?content=lcoverview_3.html</a>). Also I suppose that the support is better compared with RubyAMF/pyAMF.</p>

<p>If your backend is JAVA and you want to use only a free product you can also use GraniteDS or WebORB (BlazeDS competitors)</p>
"
83075,15880,2008-09-17T13:19:14Z,75798,1,"<p>By ""good deployment"" are you comparing it with Java's EAR files, which allow you to deploy web applications by uploading a single file to a J2EE server? (And, to a lesser extent, WAR files; EAR files can have WAR files for dependent projects)</p>

<p>I don't think Django or Rails have gotten quite to that point yet, but I could be wrong...  zuber pointed out an article with more details on the Python side.</p>

<p><a href=""http://www.capify.org/"" rel=""nofollow"">Capistrano</a> may help out on the Ruby side.</p>

<p>Unfortunately, I haven't really worked with either Python or Ruby that much, so I can't help out on profilers or debuggers.</p>
"
83155,15369,2008-09-17T13:26:31Z,75440,6,"<p>I agree with Mr.Shark, but if you have an instance of a class, you'll need to use its <code>__class__</code> member:</p>

<pre><code>&gt;&gt;&gt; class test():
...     pass
...
&gt;&gt;&gt; a_test = test()
&gt;&gt;&gt;
&gt;&gt;&gt; a_test.__name__
Traceback (most recent call last):
  File ""&lt;stdin&gt;"", line 1, in &lt;module&gt;
AttributeError: test instance has no attribute '__name__'
&gt;&gt;&gt;
&gt;&gt;&gt; a_test.__class__
&lt;class __main__.test at 0x009EEDE0&gt;
</code></pre>
"
83800,7300,2008-09-17T14:26:31Z,83756,0,"<p>The <a href=""http://support.microsoft.com/kb/311272"" rel=""nofollow"">devcon</a> tool can control the NIC, but not the interface directly. It's a command-line version of the Device Manager applet.</p>

<pre><code>devcon disable (id or portion of name)
devcon enable (id or portion of name)
</code></pre>
"
83890,2936,2008-09-17T14:35:20Z,83756,0,"<p>this is VB.Net</p>

<pre><code>Dim objectQuery As New ObjectQuery(""SELECT * FROM Win32_NetworkAdapter WHERE NetConnectionId IS NOT NULL"")
         Dim searcher As New ManagementObjectSearcher(scope, objectQuery)
         Dim os As ManagementObject
         Dim moColl As ManagementObjectCollection = searcher.Get()
         Dim _list As String = """"
         For Each os In moColl
             Console.WriteLine(os(""NetConnectionId""))
         Next os
</code></pre>

<p>That will get all the interfaces on you computer. Then you can do netsh to disable it.</p>

<blockquote>
  <p>netsh interface set interface
   DISABLED</p>
</blockquote>
"
83954,6223,2008-09-17T14:40:45Z,83756,1,"<p>I can't seem to find any basic API for controlling interfaces on MSDN, apart from the RAS API's, but I don't think they apply to non-dialup connections. As you suggest yourself, netsh might be an option, supposedly it also has a programmatic interface: <a href=""http://msdn.microsoft.com/en-us/library/ms708353(VS.85).aspx"" rel=""nofollow"">http://msdn.microsoft.com/en-us/library/ms708353(VS.85).aspx</a></p>

<p>If you want to be pure Python, you can perhaps open a set of pipes to communicate with an netsh process.</p>
"
84016,16113,2008-09-17T14:46:43Z,83983,2,"<p>Maybe you're looking for <code>__len__</code>.  If that method exists, then len(a) calls it:</p>

<pre><code>&gt;&gt;&gt; class Spam:
...   def __len__(self): return 3
... 
&gt;&gt;&gt; s = Spam()
&gt;&gt;&gt; len(s)
3
</code></pre>
"
84019,12779,2008-09-17T14:46:56Z,83983,10,"<p>It just isn't.</p>

<p>You can, however, do:</p>

<pre><code>&gt;&gt;&gt; [1,2,3].__len__()

3
</code></pre>

<p>Adding a <code>__len__()</code> method to a class is what makes the <code>len()</code> magic work.</p>
"
84038,6568,2008-09-17T14:48:37Z,83983,2,"<p>Well, there actually is a length method, it is just hidden:</p>

<pre><code>&gt;&gt;&gt; a_list = [1, 2, 3]
&gt;&gt;&gt; a_list.__len__()
3
</code></pre>

<p>The len() built-in function appears to be simply a wrapper for a call to the hidden <strong>len</strong>() method of the object.</p>

<p>Not sure why they made the decision to implement things this way though.</p>
"
84073,15497,2008-09-17T14:52:35Z,83756,0,"<p>You may need to use WMI. This may serve as a good starting point:
<a href=""http://msdn.microsoft.com/en-us/library/aa394595.aspx"" rel=""nofollow"">http://msdn.microsoft.com/en-us/library/aa394595.aspx</a></p>
"
84154,8427,2008-09-17T14:59:53Z,83983,39,"<p>Guido's explanation is <a href=""http://mail.python.org/pipermail/python-3000/2006-November/004643.html"">here</a>:</p>

<blockquote>
  <p>First of all, I chose len(x) over x.len() for HCI reasons (def __len__() came much later). There are two intertwined reasons actually, both HCI:</p>
  
  <p>(a) For some operations, prefix notation just reads better than postfix — prefix (and infix!) operations have a long tradition in mathematics which likes notations where the visuals help the mathematician thinking about a problem. Compare the easy with which we rewrite a formula like x*(a+b) into x*a + x*b to the clumsiness of doing the same thing using a raw OO notation.</p>
  
  <p>(b) When I read code that says len(x) I know that it is asking for the length of something. This tells me two things: the result is an integer, and the argument is some kind of container. To the contrary, when I read x.len(), I have to already know that x is some kind of container implementing an interface or inheriting from a class that has a standard len(). Witness the confusion we occasionally have when a class that is not implementing a mapping has a get() or keys() method, or something that isn’t a file has a write() method.</p>
  
  <p>Saying the same thing in another way, I see ‘len‘ as a built-in operation. I’d hate to lose that. /…/</p>
</blockquote>
"
84155,1694,2008-09-17T14:59:54Z,83983,11,"<p>The short answer: 1) backwards compatibility and 2) there's not enough of a difference for it to really matter.  For a more detailed explanation, read on.</p>

<p>The idiomatic Python approach to such operations is special methods which aren't intended to be called directly.  For example, to make <code>x + y</code> work for your own class, you write a <code>__add__</code> method.  To make sure that <code>int(spam)</code> properly converts your custom class, write a <code>__int__</code> method.  To make sure that <code>len(foo)</code> does something sensible, write a <code>__len__</code> method.</p>

<p>This is how things have always been with Python, and I think it makes a lot of sense for some things.  In particular, this seems like a sensible way to implement operator overloading.  As for the rest, different languages disagree; in Ruby you'd convert something to an integer by calling <code>spam.to_i</code> directly instead of saying <code>int(spam)</code>.</p>

<p>You're right that Python is an extremely object-oriented language and that having to call an external function on an object to get its length seems odd.  On the other hand, <code>len(silly_walks)</code> isn't any more onerous than <code>silly_walks.len()</code>, and Guido has said that he actually prefers it (<a href=""http://mail.python.org/pipermail/python-3000/2006-November/004643.html"">http://mail.python.org/pipermail/python-3000/2006-November/004643.html</a>).</p>
"
84173,15625,2008-09-17T15:01:14Z,82831,640,"<p>Unlike <a href=""http://docs.python.org/3.3/library/os.path.html?highlight=os.path#os.path.isfile""><code>isfile()</code></a>, <a href=""http://docs.python.org/3.3/library/os.path.html?highlight=os.path#os.path.exists""><code>exists()</code></a> will yield <em>True</em> for directories.<br>
So depending on if you want only plain files or also directories, you'll use <code>isfile()</code> or <code>exists()</code>. Here is a simple REPL output.</p>

<pre><code>&gt;&gt;&gt; print os.path.isfile(""/etc/password.txt"")
True
&gt;&gt;&gt; print os.path.isfile(""/etc"")
False
&gt;&gt;&gt; print os.path.isfile(""/does/not/exist"")
False
&gt;&gt;&gt; print os.path.exists(""/etc/password.txt"")
True
&gt;&gt;&gt; print os.path.exists(""/etc"")
True
&gt;&gt;&gt; print os.path.exists(""/does/not/exist"")
False
</code></pre>
"
84205,3002,2008-09-17T15:04:16Z,83983,4,"<p>This way fits in better with the rest of the language. The convention in python is that you add <code>__foo__</code> special methods to objects to make them have certain capabilities (rather than e.g. deriving from a specific base class). For example, an object is </p>

<ul>
<li>callable if it has a <code>__call__</code> method  </li>
<li>iterable if it has an <code>__iter__</code> method, </li>
<li>supports access with [] if it has <code>__getitem__</code> and <code>__setitem__</code>. </li>
<li>...</li>
</ul>

<p>One of these special methods is <code>__len__</code> which makes it have a length accessible with <code>len()</code>.</p>
"
84248,16113,2008-09-17T15:08:22Z,81191,2,"<p>Dave Webb is correct, and you can see this by adding a print statement:</p>

<pre><code>&gt;&gt;&gt; class X:
...     l = []
...     def __init__(self):
...             print 'inited'
...             self.__class__.l.append(1)
...
</code></pre>

<p>Then as soon as you type the period in <code>X().</code> it prints <code>inited</code> prior to offering you the completion popup.</p>
"
84315,6899,2008-09-17T15:14:44Z,83756,5,"<p>So far I've found the following Python solution:</p>

<pre><code>&gt;&gt;&gt; import wmi; c=wmi.WMI()
&gt;&gt;&gt; o=c.query(""select * from Win32_NetworkAdapter where NetConnectionID='wifi'"")[0]
&gt;&gt;&gt; o.EnableDevice(1)
(-2147217407,)
</code></pre>

<p>which is translated, AFAIU, to the generic WMI error 0x80041001. Could be permissions.</p>
"
84337,16148,2008-09-17T15:16:26Z,83983,2,"<p>there is some good info below on why certain things are functions and other are methods.  It does indeed cause some inconsistencies in the language.</p>

<p><a href=""http://mail.python.org/pipermail/python-dev/2008-January/076612.html"" rel=""nofollow"">http://mail.python.org/pipermail/python-dev/2008-January/076612.html</a></p>
"
84448,15625,2008-09-17T15:25:29Z,82607,1,"<p>You probably mean RRSIG ANY (otherwise, the order is wrong, the class needs to be after the type)</p>

<pre><code>&gt;&gt;&gt; print myresolver.query('sources.org', 'RRSIG', 'ANY')
Traceback (most recent call last):
  File ""&lt;stdin&gt;"", line 1, in &lt;module&gt;
  File ""/usr/lib/python2.5/site-packages/dns/resolver.py"", line 664, in query
    answer = Answer(qname, rdtype, rdclass, response)
  File ""/usr/lib/python2.5/site-packages/dns/resolver.py"", line 121, in __init__
    raise NoAnswer
dns.resolver.NoAnswer
</code></pre>
"
84465,15828,2008-09-17T15:26:22Z,64362,1,"<p>Do you mean it uses http basic-auth before allowing proxying, and does it then allow 'connect'.</p>

<p>Then you should be able to tunnel over it using http-tunnel or proxytunnel</p>
"
85113,4872,2008-09-17T16:36:39Z,55365,0,"<p><a href=""http://www.python.org/doc/2.5/lib/module-readline.html"" rel=""nofollow"">'readline' module</a> supposedly provides Emacs like key bindings and even functionality. However, it is not available on Windows but on Unix. Therefore, this might be a viable solution if you are not using Windows.</p>

<pre><code>import readline
</code></pre>

<p>Since I am running IDLE on Windows it is unfortunately not an option for me.</p>
"
85134,8427,2008-09-17T16:39:06Z,85119,8,"<p>Django has this built in.  See <a href=""http://docs.djangoproject.com/en/dev/ref/contrib/sites/#ref-contrib-sites"" rel=""nofollow"">the sites framework</a>.</p>

<p>As a general technique, include a 'host' column in your database schema attached to the data you want to be host-specific, then include the <code>Host</code> HTTP header in the query when you are retrieving data.</p>
"
85271,1694,2008-09-17T16:52:59Z,85119,2,"<p>I use CherryPy as my web server (which comes bundled with Turbogears), and I simply run multiple instances of the CherryPy web server on different ports bound to localhost.  Then I configure Apache with mod_proxy and mod_rewrite to transparently forward requests to the proper port based on the HTTP request.</p>
"
85480,15910,2008-09-17T17:12:29Z,85451,13,"<p>Depends on what you care about. If you mean WALL TIME (as in, the time on the clock on your wall), time.clock() provides NO accuracy because it may manage CPU time. </p>
"
85489,5190,2008-09-17T17:14:08Z,85451,12,"<pre><code>clock() -&gt; floating point number

Return the CPU time or real time since the start of the process or since
the first call to clock().  This has as much precision as the system
records.

time() -&gt; floating point number

Return the current time in seconds since the Epoch.
Fractions of a second may be present if the system clock provides them.
</code></pre>

<p>Usually time() is more precise, because operating systems do not store the process running time with the precision they store the system time (ie, actual time)</p>
"
85490,10897,2008-09-17T17:14:16Z,78238,1,"<p>Both wx and QT do an excellent job of creating an application that matches the OS look and feel.
It is also possible to implment all the widgets yourself directly in openg, this slashdot post lists some of the sets available </p>

<p><a href=""http://ask.slashdot.org/askslashdot/02/12/24/1813219.shtml?tid=156"" rel=""nofollow"">http://ask.slashdot.org/askslashdot/02/12/24/1813219.shtml?tid=156</a>
fox is probably the most developed but looks like windows on all platforms.</p>
"
85511,7136,2008-09-17T17:16:00Z,85451,33,"<p>The short answer is: most of the time time.clock() will be better.
However, if you're timing some hardware (for example some algorithm you put in the GPU), then time.clock() will get rid of this time and time.time() is the only solution left.</p>

<p>Note: whatever the method used, the timing will depend on factors you cannot control (when will the process switch, how often, ...), this is worse with time.time() but exists also with time.clock(), so you should never run one timing test only, but always run a series of test and look at mean/variance of the times.</p>
"
85529,4676,2008-09-17T17:17:57Z,85451,2,"<p>Short answer: use <strong>time.clock()</strong> for timing in Python.</p>

<p>On *nix systems, clock() returns the processor time as a floating point number, expressed in seconds. On Windows, it returns the seconds elapsed since the first call to this function, as a floating point number.</p>

<p>time() returns the the seconds since the epoch, in UTC, as a floating point number. There is no guarantee that you will get a better precision that 1 second (even though time() returns a floating point number). Also note that if the system clock has been set back between two calls to this function, the second function call will return a lower value.</p>
"
85533,3920,2008-09-17T17:18:27Z,85451,91,"<p>As of 3.3, <a href=""https://docs.python.org/3/library/time.html#time.clock""><em>time.clock()</em> is deprecated</a>, and it's suggested to use <strong><a href=""https://docs.python.org/3/library/time.html#time.process_time"">time.process_time()</a></strong> or <strong><a href=""https://docs.python.org/3/library/time.html#time.perf_counter"">time.perf_counter()</a></strong> instead.</p>

<p>Previously in 2.7, according to the <strong><a href=""https://docs.python.org/2.7/library/time.html#time.clock"">time module docs</a></strong>:</p>

<blockquote>
  <p><strong>time.clock()</strong></p>
  
  <p>On Unix, return the current processor time as a floating point number
  expressed in seconds. The precision, and in fact the very definition
  of the meaning of “processor time”, depends on that of the C function
  of the same name, but in any case, <strong>this is the function to use for
  benchmarking Python or timing algorithms.</strong></p>
  
  <p>On Windows, this function returns wall-clock seconds elapsed since the
  first call to this function, as a floating point number, based on the
  Win32 function QueryPerformanceCounter(). The resolution is typically
  better than one microsecond.</p>
</blockquote>

<p>Additionally, there is the <a href=""https://docs.python.org/2/library/timeit.html"">timeit</a> module for benchmarking code snippets.</p>
"
85536,3002,2008-09-17T17:18:56Z,85451,20,"<p><a href=""http://stackoverflow.com/questions/85451#85511"">Others</a> have answered re: time.time() vs. time.clock(). </p>

<p>However, if you're timing the execution of a block of code for benchmarking/profiling purposes, you should take a look at the <a href=""https://docs.python.org/library/timeit.html"" rel=""nofollow""><code>timeit</code> module</a>.</p>
"
85586,NA,2008-09-17T17:24:37Z,85451,3,"<p>On Unix time.clock() measures the amount of CPU time that has been used by the current process, so it's no good for measuring elapsed time from some point in the past. On Windows it will measure wall-clock seconds elapsed since the first call to the function. On either system time.time() will return seconds passed since the epoch. </p>

<p>If you're writing code that's meant only for Windows, either will work (though you'll use the two differently - no subtraction is necessary for time.clock()). If this is going to run on a Unix system or you want code that is guaranteed to be portable, you will want to use time.time().</p>
"
85608,1068060,2008-09-17T17:27:49Z,85577,1,"<p>I don't think there is a built in way to get it from Python itself.  </p>

<p>My question is, how are you getting the IP information from your network?</p>

<p>To get it from your local machine you could parse ifconfig (unix) or ipconfig (windows) with little difficulty.</p>
"
85613,6043,2008-09-17T17:28:21Z,85577,11,"<p>You need <a href=""http://en.wikipedia.org/wiki/Address_Resolution_Protocol"">ARP</a>. Python's standard library doesn't include any code for that, so you either need to call an external program (your OS may have an 'arp' utility) or you need to build the packets yourself (possibly with a tool like <a href=""http://www.secdev.org/projects/scapy/"">Scapy</a>.</p>
"
85620,13757,2008-09-17T17:29:29Z,85577,0,"<p>Depends on your platform. If you're using *nix, you can use the 'arp' command to look up the mac address for a given IP (assuming IPv4) address. If that doesn't work, you could ping the address and then look, or if you have access to the raw network (using BPF or some other mechanism), you could send your own ARP packets (but that is probably overkill).</p>
"
85632,5353,2008-09-17T17:30:54Z,85577,1,"<p>If you want a pure Python solution, you can take a look at <a href=""http://www.secdev.org/projects/scapy/"" rel=""nofollow"">Scapy</a> to craft packets (you need to send ARP request, and inspect replies). Or if you don't mind invoking external program, you can use <code>arping</code> (on Un*x systems, I don't know of a Windows equivalent).</p>
"
85634,9936,2008-09-17T17:31:18Z,85577,1,"<p>It seems that there is not a native way of doing this with Python.  Your best bet would be to parse the output of ""ipconfig /all"" on Windows, or ""ifconfig"" on Linux.  Consider using os.popen() with some regexps.</p>
"
85641,9188,2008-09-17T17:32:21Z,85577,0,"<p>You would want to parse the output of 'arp', but the kernel ARP cache will only contain those IP address(es) if those hosts have communicated with the host where the Python script is running.</p>

<p>ifconfig can be used to display the MAC addresses of local interfaces, but not those on the LAN.</p>
"
85642,11944,2008-09-17T17:32:27Z,85451,5,"<p>The difference is very platform-specific.</p>

<p>clock() is very different on Windows than on Linux, for example.</p>

<p>For the sort of examples you describe, you probably want the ""timeit"" module instead.</p>
"
85707,14057,2008-09-17T17:38:25Z,85577,0,"<p>Mark Pilgrim describes how to do this on Windows for the current machine with the Netbios module <a href=""http://groups.google.com/group/comp.lang.python/msg/fd2e7437d72c1c21"" rel=""nofollow"">here</a>.  You can get the Netbios module as part of the Win32 package available at python.org.  Unfortunately at the moment I cannot find the docs on the module.</p>
"
85787,15842,2008-09-17T17:48:20Z,77936,2,"<p>Potentially more efficient: if you're calculating this multiple times, you can speed this up quite a bit by keeping two standing variables  </p>

<pre><code>N  # number of points
sums = dict(x=0,y=0,z=0)  # sums of the locations for each point
</code></pre>

<p>then changing N and sums whenever points are created or destroyed.  This changes things from O(N) to O(1) for calculations at the cost of more work every time a point is created, moves, or is destroyed.   </p>
"
86003,407880,2008-09-17T18:10:57Z,85119,1,"<p>Using multiple server instances on local ports is a good idea, but you don't need a full featured web server to redirect HTTP requests. </p>

<p>I would use <a href=""http://www.apsis.ch/pound/"" rel=""nofollow"">pound</a> as a reverse proxy to do the job. It is small, fast, simple and does exactly what we need here.</p>

<blockquote>
  <p>WHAT POUND IS:</p>
  
  <ol>
  <li><strong>a reverse-proxy: it passes requests from client browsers to one or more back-end servers.</strong></li>
  <li>a load balancer: it will distribute the requests from the client browsers among several back-end servers, while keeping session information.</li>
  <li>an SSL wrapper: Pound will decrypt HTTPS requests from client browsers and pass them as plain HTTP to the back-end servers.</li>
  <li>an HTTP/HTTPS sanitizer: Pound will verify requests for correctness and accept only well-formed ones.</li>
  <li>a fail over-server: should a back-end server fail, Pound will take note of the fact and stop passing requests to it until it recovers.</li>
  <li><strong>a request redirector: requests may be distributed among servers according to the requested URL.</strong></li>
  </ol>
</blockquote>
"
86007,8002,2008-09-17T18:11:53Z,85985,1,"<p>The web hit is the way to go, but make sure you pick a good URL - your app will be hitting it for years to come. </p>
"
86010,9706,2008-09-17T18:12:08Z,85985,1,"<p><a href=""http://pycrash.sourceforge.net/"" rel=""nofollow"">PyCrash</a>?</p>
"
86022,13894,2008-09-17T18:13:09Z,85985,0,"<p>Whether you use SMTP or HTTP to send the data, you need to have a username/password in the application to prevent just anyone from sending random data to you.</p>

<p>With that in mind, I suspect it would be easier to use SMTP rather than HTTP to send the data.</p>
"
86050,13757,2008-09-17T18:16:02Z,85985,4,"<p>The web service is the best way, but there are some caveats:</p>

<ol>
<li>You should always ask the user if it is ok to send error feedback information.</li>
<li>You should be prepared to fail gracefully if there are network errors. Don't let a failure to report a crash impede recovery!</li>
<li>You should avoid including user identifying or sensitive information unless the user knows (see #1) and you should either use SSL or otherwise protect it. Some jurisdictions impose burdens on you that you might not want to deal with, so it's best to simply not save such information.</li>
<li>Like any web service, make sure your service is not exploitable by miscreants.</li>
</ol>
"
86069,1068060,2008-09-17T18:17:52Z,85985,0,"<p>Some kind of simple web service would suffice.  You would have to consider security so not just anyone could make requests to your service..</p>

<p>On a larger scale we considered a JMS messaging system.  Put a serialized object of data containing the traceback/error message into a queue and consume it every x minutes generating reports/alerts from that data.</p>
"
86167,8427,2008-09-17T18:30:25Z,85985,3,"<blockquote>
  <p>I can't think of a way to do this without including a username and password for the smtp server in the application...</p>
</blockquote>

<p>You only need a username and password for authenticating yourself to a smarthost.  You don't need it to send mail directly, you need it to send mail through a relay, e.g. your ISP's mail server.  It's perfectly possible to send email without authentication - that's why spam is so hard to stop.</p>

<p>Having said that, some ISPs block outbound traffic on port 25, so the most robust alternative is an HTTP POST, which is unlikely to be blocked by anything.  Be sure to pick a URL that you won't feel restricted by later on, or better yet, have the application periodically check for updates, so if you decide to change domains or something, you can push an update in advance.</p>

<p>Security isn't really an issue.  You can fairly easily discard junk data, so all that really concerns you is whether or not somebody would go to the trouble of constructing fake tracebacks to mess with you, and that's a very unlikely situation.</p>

<p>As for the payload, <a href=""http://pycrash.sourceforge.net/"" rel=""nofollow"">PyCrash</a> can help you with that.</p>
"
86172,8570,2008-09-17T18:30:41Z,86134,1,"<p>Pros: Access to the libraries available for JVM or CLR.</p>

<p>Cons: Both naturally lag behind CPython in terms of features.</p>
"
86173,3560,2008-09-17T18:31:21Z,86134,15,"<p><strong>Jython</strong> and <strong>IronPython</strong> are useful if you have an overriding need to interface with existing libraries written in a different platform, like if you have 100,000 lines of Java and you just want to write a 20-line Python script. Not particularly useful for anything else, in my opinion, because they are perpetually a few versions behind CPython due to community inertia.</p>

<p><strong>Stackless</strong> is interesting because it has support for green threads, continuations, etc. Sort of an Erlang-lite.</p>

<p><strong>PyPy</strong> is an experimental interpreter/compiler that may one day supplant CPython, but for now is more of a testbed for new ideas.</p>
"
86186,16148,2008-09-17T18:33:09Z,86134,3,"<p>All of the implementations are listed here:</p>

<p><a href=""https://wiki.python.org/moin/PythonImplementations"" rel=""nofollow"">https://wiki.python.org/moin/PythonImplementations</a></p>

<p>CPython is the ""reference implementation"" and developed by Guido and the core developers.</p>
"
86420,32538,2008-09-17T18:59:49Z,37535,9,"<p>If you're still checking this,  I have a GPL FoxPro-to-PostgreSQL converter at <a href=""https://github.com/kstrauser/pgdbf"">https://github.com/kstrauser/pgdbf</a> .  We use it to routinely copy our tables into PostgreSQL for fast reporting.</p>
"
86427,16590,2008-09-17T19:00:15Z,86134,1,"<p>IronPython and Jython use the runtime environment for .NET or Java and with that comes Just In Time compilation and a garbage collector different from the original CPython. They might be also faster than CPython thanks to the JIT, but I don't know that for sure.</p>

<p>A downside in using Jython or IronPython is that you cannot use native C modules, they can be only used in CPython.</p>
"
86541,373112,2008-09-17T19:13:45Z,85577,-1,"<p>as python was not meant to deal with OS-specific issues (it's supposed to be interpreted and cross platform), I would execute an external command to do so:</p>

<p>in unix the command is <code>ifconfig</code></p>

<p>if you execute it as a pipe you get the desired result:</p>

<pre><code>import os;
myPipe=os.popen2(""/sbin/ifconfig"",""a"");
print(myPipe[1].read());
</code></pre>
"
86611,4281,2008-09-17T19:20:31Z,83756,9,"<p>Using the netsh interface 
Usage set interface [name = ] IfName
            [ [admin = ] ENABLED|DISABLED
              [connect = ] CONNECTED|DISCONNECTED
              [newname = ] NewName ]</p>

<p>Try including everything inside the outer brackets:
netsh interface set interface name=""thename"" admin=disabled connect=DISCONNECTED newname=""thename""</p>

<p>See also this MS KB page: <a href=""http://support.microsoft.com/kb/262265/"">http://support.microsoft.com/kb/262265/</a>
You could follow either of their suggestions.
For disabling the adapter, you will need to determine a way to reference the hardware device.  If there will not be multiple adapters with the same name on the computer, you could possibly go off of the Description for the interface (or PCI ID works well).  After that, using devcon (disable|enable).  Devcon is an add-on console interface for the Device Manager.</p>
"
86665,8450,2008-09-17T19:26:12Z,86134,1,"<p><a href=""http://codespeak.net/pypy/dist/pypy/doc/home.html"" rel=""nofollow"">PyPy</a> is a Python implementation written in RPython wich is a Python subset. </p>

<p>RPython can be translated to run on a VM or, unlike standard Python, RPython can be statically compiled.</p>
"
86705,10751,2008-09-17T19:29:30Z,85119,6,"<p>Using Django on apache with mod_python, I host multiple (unrelated) django sites simply with the following apache config:</p>

<pre><code>&lt;VirtualHost 1.2.3.4&gt;
        DocumentRoot /www/site1
        ServerName site1.com
        &lt;Location /&gt;
                SetHandler python-program
                SetEnv DJANGO_SETTINGS_MODULE site1.settings
                PythonPath ""['/www'] + sys.path""
                PythonDebug On
                PythonInterpreter site1
        &lt;/Location&gt;
&lt;/VirtualHost&gt;

&lt;VirtualHost 1.2.3.4&gt;
        DocumentRoot /www/site2
        ServerName site2.com
        &lt;Location /&gt;
                SetHandler python-program
                SetEnv DJANGO_SETTINGS_MODULE site2.settings
                PythonPath ""['/www'] + sys.path""
                PythonDebug On
                PythonInterpreter site2
        &lt;/Location&gt;
&lt;/VirtualHost&gt;
</code></pre>

<p>No need for multiple apache instances or proxy servers. Using a different PythonInterpreter directive for each site (the name you enter is arbitrary) keeps the namespaces separate.</p>
"
87039,10675,2008-09-17T20:03:49Z,85451,2,"<p>To the best of my understanding, time.clock() has as much precision as your system will allow it.</p>
"
87048,12138,2008-09-17T20:04:12Z,43709,4,"<p>If you want to go big, choose Django and you are set. But if you want just to learn, roll your own framework using already mentioned <a href=""http://pythonpaste.org/webob/"" rel=""nofollow"">WebOb</a> - this can be really fun and I am sure you'll learn much more (plus you can use components you like: template system, url dispatcher, database layer, sessions, et caetera).</p>

<p>In last 2 years I built few large sites using Django and all I can say, Django will fill 80% of your needs in 20% of time. Remaining 20% of work will take 80% of the time, no matter which framework you'd use.</p>
"
87503,8002,2008-09-17T20:47:15Z,87317,2,"<p>I must admit I'm a fan of <a href=""http://www.aaronsw.com/2002/xmltramp/"" rel=""nofollow"">xmltramp</a> due to its ease of use.</p>

<p>Accessing the above becomes:</p>

<pre><code>  import xmltramp

  values = xmltramp.parse('''...''')

  def getValues( values, category ):
    cat = [ parent for parent in values['parent':] if parent(name) == category ]
    cat_values = [ child(value) for child in parent['child':] for parent in cat ]
    return cat_values

  getValues( values, ""CategoryA"" )
  getValues( values, ""CategoryB"" )
</code></pre>
"
87543,680,2008-09-17T20:50:51Z,87317,2,"<p>You can do this with <a href=""http://www.crummy.com/software/BeautifulSoup/"" rel=""nofollow"">BeautifulSoup</a></p>

<pre><code>&gt;&gt;&gt; from BeautifulSoup import BeautifulStoneSoup
&gt;&gt;&gt; soup = BeautifulStoneSoup(xml)
&gt;&gt;&gt; def getValues(name):
. . .      return [child['value'] for child in soup.find('parent', attrs={'name': name}).findAll('child')]
</code></pre>

<p>If you're doing work with HTML/XML I would recommend you take a look at BeautifulSoup. It's similar to the DOM tree but contains more functionality.</p>
"
87562,10906,2008-09-17T20:53:43Z,87522,3,"<p>Use this as an opportunity to remove unused features!  Definitely go with the new language.  Call it 2.0.  It will be a lot less work to rebuild the 80% of it that you really need.</p>

<p>Start by wiping your brain clean of the whole application.  Sit down with a list of its overall goals, then decide which features are needed based on which ones are used.  Then redesign it with those features in mind, and build.</p>

<p>(I love to delete code.)</p>
"
87573,1960,2008-09-17T20:55:23Z,87522,0,"<p>I would not recommend JScript as that is definitely the road less traveled.
ASP.NET MVC is rapidly maturing, and I think that you could begin a migration to it, simultaneously ramping up on the ASP.NET MVC framework as its finalization comes through.
Another option would be to use something like ASP.NET w/Subsonic or NHibernate.</p>
"
87622,7526,2008-09-17T21:00:32Z,87317,7,"<p>I'm not really an old hand at Python, but here's an XPath solution using libxml2.</p>

<pre><code>import libxml2

DOC = """"""&lt;elements&gt;
    &lt;parent name=""CategoryA""&gt;
        &lt;child value=""a1""/&gt;
        &lt;child value=""a2""/&gt;
        &lt;child value=""a3""/&gt;
    &lt;/parent&gt;
    &lt;parent name=""CategoryB""&gt;
        &lt;child value=""b1""/&gt;
        &lt;child value=""b2""/&gt;
        &lt;child value=""b3""/&gt;
    &lt;/parent&gt;
&lt;/elements&gt;""""""

doc = libxml2.parseDoc(DOC)

def getValues(cat):
    return [attr.content for attr in doc.xpathEval(""/elements/parent[@name='%s']/child/@value"" % (cat))]

print getValues(""CategoryA"")
</code></pre>

<p>With result...</p>

<pre><code>['a1', 'a2', 'a3']
</code></pre>
"
87651,18936,2008-09-17T21:04:42Z,87317,3,"<p>Using a standard W3 DOM such as the stdlib's minidom, or pxdom:</p>

<pre><code>def getValues(category):
    for parent in document.getElementsByTagName('parent'):
        if parent.getAttribute('name')==category:
            return [
                el.getAttribute('value')
                for el in parent.getElementsByTagName('child')
            ]
    raise ValueError('parent not found')
</code></pre>
"
87658,3002,2008-09-17T21:05:38Z,87317,5,"<p><a href=""http://effbot.org/zone/elementtree-13-intro.htm"">ElementTree 1.3</a> (unfortunately not 1.2 which is the one included with Python) <a href=""http://effbot.org/zone/element-xpath.htm"">supports XPath</a> like this:</p>

<pre><code>import elementtree.ElementTree as xml

def getValues(tree, category):
    parent = tree.find("".//parent[@name='%s']"" % category)
    return [child.get('value') for child in parent]
</code></pre>

<p>Then you can do </p>

<pre><code>&gt;&gt;&gt; tree = xml.parse('data.xml')
&gt;&gt;&gt; getValues(tree, 'CategoryA')
['a1', 'a2', 'a3']
&gt;&gt;&gt; getValues(tree, 'CategoryB')
['b1', 'b2', 'b3']
</code></pre>

<p><code>lxml.etree</code> (which also provides the ElementTree interface) will also work in the same way.</p>
"
87684,15454,2008-09-17T21:08:42Z,87522,2,"<p>Whatever you do, see if you can manage to follow a plan where you do not have to port the application all in one big bang. It is tempting to throw it all away and start from scratch, but if you can manage to do it gradually the mistakes you do will not cost so much and cause so much panic.</p>
"
87726,9493,2008-09-17T21:12:16Z,87317,2,"<p>My preferred python xml library is <a href=""http://codespeak.net/lxml"" rel=""nofollow"">lxml</a> , which wraps libxml2.<br />
Xpath does seem the way to go here, so I'd write this as something like:</p>

<pre><code>from lxml import etree

def getValues(xml, category):
    return [x.attrib['value'] for x in 
            xml.findall('/parent[@name=""%s""]/*' % category)]

xml = etree.parse(open('filename.xml'))

&gt;&gt;&gt; print getValues(xml, 'CategoryA')
['a1', 'a2', 'a3']
&gt;&gt;&gt; print getValues(xml, 'CategoryB')
['b1', 'b2', 'b3]
</code></pre>
"
87998,10661,2008-09-17T21:44:51Z,87522,3,"<p>It works out better than you'd believe. </p>

<p>Recently I did a large reverse-engineering job on a hideous old collection of C code.  Function by function I reallocated the features that were still relevant into classes, wrote unit tests for the classes, and built up what looked like a replacement application.  It had some of the original ""logic flow"" through the classes, and some classes were poorly designed [Mostly this was because of a subset of the global variables that was too hard to tease apart.]</p>

<p>It passed unit tests at the class level and at the overall application level.  The legacy source was mostly used as a kind of ""specification in C"" to ferret out the really obscure business rules.</p>

<p>Last year, I wrote a project plan for replacing 30-year old COBOL.  The customer was leaning toward Java.  I prototyped the revised data model in Python using Django as part of the planning effort.  I could demo the core transactions before I was done planning.</p>

<p><strong>Note</strong>:  It was quicker to build a the model and admin interface in Django than to plan the project as a whole.</p>

<p>Because of the ""we need to use Java"" mentality, the resulting project will be larger and more expensive than finishing the Django demo.  With no real value to balance that cost.</p>

<p>Also, I did the same basic ""prototype in Django"" for a VB desktop application that needed to become a web application.  I built the model in Django, loaded legacy data, and was up and running in a few weeks.  I used that working prototype to specify the rest of the conversion effort.</p>

<p><strong>Note</strong>:  I had a working Django implementation (model and admin pages only) that I used to plan the rest of the effort.</p>

<p>The best part about doing this kind of prototyping in Django is that you can mess around with the model, unit tests and admin pages until you get it <strong>right</strong>.    Once the model's right, you can spend the rest of your time fiddling around with the user interface until everyone's happy.</p>
"
88209,15614,2008-09-17T22:09:08Z,88194,2,"<p>Shell scripts can't modify their enviroment. </p>

<p><a href=""http://tldp.org/LDP/abs/html/gotchas.html"" rel=""nofollow"">http://tldp.org/LDP/abs/html/gotchas.html</a></p>

<blockquote>
  <p>A script may not export variables back to its parent process, the shell, or to the environment. Just as we learned in biology, a child process can inherit from a parent, but not vice versa</p>
</blockquote>

<pre><code>$ cat &gt; eg.sh 
export FOO=""bar"";
^D
$ bash eg.sh 
$ echo $FOO; 

$
</code></pre>

<p>also, the problem is greater, as you have multiple calls of bash </p>

<pre><code>bash 1 -&gt; hg -&gt; bash 2 ( shell script ) 
             -&gt; bash 3 ( env call )
</code></pre>

<p>it would be like thinking I could set a variable in one php script and then magically get it with another simply by running one after the  other. </p>
"
88331,8427,2008-09-17T22:27:35Z,88259,79,"<p><strong>Update:</strong> <a href=""http://django-configurations.readthedocs.org/en/latest/"">django-configurations</a> has been released which is probably a better option for most people than doing it manually.</p>

<p>If you would prefer to do things manually, my earlier answer still applies:</p>

<p>I have multiple settings files.</p>

<ul>
<li><code>settings_local.py</code> - host-specific configuration, such as database name, file paths, etc.</li>
<li><code>settings_development.py</code> - configuration used for development, e.g. <code>DEBUG = True</code>.</li>
<li><code>settings_production.py</code> - configuration used for production, e.g. <code>SERVER_EMAIL</code>.</li>
</ul>

<p>I tie these all together with a <code>settings.py</code> file that firstly imports <code>settings_local.py</code>, and then one of the other two.  It decides which to load by two settings inside <code>settings_local.py</code> - <code>DEVELOPMENT_HOSTS</code> and <code>PRODUCTION_HOSTS</code>.  <code>settings.py</code> calls <code>platform.node()</code> to find the hostname of the machine it is running on, and then looks for that hostname in the lists, and loads the second settings file depending on which list it finds the hostname in.</p>

<p>That way, the only thing you really need to worry about is keeping the <code>settings_local.py</code> file up to date with the host-specific configuration, and everything else is handled automatically.</p>

<p>Check out an example <a href=""http://github.com/JimDabell/lojban-website/tree/master/lojban"">here</a>.</p>
"
88344,3560,2008-09-17T22:29:30Z,88259,11,"<p>I have two files. <code>settings_base.py</code> which contains common/default settings, and which is checked into source control. Each deployment has a separate <code>settings.py</code>, which executes <code>from settings_base import *</code> at the beginning and then overrides as needed.</p>
"
88346,14648,2008-09-17T22:29:33Z,88325,18,"<p>'Error' in this example could be any exception object. I think perhaps you have read a code example that used it as a metasyntatic placeholder to mean, ""The Appropriate Exception Class"".</p>

<p>The baseclass of all exceptions is called 'Exception', and most of its subclasses are descriptive names of the type of error involved, such as 'OSError', 'ValueError', 'NameError', 'TypeError'.</p>

<p>In this case, the appropriate error is 'ValueError' (the value of foo was wrong, therefore a ValueError). I would recommend replacing 'Error' with 'ValueError' in your script.</p>

<p>Here is a complete version of the code you are trying to write, I'm duplicating everything because you have a weird keyword argument in your original example that you seem to be conflating with an assignment, and I'm using the 'failUnless' function name because that's the non-aliased name of the function:</p>

<pre><code>class MyClass:
    def __init__(self, foo):
        if foo != 1:
            raise ValueError(""foo is not equal to 1!"")

import unittest
class TestFoo(unittest.TestCase):
    def testInsufficientArgs(self):
        foo = 0
        self.failUnlessRaises(ValueError, MyClass, foo)

if __name__ == '__main__':
    unittest.main()
</code></pre>

<p>The output is:</p>

<pre><code>.
----------------------------------------------------------------------
Ran 1 test in 0.007s

OK
</code></pre>

<p>There is a flaw in the unit testing library 'unittest' that other unit testing frameworks fix. You'll note that it is impossible to gain access to the exception object from the calling context. If you want to fix this, you'll have to redefine that method in a subclass of UnitTest:</p>

<p>This is an example of it in use:</p>

<pre><code>class TestFoo(unittest.TestCase):
    def failUnlessRaises(self, excClass, callableObj, *args, **kwargs):
        try:
            callableObj(*args, **kwargs)
        except excClass, excObj:
            return excObj # Actually return the exception object
        else:
            if hasattr(excClass,'__name__'): excName = excClass.__name__
            else: excName = str(excClass)
            raise self.failureException, ""%s not raised"" % excName

    def testInsufficientArgs(self):
        foo = 0
        excObj = self.failUnlessRaises(ValueError, MyClass, foo)
        self.failUnlessEqual(excObj[0], 'foo is not equal to 1!')
</code></pre>

<p>I have copied the failUnlessRaises function from unittest.py from python2.5 and modified it slightly.</p>
"
88357,15369,2008-09-17T22:30:21Z,88325,0,"<p>I think you're thinking of <a href=""http://docs.python.org/lib/module-exceptions.html"" rel=""nofollow"">Exception</a>s. Replace the word Error in your description with Exception and you should be good to go :-)</p>
"
88369,8062,2008-09-17T22:32:16Z,88325,4,"<p>How about this:</p>

<pre><code>class MyClass:
    def __init__(self, foo):
        if foo != 1:
            raise Exception(""foo is not equal to 1!"")

import unittest

class Tests(unittest.TestCase):
    def testSufficientArgs(self):
        foo = 1
        MyClass(foo)

    def testInsufficientArgs(self):
        foo = 2
        self.assertRaises(Exception, MyClass, foo)

if __name__ == '__main__':
    unittest.main()
</code></pre>
"
88394,14309,2008-09-17T22:35:44Z,77936,10,"<p>You vaguely mention ""a way to get a more accurate centroid"".  Maybe you're talking about a centroid that isn't affected by outliers.  For example, the <i>average</i> household income in the USA is probably very high, because a small number of <i>very</i> rich people skew the average; they are the ""outliers"".  For that reason, statisticians use the <i>median</i> instead.  One way to obtain the median is to sort the values, then pick the value halfway down the list.
<p>
Maybe you're looking for something like this, but for 2D or 3D points.  The problem is, in 2D and higher, you can't sort.  There's no natural order.  Nevertheless, there are ways to get rid of outliers.
<p>
One way is to find the <a href=""http://en.wikipedia.org/wiki/Convex_hull"">convex hull</a> of the points.  The convex hull has all the points on the ""outside"" of the set of points.  If you do this, and throw out the points that are on the hull, you'll be throwing out the outliers, and the points that remain will give a more ""representative"" centroid.  You can even repeat this process several times, and the result is kind like peeling an onion.  In fact, it's called ""convex hull peeling"".
<p></p>
"
88457,15478,2008-09-17T22:45:49Z,25661,0,"<p>I tried doing this myself a while ago, and I never got it to work perfectly. Actually I never got it to work at all under Windows, as it kept crashing the entire OS and I ran out of patience. I continued to use it though as it was only important it ran on Linux, and was only a small project. I'd strongly recommend you investigate alternatives. It always felt like a nasty hack, and made me feel dirty.</p>
"
88587,NA,2008-09-17T23:12:21Z,88554,4,"<p>You generally shouldn't use <code>input()</code> in production code. If you want an int and then a float, try this:
<code><pre>
&gt;&gt;&gt; line = raw_input().split()
&gt;&gt;&gt; a = int(line[0])
&gt;&gt;&gt; b = float(line[1])
&gt;&gt;&gt; c = "" "".join(line[2:])
</pre></code></p>

<p>It all depends on what exactly you're trying to accomplish, but remember that readability counts. Obscure one-liners may seem cool but in the face of maintainability, try to choose something sensible :)</p>

<p>(P.S.: Don't forget to check for errors with try: ... except (ValueError, IndexError):)</p>
"
88589,85,2008-09-17T23:12:46Z,88554,0,"<p>Depending upon what you are doing, something like the <a href=""http://docs.python.org/lib/module-getopt.html"" rel=""nofollow"">getopt</a> module could be useful, but only in certain situations and I'm not sure if it would apply in yours.</p>
"
88639,680,2008-09-17T23:21:58Z,88613,4,"<p>Regular expressions:</p>

<pre><code>&gt;&gt;&gt; import re
&gt;&gt;&gt; splitter = re.compile(r'([+*/])')
&gt;&gt;&gt; splitter.split(""2+24*48/32"")
</code></pre>

<p>You can expand the regular expression to include any other characters you want to split on.</p>
"
88661,10289,2008-09-17T23:25:52Z,88613,4,"<blockquote>
  <blockquote>
    <blockquote>
      <p>s = ""2+24*48/32""</p>
      
      <p>p = re.compile(r'(\W+)')</p>
      
      <p>p.split(s)</p>
    </blockquote>
  </blockquote>
</blockquote>
"
88663,4883,2008-09-17T23:25:56Z,88613,35,"<p>You can use <code>split</code> from the <code>re</code> module.  </p>

<p><a href=""http://docs.python.org/library/re.html#re.split"" rel=""nofollow"">re.split(pattern, string, maxsplit=0, flags=0)</a></p>

<blockquote>
  <p>Split string by the occurrences of pattern. If capturing parentheses
  are used in pattern, then the text of all groups in the pattern are
  also returned as part of the resulting list.</p>
</blockquote>

<p>Example code:</p>

<pre><code>import re
data = re.split(r'(\D)', '2+24*48/32')
</code></pre>

<hr>

<p>\D</p>

<blockquote>
  <p>When the UNICODE flag is not specified, \D matches any non-digit
  character; this is equivalent to the set [^0-9].</p>
</blockquote>
"
88714,10661,2008-09-17T23:35:49Z,88554,3,"<p>Since the C++ cin reads from sys.stdin, you'll often do something more like the following.</p>

<pre><code>import sys
tokens= sys.stdin.read().split()
try:
   a= int(token[0])
   b= float(token[1])
except ValueError, e:
   print e # handle the invalid input
</code></pre>
"
88783,14648,2008-09-17T23:54:14Z,88613,18,"<p>This looks like a parsing problem, and thus I am compelled to present a solution based on parsing techniques.</p>

<p>While it may seem that you want to 'split' this string, I think what you actually want to do is 'tokenize' it. Tokenization or lexxing is the compilation step before parsing. I have amended my original example in an edit to implement a proper recursive decent parser here. This is the easiest way to implement a parser by hand.</p>

<pre><code>import re

patterns = [
    ('number', re.compile('\d+')),
    ('*', re.compile(r'\*')),
    ('/', re.compile(r'\/')),
    ('+', re.compile(r'\+')),
    ('-', re.compile(r'\-')),
]
whitespace = re.compile('\W+')

def tokenize(string):
    while string:

        # strip off whitespace
        m = whitespace.match(string)
        if m:
            string = string[m.end():]

        for tokentype, pattern in patterns:
            m = pattern.match(string)
            if m:
                yield tokentype, m.group(0)
                string = string[m.end():]

def parseNumber(tokens):
    tokentype, literal = tokens.pop(0)
    assert tokentype == 'number'
    return int(literal)

def parseMultiplication(tokens):
    product = parseNumber(tokens)
    while tokens and tokens[0][0] in ('*', '/'):
        tokentype, literal = tokens.pop(0)
        if tokentype == '*':
            product *= parseNumber(tokens)
        elif tokentype == '/':
            product /= parseNumber(tokens)
        else:
            raise ValueError(""Parse Error, unexpected %s %s"" % (tokentype, literal))

    return product

def parseAddition(tokens):
    total = parseMultiplication(tokens)
    while tokens and tokens[0][0] in ('+', '-'):
        tokentype, literal = tokens.pop(0)
        if tokentype == '+':
            total += parseMultiplication(tokens)
        elif tokentype == '-':
            total -= parseMultiplication(tokens)
        else:
            raise ValueError(""Parse Error, unexpected %s %s"" % (tokentype, literal))

    return total

def parse(tokens):
    tokenlist = list(tokens)
    returnvalue = parseAddition(tokenlist)
    if tokenlist:
        print 'Unconsumed data', tokenlist
    return returnvalue

def main():
    string = '2+24*48/32'
    for tokentype, literal in tokenize(string):
        print tokentype, literal

    print parse(tokenize(string))

if __name__ == '__main__':
    main()
</code></pre>

<p>Implementation of handling of brackets is left as an exercise for the reader. This example will correctly do multiplication before addition.</p>
"
89003,NA,2008-09-18T00:45:18Z,88613,0,"<p>i'm sure Tim meant </p>

<pre><code>splitter = re.compile(r'([\D])'). 
</code></pre>

<p>if you copy exactly what he has down you only get the <code>digits</code> not the <code>operators</code>.</p>
"
89140,15842,2008-09-18T01:16:20Z,53786,0,"<p>Another solution is to use <a href=""http://rpy.sourceforge.net/"" rel=""nofollow"">Rpy</a>, which puts all of the power of R (including lots of tools for distributions), easily into Python.  </p>
"
89237,3926,2008-09-18T01:37:24Z,89228,27,"<pre><code>import os
os.system(""your command"")
</code></pre>

<p>Note that this is dangerous, since the command isn't cleaned. I leave it up to you to google for the relevant docs on the 'os' and 'sys' modules. There are a bunch of functions (exec* , spawn*) that will do similar things.</p>
"
89238,16203,2008-09-18T01:37:49Z,89228,46,"<pre><code>import os
cmd = 'ls -al'
os.system(cmd)
</code></pre>

<p>If you want to return the results of the command, you can use <a href=""https://docs.python.org/2/library/os.html#os.popen""><code>os.popen</code></a>. However, this is deprecated since version 2.6 in favor of the <a href=""https://docs.python.org/2/library/subprocess.html#module-subprocess"">subprocess module</a>, which other answers have covered well.</p>
"
89243,11465,2008-09-18T01:39:35Z,89228,2184,"<p>Look at the <a href=""https://docs.python.org/2/library/subprocess.html"">subprocess module</a> in the stdlib:</p>

<pre><code>from subprocess import call
call([""ls"", ""-l""])
</code></pre>

<p>The advantage of subprocess vs system is that it is more flexible (you can get the stdout, stderr, the ""real"" status code, better error handling, etc...). I think os.system is deprecated, too, or will be:</p>

<p><a href=""https://docs.python.org/2/library/subprocess.html#replacing-older-functions-with-the-subprocess-module"">https://docs.python.org/2/library/subprocess.html#replacing-older-functions-with-the-subprocess-module</a></p>

<p>For quick/dirty/one time scripts, <code>os.system</code> is enough, though.</p>
"
89255,6222,2008-09-18T01:42:30Z,89228,63,"<p>I'd recommend using the subprocess module instead of os.system because it does shell escaping for you and is therefore much safer: <a href=""http://docs.python.org/library/subprocess.html"">http://docs.python.org/library/subprocess.html</a></p>

<pre><code>subprocess.call(['ping', 'localhost'])
</code></pre>
"
89262,4482,2008-09-18T01:43:30Z,89228,9,"<p><a href=""https://docs.python.org/2/library/subprocess.html"">https://docs.python.org/2/library/subprocess.html</a></p>

<p>...or for a very simple command:</p>

<pre><code>import os
os.system('cat testfile')
</code></pre>
"
89267,17095,2008-09-18T01:43:56Z,89228,6,"<p>os.system has been superceeded by the subprocess module. Use subproccess instead.</p>
"
89304,14199,2008-09-18T01:53:27Z,89228,11,"<p>os.system is OK, but kind of dated.  It's also not very secure.  Instead, try subprocess.  subprocess does not call sh directly and is therefore more secure than os.system.</p>

<p>Get more information at <a href=""https://docs.python.org/library/subprocess.html"" rel=""nofollow"">https://docs.python.org/library/subprocess.html</a></p>
"
89338,7813,2008-09-18T01:59:37Z,88259,1,"<p>In addition to the multiple settings files mentioned by Jim, I also tend to place two settings into my settings.py file at the top <code>BASE_DIR</code> and <code>BASE_URL</code> set to the path of the code and the URL to the base of the site, all other settings are modified to append themselves to these.</p>

<p><code>BASE_DIR = ""/home/sean/myapp/""</code>
e.g. <code>MEDIA_ROOT = ""%smedia/"" % BASEDIR</code></p>

<p>So when moving the project I only have to edit these settings and not search the whole file.</p>

<p>I would also recommend looking at fabric and <a href=""http://en.wikipedia.org/wiki/Capistrano"" rel=""nofollow"">Capistrano</a> (Ruby tool, but it can be used to deploy Django applications) which facilitate automation of remote deployment.</p>
"
89434,245,2008-09-18T02:19:51Z,87522,7,"<p>Don't throw away your code!</p>

<p>It's the single worst mistake you can make (on a large codebase).  See <a href=""http://www.joelonsoftware.com/articles/fog0000000069.html"" rel=""nofollow"">Things You Should Never Do, Part 1</a>.</p>

<p>You've invested a lot of effort into that old code and worked out many bugs.  Throwing it away is a classic developer mistake (and one I've done many times).  It makes you feel ""better"", like a spring cleaning.  But you don't need to buy a new apartment and all new furniture to outfit your house.  You can work on one room at a time... and maybe some things just need a new paintjob.  Hence, this is where refactoring comes in.</p>

<p>For new functionality in your app, <a href=""http://blog.danbartels.com/articles/322.aspx"" rel=""nofollow"">write it in C# and call it from your classic ASP</a>.  You'll be forced to be modular when you rewrite this new code.  When you have time, refactor parts of your old code into C# as well, and work out the bugs as you go.  Eventually, you'll have replaced your app with all new code.</p>

<p>You could also write your own compiler.  We wrote one for our classic ASP app a long time ago to allow us to output PHP.  It's called <a href=""http://www.joelonsoftware.com/items/2006/09/01b.html"" rel=""nofollow"">Wasabi</a> and I think it's the reason Jeff Atwood thought Joel Spolsky went off his rocker.  Actually, maybe we should just ship it, and then you could use that.  </p>

<p>It allowed us to switch our entire codebase to .NET for the next release while only rewriting a very small portion of our source.  It also caused a bunch of people to call us crazy, but writing a compiler is not that complicated, and it gave us a lot of flexibility.</p>

<p>Also, if this is an internal only app, just leave it.  Don't rewrite it - you are the only customer and if the requirement is you need to run it as classic asp, you can meet that requirement.</p>
"
89452,NA,2008-09-18T02:23:49Z,87522,0,"<p>Don't try and go 2.0 ( more features then currently exists or scheduled) instead build your new platform with the intent of resolving the current issues with the code base (maintainability/speed/wtf) and go from there.  </p>
"
89534,11293,2008-09-18T02:39:38Z,88613,17,"<pre><code>&gt;&gt;&gt; import re
&gt;&gt;&gt; re.findall(r'\d+|\D+', '2+24*48/32=10')

['2', '+', '24', '*', '48', '/', '32', '=', '10']
</code></pre>

<p>Matches consecutive digits or consecutive non-digits.</p>

<p>Each match is returned as a new element in the list.</p>

<p>Depending on the usage, you may need to alter the regular expression. Such as if you need to match numbers with a decimal point.</p>

<pre><code>&gt;&gt;&gt; re.findall(r'[0-9\.]+|[^0-9\.]+', '2+24*48/32=10.1')

['2', '+', '24', '*', '48', '/', '32', '=', '10.1']
</code></pre>
"
89666,10999,2008-09-18T03:07:27Z,88613,4,"<p>Another solution to this would be to avoid writing a calculator like that altogether. Writing an RPN parser is much simpler, and doesn't have any of the ambiguity inherent in writing math with infix notation.</p>

<pre><code>import operator, math
calc_operands = {
    '+': (2, operator.add),
    '-': (2, operator.sub),
    '*': (2, operator.mul),
    '/': (2, operator.truediv),
    '//': (2, operator.div),
    '%': (2, operator.mod),
    '^': (2, operator.pow),
    '**': (2, math.pow),
    'abs': (1, operator.abs),
    'ceil': (1, math.ceil),
    'floor': (1, math.floor),
    'round': (2, round),
    'trunc': (1, int),
    'log': (2, math.log),
    'ln': (1, math.log),
    'pi': (0, lambda: math.pi),
    'e': (0, lambda: math.e),
}

def calculate(inp):
    stack = []
    for tok in inp.split():
        if tok in self.calc_operands:
            n_pops, func = self.calc_operands[tok]
            args = [stack.pop() for x in xrange(n_pops)]
            args.reverse()
            stack.append(func(*args))
        elif '.' in tok:
            stack.append(float(tok))
        else:
            stack.append(int(tok))
    if not stack:
        raise ValueError('no items on the stack.')
    return stack.pop()
    if stack:
        raise ValueError('%d item(s) left on the stack.' % len(stack))

calculate('24 38 * 32 / 2 +')
</code></pre>
"
89809,12650,2008-09-18T03:43:03Z,85577,3,"<p><a href=""http://www.larsen-b.com/Article/206.html"" rel=""nofollow"">This article</a>, ""Send hand-crafted Ethernet Frames in Python (ARP for example)"", seems to be exactly what you are looking for.</p>
"
89823,10751,2008-09-18T03:45:38Z,88259,25,"<p>Personally, I use a single settings.py for the project, I just have it look up the hostname it's on (my development machines have hostnames that start with ""gabriel"" so I just have this:</p>

<pre><code>import socket
if socket.gethostname().startswith('gabriel'):
    LIVEHOST = False
else: 
    LIVEHOST = True
</code></pre>

<p>then in other parts I have things like:</p>

<pre><code>if LIVEHOST:
    DEBUG = False
    PREPEND_WWW = True
    MEDIA_URL = 'http://static1.grsites.com/'
else:
    DEBUG = True
    PREPEND_WWW = False
    MEDIA_URL = 'http://localhost:8000/static/'
</code></pre>

<p>and so on. A little bit less readable, but it works fine and saves having to juggle multiple settings files.</p>
"
89915,10906,2008-09-18T04:06:30Z,89909,-1,"<p>use a regex and see if it matches!</p>

<pre><code>([a-z][A-Z][0-9]\_\-)*
</code></pre>
"
89919,14637,2008-09-18T04:08:19Z,89909,77,"<p>A regular expression will do the trick with very little code:</p>

<pre><code>import re

...

if re.match(""^[A-Za-z0-9_-]*$"", my_little_string):
    # do something here
</code></pre>
"
89937,11649,2008-09-18T04:12:00Z,89909,3,"<pre><code> pat = re.compile ('[^\w-]')

 def onlyallowed(s):
    return not pat.search (s)
</code></pre>
"
89940,17095,2008-09-18T04:12:12Z,89909,0,"<p>You could always use a list comprehension and check the results with all, it would be a little less resource intensive than using a regex: <code>all([c in string.letters + string.digits + [""_"", ""-""] for c in mystring])</code></p>
"
89971,14648,2008-09-18T04:18:40Z,89909,12,"<p>There are a variety of ways of achieving this goal, some are clearer than others. For each of my examples, 'True' means that the string passed is valid, 'False' means it contains invalid characters.</p>

<p>First of all, there's the naive approach:</p>

<pre><code>import string
allowed = string.letters + string.digits + '_' + '-'

def check_naive(mystring):
    return all(c in allowed for c in mystring)
</code></pre>

<p>Then there's use of a regular expression, you can do this with re.match(). Note that '-' has to be at the end of the [] otherwise it will be used as a 'range' delimiter. Also note the $ which means 'end of string'. Other answers noted in this question use a special character class, '\w', I always prefer using an explicit character class range using [] because it is easier to understand without having to look up a quick reference guide, and easier to special-case.</p>

<pre><code>import re
CHECK_RE = re.compile('[a-zA-Z0-9_-]+$')
def check_re(mystring):
    return CHECK_RE.match(mystring)
</code></pre>

<p>Another solution noted that you can do an inverse match with regular expressions, I've included that here now. Note that [^...] inverts the character class because the ^ is used:</p>

<pre><code>CHECK_INV_RE = re.compile('[^a-zA-Z0-9_-]')
def check_inv_re(mystring):
   return not CHECK_INV_RE.search(mystring)
</code></pre>

<p>You can also do something tricky with the 'set' object. Have a look at this example, which removes from the original string all the characters that are allowed, leaving us with a set containing either a) nothing, or b) the offending characters from the string:</p>

<pre><code>def check_set(mystring):
    return not set(mystring) - set(allowed)
</code></pre>
"
90064,17095,2008-09-18T04:38:36Z,90052,2,"<p>Please, don't manually parse html in python! There are many better options available; I'd recommend the wonderful <a href=""http://www.crummy.com/software/BeautifulSoup/"" rel=""nofollow"">BeautifulSoup</a></p>
"
90095,10999,2008-09-18T04:43:01Z,90052,4,"<p>Parsing things with regular expressions works for regular languages. HTML is not a regular language, and the stuff you find on web pages these days is absolute crap. <a href=""http://www.crummy.com/software/BeautifulSoup/"" rel=""nofollow"">BeautifulSoup</a> deals with tag-soup HTML with browser-like heuristics so you get parsed HTML that resembles what a browser would display.</p>

<p>The downside is it's not very fast. There's <a href=""http://codespeak.net/lxml/"" rel=""nofollow"">lxml</a> for parsing well-formed html, but you should really use BeautifulSoup if you're not 100% certain that your input will always be well-formed.</p>
"
90103,14199,2008-09-18T04:44:08Z,86134,6,"<p>An additional benefit for Jython, at least for some, is <a href=""http://zyasoft.com/pythoneering/2008/06/realizing-jython-25.html"">it lacks the GIL</a> (the Global Interpreter Lock) and uses Java's native threads.  This means that you can run pure Python code in parallel, something not possible with the GIL.</p>
"
90104,14637,2008-09-18T04:44:24Z,90052,2,"<p>Because of the braces around the anchor tag, that part is interpreted as a capture group. This causes only the capture group to be returned, and not the whole regex match.</p>

<p>Put the entire regex in braces and you'll see the right matches showing up as the first element in the returned tuples.</p>

<p>But indeed, you should use a real parser.</p>
"
90138,14648,2008-09-18T04:52:26Z,90052,23,"<p>This question has been asked in several forms over the last few days, so I'm going to say this very clearly.</p>

<h1>Q: How do I parse HTML with Regular Expressions?</h1>

<h1>A: Please Don't.</h1>

<p>Use <a href=""http://www.crummy.com/software/BeautifulSoup/"" rel=""nofollow"">BeautifulSoup</a>, <a href=""http://code.google.com/p/html5lib/"" rel=""nofollow"">html5lib</a> or <a href=""http://codespeak.net/lxml/lxmlhtml.html"" rel=""nofollow"">lxml.html</a>. Please.</p>
"
90206,11293,2008-09-18T05:10:43Z,90052,1,"<p>As has been mentioned, you should use a parser instead of a regex.</p>

<p>This is how you could do it with a regex though:</p>

<pre><code>import re

html = '''
&lt;body&gt;

&lt;h1&gt;Dog &lt;/h1&gt;
&lt;h2&gt;Cat &lt;/h2&gt;
&lt;h3&gt;Fancy &lt;/h3&gt;
&lt;h1&gt;Tall cup of lemons&lt;/h1&gt;
&lt;h1&gt;&lt;a href=""dog.com""&gt;Dog thing&lt;/a&gt;&lt;/h1&gt;
&lt;/body&gt;
'''

p = re.compile(r'''
    &lt;(?P&lt;header&gt;h[0-9])&gt;             # store header tag for later use
    \s*                              # zero or more whitespace
    (&lt;a\shref=""(?P&lt;href&gt;.*?)""&gt;)?     # optional link tag. store href portion
    \s*
    (?P&lt;title&gt;.*?)                   # title
    \s*
    (&lt;/a&gt;)?                          # optional closing link tag
    \s*
    &lt;/(?P=header)&gt;                   # must match opening header tag
''', re.IGNORECASE + re.VERBOSE)

stories = p.finditer(html)

for match in stories:
    print '%(title)s [%(href)s]' % match.groupdict()
</code></pre>

<p>Here are a couple of good regular expression resources:</p>

<ul>
<li><a href=""http://docs.python.org/dev/howto/regex.html"" rel=""nofollow"">Python Regular Expression HOWTO</a></li>
<li><a href=""http://www.regular-expressions.info/"" rel=""nofollow"">Regular-Expressions.info</a></li>
</ul>
"
90894,15682,2008-09-18T08:18:38Z,90052,2,"<p>Building on the answers so far:</p>

<p>It's best to use a parsing engine. It can cover a lot of cases and in an elegant way. I've tried <a href=""http://www.crummy.com/software/BeautifulSoup/"" rel=""nofollow"">BeautifulSoup</a> and I like it very much. Also easy to use, with a great tutorial.</p>

<p>If sometimes it feels like shooting flies with a cannon you can use a regular expression for quick parsing. If that's what you need here is the modified code that will catch all the headers (even those over multiple lines):</p>

<pre><code>p = re.compile(r'&lt;(h[0-9])&gt;(.+?)&lt;/\1&gt;', re.IGNORECASE | re.DOTALL)
stories = re.findall(p, html)
for i in stories:
	print i
</code></pre>
"
91238,12892,2008-09-18T09:39:06Z,91183,4,"<p>If you want <a href=""http://en.wikipedia.org/wiki/Cryptographic_hash_function"" rel=""nofollow"">message digests</a> (cryptographic hashes), use the <a href=""http://docs.python.org/lib/module-hashlib.html"" rel=""nofollow"">hashlib</a> library. Here's an example (<a href=""http://ipython.scipy.org/"" rel=""nofollow"">IPython</a> session):</p>

<pre>
 In [1]: import hashlib

 In [2]: md = hashlib.sha256(open('/tmp/Calendar.xls', 'rb').read())

 In [3]: md.hexdigest()
 Out[3]: '8517f1eae176f1a20de78d879f81f23de503cfd6b8e4be1d798fb2342934b187'
</pre>
"
91245,12320,2008-09-18T09:41:01Z,90775,0,"<p>You should set the icon ID to something other than 0:</p>

<pre><code>'icon_resources': [(42, 'my_icon.ico')]
</code></pre>

<p>Windows resource IDs must be between 1 and 32767.</p>
"
91249,4203,2008-09-18T09:41:55Z,91183,4,"<p>You might try the following papers to get started with the concept of fingerprinting:</p>

<ul>
<li><a href=""http://theory.stanford.edu/~aiken/publications/papers/sigmod03.pdf"" rel=""nofollow"">Winnowing: Local Algorithms for Document Fingerprinting</a></li>
<li><a href=""http://www.cs.cmu.edu/afs/cs/user/nch/www/koala/main.html"" rel=""nofollow"">Scalable Document Fingerprinting</a></li>
</ul>
"
91301,8925,2008-09-18T09:52:48Z,91205,10,"<p>Logically a lot of things like MIME-encoded mail messages, URLs, XML documents, and so on should be returned as <code>bytes</code> not strings. This could cause some consternation as the libraries start to be nailed down for Python 3 and people discover that they have to be more aware of the <code>bytes</code>/<code>string</code> conversions than they were for <code>str</code>/<code>unicode</code> ...</p>
"
91325,3594,2008-09-18T09:58:19Z,91205,6,"<p>One of the great things about this question (and Python in general) is that you can just mess around in the interpreter! <a href=""http://www.python.org/download/releases/3.0/"">Python 3.0 rc1 is currently available for download</a>.</p>

<pre><code>&gt;&gt;&gt; import urllib.request
&gt;&gt;&gt; fh = urllib.request.urlopen('http://www.python.org/')
&gt;&gt;&gt; print(type(fh.read(100)))
&lt;class 'bytes'&gt;
</code></pre>
"
91508,10661,2008-09-18T10:35:07Z,91205,1,"<p>There will be a two-step dance here.  See <a href=""http://www.artima.com/weblogs/viewpost.jsp?thread=227041"" rel=""nofollow"">Python 3000 and You</a>.</p>

<p>Step 1 is to get running under 3.0.</p>

<p>Step 2 is to rethink your API's to, perhaps, do something more sensible.</p>

<p>The most likely course is that the libraries will switch to unicode strings to remain as compatible as possible with how they used to work.</p>

<p>Then, perhaps, some will switch to bytes to more properly implement the RFC standards for the various protocols.</p>
"
91564,11527,2008-09-18T10:47:49Z,89909,4,"<p>As an alternative to using regex you could do it in Sets:</p>

<pre><code>from sets import Set

allowed_chars = Set('0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_-')

if Set(my_little_sting).issubset(allowed_chars):
    # your action
    print True
</code></pre>
"
91572,11527,2008-09-18T10:49:54Z,89909,10,"<p>If it were not for the dashes and underscores, the easiest solution would be</p>

<pre><code>my_little_string.isalnum()
</code></pre>

<p>(Section <a href=""https://docs.python.org/3/library/stdtypes.html#str.isalnum"" rel=""nofollow"">3.6.1</a> of the Python Library Reference)</p>
"
91608,7437,2008-09-18T10:57:14Z,88259,21,"<p>At the end of settings.py I have the following:</p>

<pre><code>try:
    from settings_local import *
except ImportError:
    pass
</code></pre>

<p>This way if I want to override default settings I need to just put settings_local.py right next to settings.py.</p>
"
91670,15109,2008-09-18T11:10:35Z,90775,1,"<p>If you're using wxPython, you can use the following simple code:</p>

<pre><code>wx.Icon(sys.argv[0], wx.BITMAP_TYPE_ICO)
</code></pre>

<p>I usually have code that checks whether it's running from an EXE or not, and acts accordingly:</p>

<pre><code>def get_app_icon():
    if hasattr(sys, ""frozen"") and getattr(sys, ""frozen"") == ""windows_exe"":
        return wx.Icon(sys.argv[0], wx.BITMAP_TYPE_ICO)
    else:
        return wx.Icon(""gfx/myapp.ico"", wx.BITMAP_TYPE_ICO)
</code></pre>
"
91735,8450,2008-09-18T11:22:06Z,91666,1,"<p>Here is a <a href=""http://decibel.ni.com/content/docs/DOC-1494"" rel=""nofollow"">python sample code calling a CVI</a>.</p>

<p>There are <a href=""http://www.scipy.org/Cookbook/Data_Acquisition_with_PyUL"" rel=""nofollow"">DaqMx python bindings</a> too.</p>
"
91818,893,2008-09-18T11:44:54Z,91810,24,"<pre><code>from pprint import pprint
a = [0, 1, ['a', 'b', 'c'], 2, 3, 4]
pprint(a)
</code></pre>

<p>Note that for a short list like my example, pprint will in fact print it all on one line. However, for more complex structures it does a pretty good job of pretty printing data.</p>
"
91859,8427,2008-09-18T11:54:13Z,91821,1,"<pre><code>getattr(p, s)
setattr(p, s, new_value)
</code></pre>
"
91911,8427,2008-09-18T12:06:25Z,91821,1,"<p>Try:</p>

<pre><code>p.model_properties()[s].get_value_for_datastore(p)
</code></pre>

<p>See <a href=""http://code.google.com/appengine/docs/datastore/propertyclass.html#Property_get_value_for_datastore"" rel=""nofollow"">the documentation</a>.</p>
"
91970,8570,2008-09-18T12:14:37Z,91821,7,"<p>If the model class is sufficiently intelligent, it should recognize the standard Python ways of doing this.</p>

<p>Try:</p>

<pre><code>getattr(p, s)
setattr(p, s, new_value)
</code></pre>

<p>There is also hasattr available.</p>
"
91972,15842,2008-09-18T12:15:04Z,91810,3,"<p>Another good option is to use <a href=""http://ipython.scipy.org/moin/"" rel=""nofollow"">IPython</a>, which is an interactive environment with a lot of extra features, including automatic pretty printing, tab-completion of methods, easy shell access, and a lot more.  It's also very easy to install.  </p>

<p><a href=""http://ipython.scipy.org/doc/manual/html/interactive/tutorial.html"" rel=""nofollow"">IPython tutorial</a></p>
"
92000,9493,2008-09-18T12:19:48Z,89909,20,"<p>[Edit]  There's another solution not mentioned yet, and it seems to outperform the others given so far in most cases.</p>

<p>Use string.translate to replace all valid characters in the string, and see if we have any invalid ones left over.  This is pretty fast as it uses the underlying C function to do the work, with very little python bytecode involved.</p>

<p>Obviously performance isn't everything - going for the most readable solutions is probably the best approach when not in a performance critical codepath, but just to see how the solutions stack up, here's a performance comparison of all the methods proposed so far.  check_trans is the one using the string.translate method.</p>

<p>Test code:</p>

<pre><code>import string, re, timeit

pat = re.compile('[\w-]*$')
pat_inv = re.compile ('[^\w-]')
allowed_chars=string.ascii_letters + string.digits + '_-'
allowed_set = set(allowed_chars)
trans_table = string.maketrans('','')

def check_set_diff(s):
    return not set(s) - allowed_set

def check_set_all(s):
    return all(x in allowed_set for x in s)

def check_set_subset(s):
    return set(s).issubset(allowed_set)

def check_re_match(s):
    return pat.match(s)

def check_re_inverse(s): # Search for non-matching character.
    return not pat_inv.search(s)

def check_trans(s):
    return not s.translate(trans_table,allowed_chars)

test_long_almost_valid='a_very_long_string_that_is_mostly_valid_except_for_last_char'*99 + '!'
test_long_valid='a_very_long_string_that_is_completely_valid_' * 99
test_short_valid='short_valid_string'
test_short_invalid='/$%$%&amp;'
test_long_invalid='/$%$%&amp;' * 99
test_empty=''

def main():
    funcs = sorted(f for f in globals() if f.startswith('check_'))
    tests = sorted(f for f in globals() if f.startswith('test_'))
    for test in tests:
        print ""Test %-15s (length = %d):"" % (test, len(globals()[test]))
        for func in funcs:
            print ""  %-20s : %.3f"" % (func, 
                   timeit.Timer('%s(%s)' % (func, test), 'from __main__ import pat,allowed_set,%s' % ','.join(funcs+tests)).timeit(10000))
        print

if __name__=='__main__': main()
</code></pre>

<p>The results on my system are:</p>

<pre><code>Test test_empty      (length = 0):
  check_re_inverse     : 0.042
  check_re_match       : 0.030
  check_set_all        : 0.027
  check_set_diff       : 0.029
  check_set_subset     : 0.029
  check_trans          : 0.014

Test test_long_almost_valid (length = 5941):
  check_re_inverse     : 2.690
  check_re_match       : 3.037
  check_set_all        : 18.860
  check_set_diff       : 2.905
  check_set_subset     : 2.903
  check_trans          : 0.182

Test test_long_invalid (length = 594):
  check_re_inverse     : 0.017
  check_re_match       : 0.015
  check_set_all        : 0.044
  check_set_diff       : 0.311
  check_set_subset     : 0.308
  check_trans          : 0.034

Test test_long_valid (length = 4356):
  check_re_inverse     : 1.890
  check_re_match       : 1.010
  check_set_all        : 14.411
  check_set_diff       : 2.101
  check_set_subset     : 2.333
  check_trans          : 0.140

Test test_short_invalid (length = 6):
  check_re_inverse     : 0.017
  check_re_match       : 0.019
  check_set_all        : 0.044
  check_set_diff       : 0.032
  check_set_subset     : 0.037
  check_trans          : 0.015

Test test_short_valid (length = 18):
  check_re_inverse     : 0.125
  check_re_match       : 0.066
  check_set_all        : 0.104
  check_set_diff       : 0.051
  check_set_subset     : 0.046
  check_trans          : 0.017
</code></pre>

<p>The translate approach seems best in most cases, dramatically so with long valid strings, but is beaten out by regexes in test_long_invalid (Presumably because the regex can bail out immediately, but translate always has to scan the whole string).  The set approaches are usually worst, beating regexes only for the empty string case.</p>

<p>Using all(x in allowed_set for x in s) performs well if it bails out early, but can be bad if it has to iterate through every character.  isSubSet and set difference are comparable, and are consistently proportional to the length of the string regardless of the data.</p>

<p>There's a similar difference between the regex methods matching all valid characters and searching for invalid characters.  Matching performs a little better when checking for a long, but fully valid string, but worse for invalid characters near the end of the string.</p>
"
92254,17095,2008-09-18T12:54:38Z,92230,1,"<p>I'd suggest writing a non-trivial webapp using either Django or Pylons, something that does some number crunching.
No better way to learn a new language than commiting yourself to a problem and learning as you go!</p>
"
92260,3408,2008-09-18T12:55:39Z,91810,10,"<p>Somtimes <a href=""http://pyyaml.org/"">YAML</a> can be good for this.</p>

<pre><code>import yaml
a = [0, 1, ['a', 'b', 'c'], 2, 3, 4]
print yaml.dump(a)
</code></pre>

<p>Produces:</p>

<pre><code>- 0
- 1
- [a, b, c]
- 2
- 3
- 4
</code></pre>
"
92269,145,2008-09-18T12:56:33Z,92230,3,"<p>Something great to play around with, though not a project, is <a href=""http://pythonchallenge.com"" rel=""nofollow"">The Python Challenge</a>.  I've found it quite useful in improving my python skills, and it gives your brain a good workout at the same time.</p>
"
92288,6231,2008-09-18T12:57:32Z,92230,2,"<p>I honestly loved the book <a href=""http://rads.stackoverflow.com/amzn/click/0596009259"" rel=""nofollow"">Programming Python.</a> It has a large assortment of small projects, most of which can be completed in an evening at a leisurely pace.  They get you acquainted with most of the standard library and will likely hold your interest.  Most importantly these small projects are actually useful in a ""day to day"" sense.  The book pretty much only assumes you know and understand the bare essentials of Python as a language, rather than knowledge of it's huge API library.</p>

<p>I think you'll find it'll be well worth working through.</p>
"
92296,6496,2008-09-18T12:58:50Z,92230,5,"<p>Depending on exactly what you mean by ""gotten to grips with the basics"", I'd suggest reading through <a href=""http://www.diveintopython.net/"" rel=""nofollow"">Dive Into Python</a> and typing/executing all the chapter code, then get something like <a href=""http://www.amazon.co.uk/Programming-Collective-Intelligence-Building-Applications/dp/0596529325/"" rel=""nofollow"">Programming Collective Intelligence</a> and working through it - you'll learn python quite well, not to mention some quite excellent algorithms that'll come in handy to a web developer.</p>
"
92318,9951,2008-09-18T13:01:53Z,92230,14,"<p>Well, there are great ressources for advanced Python programming :</p>

<ul>
<li>Dive Into Python (<a href=""http://www.diveintopython.net/"">read it for free</a>)</li>
<li>Online python cookbooks (e.g. <a href=""http://code.activestate.com/recipes/langs/python/"">here</a> and <a href=""http://the.taoofmac.com/space/Python/Grimoire"">there</a>)</li>
<li>O'Reilly's Python Cookbook (see amazon)</li>
<li>A funny riddle game : <a href=""http://www.pythonchallenge.com/"">Python Challenge</a> </li>
</ul>

<p>Here is a list of subjects you must master if you want to write ""Python"" on your resume :</p>

<ul>
<li><a href=""http://docs.python.org/tutorial/datastructures.html#list-comprehensions"">list comprehensions</a></li>
<li><a href=""http://stackoverflow.com/questions/231767/the-python-yield-keyword-explained/231855#231855"">iterators and generators</a></li>
<li><a href=""http://stackoverflow.com/questions/739654/understanding-python-decorators/1594484#1594484"">decorators</a></li>
</ul>

<p>They are what make Python such a cool language (with the standard library of course, that I keep discovering everyday).</p>
"
92381,16361,2008-09-18T13:10:07Z,92230,1,"<p>Write a web app, likely in <a href=""http://www.djangoproject.com/"" rel=""nofollow"">Django</a> - the <a href=""http://docs.djangoproject.com/"" rel=""nofollow"">docs</a> will teach you a lot of good Python style.</p>

<p>Use some of the popular libraries like <a href=""http://pygments.org/"" rel=""nofollow"">Pygments</a> or the <a href=""http://www.feedparser.org/"" rel=""nofollow"">Universal Feed Parser</a>. Both of these make extremely useful functions, which are hard to get right, available in a well-documented API.</p>

<p>In general, I'd stay away from libs that aren't well documented -
you'll bang your head on the wall trying to reverse-engineer them -
and libraries that are wrappers around C libraries, if you don't have
any C experience. I worked on wxPython code when I was still learning
Python, which was my first language, and at the time it was little
more than a wrapper around wxWidgets. That code was easily the ugliest
I've ever written.</p>

<p>I didn't get that much out of Dive Into Python, except for the dynamic import chapter - that's not really well-documented elsewhere.</p>
"
92395,1694,2008-09-18T13:11:46Z,89228,1889,"<p>Here's a summary of the ways to call external programs and the advantages and disadvantages of each:</p>

<ol>
<li><p><code>os.system(""some_command with args"")</code> passes the command and arguments to your system's shell.  This is nice because you can actually run multiple commands at once in this manner and set up pipes and input/output redirection.  For example:  </p>

<pre><code>os.system(""some_command &lt; input_file | another_command &gt; output_file"")  
</code></pre>

<p>However, while this is convenient, you have to manually handle the escaping of shell characters such as spaces, etc.  On the other hand, this also lets you run commands which are simply shell commands and not actually external programs.  See <a href=""https://docs.python.org/2/library/os.html#os.system"">the documentation</a>.</p></li>
<li><p><code>stream = os.popen(""some_command with args"")</code> will do the same thing as <code>os.system</code> except that it gives you a file-like object that you can use to access standard input/output for that process.  There are 3 other variants of popen that all handle the i/o slightly differently.  If you pass everything as a string, then your command is passed to the shell; if you pass them as a list then you don't need to worry about escaping anything.  See <a href=""https://docs.python.org/2/library/os.html#os.popen"">the documentation</a>.</p></li>
<li><p>The <code>Popen</code> class of the <code>subprocess</code> module.  This is intended as a replacement for <code>os.popen</code> but has the downside of being slightly more complicated by virtue of being so comprehensive.  For example, you'd say:</p>

<pre><code>print subprocess.Popen(""echo Hello World"", shell=True, stdout=subprocess.PIPE).stdout.read()
</code></pre>

<p>instead of: </p>

<pre><code>print os.popen(""echo Hello World"").read()
</code></pre>

<p>but it is nice to have all of the options there in one unified class instead of 4 different popen functions.  See <a href=""https://docs.python.org/2/library/subprocess.html#popen-constructor"">the documentation</a>.</p></li>
<li><p>The <code>call</code> function from the <code>subprocess</code> module.  This is basically just like the <code>Popen</code> class and takes all of the same arguments, but it simply waits until the command completes and gives you the return code.  For example:</p>

<pre><code>return_code = subprocess.call(""echo Hello World"", shell=True)  
</code></pre>

<p>See <a href=""https://docs.python.org/2/library/subprocess.html#subprocess.call"">the documentation</a>.</p></li>
<li><p>If you're on Python 3.5 or later, you can use the new <a href=""https://docs.python.org/3.5/library/subprocess.html#subprocess.run""><code>subprocess.run</code></a> function, which is a lot like the above but even more flexible and returns a <a href=""https://docs.python.org/3.5/library/subprocess.html#subprocess.CompletedProcess""><code>CompletedProcess</code></a> object when the command finishes executing.</p></li>
<li><p>The os module also has all of the fork/exec/spawn functions that you'd have in a C program, but I don't recommend using them directly.</p></li>
</ol>

<p>The <code>subprocess</code> module should probably be what you use.</p>

<p>Finally please be aware that for all methods where you pass the final command to be executed by the shell as a string and you are responsible for escaping it. <strong>There are serious security implications</strong> if any part of the string that you pass can not be fully trusted. For example, if a user is entering some/any part of the string. If you are unsure, only use these methods with constants. To give you a hint of the implications consider this code:</p>

<pre><code>print subprocess.Popen(""echo %s "" % user_input, stdout=PIPE).stdout.read()
</code></pre>

<p>and imagine that the user enters ""my mama didnt love me &amp;&amp; rm -rf /"".</p>
"
92441,5190,2008-09-18T13:17:35Z,92438,0,"<p>The best I've come up with now is (thanks to the python-izers above) </p>

<pre><code>def filter_non_printable(str):
  return ''.join([c for c in str if ord(c) &gt; 31 or ord(c) == 9])
</code></pre>

<p>This is the only way I've found out that works with Unicode characters/strings</p>

<p>Any better options?</p>
"
92461,14106,2008-09-18T13:20:21Z,92230,1,"<p>People tend to say something along the lines of ""The best way to learn is by doing"" but I've always found that unless you're specifically learning a language to contribute to some project it's difficult to actually find little problems to tackle to keep yourself going.</p>

<p>A good solution to this is <a href=""http://projecteuler.net/"" rel=""nofollow"">Project Euler</a>, which has a list of various programming\mathematics challenges ranging from simple  to quite brain-taxing. As an example, the first challenge is:</p>

<blockquote>
  <p>If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.</p>
</blockquote>

<p>And by problem #50 it's already getting a little tougher</p>

<blockquote>
  <p>Which prime, below one-million, can be written as the sum of the most consecutive primes</p>
</blockquote>

<p>There are 208 in total, but I think some new ones get added here and there.</p>

<p>While I already knew python fairly well before starting Project Euler, I found that I learned some cool tricks purely through using the language so much. Good luck!</p>
"
92488,17095,2008-09-18T13:23:14Z,92438,38,"<p>As far as I know, the most pythonic/efficient method would be:</p>

<pre><code>import string

filtered_string = filter(lambda x: x in string.printable, myStr)
</code></pre>
"
92491,10661,2008-09-18T13:23:41Z,92230,2,"<p>I'll plug <a href=""http://homepage.mac.com/s_lott/books/python.html"" rel=""nofollow"">Building Skills in Python</a>.   Plus, if you want something more challenging, <a href=""http://homepage.mac.com/s_lott/books/oodesign.html"" rel=""nofollow"">Building Skills in OO Design</a> is a rather large and complex series of exercises.</p>
"
92509,32538,2008-09-18T13:26:00Z,92438,4,"<p>This function uses list comprehensions and str.join, so it runs in linear time instead of O(n^2):</p>

<pre><code>from curses.ascii import isprint

def printable(input):
    return ''.join(char for char in input if isprint(char))
</code></pre>
"
92548,17095,2008-09-18T13:32:23Z,92533,2,"<p>I found struct.unpack to be a godsend for unpacking binary data formats after I learned of it!</p>
"
92682,238,2008-09-18T13:48:41Z,92565,2,"<p>The ""sample"" editor scite uses the bookmark feature to bookmark all the lines that match the search result.</p>
"
92691,9282,2008-09-18T13:49:59Z,92230,2,"<p><em>The Python Cookbook</em> is absolutely essential if you want to master idiomatic Python. Besides, that's the book that made me fall in love with the language.</p>
"
92710,12320,2008-09-18T13:52:27Z,90775,1,"<p>Well, well... I installed py2exe and I think it's a bug. In py2exe<code>_</code>util.c they should init rt<code>_</code>icon<code>_</code>id to 1 instead of 0. The way it is now, it's impossible to load the first format of the first icon using LoadIcon/LoadImage.</p>

<p>I'll notify the developers about this if it's not already a known issue.</p>

<p>A workaround, in the meantime, would be to include the same icon twice in your setup.py:</p>

<pre><code>'icon_resources': [(1, 'my_icon.ico'), (2, 'my_icon.ico')]
</code></pre>

<p>You can load the second one, while Windows will use the first one as the shell icon. Remember to use non-zero IDs though. :)</p>
"
92778,15459,2008-09-18T13:59:19Z,92565,9,"<p>Have you read the <a href=""http://scintilla.sourceforge.net/ScintillaDoc.html#Markers"">Markers reference in Scintilla doc</a>?
This reference can be a bit obscure, so I advise to take a look at the source code of SciTE as well. This text editor was originally a testbed for Scintilla. It grown to a full fledged editor, but it is still a good implementation reference for all things Scintilla.</p>

<p>In our particular case, there is a Mark All button in the Find dialog. You can find its implementation in SciTEBase::MarkAll() method. This method only loops on search results (until it loops on the first search result, if any) and puts a bookmark on the found lines (and optionally set an indicator on the found items).
The found line is gotten using SCI_LINEFROMPOSITION(posFound), the bookmark is just a call to SCI_MARKERADD(lineno, markerBookmark).
Note that the mark can be symbol in a margin, or if not associated to a margin, it will highlight the whole line.</p>

<p>HTH.</p>
"
92891,6865,2008-09-18T14:13:09Z,92373,1,"<p>Why don't you try <a href=""http://code.google.com/p/modwsgi/"" rel=""nofollow"">modwsgi</a>? It sounds as the preffered way these days for WSGI applications such as Django.</p>

<p>If you don't wan't to compile stuff for Fedora Core, that might be trickier.</p>

<p>Regarding 1) <a href=""http://fitri.manzanisimo.net/2008/05/23/hostmonster-python-25-subversion-14-django-svn-mysqldb-fcgid/"" rel=""nofollow"">this</a> seems to solve the fcgid configuration problem. </p>

<p>Note that you don't want to run the django application manually like this: <code>python manage.py runfcgi</code>, the fcgi is run by apache automatically if the setup is correct and restarted by <code>touch your.fcgi</code>.</p>
"
92953,12048,2008-09-18T14:18:51Z,92928,15,"<p>Just the thread.</p>
"
92986,2233,2008-09-18T14:22:52Z,92928,34,"<p>It will just sleep the thread except in the case where your application has only a single thread, in which case it will sleep the thread and effectively the process as well.</p>

<p>The python documentation on sleep doesn't specify this however, so I can certainly understand the confusion!</p>

<p><a href=""http://docs.python.org/2/library/time.html"">http://docs.python.org/2/library/time.html</a></p>
"
93029,107366,2008-09-18T14:28:04Z,92438,52,"<p>Iterating over strings is unfortunately rather slow in Python. Regular expressions are over an order of magnitude faster for this kind of thing. You just have to build the character class yourself. The <em>unicodedata</em> module is quite helpful for this, especially the <em>unicodedata.category()</em> function. See <a href=""http://www.unicode.org/reports/tr44/#General_Category_Values"">Unicode Character Database</a> for descriptions of the categories.</p>

<pre><code>import unicodedata, re

all_chars = (unichr(i) for i in xrange(0x110000))
control_chars = ''.join(c for c in all_chars if unicodedata.category(c) == 'Cc')
# or equivalently and much more efficiently
control_chars = ''.join(map(unichr, range(0,32) + range(127,160)))

control_char_re = re.compile('[%s]' % re.escape(control_chars))

def remove_control_chars(s):
    return control_char_re.sub('', s)
</code></pre>
"
93069,16148,2008-09-18T14:32:45Z,92928,6,"<p>The thread will block, but the process is still alive.</p>

<p>In a single threaded application, this means everything is blocked while you sleep.  In a multithreaded application, only the thread you explicitly 'sleep' will block and the other threads still run within the process.</p>
"
93179,1502059,2008-09-18T14:42:23Z,92928,219,"<p>It blocks the thread.  If you look in Modules/timemodule.c in the Python source, you'll see that in the call to <code>floatsleep()</code>, the substantive part of the sleep operation is wrapped in a Py_BEGIN_ALLOW_THREADS and Py_END_ALLOW_THREADS block, allowing other threads to continue to execute while the current one sleeps.  You can also test this with a simple python program:</p>

<pre><code>import time
from threading import Thread

class worker(Thread):
    def run(self):
    	for x in xrange(0,11):
    		print x
    		time.sleep(1)

class waiter(Thread):
    def run(self):
    	for x in xrange(100,103):
    		print x
    		time.sleep(5)

def run():
    worker().start()
    waiter().start()
</code></pre>

<p>Which will print:</p>

<pre><code>&gt;&gt;&gt; thread_test.run()
0
100
&gt;&gt;&gt; 1
2
3
4
5
101
6
7
8
9
10
102
</code></pre>
"
93312,16361,2008-09-18T14:56:26Z,91810,8,"<p>In addition to <code>pprint.pprint</code>, <code>pprint.pformat</code> is really useful for making readable <code>__repr__</code>s. My complex <code>__repr__</code>s usually look like so:</p>

<pre><code>def __repr__(self):
    from pprint import pformat

    return ""&lt;ClassName %s&gt;"" % pformat({""attrs"":self.attrs,
                                       ""that_i"":self.that_i,
                                       ""care_about"":self.care_about})
</code></pre>
"
93401,NA,2008-09-18T15:06:11Z,92620,0,"<p>www.google.com is not accessible by HTTPS.  It redirects to insecure HTTP.  To get to mail, you should be going go https://mail.google.com</p>
"
93404,407880,2008-09-18T15:06:36Z,92620,1,"<pre><code>import socket
socket.setdefaulttimeout(30000)
sock = socket.socket()
sock.connect(('www.google.com', 443))
ssl = socket.ssl(sock)
ssl.server()
--&gt; '/C=US/ST=California/L=Mountain View/O=Google Inc/CN=www.google.com'
</code></pre>

<p>It works just fine. I can't reproduce your error.</p>
"
93498,16917,2008-09-18T15:17:34Z,92533,1,"<p>I've found <a href=""http://docs.python.org/lib/module-sched.html"" rel=""nofollow"">sched module</a> to be helpful in cron-like activities. It simplifies things a lot. Unfortunately I found it too late. </p>
"
93557,11527,2008-09-18T15:25:37Z,92438,8,"<p>You could try setting up a filter using the <code>unicodedata.category()</code> function:</p>

<pre><code>printable = Set('Lu', 'Ll', ...)
def filter_non_printable(str):
  return ''.join(c for c in str if unicodedata.category(c) in printable)
</code></pre>

<p>See the <a href=""http://www.unicode.org/versions/Unicode9.0.0/ch04.pdf"" rel=""nofollow"">Unicode database character properties</a> for the available categories</p>
"
93831,9951,2008-09-18T15:54:07Z,93710,1,"<p>I think I have your poison :</p>

<p><a href=""http://sourceforge.net/projects/xmlite"" rel=""nofollow"">http://sourceforge.net/projects/xmlite</a></p>

<p>Cheers</p>
"
93850,452521,2008-09-18T15:55:24Z,93710,-4,"<p><strong>xml.etree.cElementTree</strong>, included in the default distribution of CPython since 2.5. Lightning fast for both reading and writing XML.</p>
"
93857,17898,2008-09-18T15:56:09Z,16861,12,"<p>The best way to prevent XSS is not to try and filter everything, but rather to simply do HTML Entity encoding.  For example, automatically turn &lt; into &amp;lt;.  This is the ideal solution assuming you don't need to accept any html input (outside of forum/comment areas where it is used as markup, it should be pretty rare to need to accept HTML); there are so many permutations via alternate encodings that anything but an ultra-restrictive whitelist (a-z,A-Z,0-9 for example) is going to let something through.</p>

<p>SQL Injection, contrary to other opinion, is still possible, if you are just building out a query string.  For example, if you are just concatenating an incoming parameter onto a query string, you will have SQL Injection.  The best way to protect against this is also not filtering, but rather to religiously use parameterized queries and NEVER concatenate user input.</p>

<p>This is not to say that filtering isn't still a best practice, but in terms of SQL Injection and XSS, you will be far more protected if you religiously use Parameterize Queries and HTML Entity Encoding.</p>
"
93865,17624,2008-09-18T15:56:57Z,92533,4,"<p>Oft overlooked modules, uses and tricks:</p>

<p>collections.defaultdict(): for when you want missing keys in a dict to have a default value.</p>

<p>functools.wraps(): for writing decorators that play nicely with introspection.</p>

<p>posixpath: the os.path module for POSIX systems. You can use it for manipulating POSIX paths (including URI elements) even on Windows and other non-POSIX systems.</p>

<p>ntpath: the os.path module for Windows; usable for manipulation of Windows paths on non-Windows systems.</p>

<p>(also: macpath, for MacOS 9 and earlier, os2emxpath for OS/2 EMX, but I'm not sure if anyone still cares.)</p>

<p>pprint: more structured printing of the repr() of containers makes debugging much easier.</p>

<p>imp: all the tools you need to write your own plugin system or make Python import modules from arbitrary archives.</p>

<p>rlcompleter: getting tab-completion in the normal interactive interpreter. Just do ""import readline, rlcompleter; readline.parse_and_bind('tab: complete')""</p>

<p>the PYTHONSTARTUP environment variable: can be set to the path to a file that will be executed (in the main namespace) when entering the interactive interpreter; useful for putting things in like the rlcompleter recipe above.</p>
"
93871,16361,2008-09-18T15:57:23Z,93710,-1,"<p>I've always had good results with <a href=""http://codespeak.net/lxml/"" rel=""nofollow"">lxml</a>. It's a pain to install, as it's mostly a wrapper around <a href=""http://xmlsoft.org/"" rel=""nofollow"">libxml2</a>, but <code>lxml.etree</code>  tree objects have a <code>.write()</code> method that takes a file-like object to stream to.</p>

<pre><code>from lxml.etree import XML

tree = XML('&lt;root&gt;&lt;a&gt;&lt;b/&gt;&lt;/a&gt;&lt;/root&gt;')
tree.write(your_file_object)
</code></pre>
"
93984,6267,2008-09-18T16:08:21Z,93710,0,"<p>Some years ago I used <code>MarkupWriter</code> from <a href=""http://4suite.org/index.xhtml"" rel=""nofollow"">4suite</a></p>

<blockquote>
<pre><code>General-purpose utility class for generating XML (may eventually be
expanded to produce more output types)

Sample usage:

from Ft.Xml import MarkupWriter
writer = MarkupWriter(indent=u""yes"")
writer.startDocument()
writer.startElement(u'xsa')
writer.startElement(u'vendor')
#Element with simple text (#PCDATA) content
writer.simpleElement(u'name', content=u'Centigrade systems')
#Note writer.text(content) still works
writer.simpleElement(u'email', content=u""info@centigrade.bogus"")
writer.endElement(u'vendor')
#Element with an attribute
writer.startElement(u'product', attributes={u'id': u""100\u00B0""})
#Note writer.attribute(name, value, namespace=None) still works
writer.simpleElement(u'name', content=u""100\u00B0 Server"")
#XML fragment
writer.xmlFragment('&lt;version&gt;1.0&lt;/version&gt;&lt;last-release&gt;20030401&lt;/last-release&gt;')
#Empty element
writer.simpleElement(u'changes')
writer.endElement(u'product')
writer.endElement(u'xsa')
writer.endDocument()

Note on the difference between 4Suite writers and printers
Writer  - module that exposes a broad public API for building output
          bit by bit
Printer - module that simply takes a DOM and creates output from it
          as a whole, within one API invokation
</code></pre>
</blockquote>

<p>Recently i hear a lot about how <a href=""http://codespeak.net/lxml/"" rel=""nofollow"">lxml</a> is great, but I don't have first-hand experience, and I had some fun working with <a href=""http://freshmeat.net/projects/gnosisxml/"" rel=""nofollow"">gnosis</a>.</p>
"
94114,6402,2008-09-18T16:22:28Z,93710,13,"<p>I think you'll find XMLGenerator from xml.sax.saxutils is the closest thing to what you want.</p>

<pre>
import time
from xml.sax.saxutils import XMLGenerator
from xml.sax.xmlreader import AttributesNSImpl

LOG_LEVELS = ['DEBUG', 'WARNING', 'ERROR']


class xml_logger:
    def __init__(self, output, encoding):
        """"""
        Set up a logger object, which takes SAX events and outputs
        an XML log file
        """"""
        logger = XMLGenerator(output, encoding)
        logger.startDocument()
        attrs = AttributesNSImpl({}, {})
        logger.startElementNS((None, u'log'), u'log', attrs)
        self._logger = logger
        self._output = output
        self._encoding = encoding
        return

    def write_entry(self, level, msg):
        """"""
        Write a log entry to the logger
        level - the level of the entry
        msg   - the text of the entry.  Must be a Unicode object
        """"""
        #Note: in a real application, I would use ISO 8601 for the date
        #asctime used here for simplicity
        now = time.asctime(time.localtime())
        attr_vals = {
            (None, u'date'): now,
            (None, u'level'): LOG_LEVELS[level],
            }
        attr_qnames = {
            (None, u'date'): u'date',
            (None, u'level'): u'level',
            }
        attrs = AttributesNSImpl(attr_vals, attr_qnames)
        self._logger.startElementNS((None, u'entry'), u'entry', attrs)
        self._logger.characters(msg)
        self._logger.endElementNS((None, u'entry'), u'entry')
        return

    def close(self):
        """"""
        Clean up the logger object
        """"""
        self._logger.endElementNS((None, u'log'), u'log')
        self._logger.endDocument()
        return

if __name__ == ""__main__"":
    #Test it out
    import sys
    xl = xml_logger(sys.stdout, 'utf-8')
    xl.write_entry(2, u""Vanilla log entry"")
    xl.close()   

</pre>

<p>You'll probably want to look at the rest of the article I got that from at <a href=""http://www.xml.com/pub/a/2003/03/12/py-xml.html"">http://www.xml.com/pub/a/2003/03/12/py-xml.html</a>.</p>
"
94206,8683,2008-09-18T16:33:46Z,94153,4,"<p>You could always use <em>shutil.copyfileobj</em>, in your example:</p>

<pre><code>new_file = open('bar.txt', 'rw')
shutil.copyfileobj(f, new_file)
</code></pre>
"
94339,3002,2008-09-18T16:45:37Z,94153,16,"<p>The file you create with <code>TemporaryFile</code> or <code>NamedTemporaryFile</code> is automatically removed when it's closed, which is why you get an error. If you don't want this, you can use <code>mkstemp</code> instead (see the docs for <a href=""http://docs.python.org/lib/module-tempfile.html"">tempfile</a>).</p>

<pre><code>&gt;&gt;&gt; import tempfile, shutil, os
&gt;&gt;&gt; fd, path = tempfile.mkstemp()
&gt;&gt;&gt; os.write(fd, 'foo')
&gt;&gt;&gt; os.close(fd)
&gt;&gt;&gt; shutil.copy(path, 'bar.txt')
&gt;&gt;&gt; os.remove(path)
</code></pre>
"
94385,4482,2008-09-18T16:50:48Z,94334,1,"<p>You could download the source of BitTorrent for starters and see how they did it.</p>

<p><a href=""http://download.bittorrent.com/dl/"" rel=""nofollow"">http://download.bittorrent.com/dl/</a></p>
"
94434,422,2008-09-18T16:55:34Z,94334,1,"<p>If it's something where you're going to need tons of threads and need better concurrent performance, check out <a href=""http://www.stackless.com/"" rel=""nofollow"">Stackless Python</a>. Otherwise you could just use the <a href=""http://en.wikipedia.org/wiki/SOAP"" rel=""nofollow"">SOAP</a> or <a href=""http://www.xmlrpc.com/"" rel=""nofollow"">XML-RPC</a> protocols. In response to Ben's post, if you don't want to look over the BitTorrent source, you could just look at the article on <a href=""http://en.wikipedia.org/wiki/BitTorrent_(protocol)"" rel=""nofollow"">the BitTorrent protocol</a>.</p>
"
94491,676,2008-09-18T17:03:42Z,94490,8,"<p>Here's how I did it (grabbing all files ending in "".ranks""):</p>

<pre><code>import urllib2, cStringIO, zipfile

try:
    remotezip = urllib2.urlopen(url)
    zipinmemory = cStringIO.StringIO(remotezip.read())
    zip = zipfile.ZipFile(zipinmemory)
    for fn in zip.namelist():
        if fn.endswith("".ranks""):
            ranks_data = zip.read(fn)
            for line in ranks_data.split(""\n""):
                # do something with each line
except urllib2.HTTPError:
    # handle exception
</code></pre>
"
94510,2603,2008-09-18T17:07:00Z,94334,2,"<p>You could checkout <a href=""http://pyprocessing.berlios.de/"" rel=""nofollow"">pyprocessing</a> which will be included in the standard library as of 2.6. It allows you to run tasks on multiple processes using an API similar to threading.</p>
"
94516,8427,2008-09-18T17:07:38Z,94490,1,"<p>Bear in mind that merely decompressing a ZIP file may result in <a href=""http://en.wikipedia.org/wiki/Decompression_bomb"" rel=""nofollow"">a security vulnerability</a>.</p>
"
94543,15401,2008-09-18T17:10:42Z,13857,-3,"<p>The best explanation I ever saw of a closure was to explain the mechanism.  It went something like this:</p>

<p>Imagine your program stack as a degenerate tree where each node has only one child and the single leaf node is the context of your currently executing procedure.</p>

<p>Now relax the constraint that each node can have only one child.</p>

<p>If you do this, you can have a construct ('yield') that can return from a procedure without discarding the local context (i.e. it doesn't pop it off the stack when you return).  The next time the procedure is invoked, the invocation picks up the old stack (tree) frame and continues executing where it left off.</p>
"
94551,16976,2008-09-18T17:11:53Z,92533,2,"<p><a href=""http://docs.python.org/lib/module-getpass.html"" rel=""nofollow"">getpass</a> is useful for determining the login name of the current user.</p>

<p><a href=""http://docs.python.org/lib/module-grp.html"" rel=""nofollow"">grp</a> allows you to lookup Unix group IDs by name, and vice versa.</p>

<p><a href=""http://docs.python.org/lib/module-dircache.html"" rel=""nofollow"">dircache</a> might be useful in situations where you're repeatedly polling the contents of a directory.</p>

<p><a href=""http://docs.python.org/lib/module-glob.html"" rel=""nofollow"">glob</a> can find filenames matching wildcards like a Unix shell does.</p>

<p><a href=""http://docs.python.org/lib/module-shutil.html"" rel=""nofollow"">shutil</a> is useful when you need to copy, delete or rename a file.</p>

<p><a href=""http://docs.python.org/lib/module-csv.html"" rel=""nofollow"">csv</a> can simplify parsing of delimited text files.</p>

<p><a href=""http://docs.python.org/lib/module-optparse.html"" rel=""nofollow"">optparse</a> provides a reliable way to parse command line options.</p>

<p><a href=""http://docs.python.org/lib/module-bz2.html"" rel=""nofollow"">bz2</a> comes in handy when you need to manipulate a bzip2-compressed file.</p>

<p><a href=""http://docs.python.org/lib/module-urlparse.html"" rel=""nofollow"">urlparse</a> will save you the hassle of breaking up a URL into component parts.</p>
"
94597,16051,2008-09-18T17:18:53Z,94334,9,"<p>I think you mean ""Networked Apps""? Distributed means an app that can split its workload among multiple worker clients over the network. </p>

<p>You probably want.
<a href=""http://twistedmatrix.com/trac/"">Twisted</a></p>
"
94869,14382,2008-09-18T17:46:36Z,78450,2,"<p>Well, it looks as if I will be answering my own question.</p>

<p>First, the documentation flat out lies where it reads ""In any style command the first row index may be set to one of the special strings 'splitlast' or 'splitfirst' to indicate that the style should be used only for the last row of a split table, or the first row of a continuation.""  In the current release, the ""splitlast"" and ""splitfirst"" row indices break with the aforementioned TypeErrors on the TEXTCOLOR and BACKGROUND commnds.</p>

<p>My suspicion, based on reading the source code, is that only the tablestyle line commands (GRID, BOX, LINEABOVE, and LINEBELOW) are currently compatible with the 'splitfirst' and 'splitlast' row indices.  I suspect that all cell commands break with the aforementioned TypeErrors.</p>

<p>However, I was able to do what I wanted by subclassing the Table class and overriding the onSplit method.  Here is my code:</p>

<pre><code>class XTable(Table):
    def onSplit(self, T, byRow=1):
        T.setStyle(TableStyle([
          ('TEXTCOLOR', (0, 1), (1, 1), colors.black)]))
</code></pre>

<p>What this does is apply the text color black to the first and second cell of the second row of each page.  (The first row is a header, repeated by the repeatRows parameter of the Table.)  More precisely, it is doing this to the first and second cell of each frame, but since I am using the SimpleDocTemplate, frames and pages are identical.</p>
"
94953,9402,2008-09-18T17:54:40Z,94935,0,"<p>See this <a href=""http://avinashv.net/2008/05/pythons-range-and-xrange/"" rel=""nofollow"">post</a> to find difference between range and xrange:</p>

<p>To quote:</p>

<blockquote>
  <p><code>range</code> returns exactly what you think: a list of consecutive
  integers, of a defined length beginning with 0. <code>xrange</code>, however,
  returns an <em>""xrange object""</em>, which acts a great deal like an iterator</p>
</blockquote>
"
94957,4482,2008-09-18T17:55:00Z,94935,25,"<p>xrange returns an iterator and only keeps one number in memory at a time.  range keeps the entire list of numbers in memory.</p>
"
94962,18031,2008-09-18T17:55:13Z,94935,460,"<p>range creates a list, so if you do <code>range(1, 10000000)</code> it creates a list in memory with <code>9999999</code> elements.</p>

<p><code>xrange</code> is a sequence object that  evaluates lazily.  </p>
"
94965,9323,2008-09-18T17:55:27Z,94935,2,"<p>range generates the entire list and returns it.  xrange does not -- it generates the numbers in the list on demand.</p>
"
94966,17457,2008-09-18T17:55:30Z,94935,2,"<p>xrange uses an iterator (generates values on the fly), range returns a list.</p>
"
94971,8570,2008-09-18T17:55:59Z,94935,18,"<p>Do spend some time with the <a href=""http://docs.python.org/lib/typesseq-xrange.html"">Library Reference</a>. The more familiar you are with it, the faster you can find answers to questions like this. Especially important are the first few chapters about builtin objects and types.</p>

<blockquote>
  <p>The advantage of the xrange type is that an xrange object will always 
  take the same amount of memory, no matter the size of the range it represents. 
  There are no consistent performance advantages.</p>
</blockquote>

<p>Another way to find quick information about a Python construct is the docstring and the help-function:</p>

<pre><code>print xrange.__doc__ # def doc(x): print x.__doc__ is super useful
help(xrange)
</code></pre>
"
94991,10661,2008-09-18T17:58:06Z,92533,1,"<p>Most of the other examples are merely overlooked, not unexpected uses for module.</p>

<p>fnmatch, like shlex, can be applied in unexpected ways.  fnmatch is a kind of poor-person's RE, and can be used for more than matching files, it can compare strings with the simplified wild-card patterns.</p>
"
95010,14260,2008-09-18T17:59:46Z,94935,8,"<p>It is for optimization reasons.</p>

<p>range() will create a list of values from start to end (0 .. 20 in your example). This will become an expensive operation on very large ranges.</p>

<p>xrange() on the other hand is much more optimised. it will only compute the next value when needed (via an xrange sequence object) and does not create a list of all values like range() does.</p>
"
95014,927,2008-09-18T18:00:05Z,94952,3,"<p>An option you may consider, if an LL parser is ok to you, is to give <a href=""http://www.antlr.org/wiki/display/ANTLR3/Antlr3PythonTarget"" rel=""nofollow"">ANTLR</a> a try, it can generate python too (actually it is LL(*) as they name it, * stands for the quantity of lookahead it can cope with).</p>
"
95035,3926,2008-09-18T18:02:07Z,94952,1,"<p>There's ANTLR, which is LL(*), there's PyParsing, which is more object friendly and is sort of like a DSL, and then there's <a href=""http://www.canonware.com/Parsing/"" rel=""nofollow"">Parsing</a> which is like OCaml's Menhir.</p>
"
95100,1595,2008-09-18T18:08:19Z,94935,148,"<blockquote>
  <p>range creates a list, so if you do <code>range(1, 10000000)</code> it creates a list in memory with <code>10000000</code> elements.</p>
  
  <p><code>xrange</code> <s>is a generator, so it</s> is a sequence object <s>is a</s> that  evaluates lazily.  </p>
</blockquote>

<p>This is true, but in Python 3, range will be implemented by the Python 2 xrange(). If you need to actually generate the list, you will need to do:</p>

<pre><code>list(range(1,100))
</code></pre>
"
95102,14057,2008-09-18T18:08:28Z,94952,0,"<p><a href=""http://www.antlr.org/"" rel=""nofollow"">ANTLR</a> is great and has the added benefit of working across multiple languages.</p>
"
95159,15842,2008-09-18T18:13:28Z,92533,3,"<p>I use itertools (especially cycle, repeat, chain) to make python behave more like R and in other functional / vector applications.  Often this lets me avoid the overhead and complication of Numpy.  </p>

<pre><code># in R, shorter iterables are automatically cycled
# and all functions ""apply"" in a ""map""-like way over lists
&gt; 0:10 + 0:2
 [1]  0  2  4  3  5  7  6  8 10  9 11
</code></pre>

<p>Python
    #Normal python
    In [1]: range(10) + range(3)
    Out[1]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2]</p>

<pre><code>## this code is terrible, but it demos the idea.
from itertools import cycle
def addR(L1,L2):
    n = max( len(L1), len(L2))
    out = [None,]*n
    gen1,gen2 = cycle(L1), cycle(L2)
    ii = 0
    while ii &lt; n:
        out[ii] = gen1.next() + gen2.next()
        ii += 1
    return out

In [21]: addR(range(10), range(3))
Out[21]: [0, 2, 4, 3, 5, 7, 6, 8, 10, 9]
</code></pre>
"
95168,12320,2008-09-18T18:13:44Z,94935,51,"<p><code>xrange</code> only stores the range params and generates the numbers on demand. However the C implementation of Python currently restricts its args to C longs:</p>

<pre><code>xrange(2**32-1, 2**32+1)  # When long is 32 bits, OverflowError: Python int too large to convert to C long
range(2**32-1, 2**32+1)   # OK --&gt; [4294967295L, 4294967296L]
</code></pre>

<p>Note that in Python 3.0 there is only <code>range</code> and it behaves like the 2.x <code>xrange</code> but without the limitations on minimum and maximum end points.</p>
"
95246,9188,2008-09-18T18:20:46Z,89228,153,"<p>I typically use:</p>

<pre><code>import subprocess

p = subprocess.Popen('ls', shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
for line in p.stdout.readlines():
    print line,
retval = p.wait()
</code></pre>

<p>You are free to do what you want with the stdout data in the pipe.  In fact, you can simply omit those parameters (stdout= and stderr=) and it'll behave like os.system().</p>
"
95417,3446,2008-09-18T18:34:52Z,94952,4,"<p>PySec is another monadic parser, I don't know much about it, but it's worth looking at <a href=""http://www.valuedlessons.com/2008/02/pysec-monadic-combinatoric-parsing-in.html"" rel=""nofollow"">here</a></p>
"
95549,7363,2008-09-18T18:44:38Z,94935,10,"<blockquote>
  <p>range creates a list, so if you do range(1, 10000000) it creates a list in memory with 10000000 elements.
  xrange is a generator, so it evaluates lazily.</p>
</blockquote>

<p>This brings you two advantages:</p>

<ol>
<li>You can iterate longer lists without getting a <code>MemoryError</code>.</li>
<li>As it resolves each number lazily, if you stop iteration early, you won't waste time creating the whole list.</li>
</ol>
"
95659,77,2008-09-18T18:54:18Z,95642,2,"<p>Application wide handler is fine. They are great for logging. Just make sure that the application wide one is durable and is unlikely to crash itself.</p>
"
95676,6897,2008-09-18T18:55:38Z,95642,11,"<p>I like top-level exception handlers in general (regardless of language). They're a great place to cleanup resources that may not be immediately related to resources consumed inside the method that throws the exception.</p>

<p>It's also a fantastic place to <strong>log</strong> those exceptions if you have such a framework in place. Top-level handlers will catch those bizarre exceptions you didn't plan on and let you correct them in the future, otherwise, you may never know about them at all.</p>

<p>Just be careful that your top-level handler doesn't throw exceptions!</p>
"
95682,17624,2008-09-18T18:56:07Z,95642,7,"<p>A destructor (as in a __del__ method) is a bad idea, as these are not guaranteed to be called. The atexit module is a safer approach, although these will still not fire if the Python interpreter crashes (rather than the Python application), or if os._exit() is used, or the process is killed aggressively, or the machine reboots. (Of course, the last item isn't an issue in your case.) If your process is crash-prone (it uses fickle third-party extension modules, for instance) you may want to do the cleanup in a simple parent process for more isolation.</p>

<p>If you aren't really worried, use the atexit module.</p>
"
95692,9585,2008-09-18T18:56:44Z,95642,1,"<p>That seems like a reasonable approach, and more straightforward and reliable than a destructor on a singleton class.  You might also look at the ""<a href=""http://docs.python.org/lib/module-atexit.html"" rel=""nofollow"">atexit</a>"" module.  (Pronounced ""at exit"", not ""a tex it"" or something like that.  I confused that for a long while.)</p>
"
95707,4265,2008-09-18T18:58:12Z,94952,7,"<p>I believe that <a href=""http://pyparsing.wikispaces.com/"">pyparsing</a> is based on the same principles as parsec.</p>
"
95825,15109,2008-09-18T19:08:34Z,92533,6,"<p>I was quite surprised to learn that you could use the bisect module to do a very fast binary search in a sequence. It's documentation doesn't say anything about it:</p>

<blockquote>
  <p>This module provides support for maintaining a list in sorted order without having to sort the list after each insertion.</p>
</blockquote>

<p>The usage is very simple:</p>

<pre><code>&gt;&gt;&gt; import bisect
&gt;&gt;&gt; lst = [4, 7, 10, 23, 25, 100, 103, 201, 333]
&gt;&gt;&gt; bisect.bisect_left(lst, 23)
3
</code></pre>

<p>You have to remember though, that it's quicker to linearly look for something in a list goes item by item, than sorting the list and then doing a binary search on it. The first option is O(n), the second is O(nlogn).</p>
"
96016,3051,2008-09-18T19:26:04Z,95950,2,"<p>sys.path is python's internal representation of the PYTHONPATH, it sounds to me like you want to modify the PATH.</p>

<p>I'm not sure that this will work, but you can try:</p>

<pre><code>import os
os.environ['PATH'] += os.pathsep + ""C:\\oracle32\\bin""
</code></pre>
"
96565,16724,2008-09-18T20:29:34Z,92620,0,"<p>The first thing I would check is whether you need to connect via an HTTP proxy (in which case direct connections bypassing the proxy will likely time out). Run Wireshark and see what happens.</p>
"
96797,18243,2008-09-18T20:49:43Z,96508,4,"<p>After the handshake is complete, you can get the client certificate.  While the client certificate is also available in the verify callback (verify_cb), there's not really any reason to try to do anything aside from verify the certificate in that callback.  Setting up an application-specific mapping is better done after the handshake has completely successfully.  So, consider using the OpenSSL.SSL.Connection instance returned by the accept method to get the certificate (and from there, the commonName) and associate it with the connection object at that point.  For example,</p>

<pre><code>client, clientAddress = self.server.accept()
client.do_handshake()
commonNamesToConnections[client.get_peer_certificate().commonName] = client
</code></pre>

<p>You might want to check the mapping to make sure you're not overwriting any existing connection (perhaps using a list of connections instead of just mapping each common name to one).  And of course you need to remove entries when connections are lost.</p>

<p>The `do_handshake´ call forces the handshake to actually happen.  Without this, the handshake will happen when application data is first transferred over the connection.  That's fine, but it would make setting up this mapping slightly more complicated.</p>
"
97103,9493,2008-09-18T21:20:29Z,92533,1,"<p>One function I've come to appreciate is string.translate.  Its very fast at what it does, and useful anywhere you want to alter or remove characters in a string. I've just used it in a seemingly inapplicable <a href=""http://stackoverflow.com/questions/89909/in-python-how-to-i-verify-that-a-string-only-contains-letters-numbers-underscor#92000"">problem</a> and found it beat all the other solutions handily.</p>

<p>The downside is that its API is a bit clunky, but this is improving in Py2.6 / Py3.0.</p>
"
97530,15154,2008-09-18T22:11:15Z,94935,77,"<p>Remember, use the timeit module to test which of small snipps of code is faster!</p>

<pre><code>$ python -m timeit 'for i in range(1000000):' ' pass'
10 loops, best of 3: 90.5 msec per loop
$ python -m timeit 'for i in xrange(1000000):' ' pass'
10 loops, best of 3: 51.1 msec per loop
</code></pre>

<p>Personally, I always use range(), unless I were dealing with <em>really</em> huge lists -- as you can see, time-wise, for a list of a million entries, the extra overhead is only 0.04 seconds.  And as Corey points out, in Python 3.0 xrange will go away and range will give you nice iterator behaviour anyway.</p>
"
97581,15154,2008-09-18T22:17:07Z,93710,-2,"<p>Second vote for ElementTree (cElementTree is a C implementation that is a little faster, like cPickle vs pickle).  There's some short example code here that you can look at to give you an idea of how it works: <a href=""http://effbot.org/zone/element-index.htm"" rel=""nofollow"">http://effbot.org/zone/element-index.htm</a>
(this is Fredrik Lundh, who wrote the module in the first place.  It's so good it got drafted into the standard library with 2.5 :-) )</p>
"
97635,10661,2008-09-18T22:25:29Z,97513,5,"<p>I use Komodo Edit, which might be a little less sophisticated than full Komodo.</p>

<p>I create a ""New Command"" with <code>%(python) -i %f</code> as the text of the command.  I have this run in a ""New Console"".  I usually have the starting directory as %p, the top of the project directory.</p>

<p>The -i option runs the file and drops into interactive Python.</p>
"
97760,3154,2008-09-18T22:46:08Z,91821,3,"<p>With much thanks to Jim, the exact solution I was looking for is:</p>

<pre><code>p.properties()[s].get_value_for_datastore(p)
</code></pre>

<p>To all the other respondents, thank you for your help. I also would have expected the Model class to implement the python standard way of doing this, but for whatever reason, it doesn't.</p>
"
97778,10661,2008-09-18T22:47:52Z,75798,3,"<p>The ""good deployment"" issue -- for Python -- doesn't have the Deep Significance that it has for Java.</p>

<p>Python deployment for Django is basically ""move the files"".  You can run straight out of the subversion trunk directory if you want to.</p>

<p>You can, without breaking much of a sweat, using the Python <a href=""http://docs.python.org/dist/dist.html"" rel=""nofollow"">distutils</a> and build yourself a distribution kit that puts your Django apps into Python's site-packages.  I'm not a big fan of it, but it's really easy to do.  </p>

<p>Since my stuff runs in Linux, I have simple ""install.py"" scripts that move stuff out of the Subversion directories into <code>/opt/this</code> and <code>/opt/that</code> directories.  I use an explicit path settings in my Apache configuration to name those directories where the applications live.</p>

<p>Patching can be done by editing the files in place.  (A bad policy.)  I prefer to edit in the SVN location and rerun my little install to be sure I actually have all the files under control.</p>
"
98085,17160,2008-09-18T23:45:15Z,95642,2,"<p>if you use classes, you should free the resources they allocate in their destructors instead, of course. Use the try: on entire application just if you want to free resources that aren't already liberated by your classes' destructors.</p>

<p>And instead of using a catch-all except:, you should use the following block:</p>

<pre><code>try:
    main()
finally:
    cleanup()
</code></pre>

<p>That will ensure cleanup in a more pythonic way.</p>
"
98146,3560,2008-09-18T23:56:36Z,98135,8,"<p>Any particular reason you want to use Django's templates? Both <a href=""http://jinja.pocoo.org/"">Jinja</a> and <a href=""http://genshi.edgewall.org/"">Genshi</a> are, in my opinion, superior.</p>

<p><hr /></p>

<p>If you really want to, then see the <a href=""http://docs.djangoproject.com/en/dev/topics/settings/#topics-settings"">Django documentation on <code>settings.py</code></a>. Especially the section ""Using settings without setting <code>DJANGO_SETTINGS_MODULE</code>"". Use something like this:</p>

<pre><code>from django.conf import settings
settings.configure (FOO='bar') # Your settings go here
</code></pre>
"
98150,17095,2008-09-18T23:57:12Z,98135,0,"<p>Google <code>AppEngine</code> uses the Django templating engine, have you taken a look at how they do it? You could possibly just use that.</p>
"
98154,3937,2008-09-18T23:58:12Z,98135,1,"<p>Found this:</p>

<p><a href=""http://snippets.dzone.com/posts/show/3339"" rel=""nofollow"">http://snippets.dzone.com/posts/show/3339</a></p>
"
98178,4766,2008-09-19T00:01:39Z,98135,117,"<p>The solution is simple. It's actually <a href=""http://docs.djangoproject.com/en/dev/ref/templates/api/#configuring-the-template-system-in-standalone-mode"">well documented</a>, but not too easy to find. (I had to dig around -- it didn't come up when I tried a few different Google searches.)</p>

<p>The following code works:</p>

<pre><code>&gt;&gt;&gt; from django.template import Template, Context
&gt;&gt;&gt; from django.conf import settings
&gt;&gt;&gt; settings.configure()
&gt;&gt;&gt; t = Template('My name is {{ my_name }}.')
&gt;&gt;&gt; c = Context({'my_name': 'Daryl Spitzer'})
&gt;&gt;&gt; t.render(c)
u'My name is Daryl Spitzer.'
</code></pre>

<p>See the Django documentation (linked above) for a description of some of the settings you may want to define (as keyword arguments to configure).</p>
"
98180,11867,2008-09-19T00:02:00Z,77198,3,"<p>Other than NIO (RTMP) channels, LCDS include also the ""data management"" features. </p>

<p>Using this feature, you basically implement, in an ActionScript class, a CRUD-like interface defined by LCDS, and you get:</p>

<ul>
<li>automatic progressive list loading (large lists/datagrids loads while scrolling)</li>
<li>automatic crud management (you get object locally in flash, modify it, send it back and DB will get updated automatically)</li>
<li>feature for conflict resolution (if multiple user try to updated the same record at the same time)</li>
<li>if I remember well, also some improved integration with the LiveCycle ES workflow engine</li>
</ul>

<p>IMO, it can be very fast to develop this way, but only if you have only basic requirements and a simple architecture (forget SOA, that otherwise works so well with Flex). I'm fine with BlazeDS.</p>
"
98214,17160,2008-09-19T00:08:41Z,98135,38,"<p><a href=""http://jinja.pocoo.org/2/"">Jinja2</a> <a href=""http://jinja.pocoo.org/2/documentation/templates"">syntax</a> is pretty much the same as Django's with very few differences, and you get a much more powerfull template engine, which also compiles your template to bytecode (FAST!).</p>

<p>I use it for templating, including in Django itself, and it is very good. You can also easily write extensions if some feature you want is missing.</p>

<p>Here is some demonstration of the code generation:</p>

<pre><code>&gt;&gt;&gt; import jinja2
&gt;&gt;&gt; print jinja2.Environment().compile('{% for row in data %}{{ row.name | upper }}{% endfor %}', raw=True) 
from __future__ import division
from jinja2.runtime import LoopContext, Context, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join
name = None

def root(context, environment=environment):
    l_data = context.resolve('data')
    t_1 = environment.filters['upper']
    if 0: yield None
    for l_row in l_data:
        if 0: yield None
        yield unicode(t_1(environment.getattr(l_row, 'name')))

blocks = {}
debug_info = '1=9'
</code></pre>
"
98276,13668,2008-09-19T00:18:31Z,98135,0,"<p>I echo the above statements.  Jinja 2 is a pretty good superset of Django templates for general use.  I think they're working on making the Django templates a little less coupled to the settings.py, but Jinja should do well for you.</p>
"
98313,18382,2008-09-19T00:24:38Z,27567,3,"<p>If you want some hand-on examples, <a href=""http://codespeak.net/pypy/dist/pypy/doc/getting-started.html"" rel=""nofollow"">PyPy's Getting Started</a> document has a section titled ""Trying out the translator"".</p>
"
98703,15578,2008-09-19T01:38:19Z,98687,11,"<p>Wrap your connection class.</p>

<p>Set a limit on how many connections you make.
Return an unused connection.
Intercept close to free the connection.</p>

<p>Update:
I put something like this in dbpool.py:</p>

<pre><code>import sqlalchemy.pool as pool
import MySQLdb as mysql
mysql = pool.manage(mysql)
</code></pre>
"
98906,10661,2008-09-19T02:13:07Z,98687,12,"<p>IMO, the ""more obvious/more idiomatic/better solution"" is to use an existing ORM rather than invent DAO-like classes.</p>

<p>It appears to me that ORM's are more popular than ""raw"" SQL connections.  Why?  Because Python <em>is</em> OO, and the mapping from SQL row to to object <em>is</em> absolutely essential. There aren't many cases where you deal with SQL rows that don't map to Python objects.</p>

<p>I think that <a href=""http://www.sqlalchemy.org/"">SQLAlchemy</a> or <a href=""http://www.sqlobject.org/"">SQLObject</a> (and the associated connection pooling) the more idiomatic Pythonic solution.</p>

<p>Pooling as a separate feature isn't very common because pure SQL (without object mapping) isn't very popular for the kind of complex, long-running processes that benefit from connection pooling.  Yes, pure SQL <em>is</em> used, but it's always used in simpler or more controlled applications where pooling isn't helpful.</p>

<p>I think you might have two alternatives:</p>

<ol>
<li>Revise your classes to use SQLAlchemy or SQLObject.  While this appears painful at first [all that work wasted], you should be able to leverage all the design and thought and it's merely an exercise in adopting a widely-used ORM and pooling solution.</li>
<li>Roll your own simple connection pool using the algorithm you outlined -- a simple Set or List of connections that you cycle through.  </li>
</ol>
"
99259,NA,2008-09-19T03:22:35Z,88613,0,"<p>Why not just use <a href=""http://code.google.com/p/sympy/"" rel=""nofollow"">SymPy</a>?  It should do what you're trying to achieve.</p>
"
99347,18460,2008-09-19T03:37:43Z,36932,5,"<p>Alexandru's suggestion of using class constants for enums works quite well. </p>

<p>I also like to add a dictionary for each set of constants to lookup a human-readable string representation. </p>

<p>This serves two purposes: a) it provides a simple way to pretty-print your enum and b) the dictionary logically groups the constants so that you can test for membership.</p>

<pre><code>class Animal:    
  TYPE_DOG = 1
  TYPE_CAT = 2

  type2str = {
    TYPE_DOG: ""dog"",
    TYPE_CAT: ""cat""
  }

  def __init__(self, type_):
    assert type_ in self.type2str.keys()
    self._type = type_

  def __repr__(self):
    return ""&lt;%s type=%s&gt;"" % (
        self.__class__.__name__, self.type2str[self._type].upper())
</code></pre>
"
99565,18446,2008-09-19T04:11:38Z,98687,21,"<p>In MySQL?</p>

<p>I'd say don't bother with the connection pooling.  They're often a source of trouble and with MySQL they're not going to bring you the performance advantage you're hoping for.  This road may be a lot of effort to follow--politically--because there's so much best practices hand waving and textbook verbiage in this space about the advantages of connection pooling.</p>

<p>Connection pools are simply a bridge between the post-web era of stateless applications (e.g. HTTP protocol) and the pre-web era of stateful long-lived batch processing applications.  Since connections were very expensive in pre-web databases (since no one used to care too much about how long a connection took to establish), post-web applications devised this connection pool scheme so that every hit didn't incur this huge processing overhead on the RDBMS.</p>

<p>Since MySQL is more of a web-era RDBMS, connections are extremely lightweight and fast.  I have written many high volume web applications that don't use a connection pool at all for MySQL.</p>

<p>This is a complication you may benefit from doing without, so long as there isn't a political obstacle to overcome.</p>
"
99603,10440,2008-09-19T04:17:40Z,77198,3,"<p>The data management features for LCDS described here are certainly valid, however I believe they do not let you actually develop a solution faster. A developer still has to write ALL the data access code, query execution, extracting data from datareaders into value objects. ALL of this has been solved a dozen of times with code generators. For instance the data management approach in WebORB for Java (much like in WebORB for .NET and PHP) is based on code generation which creates code for both client side AND server-side. You get all the ActionScript APIs out of the code generator to do full CRUD. </p>

<p>Additionally, WebORB provides video streaming and real-time messaging features and goes WAY beyond what both BlazeDS and LCDS offer combined, especially considering that the product is free. Just google it.</p>
"
99969,18432,2008-09-19T05:54:22Z,92533,1,"<p>The <a href=""http://docs.python.org/lib/module-pickle.html"" rel=""nofollow"">pickle</a> module is pretty awesome</p>
"
100037,14648,2008-09-19T06:26:10Z,100003,217,"<p>Metaclasses are the secret sauce that make 'class' work. The default metaclass for a new style object is called 'type'.</p>

<pre class=""lang-none prettyprint-override""><code>class type(object)
  |  type(object) -&gt; the object's type
  |  type(name, bases, dict) -&gt; a new type
</code></pre>

<p>Metaclasses take 3 args. '<strong>name</strong>', '<strong>bases</strong>' and '<strong>dict</strong>'</p>

<p>Here is where the secret starts. Look for where name, bases and the dict come from in this example class definition.</p>

<pre><code>class ThisIsTheName(Bases, Are, Here):
    All_the_code_here
    def doesIs(create, a):
        dict
</code></pre>

<p>Lets define a metaclass that will demonstrate how '<strong>class:</strong>' calls it.</p>

<pre><code>def test_metaclass(name, bases, dict):
    print 'The Class Name is', name
    print 'The Class Bases are', bases
    print 'The dict has', len(dict), 'elems, the keys are', dict.keys()

    return ""yellow""

class TestName(object, None, int, 1):
    __metaclass__ = test_metaclass
    foo = 1
    def baz(self, arr):
        pass

print 'TestName = ', repr(TestName)

# output =&gt; 
The Class Name is TestName
The Class Bases are (&lt;type 'object'&gt;, None, &lt;type 'int'&gt;, 1)
The dict has 4 elems, the keys are ['baz', '__module__', 'foo', '__metaclass__']
TestName =  'yellow'
</code></pre>

<p>And now, an example that actually means something, this will automatically make the variables in the list ""attributes"" set on the class, and set to None.</p>

<pre><code>def init_attributes(name, bases, dict):
    if 'attributes' in dict:
        for attr in dict['attributes']:
            dict[attr] = None

    return type(name, bases, dict)

class Initialised(object):
    __metaclass__ = init_attributes
    attributes = ['foo', 'bar', 'baz']

print 'foo =&gt;', Initialised.foo
# output=&gt;
foo =&gt; None
</code></pre>

<p>Note that the magic behaviour that 'Initalised' gains by having the metaclass <code>init_attributes</code> is not passed onto a subclass of Initalised.</p>

<p>Here is an even more concrete example, showing how you can subclass 'type' to make a metaclass that performs an action when the class is created. This is quite tricky:</p>

<pre><code>class MetaSingleton(type):
    instance = None
    def __call__(cls, *args, **kw):
        if cls.instance is None:
            cls.instance = super(MetaSingleton, cls).__call__(*args, **kw)
        return cls.instance

 class Foo(object):
     __metaclass__ = MetaSingleton

 a = Foo()
 b = Foo()
 assert a is b
</code></pre>
"
100059,317346,2008-09-19T06:32:58Z,100003,56,"<p>I think the ONLamp introduction to metaclass programming is well written and gives a really good introduction to the topic despite being several years old already.</p>

<p><a href=""http://www.onlamp.com/pub/a/python/2003/04/17/metaclasses.html"">http://www.onlamp.com/pub/a/python/2003/04/17/metaclasses.html</a></p>

<p>In short: A class is a blueprint for the creation of an instance, a metaclass is a blueprint for the creation of a class. It can be easily seen that in Python classes need to be first-class objects too to enable this behavior.</p>

<p>I've never written one myself, but I think one of the nicest uses of metaclasses can be seen in the <a href=""http://www.djangoproject.com/"">Django framework</a>. The model classes use a metaclass approach to enable a declarative style of writing new models or form classes. While the metaclass is creating the class, all members get the possibility to customize the class itself.</p>

<ul>
<li><a href=""http://docs.djangoproject.com/en/dev/intro/tutorial01/#id3"">Creating a new model</a></li>
<li><a href=""http://code.djangoproject.com/browser/django/trunk/django/db/models/base.py#L25"">The metaclass enabling this</a></li>
</ul>

<p>The thing that's left to say is: If you don't know what metaclasses are, the probability that you <strong>will not need them</strong> is 99%.</p>
"
100091,8570,2008-09-19T06:45:40Z,100003,82,"<p>One use for metaclasses is adding new properties and methods to an instance automatically.</p>

<p>For example, if you look at <a href=""http://docs.djangoproject.com/en/dev/topics/db/models/"">Django models</a>, their definition looks a bit confusing. It looks as if you are only defining class properties:</p>

<pre><code>class Person(models.Model):
    first_name = models.CharField(max_length=30)
    last_name = models.CharField(max_length=30)
</code></pre>

<p>However, at runtime the Person objects are filled with all sorts of useful methods. See the <a href=""http://code.djangoproject.com/browser/django/trunk/django/db/models/base.py"">source</a> for some amazing metaclassery.</p>
"
100146,17624,2008-09-19T07:01:58Z,100003,1179,"<p>A metaclass is the class of a class. Like a class defines how an instance of the class behaves, a metaclass defines how a class behaves. A class is an instance of a metaclass.</p>

<p><a href=""http://i.stack.imgur.com/QQ0OK.png""><img src=""http://i.stack.imgur.com/QQ0OK.png"" alt=""metaclass diagram""></a></p>

<p>While in Python you can use arbitrary callables for metaclasses (like <a href=""http://stackoverflow.com/questions/100003/what-is-a-metaclass-in-python/100037#100037"">Jerub</a> shows), the more useful approach is actually to make it an actual class itself. <code>type</code> is the usual metaclass in Python. In case you're wondering, yes, <code>type</code> is itself a class, and it is its own type. You won't be able to recreate something like <code>type</code> purely in Python, but Python cheats a little. To create your own metaclass in Python you really just want to subclass <code>type</code>.</p>

<p>A metaclass is most commonly used as a class-factory. Like you create an instance of the class by calling the class, Python creates a new class (when it executes the 'class' statement) by calling the metaclass. Combined with the normal <code>__init__</code> and <code>__new__</code> methods, metaclasses therefore allow you to do 'extra things' when creating a class, like registering the new class with some registry, or even replace the class with something else entirely.</p>

<p>When the <code>class</code> statement is executed, Python first executes the body of the <code>class</code> statement as a normal block of code. The resulting namespace (a dict) holds the attributes of the class-to-be. The metaclass is determined by looking at the baseclasses of the class-to-be (metaclasses are inherited), at the <code>__metaclass__</code> attribute of the class-to-be (if any) or the <code>__metaclass__</code> global variable. The metaclass is then called with the name, bases and attributes of the class to instantiate it.</p>

<p>However, metaclasses actually define the <em>type</em> of a class, not just a factory for it, so you can do much more with them. You can, for instance, define normal methods on the metaclass. These metaclass-methods are like classmethods, in that they can be called on the class without an instance, but they are also not like classmethods in that they cannot be called on an instance of the class. <code>type.__subclasses__()</code> is an example of a method on the <code>type</code> metaclass. You can also define the normal 'magic' methods, like <code>__add__</code>, <code>__iter__</code> and <code>__getattr__</code>, to implement or change how the class behaves.</p>

<p>Here's an aggregated example of the bits and pieces:</p>

<pre><code>def make_hook(f):
    """"""Decorator to turn 'foo' method into '__foo__'""""""
    f.is_hook = 1
    return f

class MyType(type):
    def __new__(cls, name, bases, attrs):

        if name.startswith('None'):
            return None

        # Go over attributes and see if they should be renamed.
        newattrs = {}
        for attrname, attrvalue in attrs.iteritems():
            if getattr(attrvalue, 'is_hook', 0):
                newattrs['__%s__' % attrname] = attrvalue
            else:
                newattrs[attrname] = attrvalue

        return super(MyType, cls).__new__(cls, name, bases, newattrs)

    def __init__(self, name, bases, attrs):
        super(MyType, self).__init__(name, bases, attrs)

        # classregistry.register(self, self.interfaces)
        print ""Would register class %s now."" % self

    def __add__(self, other):
        class AutoClass(self, other):
            pass
        return AutoClass
        # Alternatively, to autogenerate the classname as well as the class:
        # return type(self.__name__ + other.__name__, (self, other), {})

    def unregister(self):
        # classregistry.unregister(self)
        print ""Would unregister class %s now."" % self

class MyObject:
    __metaclass__ = MyType


class NoneSample(MyObject):
    pass

# Will print ""NoneType None""
print type(NoneSample), repr(NoneSample)

class Example(MyObject):
    def __init__(self, value):
        self.value = value
    @make_hook
    def add(self, other):
        return self.__class__(self.value + other.value)

# Will unregister the class
Example.unregister()

inst = Example(10)
# Will fail with an AttributeError
#inst.unregister()

print inst + inst
class Sibling(MyObject):
    pass

ExampleSibling = Example + Sibling
# ExampleSibling is now a subclass of both Example and Sibling (with no
# content of its own) although it will believe it's called 'AutoClass'
print ExampleSibling
print ExampleSibling.__mro__
</code></pre>
"
100250,12030,2008-09-19T07:29:25Z,100210,1,"<p>Try adding a datetime.datetime to a datetime.timedelta. If you only want the time portion, you can call the time() method on the resultant datetime.datetime object to get it.</p>
"
100283,11527,2008-09-19T07:37:18Z,88613,6,"<p>This is a parsing problem, so neither regex not split() are the ""good"" solution. Use a parser generator instead.</p>

<p>I would look closely at <a href=""http://pyparsing.wikispaces.com/"">pyparsing</a>. There have also been some decent articles about pyparsing in the <a href=""http://pymag.phparch.com/"">Python Magazine</a>.</p>
"
100345,14860,2008-09-19T07:54:39Z,100210,281,"<p>You can use full <code>datetime</code> variables with <code>timedelta</code>, and by providing a dummy date then using <code>time</code> to just get the time value.</p>

<p>For example:</p>

<pre><code>import datetime
a = datetime.datetime(100,1,1,11,34,59)
b = a + datetime.timedelta(0,3) # days, seconds, then other fields.
print a.time()
print b.time()
</code></pre>

<p>results in the two values, three seconds apart:</p>

<pre><code>11:34:59
11:35:02
</code></pre>

<p>You could also opt for the more readable</p>

<pre><code>b = a + datetime.timedelta(seconds=3)
</code></pre>

<p>if you're so inclined.</p>

<hr>

<p>If you're after a function that can do this, you can look into using <code>addSecs</code> below:</p>

<pre><code>import datetime

def addSecs(tm, secs):
    fulldate = datetime.datetime(100, 1, 1, tm.hour, tm.minute, tm.second)
    fulldate = fulldate + datetime.timedelta(seconds=secs)
    return fulldate.time()

a = datetime.datetime.now().time()
b = addSecs(a, 300)
print a
print b
</code></pre>

<p>This outputs:</p>

<pre><code> 09:11:55.775695
 09:16:55
</code></pre>
"
100394,8297,2008-09-19T08:05:48Z,100298,17,"<p>For static analysis there is <a href=""http://www.logilab.org/857"">pylint</a> and <a href=""http://pychecker.sourceforge.net/"">pychecker</a>. Personally I use pylint as it seems to be more comprehensive than pychecker. </p>

<p>For cyclomatic complexity you can try <a href=""http://www.journyx.com/curt/complexity.html"">this perl program</a>, or this <a href=""http://www.traceback.org/2008/03/31/measuring-cyclomatic-complexity-of-python-code/"">article</a> which introduces a python program to do the same</p>
"
100404,11596,2008-09-19T08:08:10Z,100210,9,"<p>One little thing, might add clarity to override the default value for seconds</p>

<pre><code>&gt;&gt;&gt; b = a + datetime.timedelta(seconds=3000)
&gt;&gt;&gt; b
datetime.datetime(1, 1, 1, 12, 24, 59)
</code></pre>
"
100464,12138,2008-09-19T08:20:37Z,50568,3,"<p>One thing that has to be considered when choosing session backend is ""how often session data is modified""? Even sites with moderate traffic will suffer if session data is modified on each request, making many database trips to store and retrieve data.</p>

<p>In my previous work we used memcache as session backend exclusively and it worked really well. Our administrative team put really great effort in making two special memcached instances stable as a rock, but after bit of twiddling with initial setup, we did not have any interrupts of session backends operations.</p>
"
100687,8450,2008-09-19T09:19:57Z,100298,6,"<p>Thanks to <a href=""http://pydev.org/"" rel=""nofollow"">Pydev</a>, you can <a href=""http://pydev.org/manual_adv_pylint.html"" rel=""nofollow"">integrate pylint</a> in the <a href=""http://www.eclipse.org/"" rel=""nofollow"">Eclipse IDE</a> really easily and get a code report each time you save a modified file.</p>
"
100762,5353,2008-09-19T09:38:10Z,100732,139,"<p>In the first test, Python try to convert the object to a <code>bool</code> value if it is not already one. Roughly, <strong>we are asking the object : are you meaningful or not ?</strong> This is done using the following algorithm :</p>

<ol>
<li><p>If the object has a <code>__nonzero__</code> special method (as do numeric built-ins, <code>int</code> and <code>float</code>), it calls this method. It must either return a <code>bool</code> value which is then directly used, or an <code>int</code> value that is considered <code>False</code> if equal to zero.</p></li>
<li><p>Otherwise, if the object has a <code>__len__</code> special method (as do container built-ins, <code>list</code>, <code>dict</code>, <code>set</code>, <code>tuple</code>, ...), it calls this method, considering a container <code>False</code> if it is empty (length is zero).</p></li>
<li><p>Otherwise, the object is considered <code>True</code> unless it is <code>None</code> in which case, it is considered <code>False</code>.</p></li>
</ol>

<p>In the second test, the object is compared for equality to <code>None</code>. Here, <strong>we are asking the object, ""Are you equal to this other value?""</strong> This is done using the following algorithm :</p>

<ol>
<li><p>If the object has a <code>__eq__</code> method, it is called, and the return value is then converted to a <code>bool</code>value and used to determine the outcome of the <code>if</code>.</p></li>
<li><p>Otherwise, if the object has a <code>__cmp__</code> method, it is called. This function must return an <code>int</code> indicating the order of the two object (<code>-1</code> if <code>self &lt; other</code>, <code>0</code> if <code>self == other</code>, <code>+1</code> if <code>self &gt; other</code>).</p></li>
<li><p>Otherwise, the object are compared for identity (ie. they are reference to the same object, as can be tested by the <code>is</code> operator).</p></li>
</ol>

<p>There is another test possible using the <code>is</code> operator. <strong>We would be asking the object, ""Are you this particular object?""</strong></p>

<p>Generally, I would recommend to use the first test with non-numerical values, to use the test for equality when you want to compare objects of the same nature (two strings, two numbers, ...) and to check for identity only when using sentinel values (<code>None</code> meaning not initialized for a member field for exemple, or when using the <code>getattr</code> or the <code>__getitem__</code> methods).</p>

<p>To summarize, we have :</p>

<pre><code>&gt;&gt;&gt; class A(object):
...    def __repr__(self):
...        return 'A()'
...    def __nonzero__(self):
...        return False

&gt;&gt;&gt; class B(object):
...    def __repr__(self):
...        return 'B()'
...    def __len__(self):
...        return 0

&gt;&gt;&gt; class C(object):
...    def __repr__(self):
...        return 'C()'
...    def __cmp__(self, other):
...        return 0

&gt;&gt;&gt; class D(object):
...    def __repr__(self):
...        return 'D()'
...    def __eq__(self, other):
...        return True

&gt;&gt;&gt; for obj in ['', (), [], {}, 0, 0., A(), B(), C(), D(), None]:
...     print '%4s: bool(obj) -&gt; %5s, obj == None -&gt; %5s, obj is None -&gt; %5s' % \
...         (repr(obj), bool(obj), obj == None, obj is None)
  '': bool(obj) -&gt; False, obj == None -&gt; False, obj is None -&gt; False
  (): bool(obj) -&gt; False, obj == None -&gt; False, obj is None -&gt; False
  []: bool(obj) -&gt; False, obj == None -&gt; False, obj is None -&gt; False
  {}: bool(obj) -&gt; False, obj == None -&gt; False, obj is None -&gt; False
   0: bool(obj) -&gt; False, obj == None -&gt; False, obj is None -&gt; False
 0.0: bool(obj) -&gt; False, obj == None -&gt; False, obj is None -&gt; False
 A(): bool(obj) -&gt; False, obj == None -&gt; False, obj is None -&gt; False
 B(): bool(obj) -&gt; False, obj == None -&gt; False, obj is None -&gt; False
 C(): bool(obj) -&gt;  True, obj == None -&gt;  True, obj is None -&gt; False
 D(): bool(obj) -&gt;  True, obj == None -&gt;  True, obj is None -&gt; False
None: bool(obj) -&gt; False, obj == None -&gt;  True, obj is None -&gt;  True
</code></pre>
"
100764,13992,2008-09-19T09:38:26Z,100732,30,"<p>Because <code>None</code> is not the only thing that is considered false.</p>

<pre><code>if not False:
    print ""False is false.""
if not 0:
    print ""0 is false.""
if not []:
    print ""An empty list is false.""
if not ():
    print ""An empty tuple is false.""
if not {}:
    print ""An empty dict is false.""
if not """":
    print ""An empty string is false.""
</code></pre>

<p><code>False</code>, <code>0</code>, <code>()</code>, <code>[]</code>, <code>{}</code> and <code>""""</code> are all different from <code>None</code>, so your two code snippets are <em>not</em> equivalent.</p>

<p>Moreover, consider the following:</p>

<pre><code>&gt;&gt;&gt; False == 0
True
&gt;&gt;&gt; False == ()
False
</code></pre>

<p><code>if object:</code> is <em>not</em> an equality check. <code>0</code>, <code>()</code>, <code>[]</code>, <code>None</code>, <code>{}</code>, etc. <em>are</em> all different from each other, but they all <em>evaluate</em> to False.</p>

<p>This is the ""magic"" behind short circuiting expressions like:</p>

<pre><code>foo = bar and spam or eggs
</code></pre>

<p>which is shorthand for:</p>

<pre><code>if bar:
    foo = spam
else:
    foo = eggs
</code></pre>

<p>although you really should write:</p>

<pre><code>foo = spam if bar else egg
</code></pre>
"
100766,12138,2008-09-19T09:38:37Z,100732,2,"<p>These two comparisons serve different purposes. The former checks for boolean value of something, the second checks for identity with None value.</p>
"
100768,15682,2008-09-19T09:39:01Z,100732,0,"<p>For one the first example is shorter and looks nicer. As per the other posts what you choose also depends on what you really want to do with the comparison.</p>
"
100771,5190,2008-09-19T09:39:16Z,100732,1,"<p><a href=""http://www.python.org/dev/peps/pep-0008/"" rel=""nofollow"">Style guide</a> recommends to use is or is not if you are testing for None-ness</p>

<blockquote>
<pre><code>- Comparisons to singletons like None should always be done with
  'is' or 'is not', never the equality operators.
</code></pre>
</blockquote>

<p>On the other hand if you are testing for more than None-ness, you should use the boolean operator.</p>
"
100775,317346,2008-09-19T09:39:41Z,100732,0,"<p>The answer is ""it depends"".</p>

<p>I use the first example if I consider 0, """", [] and False (list not exhaustive) to be equivalent to None in this context.</p>
"
100776,5536,2008-09-19T09:40:06Z,100210,7,"<p>Thanks to @<a href=""#100345"">Pax Diablo</a>, @bvmou and @Arachnid for the suggestion of using full datetimes throughout.  If I have to accept datetime.time objects from an external source, then this seems to be an alternative <code>add_secs_to_time()</code> function:</p>

<pre><code>def add_secs_to_time(timeval, secs_to_add):
    dummy_date = datetime.date(1, 1, 1)
    full_datetime = datetime.datetime.combine(dummy_date, timeval)
    added_datetime = full_datetime + datetime.timedelta(seconds=secs_to_add)
    return added_datetime.time()
</code></pre>

<p>This verbose code can be compressed to this one-liner:</p>

<pre><code>(datetime.datetime.combine(datetime.date(1, 1, 1), timeval) + datetime.timedelta(seconds=secs_to_add)).time()
</code></pre>

<p>but I think I'd want to wrap that up in a function for code clarity anyway.</p>
"
100828,15459,2008-09-19T09:53:04Z,100732,0,"<p>Personally, I chose a consistent approach across languages: I do <code>if (var)</code> (or equivalent) only if var is declared as boolean (or defined as such, in C we don't have a specific type). I even prefix these variables with a <code>b</code> (so it would be <code>bVar</code> actually) to be sure I won't accidentally use another type here.<br />
I don't really like implicit casting to boolean, even less when there are numerous, complex rules.</p>

<p>Of course, people will disagree. Some go farther, I see <code>if (bVar == true)</code> in the Java code at my work (too redundant for my taste!), others love too much compact syntax, going <code>while (line = getNextLine())</code> (too ambiguous for me).</p>
"
100886,6899,2008-09-19T10:09:47Z,100624,12,"<p>It might seem overkill, but, here it goes:</p>

<pre><code>import Queue, thread, subprocess

results= Queue.Queue()
def process_waiter(popen, description, que):
    try: popen.wait()
    finally: que.put( (description, popen.returncode) )
process_count= 0

proc1= subprocess.Popen( ['python', 'mytest.py'] )
thread.start_new_thread(process_waiter,
    (proc1, ""1 finished"", results))
process_count+= 1

proc2= subprocess.Popen( ['python', 'mytest.py'] )
thread.start_new_thread(process_waiter,
    (proc2, ""2 finished"", results))
process_count+= 1

# etc

while process_count &gt; 0:
    description, rc= results.get()
    print ""job"", description, ""ended with rc ="", rc
    process_count-= 1
</code></pre>
"
100903,10661,2008-09-19T10:12:34Z,100732,39,"<p>These are actually both poor practices.  Once upon a time, it was considered OK to casually treat None and False as similar.   However, since Python 2.2 this is not the best policy.</p>

<p>First, when you do an <code>if x</code> or <code>if not x</code> kind of test, Python has to implicitly convert <code>x</code> to boolean.  The rules for the <code>bool</code> function describe a raft of things which are False; everything else is True.  If the value of x wasn't properly boolean to begin with, this implicit conversion isn't really the clearest way to say things.  </p>

<p>Before Python 2.2, there was no bool function, so it was even less clear.</p>

<p>Second, you shouldn't really test with <code>== None</code>.  You should use <code>is None</code> and <code>is not None</code>.</p>

<p>See PEP 8, <a href=""http://www.python.org/dev/peps/pep-0008/"">Style Guide for Python Code</a>.  </p>

<blockquote>
<pre><code>- Comparisons to singletons like None should always be done with
  'is' or 'is not', never the equality operators.

  Also, beware of writing ""if x"" when you really mean ""if x is not None""
  -- e.g. when testing whether a variable or argument that defaults to
  None was set to some other value.  The other value might have a type
  (such as a container) that could be false in a boolean context!
</code></pre>
</blockquote>

<p>How many singletons are there?  Five: <code>None</code>, <code>True</code>, <code>False</code>, <code>NotImplemented</code> and <code>Ellipsis</code>.  Since you're really unlikely to use <code>NotImplemented</code> or <code>Ellipsis</code>, and you would never say <code>if x is True</code> (because simply <code>if x</code> is a lot clearer), you'll only ever test <code>None</code>.</p>
"
100974,15274,2008-09-19T10:27:52Z,100732,3,"<p>If you ask</p>

<pre><code>if not spam:
    print ""Sorry. No SPAM.""
</code></pre>

<p>the <em>__nonzero__</em> method of <em>spam</em> gets called. From the Python manual:</p>

<blockquote>
  <p><strong>__nonzero__</strong>(<em>self</em>)
    Called to implement truth value testing, and the built-in operation bool(); should return False or True, or their integer equivalents 0 or 1. When this method is not defined, __len__() is called, if it is defined (see below). If a class defines neither __len__() nor __nonzero__(), all its instances are considered true.</p>
</blockquote>

<p>If you ask</p>

<pre><code>if spam == None:
    print ""Sorry. No SPAM here either.""
</code></pre>

<p>the <em>__eq__</em> method of <em>spam</em> gets called with the argument <em>None</em>.</p>

<p>For more information of the customization possibilities have a look at the Python documenation at <a href=""https://docs.python.org/reference/datamodel.html#basic-customization"" rel=""nofollow"">https://docs.python.org/reference/datamodel.html#basic-customization</a></p>
"
101074,15274,2008-09-19T10:56:06Z,87522,1,"<p>Half a year ago I took over a large web application (fortunately already in Python) which had some major architectural deficiencies (templates and code mixed, code duplication, you name it...).</p>

<p>My plan is to eventually have the system respond to WSGI, but I am not there yet. I found the best way to do it, is in small steps. Over the last 6 month, code reuse has gone up and progress has accelerated. </p>

<p>General principles which have worked for me:</p>

<ol>
<li>Throw away code which is not used or commented out</li>
<li>Throw away all comments which are not useful</li>
<li>Define a <em>layer hierarchy</em> (models, business logic, view/controller logic, display logic, etc.) of your application. This has not to be very clear cut architecture but rather should <em>help you think about the various parts of your application</em> and help you better categorize your code.</li>
<li>If something grossly violates this hierarchy, change the offending code. Move the code around, recode it at another place, etc. At the same time adjust the rest of your application to use this code instead of the old one. Throw the old one away if not used anymore.</li>
<li><strong>Keep you APIs simple!</strong></li>
</ol>

<p>Progress can be painstakingly slow, but should be worth it. </p>
"
101087,8206,2008-09-19T10:57:36Z,101061,13,"<p>You can use both MinGW and VC++ Express (free, no need to buy it).</p>

<p>See:</p>

<ol>
<li><a href=""http://eli.thegreenplace.net/2008/06/28/compiling-python-extensions-with-distutils-and-mingw/"">http://eli.thegreenplace.net/2008/06/28/compiling-python-extensions-with-distutils-and-mingw/</a></li>
<li><a href=""http://eli.thegreenplace.net/2008/06/27/creating-python-extension-modules-in-c/"">http://eli.thegreenplace.net/2008/06/27/creating-python-extension-modules-in-c/</a></li>
</ol>
"
101090,17624,2008-09-19T10:57:53Z,101061,1,"<p>Setuptools and distutils don't come with gcc, but they use the same compiler Python was built with. The difference is mostly that on the typical UNIX system that compiler is 'gcc' and you have it installed.</p>

<p>In order to compile extension modules on Windows, you need a compiler for Windows. MSVS will do, even the Express version I believe, but it does have to be the same MSVC++ version as Python was built with. Or you can use Cygwin or MinGW; See the appropriate section of <a href=""http://docs.python.org/install/index.html#gnu-c-cygwin-mingw"" rel=""nofollow"">Installing Python Modules</a>.</p>
"
101143,8206,2008-09-19T11:15:07Z,101128,3,"<p>Try win32clipboard from the win32all package (that's probably installed if you're on ActiveState Python).</p>

<p>See sample here: <a href=""http://code.activestate.com/recipes/474121/"" rel=""nofollow"">http://code.activestate.com/recipes/474121/</a></p>
"
101167,12818,2008-09-19T11:20:29Z,101128,47,"<p>You can use the module called <a href=""http://docs.activestate.com/activepython/2.5/pywin32/win32clipboard.html"">win32clipboard</a>, which is part of <a href=""http://sourceforge.net/projects/pywin32/"">pywin32</a>.</p>

<p>Here is an example that first sets the clipboard data then gets it:</p>

<pre><code>import win32clipboard

# set clipboard data
win32clipboard.OpenClipboard()
win32clipboard.EmptyClipboard()
win32clipboard.SetClipboardText('testing 123')
win32clipboard.CloseClipboard()

# get clipboard data
win32clipboard.OpenClipboard()
data = win32clipboard.GetClipboardData()
win32clipboard.CloseClipboard()
print data
</code></pre>

<p>An important reminder from the documentation:</p>

<blockquote>
  <p>When the window has finished examining or changing the clipboard,
  close the clipboard by calling CloseClipboard. This enables other
  windows to access the clipboard. Do not place an object on the
  clipboard after calling CloseClipboard.</p>
</blockquote>
"
101207,1196,2008-09-19T11:31:17Z,101174,5,"<p>Nope, there is no such function in .NET. You have roll out your own. Note that C# doesn't support tuples, so python-like syntax sugar is missing too.</p>

<p>You can use something like this:</p>

<pre><code>class Pair&lt;T1, T2&gt;
{
    public T1 First { get; set;}
    public T2 Second { get; set;}
}

static IEnumerable&lt;Pair&lt;T1, T2&gt;&gt; Zip&lt;T1, T2&gt;(IEnumerable&lt;T1&gt; first, IEnumerable&lt;T2&gt; second)
{
    if (first.Count() != second.Count())
        throw new ArgumentException(""Blah blah"");

    using (IEnumerator&lt;T1&gt; e1 = first.GetEnumerator())
    using (IEnumerator&lt;T2&gt; e2 = second.GetEnumerator())
    {
        while (e1.MoveNext() &amp;&amp; e2.MoveNext())
        {
            yield return new Pair&lt;T1, T2&gt;() {First = e1.Current, Second = e2.Current};
        }
    }
}

...

var ints = new int[] {1, 2, 3};
var strings = new string[] {""A"", ""B"", ""C""};

foreach (var pair in Zip(ints, strings))
{
    Console.WriteLine(pair.First + "":"" + pair.Second);
}
</code></pre>
"
101222,16881,2008-09-19T11:34:43Z,101174,25,"<p>Update: It is built-in in C# 4 as <a href=""https://msdn.microsoft.com/en-us/library/vstudio/dd267698(v=vs.110).aspx"" rel=""nofollow"">System.Linq.Enumerable.Zip Method</a></p>

<p>Here is a C# 3 version:</p>

<pre><code>IEnumerable&lt;TResult&gt; Zip&lt;TResult,T1,T2&gt;
    (IEnumerable&lt;T1&gt; a,
     IEnumerable&lt;T2&gt; b,
     Func&lt;T1,T2,TResult&gt; combine)
{
    using (var f = a.GetEnumerator())
    using (var s = b.GetEnumerator())
    {
        while (f.MoveNext() &amp;&amp; s.MoveNext())
            yield return combine(f.Current, s.Current);
    }
}
</code></pre>

<p>Dropped the C# 2 version as it was showing its age.</p>
"
101227,3820,2008-09-19T11:35:28Z,101174,8,"<p>As far as I know there is not. I wrote one for myself (as well as a few other useful extensions and put them in a project called <a href=""http://www.codeplex.com/nextension"" rel=""nofollow"">NExtension</a> on Codeplex.</p>

<p>Apparently the Parallel extensions for .NET have a Zip function.</p>

<p>Here's a simplified version from NExtension (but please check it out for more useful extension methods):</p>

<pre><code>public static IEnumerable&lt;TResult&gt; Zip&lt;T1, T2, TResult&gt;(this IEnumerable&lt;T1&gt; source1, IEnumerable&lt;T2&gt; source2, Func&lt;T1, T2, TResult&gt; combine)
{
    using (IEnumerator&lt;T1&gt; data1 = source1.GetEnumerator())
    using (IEnumerator&lt;T2&gt; data2 = source2.GetEnumerator())
        while (data1.MoveNext() &amp;&amp; data2.MoveNext())
        {
            yield return combine(data1.Current, data2.Current);
        }
}
</code></pre>

<p>Usage:</p>

<pre><code>int[] list1 = new int[] {1, 2, 3};
string[] list2 = new string[] {""a"", ""b"", ""c""};

foreach (var result in list1.Zip(list2, (i, s) =&gt; i.ToString() + "" "" + s))
    Console.WriteLine(result);
</code></pre>
"
101284,18658,2008-09-19T11:55:09Z,101174,2,"<p>There's also one in F#:</p>

<p>let zipped = Seq.zip firstEnumeration secondEnumation</p>
"
101353,6899,2008-09-19T12:10:20Z,92533,1,"<p>complex numbers. (The complexobject.c defines a class, so technically it's not a module). Great for 2d coordinates, with easy translation/rotations etc</p>

<p>eg.</p>

<pre><code>TURN_LEFT_90= 1j
TURN_RIGHT_90= -1j

coord= 5+4j # x=5 y=4
print coord*TURN_LEFT_90
</code></pre>
"
101539,17160,2008-09-19T12:44:51Z,101301,1,"<p>You can probably use Java's loadLibrary to do that (provided it works in your platform's java). It is in the java library: <a href=""http://java.sun.com/javase/6/docs/api/java/lang/System.html#loadLibrary(java.lang.String)"" rel=""nofollow"" title=""sun.com loadLibrary documentation"">java.System.loadLibrary()</a>.</p>

<p>Note that sometimes you will have to write a wrapper in C and/or in Java depending on the library you want to use and target system, since details are platform dependant.
Refer to the documentation for more details.</p>
"
101787,15329,2008-09-19T13:26:53Z,101754,20,"<p>Not at the moment and you would be lucky to get Jython to work soon. If you're planning to start your development now you would be better off with just sticking to Java for now on.</p>
"
101947,1694,2008-09-19T13:47:29Z,100210,34,"<p>As others here have stated, you can just use full datetime objects throughout:</p>

<pre><code>sometime = get_some_time() # the time to which you want to add 3 seconds
later = (datetime.combine(date.today(), sometime) + timedelta(seconds=3)).time()
</code></pre>

<p>However, I think it's worth explaining why full datetime objects are required.  Consider what would happen if I added 2 hours to 11pm.  What's the correct behavior?  An exception, because you can't have a time larger than 11:59pm?  Should it wrap back around?</p>

<p>Different programmers will expect different things, so whichever result they picked would surprise a lot of people.  Worse yet, programmers would write code that worked just fine when they tested it initially, and then have it break later by doing something unexpected.  This is very bad, which is why you're not allowed to add timedelta objects to time objects.</p>
"
102158,NA,2008-09-19T14:16:12Z,101742,-1,"<p>I'm not a python expert or a app engine expert. But did you try following the sample appl at <a href=""http://code.google.com/appengine/docs/gettingstarted/usingusers.html"" rel=""nofollow"">http://code.google.com/appengine/docs/gettingstarted/usingusers.html</a>. I created one at <a href=""http://quizengine.appspot.com"" rel=""nofollow"">http://quizengine.appspot.com</a>, it seemed to work fine with Google authentication and everything.
Just a suggestion, but look in to the getting started guide. Take it easy if the suggestion sounds naive. :)
Thanks.</p>
"
102162,7813,2008-09-19T14:16:24Z,101742,0,"<p>Im not too familiar with AppEngine, or Googles web apis, but for a brute force approach you could write a script with something like mechanize (<a href=""http://wwwsearch.sourceforge.net/mechanize/"" rel=""nofollow"">http://wwwsearch.sourceforge.net/mechanize/</a>) to simply walk through the login process before you begin doing the real work of the client.</p>
"
102285,2109,2008-09-19T14:30:41Z,8948,75,"<p>I used <a href=""http://eyed3.nicfit.net/"">eyeD3</a> the other day with a lot of success.  I found that it could add artwork to the ID3 tag which the other modules I looked at couldn't.  You'll have to download the tar and execute <code>python setup.py install</code> from the source folder.  </p>

<p>Relevant examples from the website are below.</p>

<p>Reading the contents of an mp3 file containing either v1 or v2 tag info:</p>

<pre><code> import eyeD3
 tag = eyeD3.Tag()
 tag.link(""/some/file.mp3"")
 print tag.getArtist()
 print tag.getAlbum()
 print tag.getTitle()
</code></pre>

<p>Read an mp3 file (track length, bitrate, etc.) and access it's tag:</p>

<pre><code>if eyeD3.isMp3File(f):
     audioFile = eyeD3.Mp3AudioFile(f)
     tag = audioFile.getTag()
</code></pre>

<p>Specific tag versions can be selected:</p>

<pre><code> tag.link(""/some/file.mp3"", eyeD3.ID3_V2)
 tag.link(""/some/file.mp3"", eyeD3.ID3_V1)
 tag.link(""/some/file.mp3"", eyeD3.ID3_ANY_VERSION)  # The default.
</code></pre>

<p>Or you can iterate over the raw frames:</p>

<pre><code> tag = eyeD3.Tag()
 tag.link(""/some/file.mp3"")
 for frame in tag.frames:
    print frame
</code></pre>

<p>Once a tag is linked to a file it can be modified and saved:</p>

<pre><code> tag.setArtist(u""Cro-Mags"")
 tag.setAlbum(u""Age of Quarrel"")
 tag.update()
</code></pre>

<p>If the tag linked in was v2 and you'd like to save it as v1:</p>

<pre><code> tag.update(eyeD3.ID3_V1_1)
</code></pre>

<p>Read in a tag and remove it from the file:</p>

<pre><code> tag.link(""/some/file.mp3"")
 tag.remove()
 tag.update()
</code></pre>

<p>Add a new tag:</p>

<pre><code> tag = eyeD3.Tag()
 tag.link('/some/file.mp3')    # no tag in this file, link returned False
 tag.header.setVersion(eyeD3.ID3_V2_3)
 tag.setArtist('Fugazi')
 tag.update()
</code></pre>
"
102438,17624,2008-09-19T14:48:21Z,102394,2,"<p>By far the easiest approach, and almost certainly the fastest, is something along the lines of:</p>

<pre><code>def sorted_dict(d):
    keys = d.keys()
    keys.sort()
    for key in keys:
        yield d[key]
</code></pre>

<p>You can't sort without fetching all keys. Fetching all keys into a list and then sorting that list is the most efficient way to do that; list sorting is very fast, and fetching the keys list like that is as fast as it can be. You can then either create a new list of values or yield the values as the example does. Keep in mind that you can't modify the dict if you are iterating over it (the next iteration would fail) so if you want to modify the dict before you're done with the result of sorted_dict(), make it return a list.</p>
"
102443,3002,2008-09-19T14:49:06Z,102394,8,"<p>How about something like this:</p>

<pre><code>def itersorted(d):
    for key in sorted(d):
        yield d[key]
</code></pre>
"
102480,4849,2008-09-19T14:53:03Z,102394,-1,"<p>Assuming you want a default sort order, you can used sorted(list) or list.sort().  If you want your own sort logic, Python lists support the ability to sort based on a function you pass in.  For example, the following would be a way to sort numbers from least to greatest (the default behavior) using a function.  </p>

<pre><code>def compareTwo(a, b):
  if a &gt; b:
    return 1
  if a == b:
    return 0
  if a &lt; b:
    return -1

List.Sort(compareTwo)
print a
</code></pre>

<p>This approach is conceptually a bit cleaner than manually creating a new list and appending the new values and allows you to control the sort logic.</p>
"
102509,12030,2008-09-19T14:55:24Z,101742,38,"<p>appcfg.py, the tool that uploads data to App Engine has to do exactly this to authenticate itself with the App Engine server. The relevant functionality is abstracted into appengine_rpc.py. In a nutshell, the solution is:</p>

<ol>
<li>Use the <a href=""http://code.google.com/apis/accounts/docs/AuthForInstalledApps.html"">Google ClientLogin API</a> to obtain an authentication token. appengine_rpc.py does this in <a href=""http://code.google.com/p/googleappengine/source/browse/trunk/python/google/appengine/tools/appengine%5Frpc.py#180"">_GetAuthToken</a></li>
<li>Send the auth token to a special URL on your App Engine app. That page then returns a cookie and a 302 redirect. Ignore the redirect and store the cookie. appcfg.py does this in <a href=""http://code.google.com/p/googleappengine/source/browse/trunk/python/google/appengine/tools/appengine%5Frpc.py#228"">_GetAuthCookie</a></li>
<li>Use the returned cookie in all future requests.</li>
</ol>

<p>You may also want to look at <a href=""http://code.google.com/p/googleappengine/source/browse/trunk/python/google/appengine/tools/appengine%5Frpc.py#253"">_Authenticate</a>, to see how appcfg handles the various return codes from ClientLogin, and <a href=""http://code.google.com/p/googleappengine/source/browse/trunk/python/google/appengine/tools/appengine%5Frpc.py#397"">_GetOpener</a>, to see how appcfg creates a urllib2 OpenerDirector that doesn't follow HTTP redirects. Or you could, in fact, just use the AbstractRpcServer and HttpRpcServer classes wholesale, since they do pretty much everything you need.</p>
"
102572,12030,2008-09-19T15:02:56Z,61894,4,"<p>You can't use relative paths, as Toni suggests, because you have no guarantee that the path from your working directory to your app's directory will remain the same.</p>

<p>The correct solution is to either use os.path.split, as you are, or to use something like:</p>

<pre><code>path = os.path.join(os.path.dirname(__file__), '..', 'templates', 'myPage.html')
</code></pre>

<p>My usual approach is to generate a path to the template directory using the above method, and store it as a member of my controller object, and provide a ""getTemplatePath"" method that takes the provided filename and joins it with the basename.</p>
"
102612,1026,2008-09-19T15:07:13Z,102535,34,"<p>See the ""Motivation"" section in <a href=""http://www.python.org/dev/peps/pep-0255/"">PEP 255</a>.</p>

<p>A non-obvious use of generators is creating interruptible functions, which lets you do things like update UI or run several jobs ""simultaneously"" (interleaved, actually) while not using threads.</p>
"
102632,17624,2008-09-19T15:09:25Z,102535,183,"<p>Generators give you lazy evaluation. You use them by iterating over them, either explicitly with 'for' or implicitly by passing it to any function or construct that iterates. You can think of generators as returning multiple items, as if they return a list, but instead of returning them all at once they return them one-by-one, and the generator function is paused until the next item is requested.</p>

<p>Generators are good for calculating large sets of results (in particular calculations involving loops themselves) where you don't know if you are going to need all results, or where you don't want to allocate the memory for all results at the same time. Or for situations where the generator uses <em>another</em> generator, or consumes some other resource, and it's more convenient if that happened as late as possible.</p>

<p>Another use for generators (that is really the same) is to replace callbacks with iteration. In some situations you want a function to do a lot of work and occasionally report back to the caller. Traditionally you'd use a callback function for this. You pass this callback to the work-function and it would periodically call this callback. The generator approach is that the work-function (now a generator) knows nothing about the callback, and merely yields whenever it wants to report something. The caller, instead of writing a separate callback and passing that to the work-function, does all the reporting work in a little 'for' loop around the generator.</p>

<p>For example, say you wrote a 'filesystem search' program. You could perform the search in its entirety, collect the results and then display them one at a time. All of the results would have to be collected before you showed the first, and all of the results would be in memory at the same time. Or you could display the results while you find them, which would be more memory efficient and much friendlier towards the user. The latter could be done by passing the result-printing function to the filesystem-search function, or it could be done by just making the search function a generator and iterating over the result.</p>

<p>If you want to see an example of the latter two approaches, see os.path.walk() (the old filesystem-walking function with callback) and os.walk() (the new filesystem-walking generator.) Of course, if you really wanted to collect all results in a list, the generator approach is trivial to convert to the big-list approach:</p>

<pre><code>big_list = list(the_generator)
</code></pre>
"
102633,18044,2008-09-19T15:09:26Z,102535,6,"<p>Basically avoiding call-back functions when iterating over input maintaining state.</p>

<p>See <a href=""http://www.python.org/dev/peps/pep-0255/"">here</a> and <a href=""http://www.dabeaz.com/generators/index.html"">here</a> for an overview of what can be done using generators.</p>
"
102634,17160,2008-09-19T15:09:28Z,102535,71,"<p>One of the reasons to use generator is to make the solution clearer for some kind of solutions.</p>

<p>The other is to treat results one at a time, avoiding building huge lists of results that you would process separated anyway. </p>

<p>If you have a fibonacci-up-to-n function like this:</p>

<pre><code># function version
def fibon(n):
    a = b = 1
    result = []
    for i in xrange(n):
        result.append(a)
        a, b = b, a + b
    return result
</code></pre>

<p>You can more easily write the function as this:</p>

<pre><code># generator version
def fibon(n):
    a = b = 1
    for i in xrange(n):
        yield a
        a, b = b, a + b
</code></pre>

<p>The function is clearer. And if you use the function like this:</p>

<pre><code>for x in fibon(1000000):
    print x,
</code></pre>

<p>in this example, if using the generator version, the whole 1000000 item list won't be created at all, just one value at a time. That would not be the case when using the list version, where a list would be created first.</p>
"
102667,10661,2008-09-19T15:13:16Z,102535,12,"<p>My favorite uses are ""filter"" and ""reduce"" operations.</p>

<p>Let's say we're reading a file, and only want the lines which begin with ""##"".</p>

<pre><code>def filter2sharps( aSequence ):
    for l in aSequence:
        if l.startswith(""##""):
            yield l
</code></pre>

<p>We can then use the generator function in a proper loop</p>

<pre><code>source= file( ... )
for line in filter2sharps( source.readlines() ):
    print line
source.close()
</code></pre>

<p>The reduce example is similar.  Let's say we have a file where we need to locate blocks of <code>&lt;Location&gt;...&lt;/Location&gt;</code> lines.  [Not HTML tags, but lines that happen to look tag-like.]</p>

<pre><code>def reduceLocation( aSequence ):
    keep= False
    block= None
    for line in aSequence:
        if line.startswith(""&lt;/Location""):
            block.append( line )
            yield block
            block= None
            keep= False
        elif line.startsWith(""&lt;Location""):
            block= [ line ]
            keep= True
        elif keep:
            block.append( line )
        else:
            pass
    if block is not None:
        yield block # A partial block, icky
</code></pre>

<p>Again, we can use this generator in a proper for loop.</p>

<pre><code>source = file( ... )
for b in reduceLocation( source.readlines() ):
    print b
source.close()
</code></pre>

<p>The idea is that a generator function allows us to filter or reduce a sequence, producing a another sequence one value at a time.</p>
"
102674,12166,2008-09-19T15:14:10Z,102535,26,"<p>Buffering. When it is efficient to fetch data in large chunks, but process it in small chunks, then a generator might help:</p>

<pre><code>def bufferedFetch():
  while True:
     buffer = getBigChunkOfData()
     # insert some code to break on 'end of data'
     for i in buffer:    
          yield i
</code></pre>

<p>The above lets you easily separate buffering from processing. The consumer function can now just get the values one by one without worrying about buffering.</p>
"
102679,12030,2008-09-19T15:14:43Z,102535,1,"<p>Piles of stuff. Any time you want to generate a sequence of items, but don't want to have to 'materialize' them all into a list at once. For example, you could have a simple generator that returns prime numbers:</p>

<pre><code>def primes():
    primes_found = set()
    primes_found.add(2)
    yield 2
    for i in itertools.count(1):
        candidate = i * 2 + 1
        if not all(candidate % prime for prime in primes_found):
            primes_found.add(candidate)
            yield candidate
</code></pre>

<p>You could then use that to generate the products of subsequent primes:</p>

<pre><code>def prime_products():
    primeiter = primes()
    prev = primeiter.next()
    for prime in primeiter:
        yield prime * prev
        prev = prime
</code></pre>

<p>These are fairly trivial examples, but you can see how it can be useful for processing large (potentially infinite!) datasets without generating them in advance, which is only one of the more obvious uses.</p>
"
102682,3002,2008-09-19T15:15:03Z,102535,17,"<p>The simple explanation:
Consider a <code>for</code> statement</p>

<pre><code>for item in iterable:
   do_stuff()
</code></pre>

<p>A lot of the time, all the items in <code>iterable</code> doesn't need to be there from the start, but can be generated on the fly as they're required. This can be a lot more efficient in both </p>

<ul>
<li>space (you never need to store all the items simultaneously) and </li>
<li>time  (the iteration may finish before all the items are needed).</li>
</ul>

<p>Other times, you don't even know all the items ahead of time. For example:</p>

<pre><code>for command in user_input():
   do_stuff_with(command)
</code></pre>

<p>You have no way of knowing all the user's commands beforehand, but you can use a nice loop like this if you have a generator handing you commands:</p>

<pre><code>def user_input():
    while True:
        wait_for_command()
        cmd = get_command()
        yield cmd
</code></pre>

<p>With generators you can also have iteration over infinite sequences, which is of course not possible when iterating over containers.</p>
"
102701,1750627,2008-09-19T15:17:51Z,102535,2,"<p>I use generators when our web server is acting as a proxy:</p>

<ol>
<li>The client requests a proxied url from the server</li>
<li>The server begins to load the target url</li>
<li>The server yields to return the results to the client as soon as it gets them</li>
</ol>
"
102990,18866,2008-09-19T15:37:15Z,60208,9,"<p>expanding on the ""dict as switch"" idea. if you want to use a default value for your switch:</p>

<pre><code>def f(x):
    try:
        return {
            'a': 1,
            'b': 2,
        }[x]
    except KeyError:
        return 'default'
</code></pre>
"
103081,3233,2008-09-19T15:45:15Z,60208,674,"<p>If you'd like defaults you could use the dictionary <a href=""https://docs.python.org/2/library/stdtypes.html#dict.get""><code>get(key[, default])</code></a> method:</p>

<pre><code>def f(x):
    return {
        'a': 1,
        'b': 2,
    }.get(x, 9)    # 9 is default if x not found
</code></pre>
"
103187,14648,2008-09-19T15:54:47Z,102394,2,"<pre><code>def sortedDict(dictobj):
    return (value for key, value in sorted(dictobj.iteritems()))
</code></pre>

<p>This will create a single intermediate list, the 'sorted()' method returns a real list. But at least it's only one.</p>
"
103211,18866,2008-09-19T15:56:35Z,60848,1,"<p>It's not possible unless you store the keys in a separate list for referencing later.</p>
"
103212,15329,2008-09-19T15:56:41Z,56417,1,"<p>I have no Dabo experience at all but this question is on the top of the list fo such a long time that I decided to give it a shot:</p>

<h2>Framework selection</h2>

<h2>Assumptions:</h2>

<ol>
<li>medium-to-big project: we're talking about a team of more than 20 people working on something for about a year for the first phase. This is usually an expensive and very important effort for the client.</li>
<li>this project will have significant amount of users (around a hundred) so performance is essential</li>
<li>it's an ERP project so the application will work with large amounts of information</li>
<li>you have no prior Dabo experience in your team</li>
</ol>

<h2>Considerations:</h2>

<ol>
<li>I could not open Dabo project site right now. There seems to be some server problem. That alone would make me think twice about using it for a big project.</li>
<li>It's not a well-known framework.  Typing Dabo in Google returns almost no useful results, it does not have a Wikipedia page, all-in-all it's quite obscure. It means that when you will have problems with it (and you will have problems with it) you will have almost no place to go. Your question was unanswered for 8 days on SO, this alone would make me re-consider. If you base your project on an obscure technology you have no previous experience with - it's a huge risk.</li>
<li>You don't have people who know that framework in your team. It means that you have to learn it to get any results at all and to master it will require quite significant amount of time. You will have to factor that time into your project plan. Do you really need it?</li>
<li>What does this framework give you that you cannot do yourself? Quite a lot of time my team tried to use some third-party component or tool only to find that building a custom one would be faster than dealing with third-party problems and limitations. There are brilliant tools available to people nowadays and we would be lost without them - but you have to carefully consider if this tool  is one of them</li>
<li>Dabo project version is 0.84. Do you know if they spend time optimising their code for performance at this stage? Did you run any tests to see it will sustain the load you have in your NFRs.</li>
</ol>

<p>Hope that helps :) Good luck with your project</p>
"
103410,477,2008-09-19T16:22:06Z,101742,34,"<p>thanks to Arachnid for the answer - it worked as suggested</p>

<p>here is a simplified copy of the code, in case it is helpful to the next person to try! </p>

<pre><code>import os
import urllib
import urllib2
import cookielib

users_email_address = ""billy.bob@gmail.com""
users_password      = ""billybobspassword""

target_authenticated_google_app_engine_uri = 'http://mylovelyapp.appspot.com/mylovelypage'
my_app_name = ""yay-1.0""



# we use a cookie to authenticate with Google App Engine
#  by registering a cookie handler here, this will automatically store the 
#  cookie returned when we use urllib2 to open http://currentcost.appspot.com/_ah/login
cookiejar = cookielib.LWPCookieJar()
opener = urllib2.build_opener(urllib2.HTTPCookieProcessor(cookiejar))
urllib2.install_opener(opener)

#
# get an AuthToken from Google accounts
#
auth_uri = 'https://www.google.com/accounts/ClientLogin'
authreq_data = urllib.urlencode({ ""Email"":   users_email_address,
                                  ""Passwd"":  users_password,
                                  ""service"": ""ah"",
                                  ""source"":  my_app_name,
                                  ""accountType"": ""HOSTED_OR_GOOGLE"" })
auth_req = urllib2.Request(auth_uri, data=authreq_data)
auth_resp = urllib2.urlopen(auth_req)
auth_resp_body = auth_resp.read()
# auth response includes several fields - we're interested in 
#  the bit after Auth= 
auth_resp_dict = dict(x.split(""="")
                      for x in auth_resp_body.split(""\n"") if x)
authtoken = auth_resp_dict[""Auth""]

#
# get a cookie
# 
#  the call to request a cookie will also automatically redirect us to the page
#   that we want to go to
#  the cookie jar will automatically provide the cookie when we reach the 
#   redirected location

# this is where I actually want to go to
serv_uri = target_authenticated_google_app_engine_uri

serv_args = {}
serv_args['continue'] = serv_uri
serv_args['auth']     = authtoken

full_serv_uri = ""http://mylovelyapp.appspot.com/_ah/login?%s"" % (urllib.urlencode(serv_args))

serv_req = urllib2.Request(full_serv_uri)
serv_resp = urllib2.urlopen(serv_req)
serv_resp_body = serv_resp.read()

# serv_resp_body should contain the contents of the 
#  target_authenticated_google_app_engine_uri page - as we will have been 
#  redirected to that page automatically 
#
# to prove this, I'm just gonna print it out
print serv_resp_body
</code></pre>
"
103610,7061,2008-09-19T16:46:53Z,61151,18,"<p>I also tend to put my unit tests in the file itself, as Jeremy Cantrell above notes, although I tend to not put the test function in the main body, but rather put everything in an</p>

<pre><code>if __name__ == '__main__':
   do tests...
</code></pre>

<p>block.  This ends up adding documentation to the file as 'example code' for how to use the python file you are testing.</p>

<p>I should add, I tend to write very tight modules/classes.  If your modules require very large numbers of tests, you can put them in another, but even then, I'd still add:</p>

<pre><code>if __name__ == '__main__':
   import tests.thisModule
   tests.thisModule.runtests
</code></pre>

<p>This lets anybody reading your source code know where to look for the test code.</p>
"
103873,19104,2008-09-19T17:24:56Z,103844,-1,"<pre><code>import itertools
itertools.flatten( li )
</code></pre>
"
103883,8206,2008-09-19T17:26:44Z,103844,0,"<p>To make it a flattened list use either:</p>

<ol>
<li><a href=""http://code.activestate.com/recipes/121294/"" rel=""nofollow"">http://code.activestate.com/recipes/121294/</a></li>
<li><a href=""http://code.activestate.com/recipes/363051/"" rel=""nofollow"">http://code.activestate.com/recipes/363051/</a></li>
</ol>

<p>Then, <code>join</code> to make it a string.</p>
"
103886,6043,2008-09-19T17:26:51Z,103844,5,"<p>There's a couple choices. First, you can just create a new list and add the contents of each list to it:</p>

<pre><code>li2 = []
for sublist in li:
    li2.extend(sublist)
</code></pre>

<p>Alternately, you can use the <code>itertools</code> module's <code>chain</code> function, which produces an iterable containing all the items in multiple iterables:</p>

<pre><code>import itertools
li2 = list(itertools.chain(*li))
</code></pre>

<p>If you take this approach, you can produce the string without creating an intermediate list:</p>

<pre><code>s = "","".join(itertools.chain(*li))
</code></pre>
"
103887,9951,2008-09-19T17:26:52Z,103844,0,"<p>For the second one, there is a built-in string method to do that :</p>

<pre><code>&gt;&gt;&gt; print ','.join(str(x) for x in li2)
""0,1,2,3,4,5,6,7,8""
</code></pre>

<p>For the first one, you can use join within a comprehension list :</p>

<pre><code>&gt;&gt;&gt; print "","".join(["","".join(str(x) for x in li])
""0,1,2,3,4,5,6,7,8""
</code></pre>

<p>But it's easier to use itertools.flatten :</p>

<pre><code>&gt;&gt;&gt; import itertools
&gt;&gt;&gt; print itertools.flatten(li)
[0,1,2,3,4,5,6,7,8]
&gt;&gt;&gt; print "","".join(str(x) for x in itertools.flatten(li))
""0,1,2,3,4,5,6,7,8""
</code></pre>

<p>N.B : itertools is a module that help you to deal with common tasks with iterators such as list, tuples or string... It's handy because it does not store a copy of the structure you're working on but process the items one by one.</p>

<p>EDIT : funny, I am learning plenty of way to do it. Who said that there was only one good way to do it ?</p>
"
103890,3002,2008-09-19T17:27:43Z,103844,5,"<p>My favorite, and the shortest one, is this:</p>

<pre><code>li2 = sum(li, [])
</code></pre>

<p>and</p>

<pre><code>s = ','.join(li2)
</code></pre>

<p>EDIT: use <code>sum</code> instead of <code>reduce</code>, (thanks <a href=""http://stackoverflow.com/users/17624/thomas-wouters"">Thomas Wouters</a>!)</p>
"
103895,17624,2008-09-19T17:28:14Z,103844,22,"<p>Like so:</p>

<pre><code>[ item for innerlist in outerlist for item in innerlist ]
</code></pre>

<p>Turning that directly into a string with separators:</p>

<pre><code>','.join(str(item) for innerlist in outerlist for item in innerlist)
</code></pre>

<p>Yes, the order of 'for innerlist in outerlist' and 'for item in innerlist' is correct. Even though the ""body"" of the loop is at the start of the listcomp, the order of nested loops (and 'if' clauses) is still the same as when you would write the loop out:</p>

<pre><code>for innerlist in outerlist:
    for item in innerlist:
        ...
</code></pre>
"
103908,9936,2008-09-19T17:29:22Z,103844,6,"<p>Try that:</p>

<pre><code>li=[[0,1,2],[3,4,5],[6,7,8]]
li2 = [ y for x in li for y in x]
</code></pre>

<p>You can read it like this:<br>
Give me the list of every ys.<br>
The ys come from the xs.<br>
The xs come from li.</p>

<p>To map that in a string:</p>

<pre><code>','.join(map(str,li2))
</code></pre>
"
104426,3399,2008-09-19T18:41:52Z,104420,15,"<p>This solution implements a generator, to avoid holding all the permutations on memory:</p>

<pre><code>def permutations (orig_list):
    if not isinstance(orig_list, list):
        orig_list = list(orig_list)

    yield orig_list

    if len(orig_list) == 1:
        return

    for n in sorted(orig_list):
        new_list = orig_list[:]
        pos = new_list.index(n)
        del(new_list[pos])
        new_list.insert(0, n)
        for resto in permutations(new_list[1:]):
            if new_list[:1] + resto &lt;&gt; orig_list:
                yield new_list[:1] + resto
</code></pre>
"
104436,8206,2008-09-19T18:43:09Z,104420,190,"<p><strong>Starting with Python 2.6</strong> (and if you're on Python 3) you have a <strong>standard-library</strong> tool for this: <a href=""https://docs.python.org/2/library/itertools.html#itertools.permutations""><code>itertools.permutations</code></a>.</p>

<hr>

<p>If you're using an <strong>older Python (&lt;2.6)</strong> for some reason or are just curious to know how it works, here's one nice approach, taken from  <a href=""http://code.activestate.com/recipes/252178/"">http://code.activestate.com/recipes/252178/</a>:</p>

<pre><code>def all_perms(elements):
    if len(elements) &lt;=1:
        yield elements
    else:
        for perm in all_perms(elements[1:]):
            for i in range(len(elements)):
                # nb elements[0:1] works in both string and list contexts
                yield perm[:i] + elements[0:1] + perm[i:]
</code></pre>

<p>A couple of alternative approaches are listed in the documentation of <code>itertools.permutations</code>. Here's one:</p>

<pre><code>def permutations(iterable, r=None):
    # permutations('ABCD', 2) --&gt; AB AC AD BA BC BD CA CB CD DA DB DC
    # permutations(range(3)) --&gt; 012 021 102 120 201 210
    pool = tuple(iterable)
    n = len(pool)
    r = n if r is None else r
    if r &gt; n:
        return
    indices = range(n)
    cycles = range(n, n-r, -1)
    yield tuple(pool[i] for i in indices[:r])
    while n:
        for i in reversed(range(r)):
            cycles[i] -= 1
            if cycles[i] == 0:
                indices[i:] = indices[i+1:] + indices[i:i+1]
                cycles[i] = n - i
            else:
                j = cycles[i]
                indices[i], indices[-j] = indices[-j], indices[i]
                yield tuple(pool[i] for i in indices[:r])
                break
        else:
            return
</code></pre>

<p>And another, based on <code>itertools.product</code>:</p>

<pre><code>def permutations(iterable, r=None):
    pool = tuple(iterable)
    n = len(pool)
    r = n if r is None else r
    for indices in product(range(n), repeat=r):
        if len(set(indices)) == r:
            yield tuple(pool[i] for i in indices)
</code></pre>
"
104471,9493,2008-09-19T18:48:48Z,104420,255,"<p>And in <a href=""http://docs.python.org/dev/whatsnew/2.6.html"">Python 2.6</a> onwards:</p>

<pre><code>import itertools
itertools.permutations([1,2,3])
</code></pre>

<p>(returned as a generator.  Use <code>list(permutations(l))</code> to return as a list.)</p>
"
104547,8206,2008-09-19T18:58:07Z,94952,1,"<p>Nothing prevents you for diverting your parser from the ""context free"" path using PLY. You can pass information to the lexer during parsing, and in this way achieve full flexibility. I'm pretty sure that you can parse anything you want with PLY this way.</p>

<p>For a hands-on example, <a href=""http://code.google.com/p/pycparser/"" rel=""nofollow"">consider</a> - it is a parser for ANSI C written in Python with PLY. It solves the classic C typedef - identifier problem (that makes C's grammar non context-sensitive) by populating a symbol table in the parser that is being used in the lexer to resolve symbol names as either types or not.</p>
"
105025,17624,2008-09-19T19:59:40Z,104983,48,"<p>In Python, everything is shared, except for function-local variables (because each function call gets its own set of locals, and threads are always separate function calls.) And even then, only the variables themselves (the names that refer to objects) are local to the function; objects themselves are always global, and anything can refer to them.
The <code>Thread</code> object for a particular thread is not a special object in this regard. If you store the <code>Thread</code> object somewhere all threads can access (like a global variable) then all threads can access that one <code>Thread</code> object. If you want to atomically modify <em>anything</em> that you didn't just create in this very same thread, and did not store anywhere another thread can get at it, you have to protect it by a lock. And all threads must of course share this very same lock, or it wouldn't be very effective.</p>

<p>If you want actual thread-local storage, that's where <code>threading.local</code> comes in. Attributes of <code>threading.local</code> are not shared between threads; each thread sees only the attributes it itself placed in there. If you're curious about its implementation, the source is in <code>_threading_local.py</code> in the standard library.</p>
"
105058,12030,2008-09-19T20:03:30Z,104983,0,"<p>Just like in every other language, every thread in Python has access to the same variables. There's no distinction between the 'main thread' and child threads.</p>

<p>One difference with Python is that the Global Interpreter Lock means that only one thread can be running Python code at a time. This isn't much help when it comes to synchronising access, however, as all the usual pre-emption issues still apply, and you have to use threading primitives just like in other languages. It does mean you need to reconsider if you were using threads for performance, however.</p>
"
105127,15682,2008-09-19T20:11:18Z,105095,1,"<p>You still need to use locks (your code could be interrupted at any time to execute another thread and this can cause data inconsistencies). The problem with GIL is that it prevents Python code from using more cores at the same time (or multiple processors if they are available).</p>
"
105145,9493,2008-09-19T20:13:54Z,105095,20,"<p>No - the GIL just protects python internals from multiple threads altering their state.  This is a very low-level of locking, sufficient only to keep python's own structures in a consistent state.  It doesn't cover the <em>application</em> level locking you'll need to do to cover thread safety in your own code.</p>

<p>The essence of locking is to ensure that a particular <em>block</em> of code is only executed by one thread.  The GIL enforces this for blocks the size of a single bytecode, but usually you want the lock to span a larger block of code than this.</p>
"
105175,3446,2008-09-19T20:16:33Z,105095,6,"<p>This post describes the GIL at a fairly high-level:</p>

<ul>
<li><a href=""https://web.archive.org/web/20080516010343/http://www.pyzine.com/Issue001/Section_Articles/article_ThreadingGlobalInterpreter.html"" rel=""nofollow"">https://web.archive.org/web/20080516010343/http://www.pyzine.com/Issue001/Section_Articles/article_ThreadingGlobalInterpreter.html</a></li>
</ul>

<p>Of particular interest are these quotes:</p>

<blockquote>
  <p>Every ten instructions (this default
  can be changed), the core releases the
  GIL for the current thread. At that
  point, the OS chooses a thread from
  all the threads competing for the lock
  (possibly choosing the same thread
  that just released the GIL – you don't
  have any control over which thread
  gets chosen); that thread acquires the
  GIL and then runs for another ten
  bytecodes.</p>
</blockquote>

<p>and </p>

<blockquote>
  <p>Note carefully that the GIL only
  restricts pure Python code. Extensions
  (external Python libraries usually
  written in C) can be written that
  release the lock, which then allows
  the Python interpreter to run
  separately from the extension until
  the extension reacquires the lock.</p>
</blockquote>

<p>It sounds like the GIL just provides fewer possible instances for a context switch, and makes multi-core/processor systems behave as a single core, with respect to each python interpreter instance, so yes, you still need to use synchronization mechanisms.</p>
"
105272,18950,2008-09-19T20:24:50Z,105095,7,"<p>The Global Interpreter Lock prevents threads from accessing the <em>interpreter</em> simultaneously (thus CPython only ever uses one core). However, as I understand it, the threads are still interrupted and scheduled <em>preemptively</em>, which means you still need locks on shared data structures, lest your threads stomp on each other's toes.</p>

<p>The answer I've encountered time and time again is that multithreading in Python is rarely worth the overhead, because of this. I've heard good things about the <a href=""http://pyprocessing.berlios.de/"" rel=""nofollow"">PyProcessing</a> project, which makes running multiple processes as ""simple"" as multithreading, with shared data structures, queues, etc. (PyProcessing will be introduced into the standard library of the upcoming Python 2.6 as the <a href=""http://www.python.org/dev/peps/pep-0371/"" rel=""nofollow"">multiprocessing</a> module.) This gets you around the GIL, as each process has its own interpreter.</p>
"
105369,4702,2008-09-19T20:34:40Z,105095,57,"<p>You will still need locks if you share state between threads. The GIL only protects the interpreter internally. You can still have inconsistent updates in your own code.</p>

<p>For example:</p>

<pre><code>#!/usr/bin/env python
import threading

shared_balance = 0

class Deposit(threading.Thread):
    def run(self):
        for _ in xrange(1000000):
            global shared_balance
            balance = shared_balance
            balance += 100
            shared_balance = balance

class Withdraw(threading.Thread):
    def run(self):
        for _ in xrange(1000000):
            global shared_balance
            balance = shared_balance
            balance -= 100
            shared_balance = balance

threads = [Deposit(), Withdraw()]

for thread in threads:
    thread.start()

for thread in threads:
    thread.join()

print shared_balance
</code></pre>

<p>Here, your code can be interrupted between reading the shared state (<code>balance = shared_balance</code>) and writing the changed result back (<code>shared_balance = balance</code>), causing a lost update. The result is a random value for the shared state.</p>

<p>To make the updates consistent, run methods would need to lock the shared state around the read-modify-write sections (inside the loops) or have <a href=""http://en.wikipedia.org/wiki/Software_transactional_memory"">some way to detect when the shared state had changed since it was read</a>.</p>
"
105473,1469605,2008-09-19T20:44:22Z,100298,29,"<p>For measuring cyclomatic complexity, there's a nice tool available at <a href=""http://www.traceback.org/2008/03/31/measuring-cyclomatic-complexity-of-python-code/"">traceback.org</a>.  The page also gives a good overview of how to interpret the results.</p>

<p>+1 for <a href=""http://www.logilab.org/project/pylint"">pylint</a>.  It is great at verifying adherence to coding standards (be it <a href=""http://www.python.org/dev/peps/pep-0008/"">PEP8</a> or your own organization's variant), which can in the end help to reduce cyclomatic complexity.</p>
"
105756,10661,2008-09-19T21:24:56Z,105702,0,"<p>You should be able to add <code>@login_required</code> decorators across the board and be done with it.  Unless you have a boat-load of view functions, it shouldn't be too horrible.</p>
"
105764,3446,2008-09-19T21:25:38Z,105702,4,"<p>You can probably restrict access to the entire site via apache with htaccess, taking the problem out of the django's project space entirely.</p>
"
105774,19198,2008-09-19T21:26:48Z,104420,2,"<p>Forgive my python illiteracy as I won't be offering the solution in python.
As I do not know what method python 2.6 uses to generate the permutations and eliben's one looks like Johnson-Trotter permutation generation, you might look for article
in Wikipedia on <a href=""http://en.wikipedia.org/wiki/Permutation#Algorithms_to_generate_permutations"" rel=""nofollow"">Permutations and their generation</a> that looks quite like unrank function in <a href=""http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.43.4521"" rel=""nofollow"">paper by Myrvold and Ruskey</a>.</p>

<p>It would seem to me that this could be used in a generator in the same way as in other replies to lessen the memory requirement considerably. Just remember that the permutations will not be in lexicographic order.</p>
"
105945,2108,2008-09-19T21:51:26Z,105702,2,"<p>Do what StackOverflow did.</p>

<p>They had a simple email/password form. It had a single hard-coded password (falkensmaze). When the user gets the password right set a cookie. eg. auth=1</p>

<p>Don't worry about it being unsecure. Who care's if someone hacks into the beta?</p>

<p>Apache/htaccess is also a nice and simple solution.</p>
"
106212,16361,2008-09-19T22:43:40Z,105702,18,"<p>Start with <a href=""http://www.djangosnippets.org/snippets/136/"">this Django snippet</a>, but modify it to check <code>request.session['has_beta_access']</code>. If they don't have it, then have it return a redirect to a ""enter beta code"" page that, when posted to with the right code, sets that session variable to <code>True</code>.</p>

<p>Making it a public beta then just consists of removing that middleware from your <code>MIDDLEWARE_CLASSES</code> setting.</p>
"
106464,19399,2008-09-19T23:55:08Z,56417,24,"<p>I'm one of the authors of the Dabo framework. One of our users pointed out to me the extremely negative answer you received, and so I thought I had better chime in and clear up some of the incorrect assumptions in the first reply.</p>

<p>Dabo is indeed well-known in the Python community. I have presented it at 3 of the last 4 US PyCons, and we have several hundred users who subscribe to our email lists. Our website (<a href=""http://dabodev.com"">http://dabodev.com</a>) has not had any service interruptions; I don't know why the first responder claimed to have trouble. Support is through our email lists, and we pride ourselves on helping people quickly and efficiently. Many of the newbie questions help us to identify places where our docs are lacking, so we strongly encourage newcomers to ask questions!</p>

<p>Dabo has been around for 4 years. The fact that it is still a few days away from a 0.9 release is more of a reflection of the rather conservative version numbering of my partner, Paul McNett, than any instabilities in the framework. I know of Dabo apps that have been in production since 2006; I have used it for my own projects since 2004. Whatever importance you attach to release numbers, we are at revision 4522, with consistent work being done to add more and more stuff to the framework; refactor and streamline some of the older code, and yes, clean up some bugs.</p>

<p>Please sign up for our free email support list:</p>

<p><a href=""http://leafe.com/mailman/listinfo/dabo-users"">http://leafe.com/mailman/listinfo/dabo-users</a></p>

<p>...and ask any questions you may have about Dabo there. Not many people have discovered Stack Overflow yet, so I wouldn't expect very informed answers here yet. There are several regular contributors there who use Dabo on a daily basis, and are usually more than happy to offer their opinions and their help.</p>
"
106560,2603,2008-09-20T00:31:24Z,104983,13,"<p>You can create thread local storage using <code>threading.local()</code>.</p>

<pre><code>&gt;&gt;&gt; tls = threading.local()
&gt;&gt;&gt; tls.x = 4 
&gt;&gt;&gt; tls.x
4
</code></pre>

<p>Data stored to the tls will be unique to each thread which will help ensure that unintentional sharing does not occur.</p>
"
106640,3560,2008-09-20T00:58:52Z,106630,4,"<p><code>unicode</code> does not guess the encoding of your text. If your object can print itself as <code>unicode</code>, define the <code>__unicode__()</code> method that returns a Unicode string.</p>

<p><hr /></p>

<p>The secret is that <code>unicode(r)</code> is not actually calling <code>__str__()</code> itself. Instead, it's looking for a <code>__unicode__()</code> method. The default implementation of <code>__unicode__()</code> will call <code>__str__()</code> and then attempt to decode it using the <code>ascii</code> charset. When you pass the encoding, <code>unicode()</code> expects the first object to be something that can be decoded -- that is, an instance of <code>basestring</code>.</p>

<p><hr /></p>

<blockquote>
  <p>Behavior is weird because it tries to decode as ascii if I don't pass 'utf-8'. But if I pass 'utf-8' it gives a different error...</p>
</blockquote>

<p>That's because when you specify ""utf-8"", it treats the first parameter as a string-like object to be decoded. Without it, it treats the parameter as an object to be coerced to unicode.</p>

<p>I do not understand the confusion. If you know that the object's <code>text</code> attribute will always be UTF-8 encoded, just define <code>__unicode__()</code> and then everything will work fine.</p>
"
106709,1199,2008-09-20T01:32:09Z,106630,7,"<p>The behaviour does seem confusing, but intensional. I reproduce here the entirety of the unicode documentation from the <a href=""http://docs.python.org/lib/built-in-funcs.html"" rel=""nofollow"">Python Built-In Functions documentation</a> (for version 2.5.2, as I write this):</p>

<blockquote>
  <p><strong>unicode([object[, encoding [, errors]]])</strong></p>
  
  <p>Return the Unicode string version of object using one of the following modes:</p>
  
  <p>If encoding and/or errors are given, unicode() will decode the
     object which can either be an 8-bit string or a character buffer
     using the codec for encoding. The encoding parameter is a string
     giving the name of an encoding; if the encoding is not known,
     LookupError is raised. Error handling is done according to
     errors; this specifies the treatment of characters which are
     invalid in the input encoding. If errors is 'strict' (the
     default), a ValueError is raised on errors, while a value of
     'ignore' causes errors to be silently ignored, and a value of
     'replace' causes the official Unicode replacement character,
     U+FFFD, to be used to replace input characters which cannot be
     decoded. See also the <a href=""http://docs.python.org/lib/module-codecs.html"" rel=""nofollow"">codecs</a> module.</p>
  
  <p>If no optional parameters are given, unicode() will mimic the
     behaviour of str() except that it returns Unicode strings
     instead of 8-bit strings. More precisely, if object is a Unicode
     string or subclass it will return that Unicode string without
     any additional decoding applied.</p>
  
  <p>For objects which provide a __unicode__() method, it will call
     this method without arguments to create a Unicode string. For
     all other objects, the 8-bit string version or representation is
     requested and then converted to a Unicode string using the codec
     for the default encoding in 'strict' mode.</p>
  
  <p>New in version 2.0. Changed in version 2.2: Support for __unicode__() added. </p>
</blockquote>

<p>So, when you call <code>unicode(r, 'utf-8')</code>, it requires an 8-bit string or a character buffer as the first argument, so it coerces your object using the <code>__str__()</code> method, and attempts to decode that using the <code>utf-8</code> codec. Without the <code>utf-8</code>, the <code>unicode()</code> function looks for a for a <code>__unicode__()</code> method on your object, and not finding it, calls the <code>__str__()</code> method, as you suggested, attempting to use the default codec to convert to unicode.</p>
"
106730,8002,2008-09-20T01:41:20Z,106725,25,"<p>Kind of a dup of this question about <a href=""http://stackoverflow.com/questions/2933/an-executable-python-app""> how to make a python into an executable</a>. </p>

<p>It boils down to: </p>

<p><a href=""http://www.py2exe.org/"">py2exe</a> on windows, <a href=""http://wiki.python.org/moin/Freeze"">Freeze</a> on Linux, and
<a href=""http://svn.pythonmac.org/py2app/py2app/trunk/doc/index.html"">py2app</a> on Mac.</p>
"
106731,4977,2008-09-20T01:41:36Z,106725,1,"<p>py2exe is the best way to do this.  It's a bit of a PITA to use, but the end result works very well.</p>
"
106733,17095,2008-09-20T01:41:47Z,106725,1,"<p><a href=""http://wiki.python.org/moin/Py2Exe"" rel=""nofollow"">py2exe</a> will make windows executables with python bundled in.</p>
"
106756,3002,2008-09-20T01:52:20Z,106725,13,"<p>I use <a href=""http://pyinstaller.python-hosting.com/"">PyInstaller</a> (the svn version) to create a stand-alone  version of my program that includes Python and all the dependencies. It takes a little fiddling to get it to work right and include everything (as does py2exe and other similar programs, see <a href=""http://stackoverflow.com/questions/2933/an-executable-python-app"">this question</a>), but then it works very well.</p>

<p>You then need to create an installer. <a href=""http://nsis.sourceforge.net/Main_Page"">NSIS</a> Works great for that and is free, but it creates .exe files not .msi. If .msi is not necessary, I highly recommend it. Otherwise check out the answers to <a href=""http://stackoverflow.com/questions/3767/what-is-the-best-choice-for-building-windows-installers"">this</a> question for other options.</p>
"
106772,122,2008-09-20T02:01:20Z,106766,2,"<p>When I touch files in my code, I tend to prefer to mock the actual reading and writing of the file... so then I can give my classes exact contents I want in the test, and then assert that the test is writing back the contents I expect.</p>

<p>I've done this in Java, and I imagine it is quite simple in Python... but it may require designing your classes/functions in such a way that it is EASY to mock the use of an actual file.</p>

<p>For this, you can try passing in streams and then just pass in a simple string input/output stream which won't write to a file, or have a function that does the actual ""write this string to a file"" or ""read this string from a file"", and then replace that function in your tests.</p>
"
106779,3631,2008-09-20T02:04:47Z,106766,1,"<p>I think you are on the right track.  Depending on what you need to do <a href=""http://en.wikipedia.org/wiki/Chroot"" rel=""nofollow"">chroot</a> may help you set up an environment for your scrpits that 'looks' real, but isn't.</p>

<p>If that doesn't work then you could write your scripts to take a 'root' path as an argument.</p>

<p>In a production run the root path is just /.  For testing you create a shadow environment under /tmp/test and then run your scripts with a root path of /tmp/test. </p>
"
106780,10661,2008-09-20T02:05:23Z,106766,6,"<p>You have two levels of testing.</p>

<ol>
<li><p>Filtering and Modifying content.  These are ""low-level"" operations that don't really require physical file I/O.  These are the tests, decision-making, alternatives, etc.  The ""Logic"" of the application.</p></li>
<li><p>File system operations.  Create, copy, rename, delete, backup.  Sorry, but those are proper file system operations that -- well -- require a proper file system for testing.</p></li>
</ol>

<p>For this kind of testing, we often use a ""Mock"" object.  You can design a ""FileSystemOperations"" class that embodies the various file system operations.  You test this to be sure it does basic read, write, copy, rename, etc.  There's no real logic in this.  Just methods that invoke file system operations.</p>

<p>You can then create a MockFileSystem which dummies out the various operations.  You can use this Mock object to test your other classes.</p>

<p>In some cases, all of your file system operations are in the os module.  If that's the case, you can create a MockOS module with mock version of the operations you actually use.</p>

<p>Put your MockOS module on the <code>PYTHONPATH</code> and you can conceal the real OS module.</p>

<p>For production operations you use your well-tested ""Logic"" classes plus your FileSystemOperations class (or the real OS module.)</p>
"
106781,4995,2008-09-20T02:06:19Z,106766,1,"<p>You might want to setup the test so that it runs inside a chroot jail, so you have all the environment the test needs, even if paths and file locations are hardcoded in the code [not really a good practice, but sometimes one gets the file locations from other places...] and then check the results via the exit code.</p>
"
106851,4249,2008-09-20T02:47:18Z,106850,5,"<p>It looks like there is a <a href=""http://en.wikipedia.org/wiki/Curses_(programming_library)"" rel=""nofollow"">curses</a> port/library for Python:</p>

<p><a href=""https://docs.python.org/library/curses.html"" rel=""nofollow"">https://docs.python.org/library/curses.html</a></p>
"
106853,893,2008-09-20T02:48:12Z,106850,0,"<p>I would investigate using the <a href=""http://python.org/doc/2.5/lib/module-curses.html"" rel=""nofollow"">curses</a> module. It will take care of a lot of the details and let you focus on the higher level stuff.</p>
"
106860,5023,2008-09-20T02:51:49Z,106850,0,"<p>This <a href=""http://stackoverflow.com/questions/43267/good-resources-for-writing-console-style-applications-for-windows"">previous StackOverflow question</a> should give you some more useful information.</p>
"
106889,18866,2008-09-20T03:04:01Z,48123,4,"<p>I started out using glade, but soon moved to just doing everything in code. Glade is nice for simple things, and it's good when you're learning how GTK organizes the widgets (how things are packed, etc). Constructing everything in code, however, you have much more flexibility. Plus, you don't have the glade dependency.</p>
"
107187,8206,2008-09-20T05:07:57Z,36953,23,"<p>I'm a happy user of <a href=""http://www.dabeaz.com/ply/"">PLY</a>. It is a pure-Python implementation of Lex &amp; Yacc, with lots of small niceties that make it quite Pythonic and easy to use. Since Lex &amp; Yacc are the most popular lexing &amp; parsing tools and are used for the most projects, PLY has the advantage of standing on giants' shoulders. A lot of knowledge exists online on Lex &amp; Yacc, and you can freely apply it to PLY.</p>

<p>PLY also has a good <a href=""http://www.dabeaz.com/ply/ply.html"">documentation page</a> with some simple examples to get you started. </p>

<p>For a listing of lots of Python parsing tools, see <a href=""http://nedbatchelder.com/text/python-parsers.html"">this</a>.</p>
"
107207,19097,2008-09-20T05:15:57Z,36953,4,"<p><a href=""http://pygments.org/"" rel=""nofollow"">pygments</a> is a source code syntax highlighter written in python.  It has lexers and formatters, and may be interesting to peek at the source.</p>
"
107427,17875,2008-09-20T06:45:45Z,107405,94,"<p><strong>edit</strong>: This answer works, but nowadays you should just use the <a href=""http://docs.python-requests.org/en/latest/index.html"" rel=""nofollow"">requests</a> library as mentioned by other answers below.</p>

<hr>

<p>Use <a href=""https://docs.python.org/2/library/httplib.html"" rel=""nofollow"">httplib</a>.</p>

<pre><code>&gt;&gt;&gt; import httplib
&gt;&gt;&gt; conn = httplib.HTTPConnection(""www.google.com"")
&gt;&gt;&gt; conn.request(""HEAD"", ""/index.html"")
&gt;&gt;&gt; res = conn.getresponse()
&gt;&gt;&gt; print res.status, res.reason
200 OK
&gt;&gt;&gt; print res.getheaders()
[('content-length', '0'), ('expires', '-1'), ('server', 'gws'), ('cache-control', 'private, max-age=0'), ('date', 'Sat, 20 Sep 2008 06:43:36 GMT'), ('content-type', 'text/html; charset=ISO-8859-1')]
</code></pre>

<p>There's also a <code>getheader(name)</code> to get a specific header.</p>
"
107637,3978,2008-09-20T08:35:45Z,107616,0,"<p>I don't know anything about how XMLRPC could be extended but I did find <a href=""http://mail.python.org/pipermail/python-list/2006-May/381032.html"" rel=""nofollow"">this mail</a> about the subject:</p>

<blockquote>
  <p>In XML-RPC, everything is transmitted
  as a string, so I don't think that
  choice is really that bad - except of
  course for the additional clumsiness
  for invoking explicit conversion
  functions.</p>
  
  <p>But no, XML-RPC doesn't have a data
  type that can represent integers above
  2**32. If you can accept losing
  precision, you can use doubles (but
  you still would have to convert
  explicitly on the sender).</p>
</blockquote>
"
107700,17160,2008-09-20T09:15:16Z,106850,1,"<p>You can use curses.</p>

<p>It has a <a href=""http://adamv.com/dev/python/curses/"" rel=""nofollow"" title=""WCurses"">Windows Port</a> and <a href=""https://docs.python.org/library/curses.html"" rel=""nofollow"" title=""Unix Curses"">Unix Port</a>, and plenty of <a href=""https://docs.python.org/howto/curses.html"" rel=""nofollow"" title=""curses howto"">documentation</a>.
You can also use some <a href=""http://urwid.org/"" rel=""nofollow"" title=""gui for curses"">helper libs</a>.</p>
"
107717,189,2008-09-20T09:24:31Z,107705,251,"<p>From <a href=""http://mail.python.org/pipermail/tutor/2003-November/026645.html"">Magnus Lycka answer on a mailing list</a>:</p>

<blockquote>
  <p>You can skip buffering for a whole
  python process using ""python -u"" 
  (or#!/usr/bin/env python -u etc) or by
  setting the environment variable
  PYTHONUNBUFFERED.</p>
  
  <p>You could also replace sys.stdout with
  some other stream like wrapper which
  does a flush after every call.</p>

<pre><code>class Unbuffered(object):
   def __init__(self, stream):
       self.stream = stream
   def write(self, data):
       self.stream.write(data)
       self.stream.flush()
   def __getattr__(self, attr):
       return getattr(self.stream, attr)

import sys
sys.stdout = Unbuffered(sys.stdout)
print 'Hello'
</code></pre>
</blockquote>
"
107720,9493,2008-09-20T09:25:36Z,107705,24,"<p>Yes, it is.</p>

<p>You can disable it on the commandline with the ""-u"" switch.</p>

<p>Alternatively, you could call .flush() on sys.stdout on every write (or wrap it with an object that does this automatically)</p>
"
107721,6062,2008-09-20T09:26:19Z,107705,5,"<p>Yes, it is enabled by default. You can disable it by using the -u option on the command line when calling python.</p>
"
107746,19556,2008-09-20T09:40:13Z,107705,4,"<p>One way to get unbuffered output would be to use <code>sys.stderr</code> instead of <code>sys.stdout</code> or to simply call <code>sys.stdout.flush()</code> to explicitly force a write to occur.</p>

<p>You could easily redirect everything printed by doing:</p>

<pre><code>import sys; sys.stdout = sys.stderr
print ""Hello World!""
</code></pre>

<p>Or to redirect just for a particular <code>print</code> statement:</p>

<pre><code>print &gt;&gt;sys.stderr, ""Hello World!""
</code></pre>

<p>To reset stdout you can just do:</p>

<pre><code>sys.stdout = sys.__stdout__
</code></pre>
"
107753,13049,2008-09-20T09:44:18Z,107675,1,"<p>Actually WebTest does work within the sandbox, as long as you comment out </p>

<pre><code>import webbrowser
</code></pre>

<p>in webtest/__init__.py </p>
"
107838,5822,2008-09-20T10:27:58Z,49455,1,"<p>If I remember correctly, there is a fixed padding string of 32 (?) bytes to apply to any password. All passwords need to be 32 bytes at the start of computing the encryption key, either by truncating or adding some of those padding bytes.</p>

<p>If no user password was set you simply have to pad with all 32 bytes of the string, i.e. use the 32 padding bytes as the starting point for computing the encryption key.</p>

<p>I have to admit it's been a while since I've done this, I do remember that the encryption part of the PDF is an absolute mess as it got changed significantly in nearly every revision, requiring you to cope with a lot of cases to handle all PDF's.</p>

<p>Good luck.</p>
"
107854,10661,2008-09-20T10:39:09Z,107705,2,"<p>You can create an unbuffered file and assign this file to sys.stdout.</p>

<pre><code>import sys 
myFile= open( ""a.log"", ""w"", 0 ) 
sys.stdout= myFile
</code></pre>

<p>You can't magically change the system-supplied stdout; since it's supplied to your python program by the OS.</p>
"
107959,18676,2008-09-20T11:40:16Z,48123,4,"<p>I usually start with Glade until I come to a point where it doesn't have the features I need, e.g. creating a wizard. As long as I'm using the standard widgets that Glade provides, there's really no reason to hand-code the GUI.</p>

<p>The more comfortable I become with how Glade formats the code, the better my hand-coding becomes. Not to mention, it's real easy to use Glade to make the underlying framework so you don't have to worry about all the initializations.</p>
"
107973,18695,2008-09-20T11:49:38Z,36932,26,"<pre><code>def M_add_class_attribs(attribs):
    def foo(name, bases, dict_):
        for v, k in attribs:
            dict_[k] = v
        return type(name, bases, dict_)
    return foo

def enum(*names):
    class Foo(object):
        __metaclass__ = M_add_class_attribs(enumerate(names))
        def __setattr__(self, name, value):  # this makes it read-only
            raise NotImplementedError
    return Foo()
</code></pre>

<p>Use it like this:  </p>

<pre><code>Animal = enum('DOG', 'CAT')
Animal.DOG # returns 0
Animal.CAT # returns 1
Animal.DOG = 2 # raises NotImplementedError
</code></pre>

<p>if you just want unique symbols and don't care about the values, replace this line:  </p>

<pre><code>__metaclass__ = M_add_class_attribs(enumerate(names))
</code></pre>

<p>with this:</p>

<pre><code>__metaclass__ = M_add_class_attribs((object(), name) for name in names)
</code></pre>
"
108032,15685,2008-09-20T12:29:16Z,107616,7,"<p>Some libraries support 64 bits extensions, indeed, but there doesn't seem to be a standard. <a href=""http://xmlrpc-c.sourceforge.net/"" rel=""nofollow"">xmlrpc-c</a>, for example, has a so called i8 but it doesn't work with python (at least not by default).</p>

<p>I would recommend to either:</p>

<ul>
<li>Convert the integer to string by hand and send it as such. XMLRPC will convert it to string anyway, so I would say this is reasonable.</li>
<li>Break it in two 32 bits integers and send it as such.</li>
</ul>
"
108033,18901,2008-09-20T12:31:30Z,108009,1,"<p>I think you need to move the check for whether an ID is a TYPEID from c_lexer.py to c_parser.py.</p>

<p>As you said, since the parser is looking ahead 1 token, you can't make that decision in the lexer.</p>

<p>Instead, alter your parser to check ID's to see if they are TYPEID's in declarations, and, if they aren't, generate an error.</p>

<p>As Pax Diablo said in his excellent answer, the lexer/tokenizer's job isn't to make those kinds of decisions about tokens.  That's the parser's job.</p>
"
108054,14860,2008-09-20T12:47:23Z,108009,3,"<p>Not sure why you're doing that level of analysis in your lexer.</p>

<p>Lexical analysis should probably be used to separate the input stream into lexical tokens (number, line-change, keyword and so on).  It's the parsing phase that should be doing that level of analysis, including table lookups for typedefs and such.</p>

<p>That's the way I've always separated the duties between lexx and yacc, my tools of choice.</p>
"
108204,6899,2008-09-20T13:54:04Z,108134,1,"<p>This is an example from Excel documentation:</p>

<pre><code>With Worksheets(""Sheet1"").Range(""B1"")
    .Value = ""New Title""
    .Characters(5, 5).Font.Bold = True
End With
</code></pre>

<p>So the Characters property of the cell you want to manipulate is the answer to your question. It's used as Characters(<em>start</em>, <em>length</em>).</p>

<p>PS: I've never used the module in question, but I've used Excel COM automation in python scripts. The Characters property is available using win32com.</p>
"
108404,13668,2008-09-20T15:01:12Z,108193,19,"<p>You could use Q objects for #1:</p>

<pre><code># Blogs who have either hockey or django tags.
from django.db.models import Q
Blog.objects.filter(
    Q(tags__name__iexact='hockey') | Q(tags__name__iexact='django')
)
</code></pre>

<p>Unions and intersections, I believe, are a bit outside the scope of the Django ORM, but its possible to to these.  The following examples are from a Django application called called <a href=""http://code.google.com/p/django-tagging/"">django-tagging</a> that provides the functionality. <a href=""http://code.google.com/p/django-tagging/source/browse/trunk/tagging/models.py#346"">Line 346 of models.py</a>: </p>

<p>For part two, you're looking for a union of two queries, basically</p>

<pre><code>def get_union_by_model(self, queryset_or_model, tags):
    """"""
    Create a ``QuerySet`` containing instances of the specified
    model associated with *any* of the given list of tags.
    """"""
    tags = get_tag_list(tags)
    tag_count = len(tags)
    queryset, model = get_queryset_and_model(queryset_or_model)

    if not tag_count:
        return model._default_manager.none()

    model_table = qn(model._meta.db_table)
    # This query selects the ids of all objects which have any of
    # the given tags.
    query = """"""
    SELECT %(model_pk)s
    FROM %(model)s, %(tagged_item)s
    WHERE %(tagged_item)s.content_type_id = %(content_type_id)s
      AND %(tagged_item)s.tag_id IN (%(tag_id_placeholders)s)
      AND %(model_pk)s = %(tagged_item)s.object_id
    GROUP BY %(model_pk)s"""""" % {
        'model_pk': '%s.%s' % (model_table, qn(model._meta.pk.column)),
        'model': model_table,
        'tagged_item': qn(self.model._meta.db_table),
        'content_type_id': ContentType.objects.get_for_model(model).pk,
        'tag_id_placeholders': ','.join(['%s'] * tag_count),
    }

    cursor = connection.cursor()
    cursor.execute(query, [tag.pk for tag in tags])
    object_ids = [row[0] for row in cursor.fetchall()]
    if len(object_ids) &gt; 0:
        return queryset.filter(pk__in=object_ids)
    else:
        return model._default_manager.none()
</code></pre>

<p>For part #3 I believe you're looking for an intersection. See <a href=""http://code.google.com/p/django-tagging/source/browse/trunk/tagging/models.py#307"">line 307 of models.py</a> </p>

<pre><code>def get_intersection_by_model(self, queryset_or_model, tags):
    """"""
    Create a ``QuerySet`` containing instances of the specified
    model associated with *all* of the given list of tags.
    """"""
    tags = get_tag_list(tags)
    tag_count = len(tags)
    queryset, model = get_queryset_and_model(queryset_or_model)

    if not tag_count:
        return model._default_manager.none()

    model_table = qn(model._meta.db_table)
    # This query selects the ids of all objects which have all the
    # given tags.
    query = """"""
    SELECT %(model_pk)s
    FROM %(model)s, %(tagged_item)s
    WHERE %(tagged_item)s.content_type_id = %(content_type_id)s
      AND %(tagged_item)s.tag_id IN (%(tag_id_placeholders)s)
      AND %(model_pk)s = %(tagged_item)s.object_id
    GROUP BY %(model_pk)s
    HAVING COUNT(%(model_pk)s) = %(tag_count)s"""""" % {
        'model_pk': '%s.%s' % (model_table, qn(model._meta.pk.column)),
        'model': model_table,
        'tagged_item': qn(self.model._meta.db_table),
        'content_type_id': ContentType.objects.get_for_model(model).pk,
        'tag_id_placeholders': ','.join(['%s'] * tag_count),
        'tag_count': tag_count,
    }

    cursor = connection.cursor()
    cursor.execute(query, [tag.pk for tag in tags])
    object_ids = [row[0] for row in cursor.fetchall()]
    if len(object_ids) &gt; 0:
        return queryset.filter(pk__in=object_ids)
    else:
        return model._default_manager.none()
</code></pre>
"
108482,8206,2008-09-20T15:28:02Z,108009,2,"<p>With <a href=""http://groups.google.com/group/ply-hack/tree/browse_frm/thread/cf31e8334801eabd/b9cdf4a6682635c1?rnum=1&amp;_done=%2Fgroup%2Fply-hack%2Fbrowse_frm%2Fthread%2Fcf31e8334801eabd%3F#doc_5c415da045e77a6e"" rel=""nofollow"">some help</a> from Dave Beazley (PLY's creator), my problem was solved.</p>

<p>The idea is to use special sub-rules and do the actions in them. In my case, I split the <code>declaration</code> rule to:</p>

<pre><code>def p_decl_body(self, p):
    """""" decl_body : declaration_specifiers init_declarator_list_opt
    """"""
    # &lt;&lt;Handle the declaration here&gt;&gt;        

def p_declaration(self, p):
    """""" declaration : decl_body SEMI 
    """"""
    p[0] = p[1]
</code></pre>

<p><code>decl_body</code> is always reduced before the token after SEMI is shifted in, so my action gets executed at the correct time.</p>
"
108500,10495,2008-09-20T15:33:55Z,108193,15,"<p>I've tested these out with Django 1.0:</p>

<p>The ""or"" queries:</p>

<pre><code>Blog.objects.filter(tags__name__in=['tag1', 'tag2']).distinct()
</code></pre>

<p>or you could use the Q class:</p>

<pre><code>Blog.objects.filter(Q(tags__name='tag1') | Q(tags__name='tag2')).distinct()
</code></pre>

<p>The ""and"" query:</p>

<pre><code>Blog.objects.filter(tags__name='tag1').filter(tags__name='tag2')
</code></pre>

<p>I'm not sure about the third one, you'll probably need to drop to SQL to do it.</p>
"
108512,10495,2008-09-20T15:37:23Z,88259,0,"<p>I think it depends on the size of the site as to whether you need to step up from using SQLite, I've successfully used SQLite on several smaller live sites and it runs great.</p>
"
108547,10495,2008-09-20T15:51:51Z,108523,5,"<p>Enums have been proposed for inclusion into the language before, but were rejected (see <a href=""http://www.python.org/dev/peps/pep-0354/"" rel=""nofollow"" title=""PEP 354"">http://www.python.org/dev/peps/pep-0354/</a>), though there are existing packages you could use instead of writing your own implementation:</p>

<ul>
<li>enum: <a href=""http://pypi.python.org/pypi/enum"" rel=""nofollow"" title=""enum"">http://pypi.python.org/pypi/enum</a></li>
<li>SymbolType (not quite the same as enums, but still useful): <a href=""http://pypi.python.org/pypi/SymbolType"" rel=""nofollow"" title=""SymbolType"">http://pypi.python.org/pypi/SymbolType</a></li>
<li><a href=""http://pypi.python.org/pypi?:action=search&amp;term=enum&amp;submit=search"" rel=""nofollow"">Or just do a search</a></li>
</ul>
"
108549,15685,2008-09-20T15:52:20Z,108523,2,"<p>The builtin way to do enums is:</p>

<pre><code>(FOO, BAR, BAZ) = range(3)
</code></pre>

<p>which works fine for small sets, but has some drawbacks:</p>

<ul>
<li>you need to count the number of elements by hand</li>
<li>you can't skip values </li>
<li>if you add one name, you also need to update the range number</li>
</ul>

<p>For a complete enum implementation in python, see:
<a href=""http://code.activestate.com/recipes/67107/"" rel=""nofollow"">http://code.activestate.com/recipes/67107/</a></p>
"
108556,14122,2008-09-20T15:58:02Z,108523,3,"<p>What I see more often is this, in top-level module context:</p>

<pre><code>FOO_BAR = 'FOO_BAR'
FOO_BAZ = 'FOO_BAZ'
FOO_QUX = 'FOO_QUX'
</code></pre>

<p>...and later...</p>

<pre><code>if something is FOO_BAR: pass # do something here
elif something is FOO_BAZ: pass # do something else
elif something is FOO_QUX: pass # do something else
else: raise Exception('Invalid value for something')
</code></pre>

<p>Note that the use of <code>is</code> rather than <code>==</code> is taking a risk here -- it assumes that folks are using <code>your_module.FOO_BAR</code> rather than the string <code>'FOO_BAR'</code> (which will <I>normally</I> be interned such that <code>is</code> will match, but that certainly can't be counted on), and so may not be appropriate depending on context.</p>

<p>One advantage of doing it this way is that by looking anywhere a reference to that string is being stored, it's immediately obvious where it came from; <code>FOO_BAZ</code> is much less ambiguous than <code>2</code>.</p>

<p>Besides that, the other thing that offends my Pythonic sensibilities re the class you propose is the use of <code>split()</code>. Why not just pass in a tuple, list or other enumerable to start with?</p>
"
108557,8206,2008-09-20T15:58:10Z,108523,3,"<p>There's a lot of good discussion <a href=""http://stackoverflow.com/questions/36932/whats-the-best-way-to-implement-an-enum-in-python"">here</a>. </p>
"
108599,19632,2008-09-20T16:13:22Z,51010,3,"<p>Python has pytz (<a href=""http://pytz.sourceforge.net"" rel=""nofollow"">http://pytz.sourceforge.net</a>) module which can be used for arithmetic of 'time' objects. It takes care of DST offsets as well. The above page has a number of examples that illustrate the usage of pytz.</p>
"
108603,6013,2008-09-20T16:16:44Z,51010,-1,"<p>Retrieve the times in milliseconds and then do the subtraction.</p>
"
108606,8297,2008-09-20T16:18:00Z,108586,4,"<p>Try this:</p>

<pre><code>#!/usr/bin/env python

def get_all(D, k):
    yield k
    for ii in D.get(k, []):
        for jj in get_all(D, ii):
            yield jj

A = { 'a' : dict(b=1, c=1),
    'c' : dict(d=1),
    'd' : dict(e=1,f=1,g=1),
    'h' : dict(j=1)
    }

for ii in get_all(A,'a'):
    print ii
</code></pre>

<p>Gives me </p>

<pre>
steve@rei:~/code/tmp
$ python recur.py
a
c
d
e
g
f
b
</pre>
"
108651,11527,2008-09-20T16:32:47Z,104420,10,"<p>The following code is an in-place permutation of a given list, implemented as a generator. Since it only returns references to the list, the list should not be modified outside the generator.
The solution is non-recursive, so uses low memory. Work well also with multiple copies of elements in the input list.</p>

<pre><code>def permute_in_place(a):
    a.sort()
    yield list(a)

    if len(a) &lt;= 1:
        return

    first = 0
    last = len(a)
    while 1:
        i = last - 1

        while 1:
            i = i - 1
            if a[i] &lt; a[i+1]:
                j = last - 1
                while not (a[i] &lt; a[j]):
                    j = j - 1
                a[i], a[j] = a[j], a[i] # swap the values
                r = a[i+1:last]
                r.reverse()
                a[i+1:last] = r
                yield list(a)
                break
            if i == first:
                a.reverse()
                return

if __name__ == '__main__':
    for n in range(5):
        for a in permute_in_place(range(1, n+1)):
            print a
        print

    for a in permute_in_place([0, 0, 1, 1, 1]):
        print a
    print
</code></pre>
"
108816,10661,2008-09-20T17:32:17Z,108523,4,"<p>The most common enum case is enumerated values that are part of a State or Strategy design pattern.  The enums are specific states or specific optional strategies to be used.  In this case, they're almost always part and parcel of some class definition</p>

<pre><code>class DoTheNeedful( object ):
    ONE_CHOICE = 1
    ANOTHER_CHOICE = 2 
    YET_ANOTHER = 99
    def __init__( self, aSelection ):
        assert aSelection in ( self.ONE_CHOICE, self.ANOTHER_CHOICE, self.YET_ANOTHER )
        self.selection= aSelection
</code></pre>

<p>Then, in a client of this class.</p>

<pre><code>dtn = DoTheNeeful( DoTheNeeful.ONE_CHOICE )
</code></pre>
"
108852,2827,2008-09-20T17:43:51Z,108586,6,"<p>Both answers give the same result, but if my reading of the question is correct give the wrong answer to a simple alteration to the given graph - if you add a dependency on 'c' from 'b' (which doesn't introduce a cycle as the graph is directed) the output is: <code>
a
c
d
e
g
f
b
d
e
g
f
</code></p>

<p>which isn't totally helpful. Try this small variation, which keeps track of which nodes of the graph have already been visited:</p>

<pre><code>def get_all(D, k, seen=None):
    if not seen:
        seen = set( )
    if k not in seen:
        seen.add(k)
        yield k
        for ii in D.get(k, []):
            for jj in get_all(D, ii, seen):
                yield jj
</code></pre>
"
108885,14057,2008-09-20T18:01:39Z,108848,4,"<p>There is a variety of Python music software, you can find a catalog <a href=""http://wiki.python.org/moin/PythonInMusic"" rel=""nofollow"">here</a>.</p>

<p>If you scroll down the linked page, you find a section on <strong>Music Programming in Python</strong> describing several music creation packages including <a href=""http://musickit.sourceforge.net/"" rel=""nofollow"">MusicKit</a> and <a href=""http://sndobj.sourceforge.net/#python"" rel=""nofollow"">PySndObj</a>.</p>
"
108911,17232,2008-09-20T18:18:11Z,108892,2,"<p>Maybe buildbot would be useful <a href=""http://buildbot.net/trac"" rel=""nofollow"">http://buildbot.net/trac</a> </p>
"
108934,9567,2008-09-20T18:32:54Z,108892,2,"<p>For your third question, maybe the <code>trace</code> module is what you need:</p>

<pre><code>&gt;&gt;&gt; def y(a): return a*a
&gt;&gt;&gt; def x(a): return y(a)
&gt;&gt;&gt; import trace
&gt;&gt;&gt; tracer = trace.Trace(countfuncs = 1)
&gt;&gt;&gt; tracer.runfunc(x, 2)
4
&gt;&gt;&gt; res = tracer.results()
&gt;&gt;&gt; res.calledfuncs
{('&lt;stdin&gt;', '&lt;stdin&gt;', 'y'): 1, ('&lt;stdin&gt;', '&lt;stdin&gt;', 'x'): 1}
</code></pre>

<p><code>res.calledfuncs</code> contains the functions that were called. If you specify <code>countcallers = 1</code> when creating the tracer, you can get caller/callee relationships. See the <a href=""http://docs.python.org/lib/trace-api.html"" rel=""nofollow"">docs of the <code>trace</code> module</a> for more information.</p>

<p>You can also try to get the calls via static analysis, but this can be dangerous due to the dynamic nature of Python. </p>
"
108936,14107,2008-09-20T18:33:16Z,108848,7,"<p>I had to do this years ago. I used pymedia. I am not sure if it is still around any way here is some test code I wrote when I was playing with it. It is about 3 years old though.</p>

<p><strong>Edit:</strong> The sample code plays an MP3 file</p>

<pre><code>import pymedia
import time

demuxer = pymedia.muxer.Demuxer('mp3') #this thing decodes the multipart file i call it a demucker

f = open(r""path to \song.mp3"", 'rb')


spot = f.read()
frames = demuxer.parse(spot)
print 'read it has %i frames' % len(frames)
decoder = pymedia.audio.acodec.Decoder(demuxer.streams[0]) #this thing does the actual decoding
frame = decoder.decode(spot)
print dir(frame)
#sys.exit(1)
sound = pymedia.audio.sound
print frame.bitrate, frame.sample_rate
song = sound.Output( frame.sample_rate, frame.channels, 16 ) #this thing handles playing the song

while len(spot) &gt; 0:
    try:
        if frame: song.play(frame.data)
        spot = f.read(512)
        frame = decoder.decode(spot)
    except:
        pass

while song.isPlaying(): time.sleep(.05)
print 'well done'
</code></pre>
"
108939,2193,2008-09-20T18:34:42Z,108822,9,"<p>Presumably your hack was something like this:</p>

<pre><code># Deleting all messages older than ""earliest_date""
q = db.GqlQuery(""SELECT * FROM Message WHERE create_date &lt; :1"", earliest_date)
results = q.fetch(1000)

while results:
    db.delete(results)
    results = q.fetch(1000, len(results))
</code></pre>

<p>As you say, if there's sufficient data, you're going to hit the request timeout before it gets through all the records. You'd have to re-invoke this request multiple times from outside to ensure all the data was erased; easy enough to do, but hardly ideal.</p>

<p>The admin console doesn't seem to offer any help, as (from my own experience with it), it seems to only allow entities of a given type to be listed and then deleted on a page-by-page basis.</p>

<p>When testing, I've had to purge my database on startup to get rid of existing data.</p>

<p>I would infer from this that Google operates on the principle that disk is cheap, and so data is typically orphaned (indexes to redundant data replaced), rather than deleted. Given there's a fixed amount of data available to each app at the moment (0.5 GB), that's not much help for non-Google App Engine users.</p>
"
109007,3560,2008-09-20T19:00:04Z,108892,2,"<p>Django's development server has a file change monitor that watches for modifications and automatically reloads itself. You could re-use this code to launch unit tests on file modification.</p>
"
109011,18138,2008-09-20T19:01:22Z,108892,2,"<p>Maybe Nose <a href=""http://somethingaboutorange.com/mrl/projects/nose/"" rel=""nofollow"">http://somethingaboutorange.com/mrl/projects/nose/</a> has a plugin <a href=""http://somethingaboutorange.com/mrl/projects/nose/doc/writing_plugins.html"" rel=""nofollow"">http://somethingaboutorange.com/mrl/projects/nose/doc/writing_plugins.html</a></p>

<p>Found this: <a href=""http://jeffwinkler.net/2006/04/27/keeping-your-nose-green/"" rel=""nofollow"">http://jeffwinkler.net/2006/04/27/keeping-your-nose-green/</a></p>
"
109018,12030,2008-09-20T19:03:04Z,108822,3,"<p>Unfortunately, there's no way to easily do a bulk delete. Your best bet is to write a script that deletes a reasonable number of entries per invocation, and then call it repeatedly - for example, by having your delete script return a 302 redirect whenever there's more data to delete, then fetching it with ""wget --max-redirect=10000"" (or some other large number).</p>
"
109106,1448,2008-09-20T19:34:17Z,109087,78,"<p>Every object has a <code>__dict__</code> variable containing all the variables and its values in it.</p>

<p>Try this</p>

<pre><code>&gt;&gt;&gt; hi_obj = hi()
&gt;&gt;&gt; hi_obj.__dict__.keys()
</code></pre>
"
109118,17624,2008-09-20T19:38:01Z,109087,13,"<p>You normally can't get instance attributes given just a class, at least not without instantiating the class. You can get instance attributes given an instance, though, or class attributes given a class. See the 'inspect' module. You can't get a list of instance attributes because instances really can have anything as attribute, and -- as in your example -- the normal way to create them is to just assign to them in the __init__ method.</p>

<p>An exception is if your class uses slots, which is a fixed list of attributes that the class allows instances to have. Slots are explained in <a href=""http://www.python.org/2.2.3/descrintro.html"">http://www.python.org/2.2.3/descrintro.html</a>, but there are various pitfalls with slots; they affect memory layout, so multiple inheritance may be problematic, and inheritance in general has to take slots into account, too.</p>
"
109122,19741,2008-09-20T19:39:31Z,109087,8,"<p>You can also test if an object has a specific variable with:</p>

<pre><code>&gt;&gt;&gt; hi_obj = hi()
&gt;&gt;&gt; hasattr(hi_obj, ""some attribute"")
</code></pre>
"
109127,10661,2008-09-20T19:42:43Z,109087,4,"<p>Your example shows ""instance variables"",  not really class variables.</p>

<p>Look in <code>hi_obj.__class__.__dict__.items()</code> for the class variables, along with other other class members like member functions and the containing module.</p>

<pre><code>class Hi( object ):
    class_var = ( 23, 'skidoo' ) # class variable
    def __init__( self ):
        self.ii = ""foo"" # instance variable
        self.jj = ""bar""
</code></pre>

<p>Class variables are shared by all instances of the class.</p>
"
109147,10661,2008-09-20T19:51:39Z,108848,13,"<p>Take a close look at <a href=""http://www.csounds.com/"">cSounds</a>.  There are Python bindings allow you to do pretty flexible digital synthesis.  There are some pretty complete packages available, too.  </p>

<p>See <a href=""http://www.csounds.com/node/188"">http://www.csounds.com/node/188</a> for a package.</p>

<p>See <a href=""http://www.csounds.com/journal/issue6/pythonOpcodes.html"">http://www.csounds.com/journal/issue6/pythonOpcodes.html</a> for information on Python scripting within cSounds.</p>
"
109173,18866,2008-09-20T20:02:26Z,109087,63,"<p>Use vars()</p>

<pre><code>class Foo(object):
    def __init__(self):
        self.a = 1
        self.b = 2

vars(Foo()) #==&gt; {'a': 1, 'b': 2}
vars(Foo()).keys() #==&gt; ['a', 'b']
</code></pre>
"
109207,19741,2008-09-20T20:12:58Z,109087,6,"<p>Suggest</p>

<pre><code>&gt;&gt;&gt; print vars.__doc__
vars([object]) -&gt; dictionary

Without arguments, equivalent to locals().
With an argument, equivalent to object.__dict__.
</code></pre>

<p>In otherwords, it essentially just wraps __dict__ </p>
"
109245,19741,2008-09-20T20:20:05Z,60208,25,"<p>A true <code>switch/case</code> in Python is going to be more difficult than a dictionary method or <code>if/elif/else</code> methods because the simple versions do not support fall through.</p>

<p>Another downfall of the <code>if/elif/else</code> method is the need for repeated comparisons. </p>

<p>The C implementation of a <code>switch/case</code> has a performance benefit over <code>if/else</code> <code>if/else</code> in that only a single comparison is needed. The result of that comparison is used as an offset into a jump table (in the underlying <code>asm</code> generated). </p>

<p>Mimicking the true functionality in Python would be a pain. Does any one have an implementation that would allow for fall through while only using a single comparison?</p>
"
109380,19759,2008-09-20T21:02:58Z,98135,7,"<p>I would also recommend jinja2. There is a <a href=""https://web.archive.org/web/20090421084229/http://lucumr.pocoo.org/2008/9/16/why-jinja-is-not-django-and-why-django-should-have-a-look-at-it"" rel=""nofollow"">nice article</a> on <code>django</code> vs. <code>jinja2</code> that gives some in-detail information on why you should prefere the later.</p>
"
109591,3850,2008-09-20T22:15:33Z,94153,11,"<p>Starting from python 2.6 you can also use <code>NamedTemporaryFile</code> with the <code>delete=</code> option set to False. This way the temporary file will be accessible, even after you close it.</p>

<p>Note that on Windows (NT and later) you cannot access the file a second time while it is still open. You have to close it before you can copy it. This is not true on Unix systems.</p>
"
109642,18506,2008-09-20T22:39:12Z,108848,1,"<p>In addition to what has been mentioned previously, I wrote a simple Python audio editor.
<a href=""http://code.google.com/p/yaalp/source/browse/#svn/trunk"" rel=""nofollow"">http://code.google.com/p/yaalp/source/browse/#svn/trunk</a>
See main.py.</p>

<p>It also has audio manipulation and some effects.</p>

<p>Code's GPL, so this could be a starting point for you.</p>
"
109724,13009,2008-09-20T23:10:13Z,108134,2,"<p>Found example here: <a href=""http://www.answermysearches.com/generate-an-excel-formatted-file-right-in-python/122/"" rel=""nofollow"">Generate an Excel Formatted File Right in Python</a></p>

<p>Notice that you make a font object and then give it to a style object, and then provide that style object when writing to the sheet:</p>

<pre><code>import pyExcelerator as xl

def save_in_excel(headers,values):
    #Open new workbook
    mydoc=xl.Workbook()
    #Add a worksheet
    mysheet=mydoc.add_sheet(""test"")
    #write headers
    header_font=xl.Font() #make a font object
    header_font.bold=True
    header_font.underline=True
    #font needs to be style actually
    header_style = xl.XFStyle(); header_style.font = header_font
    for col,value in enumerate(headers):
        mysheet.write(0,col,value,header_style)
    #write values and highlight those that match my criteria
    highlighted_row_font=xl.Font() #no real highlighting available?
    highlighted_row_font.bold=True
    highlighted_row_font.colour_index=2 #2 is red,
    highlighted_row_style = xl.XFStyle(); highlighted_row_style.font = highlighted_row_font
    for row_num,row_values in enumerate(values):
        row_num+=1 #start at row 1
        if row_values[1]=='Manatee':
            for col,value in enumerate(row_values):
                #make Manatee's (sp) red
                mysheet.write(row_num,col,value,highlighted_row_style)
        else:
            for col,value in enumerate(row_values):
                #normal row
                mysheet.write(row_num,col,value)
    #save file
    mydoc.save(r'C:testpyexel.xlt')

headers=['Date','Name','Localatity']
data=[
['June 11, 2006','Greg','San Jose'],
['June 11, 2006','Greg','San Jose'],
['June 11, 2006','Greg','San Jose'],
['June 11, 2006','Greg','San Jose'],
['June 11, 2006','Manatee','San Jose'],
['June 11, 2006','Greg','San Jose'],
['June 11, 2006','Manatee','San Jose'],
]

save_in_excel(headers,data)
</code></pre>
"
109783,18446,2008-09-20T23:39:49Z,109705,5,"<p>Your larger problem is blocking in signal handlers.</p>

<p>This is usually discouraged since it can lead to strange timing conditions.  But it's not quite the cause of your problem since the timing condition you're vulnerable to exists because of your choice of signal handlers.</p>

<p>Anyway, here's how to at least minimize the timing condition by only setting flags in your handlers and leaving the main while loop to do the actual work.  The explanation for why your code is behaving strangely is described after the code.</p>

<pre><code>#!/usr/bin/python

from signal import *
from time import sleep
from sys import stdout

print_Qs = 0
print_Zs = 0

def write(text):
    stdout.write(text)
    stdout.flush()

def process_quit(signum, frame):
     global print_Qs
     print_Qs = 10

def process_tstp(signum, frame):
     global print_Zs
     print_Zs = 10

signal(SIGQUIT, process_quit)
signal(SIGTSTP, process_tstp)

while 1:
    if print_Zs:
        print_Zs -= 1
        c = 'Z'
    elif print_Qs:
        print_Qs -= 1
        c = 'Q'
    else:
        c = '.'
    write(c)
    sleep(0.5)
</code></pre>

<p>Anyway, here's what's going on.</p>

<p>SIGTSTP is more special than SIGQUIT.</p>

<p>SIGTSTP masks the other signals from being delivered while its signal handler is running.  When the kernel goes to deliver SIGQUIT and sees that SIGTSTP's handler is still running, it simply saves it for later.  Once another signal comes through for delivery, such as SIGINT when you <kbd>CTRL</kbd>+<kbd>C</kbd> (aka KeyboardInterrupt), the kernel remembers that it never delivered SIGQUIT and delivers it now.</p>

<p>You will notice if you change <code>while 1:</code> to <code>for i in range(60):</code> in the main loop and do your test case again, the program will exit without running the SIGTSTP handler since exit doesn't re-trigger the kernel's signal delivery mechanism.</p>

<p>Good luck!</p>
"
109803,3207,2008-09-20T23:49:18Z,109705,1,"<p>On Python 2.5.2 on Linux 2.6.24, your code works exactly as you describe your desired results (if a signal is received while still processing a previous signal, the new signal is processed immediately after the first one is finished).</p>

<p>On Python 2.4.4 on Linux 2.6.16, I see the problem behavior you describe.</p>

<p>I don't know whether this is due to a change in Python or in the Linux kernel.</p>
"
110110,9042,2008-09-21T03:04:42Z,49455,0,"<p>xpdf is probably a good reference implementation for this sort of problem.  I have successfully used them to open encrypted pdfs before.</p>
"
110414,9812,2008-09-21T06:44:02Z,110378,91,"<p><strong>The easiest way for your use case is to use CSS</strong>. It's a language meant for defining presentation. Look at the code generated by form, take note of the ids for fields that interest you, and change appearance of these fields through CSS.</p>

<p>Example for <code>long_desc</code> field in your ProductForm (when your form does not have a custom prefix):</p>

<pre><code>#id_long_desc {
    width: 300px;
    height: 200px;
}
</code></pre>

<p><strong>Second approach</strong> is to pass the <code>attrs</code> keyword to your widget constructor.</p>

<pre><code>class ProductForm(ModelForm):
    long_desc = forms.CharField(widget=forms.Textarea(attrs={'cols': 10, 'rows': 20}))
    short_desc = forms.CharField(widget=forms.Textarea)
    class Meta:
        model = Product
</code></pre>

<p>It's <a href=""http://docs.djangoproject.com/en/dev/ref/forms/widgets/#django.forms.Widget.attrs"">described in Django documentation</a>.</p>

<p><strong>Third approach</strong> is to leave the nice declarative interface of newforms for a while and set your widget attributes in custom constructor.</p>

<pre><code>class ProductForm(ModelForm):
    long_desc = forms.CharField(widget=forms.Textarea)
    short_desc = forms.CharField(widget=forms.Textarea)
    class Meta:
        model = Product

    # Edit by bryan
    def __init__(self, *args, **kwargs):
        super(ProductForm, self).__init__(*args, **kwargs) # Call to ModelForm constructor
        self.fields['long_desc'].widget.attrs['cols'] = 10
        self.fields['long_desc'].widget.attrs['rows'] = 20
</code></pre>

<p>This approach has the following advantages:</p>

<ul>
<li>You can define widget attributes for fields that are generated automatically from your model without redefining whole fields.</li>
<li>It doesn't depend on the prefix of your form.</li>
</ul>
"
110437,9812,2008-09-21T07:03:07Z,108193,9,"<p>Please don't reinvent the wheel and use <a href=""http://code.google.com/p/django-tagging/"">django-tagging application</a> which was made exactly for your use case. It can do all queries you describe, and much more.</p>

<p>If you need to add custom fields to your Tag model, you can also take a look at <a href=""http://www.bitbucket.org/zuber/django-newtagging"">my branch of django-tagging</a>.</p>
"
110547,19759,2008-09-21T08:33:12Z,110498,34,"<p><a href=""http://www.diveintopython.net/http_web_services/redirects.html"">Dive Into Python</a> has a good chapter on handling redirects with urllib2. Another solution is <a href=""http://docs.python.org/library/httplib.html"">httplib</a>.</p>

<pre class=""lang-py prettyprint-override""><code>&gt;&gt;&gt; import httplib
&gt;&gt;&gt; conn = httplib.HTTPConnection(""www.bogosoft.com"")
&gt;&gt;&gt; conn.request(""GET"", """")
&gt;&gt;&gt; r1 = conn.getresponse()
&gt;&gt;&gt; print r1.status, r1.reason
301 Moved Permanently
&gt;&gt;&gt; print r1.getheader('Location')
http://www.bogosoft.com/new/location
</code></pre>
"
110777,1531,2008-09-21T11:07:16Z,90775,5,"<p>@<a href=""#92710"">efotinis</a>: You're right.  </p>

<p>Here is a workaround until py2exe gets fixed and you don't want to include the same icon twice:</p>

<pre><code>hicon = win32gui.CreateIconFromResource(win32api.LoadResource(None, win32con.RT_ICON, 1), True)
</code></pre>

<p>Be aware that <strong>1</strong> is not the ID you gave the icon in setup.py (which is the icon group ID), but the resource ID <em>automatically</em> assigned by py2exe to each icon in each icon group. At least that's how I understand it.</p>

<p>If you want to create an icon with a specified size (as CreateIconFromResource uses the system default icon size), you need to use CreateIconFromResourceEx, which isn't available via PyWin32:</p>

<pre><code>icon_res = win32api.LoadResource(None, win32con.RT_ICON, 1)
hicon = ctypes.windll.user32.CreateIconFromResourceEx(icon_res, len(icon_res), True,
    0x00030000, 16, 16, win32con.LR_DEFAULTCOLOR)
</code></pre>
"
110788,7437,2008-09-21T11:15:01Z,110774,1,"<p>In model class you would probably have to add ""order"" field, to maintain specific order (eg. item with order = 10 is the last one and order = 1 is the first one). Then you can add a JS code in admin change_list template (see <a href=""http://docs.djangoproject.com/en/dev/ref/contrib/admin/#modeladmin-media-definitions"" rel=""nofollow"">this</a>) to maintain drag&amp;drop feature. Finally change ordering in Meta of model to something like ['order'].</p>
"
110808,2603,2008-09-21T11:31:20Z,110498,5,"<p>I second olt's pointer to <a href=""http://www.diveintopython.org/http_web_services/redirects.html"">Dive into Python</a>. Here's an implementation using urllib2 redirect handlers, more work than it should be? Maybe, shrug.</p>

<pre><code>import sys
import urllib2

class RedirectHandler(urllib2.HTTPRedirectHandler):
	def http_error_301(self, req, fp, code, msg, headers):  
		result = urllib2.HTTPRedirectHandler.http_error_301( 
			self, req, fp, code, msg, headers)              
		result.status = code                                 
		raise Exception(""Permanent Redirect: %s"" % 301)

	def http_error_302(self, req, fp, code, msg, headers):
		result = urllib2.HTTPRedirectHandler.http_error_302(
			self, req, fp, code, msg, headers)              
		result.status = code                                
		raise Exception(""Temporary Redirect: %s"" % 302)

def main(script_name, url):
   opener = urllib2.build_opener(RedirectHandler)
   urllib2.install_opener(opener)
   print urllib2.urlopen(url).read()

if __name__ == ""__main__"":
	main(*sys.argv)
</code></pre>
"
110817,7028,2008-09-21T11:40:55Z,110760,1,"<p>A partial answer: the easily readable format you are looking for might be <a href=""http://www.docbook.org/"" rel=""nofollow"">DocBook</a>. From there it is very easy to go to PDF, html, RTF, etc. etc.</p>
"
110821,10661,2008-09-21T11:42:58Z,110803,1,"<p>If you're using your own transactions (not the default admin application), you can save the before and after versions of your object.  You can save the before version in the session, or you can put it in ""hidden"" fields in the form.  Hidden fields is a security nightmare.  Therefore, use the session to retain history of what's happening with this user.</p>

<p>Additionally, of course, you do have to fetch the previous object so you can make changes to it.  So you have several ways to monitor the differences.</p>

<pre><code>def updateSomething( request, object_id ):
    object= Model.objects.get( id=object_id )
    if request.method == ""GET"":
        request.session['before']= object
        form= SomethingForm( instance=object )
    else request.method == ""POST""
        form= SomethingForm( request.POST )
        if form.is_valid():
            # You have before in the session
            # You have the old object
            # You have after in the form.cleaned_data
            # Log the changes
            # Apply the changes to the object
            object.save()
</code></pre>
"
110830,10661,2008-09-21T11:49:27Z,110774,4,"<p>Note on the ""It would be best if i didn't have to add any extra fields to the model, but if i really have to i can.""  </p>

<p>Sorry, but order of information in a database is determined by the information itself:  you always have to add a column for ordering.  There's really no choice about that.  </p>

<p>Further, to retrieve things in this order, you'll need to specifically add <code>.order_by(x)</code> to your queries or add <code>ordering</code> to your model.</p>

<pre><code>class InOrder( models.Model ):
    position = models.IntegerField()
    data = models.TextField()
    class Meta:
        ordering = [ 'position' ]
</code></pre>

<p>Without the additional field ordering cannot happen.  It's one of the rules of relational databases.</p>
"
110882,1968,2008-09-21T12:20:08Z,53162,16,"<p>You can break lines in between parenthesises and braces. Additionally, you can append the backslash character <code>\</code> to a line to explicitly break it:</p>

<pre><code>x = (tuples_first_value,
     second_value)
y = 1 + \
    2
</code></pre>
"
110929,10577,2008-09-21T12:44:01Z,110923,32,"<p>We can use:</p>

<pre><code>def quit():
    root.quit()
</code></pre>

<p>or</p>

<pre><code>def quit():
    root.destroy()
</code></pre>
"
110936,15685,2008-09-21T12:45:46Z,110760,2,"<p>You can build some fancy PDFs from Python with the <a href=""http://www.reportlab.com/opensource/"" rel=""nofollow"">ReportLab</a> toolkit.</p>
"
111011,3002,2008-09-21T13:24:39Z,110923,3,"<p>The usual method to exit a Python program:</p>

<pre><code>sys.exit()
</code></pre>

<p>(to which you can also pass an exit status) or </p>

<pre><code>raise SystemExit
</code></pre>

<p>will work fine in a Tkinter program.</p>
"
111066,19607,2008-09-21T13:51:30Z,110498,8,"<p>i suppose this would help</p>

<pre><code>from httplib2 import Http
def get_html(uri,num_redirections=0): # put it as 0 for not to follow redirects
conn = Http()
return conn.request(uri,redirections=num_redirections)
</code></pre>
"
111084,3207,2008-09-21T13:59:59Z,110774,5,"<p>For working code to do this, check out <a href=""http://www.djangosnippets.org/snippets/1053/"">snippet 1053</a> at <a href=""http://www.djangosnippets.org"">djangosnippets.org</a>.</p>
"
111091,3207,2008-09-21T14:04:00Z,110803,11,"<p>You haven't said very much about your specific use case or needs.  In particular, it would be helpful to know what you need to do with the change information (how long do you need to store it?).  If you only need to store it for transient purposes, @S.Lott's session solution may be best.  If you want a full audit trail of all changes to your objects stored in the DB, try this <a href=""http://code.djangoproject.com/wiki/AuditTrail"">AuditTrail solution</a>.</p>

<p><strong>UPDATE</strong>: The AuditTrail code I linked to above is the closest I've seen to a full solution that would work for your case, though it has some limitations (doesn't work at all for ManyToMany fields).  It will store all previous versions of your objects in the DB, so the admin could roll back to any previous version.  You'd have to work with it a bit if you want the change to not take effect until approved.</p>

<p>You could also build a custom solution based on something like @Armin Ronacher's DiffingMixin.  You'd store the diff dictionary (maybe pickled?) in a table for the admin to review later and apply if desired (you'd need to write the code to take the diff dictionary and apply it to an instance).</p>
"
111144,6267,2008-09-21T14:40:06Z,110760,3,"<p><a href=""http://appyframework.org/pod.html"" rel=""nofollow"">Pod</a> is my favorite solution to your problem.</p>
"
111160,10577,2008-09-21T14:51:11Z,111155,51,"<p>Tkinter supports a mechanism called <a href=""http://effbot.org/tkinterbook/tkinter-events-and-bindings.htm#protocols""><em>protocol handlers</em></a>. Here, the term <em>protocol</em> refers to the interaction between the application and the window manager. The most commonly used protocol is called <code>WM_DELETE_WINDOW</code>, and is used to define what happens when the user explicitly closes a window using the window manager.</p>

<p>You can use the <code>protocol</code> method to <em>install a handler</em> for this protocol (the widget must be a <code>Tk</code> or <code>Toplevel</code> widget):</p>

<p>Here you have a concrete example:</p>

<pre><code>import tkinter as tk
from tkinter import messagebox

root = tk.Tk()

def on_closing():
    if messagebox.askokcancel(""Quit"", ""Do you want to quit?""):
        root.destroy()

root.protocol(""WM_DELETE_WINDOW"", on_closing)
root.mainloop()
</code></pre>
"
111199,13564,2008-09-21T15:16:34Z,106766,14,"<p>You're talking about testing too much at once.  If you start trying to attack a testing problem by saying ""Let's verify that it modifies its environment correctly"", you're doomed to failure.  Environments have dozens, maybe even millions of potential variations.</p>

<p>Instead, look at the pieces (""units"") of your program.  For example, are you going to have a function that determines where the files are that have to be written?  What are the inputs to that function?  Perhaps an environment variable, perhaps some values read from a config file?  Test that function, and don't actually do anything that modifies the filesystem.  Don't pass it ""realistic"" values, pass it values that are easy to verify against.  Make a temporary directory, populate it with files in your test's <code>setUp</code> method.</p>

<p>Then test the code that writes the files.  Just make sure it's writing the right contents file contents.  Don't even write to a real filesystem!  You don't need to make ""fake"" file objects for this, just use Python's handy <code>StringIO</code> modules; they're ""real"" implementations of the ""file"" interface, they're just not the ones that your program is actually going to be writing to.</p>

<p>Ultimately you will have to test the final, everything-is-actually-hooked-up-for-real top-level function that passes the real environment variable and the real config file and puts everything together.  But don't worry about that to get started.  For one thing, you will start picking up tricks as you write individual tests for smaller functions and creating test mocks, fakes, and stubs will become second nature to you.  For another: even if you can't quite figure out how to test that one function call, you will have a very high level of confidence that everything which it is calling works perfectly.  Also, you'll notice that test-driven development forces you to make your APIs clearer and more flexible.  For example: it's much easier to test something that calls an <code>open()</code> method on an object that came from somewhere abstract, than to test something that calls <code>os.open</code> on a string that you pass it.  The <code>open</code> method is flexible; it can be faked, it can be implemented differently, but a string is a string and <code>os.open</code> doesn't give you any leeway to catch what methods are called on it.</p>

<p>You can also build testing tools to make repetitive tasks easy.  For example, twisted provides facilities for creating temporary files for testing <a href=""http://twistedmatrix.com/documents/8.1.0/api/twisted.trial.unittest.TestCase.html#mktemp"">built right into its testing tool</a>.  It's not uncommon for testing tools or larger projects with their own test libraries to have functionality like this.</p>
"
111225,13564,2008-09-21T15:25:33Z,100624,5,"<p>Twisted has an <a href=""http://twistedmatrix.com/documents/8.1.0/api/twisted.internet.interfaces.IReactorProcess.html"">asynchronous process-spawning API</a> which works on Windows.  There are actually several different implementations, many of which are not so great, but you can switch between them without changing your code.</p>
"
111251,15401,2008-09-21T15:43:15Z,111234,8,"<p>A Callable is an object that has the <code>__call__</code> method.  This means you can fake callable functions or do neat things like <a href=""http://www.python.org/dev/peps/pep-0309/"">Partial Function Application</a> where you take a function and add something that enhances it or fills in some of the parameters, returning something that can be called in turn (known as <a href=""http://en.wikipedia.org/wiki/Currying"">Currying</a> in functional programming circles).</p>

<p>Certain typographic errors will have the interpreter attempting to call something you did not intend, such as (for example) a string.  This can produce errors where the interpreter attempts to execute a non-callable application.  You can see this happening in a python interpreter by doing something like the transcript below.</p>

<pre><code>[nigel@k9 ~]$ python
Python 2.5 (r25:51908, Nov  6 2007, 15:55:44) 
[GCC 4.1.2 20070925 (Red Hat 4.1.2-27)] on linux2
Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.
&gt;&gt;&gt; 'aaa'()    # &lt;== Here we attempt to call a string.
Traceback (most recent call last):
  File ""&lt;stdin&gt;"", line 1, in &lt;module&gt;
TypeError: 'str' object is not callable
&gt;&gt;&gt;
</code></pre>
"
111252,14057,2008-09-21T15:43:20Z,111234,5,"<p>Quite simply, a ""callable"" is something that can be called like a method.  The built in function ""callable()"" will tell you whether something appears to be callable, as will checking for a <strong>call</strong> property.  Functions are callable as are classes, class instances can be callable.  See more about this <a href=""http://docs.python.org/lib/built-in-funcs.html"">here</a> and <a href=""http://www.peterbe.com/plog/callable-python-objects"">here</a>.</p>
"
111253,10906,2008-09-21T15:43:44Z,111234,0,"<p>It's something you can put ""(args)"" after and expect it to work.  A callable is usually a method or a class.  Methods get called, classes get instantiated.</p>
"
111255,19435,2008-09-21T15:44:22Z,111234,181,"<p>A callable is anything that can be called. </p>

<p>The <a href=""http://svn.python.org/projects/python/trunk/Objects/object.c"">built-in <em>callable</em> (PyCallable_Check in objects.c)</a> checks if the argument is either:</p>

<ul>
<li>an instance of a class with a <em>__call__</em> method or</li>
<li>is of a type that has a non null <em>tp_call</em> (c struct) member which indicates callability otherwise (such as in functions, methods etc.)</li>
</ul>

<p>The method named <em>__call__</em> is (<a href=""http://docs.python.org/ref/callable-types.html"">according to the documentation</a>)</p>

<blockquote>
  <p>Called when the instance is ''called'' as a function</p>
</blockquote>

<h2>Example</h2>

<pre><code>class Foo:
  def __call__(self):
    print 'called'

foo_instance = Foo()
foo_instance() #this is calling the __call__ method
</code></pre>
"
111267,18044,2008-09-21T15:49:28Z,111234,5,"<p><code>__call__</code> makes any object be callable as a function.</p>

<p>This example will output 8:</p>

<pre><code>class Adder(object):
  def __init__(self, val):
    self.val = val

  def __call__(self, val):
    return self.val + val

func = Adder(5)
print func(3)
</code></pre>
"
111300,13564,2008-09-21T16:03:08Z,94334,3,"<p>You probably want <a href=""http://twistedmatrix.com/trac/"" rel=""nofollow"">Twisted</a>.  There is a P2P framework for Twisted called ""<a href=""http://divmod.org/trac/wiki/DivmodVertex"" rel=""nofollow"">Vertex</a>"".  While not actively maintained, it does allow you to tunnel through NATs and make connections directly between users in a very abstract way; if there were more interest in this sort of thing I'm sure it would be more actively maintained.</p>
"
111355,13564,2008-09-21T16:25:42Z,88613,49,"<p>It just so happens that the tokens you want split are already Python tokens, so you can use the built-in <code>tokenize</code> module.  It's almost a one-liner:</p>

<pre><code>from cStringIO import StringIO
from tokenize import generate_tokens
STRING = 1
list(token[STRING] for token 
     in generate_tokens(StringIO('2+24*48/32').readline)
     if token[STRING])
['2', '+', '24', '*', '48', '/', '32']
</code></pre>
"
111364,19990,2008-09-21T16:33:51Z,110803,10,"<p>Django is currently sending all columns to the database, even if you just changed one.  To change this, some changes in the database system would be necessary.  This could be easily implemented on the existing code by adding a set of dirty fields to the model and adding column names to it, each time you <code>__set__</code> a column value.</p>

<p>If you need that feature, I would suggest you look at the Django ORM, implement it and put a patch into the Django trac.  It should be very easy to add that and it would help other users too.  When you do that, add a hook that is called each time a column is set.</p>

<p>If you don't want to hack on Django itself, you could copy the dict on object creation and diff it.</p>

<p>Maybe with a mixin like this:</p>

<pre><code>class DiffingMixin(object):

    def __init__(self, *args, **kwargs):
        super(DiffingMixin, self).__init__(*args, **kwargs)
        self._original_state = dict(self.__dict__)

    def get_changed_columns(self):
        missing = object()
        result = {}
        for key, value in self._original_state.iteritems():
            if key != self.__dict__.get(key, missing):
                result[key] = value
        return result

 class MyModel(DiffingMixin, models.Model):
     pass
</code></pre>

<p>This code is untested but should work.  When you call <code>model.get_changed_columns()</code> you get a dict of all changed values.  This of course won't work for mutable objects in columns because the original state is a flat copy of the dict.</p>
"
111371,19990,2008-09-21T16:37:09Z,111234,2,"<p>In Python a callable is an object which type has a <code>__call__</code> method:</p>

<pre><code>&gt;&gt;&gt; class Foo:
...  pass
... 
&gt;&gt;&gt; class Bar(object):
...  pass
... 
&gt;&gt;&gt; type(Foo).__call__(Foo)
&lt;__main__.Foo instance at 0x711440&gt;
&gt;&gt;&gt; type(Bar).__call__(Bar)
&lt;__main__.Bar object at 0x712110&gt;
&gt;&gt;&gt; def foo(bar):
...  return bar
... 
&gt;&gt;&gt; type(foo).__call__(foo, 42)
42
</code></pre>

<p>As simple as that :)</p>

<p>This of course can be overloaded:</p>

<pre><code>&gt;&gt;&gt; class Foo(object):
...  def __call__(self):
...   return 42
... 
&gt;&gt;&gt; f = Foo()
&gt;&gt;&gt; f()
42
</code></pre>
"
111876,14107,2008-09-21T19:46:01Z,109087,5,"<p>Although not directly an answer to the OP question, there is a pretty sweet way of finding out what variables are in scope in a function. take a look at this code:</p>

<pre><code>&gt;&gt;&gt; def f(x, y):
    z = x**2 + y**2
    sqrt_z = z**.5
    return sqrt_z

&gt;&gt;&gt; f.func_code.co_varnames
('x', 'y', 'z', 'sqrt_z')
&gt;&gt;&gt;
</code></pre>

<p>The func_code attribute has all kinds of interesting things in it. It allows you todo some cool stuff. Here is an example of how I have have used this:</p>

<pre><code>def exec_command(self, cmd, msg, sig):

    def message(msg):
        a = self.link.process(self.link.recieved_message(msg))
        self.exec_command(*a)

    def error(msg):
        self.printer.printInfo(msg)

    def set_usrlist(msg):
        self.client.connected_users = msg

    def chatmessage(msg):
        self.printer.printInfo(msg)

    if not locals().has_key(cmd): return
    cmd = locals()[cmd]

    try:
        if 'sig' in cmd.func_code.co_varnames and \
                       'msg' in cmd.func_code.co_varnames: 
            cmd(msg, sig)
        elif 'msg' in cmd.func_code.co_varnames: 
            cmd(msg)
        else:
            cmd()
    except Exception, e:
        print '\n-----------ERROR-----------'
        print 'error: ', e
        print 'Error proccessing: ', cmd.__name__
        print 'Message: ', msg
        print 'Sig: ', sig
        print '-----------ERROR-----------\n'
</code></pre>
"
111952,17095,2008-09-21T20:12:49Z,111945,2,"<p>Have you taken a look at <a href=""http://inamidst.com/proj/put/put.py"" rel=""nofollow"">put.py</a>? I've used it in the past. You can also just hack up your own request with urllib.</p>
"
111966,17095,2008-09-21T20:15:59Z,111954,73,"<p>Try to use <code>ftp.nlst(dir)</code>.</p>

<p>However, note that if the folder is empty, it might throw an error:</p>

<pre><code>files = []

try:
    files = ftp.nlst()
except ftplib.error_perm, resp:
    if str(resp) == ""550 No files found"":
        print ""No files in this directory""
    else:
        raise

for f in files:
    print f
</code></pre>
"
111968,15464,2008-09-21T20:17:08Z,111945,2,"<p>You can of course roll your own with the existing standard libraries at any level from sockets up to tweaking urllib.</p>

<p><a href=""http://pycurl.sourceforge.net/"" rel=""nofollow"">http://pycurl.sourceforge.net/</a></p>

<p>""PyCurl is a Python interface to libcurl.""</p>

<p>""libcurl is a free and easy-to-use client-side URL transfer library, ... supports ... HTTP PUT""</p>

<p>""The main drawback with PycURL is that it is a relative thin layer over libcurl without any of those nice Pythonic class hierarchies. This means it has a somewhat steep learning curve unless you are already familiar with libcurl's C API. ""</p>
"
111973,5868,2008-09-21T20:18:57Z,111945,8,"<p>You should have a look at the <a href=""http://docs.python.org/lib/module-httplib.html"">httplib module</a>.  It should let you make whatever sort of HTTP request you want.</p>
"
111974,18370,2008-09-21T20:19:34Z,111934,11,"<pre><code>bounds = self.canvas.bbox(myText)  # returns a tuple like (x1, y1, x2, y2)
width = bounds[2] - bounds[0]
height = bounds[3] - bounds[1]
</code></pre>

<p>See the <a href=""http://infohost.nmt.edu/tcc/help/pubs/tkinter/canvas-methods.html"">TkInter reference</a>.</p>
"
111978,5700,2008-09-21T20:20:36Z,111954,2,"<p>There's no standard for the layout of the <code>LIST</code> response. You'd have to write code to handle the most popular layouts. I'd start with Linux <code>ls</code> and Windows Server <code>DIR</code> formats. There's a lot of variety out there, though. </p>

<p>Fall back to the <code>nlst</code> method (returning the result of the <code>NLST</code> command) if you can't parse the longer list. For bonus points, cheat: perhaps the longest number in the line containing a known file name is its length. </p>
"
111988,19435,2008-09-21T20:24:21Z,111945,197,"<pre><code>import urllib2
opener = urllib2.build_opener(urllib2.HTTPHandler)
request = urllib2.Request('http://example.org', data='your_put_data')
request.add_header('Content-Type', 'your/contenttype')
request.get_method = lambda: 'PUT'
url = opener.open(request)
</code></pre>
"
112025,3002,2008-09-21T20:31:39Z,111983,40,"<p>It all depends on what you plan to do with the array. If all you're doing is creating arrays of simple data types and doing I/O, the <a href=""http://docs.python.org/lib/module-array.html"">array</a> module will do just fine.</p>

<p>If, on the other hand, you want to do any kind of numerical calculations, the array module doesn't provide any help with that. <a href=""http://numpy.scipy.org/array_interface.shtml"">NumPy</a> (and <a href=""http://scipy.org"">SciPy</a>) give you a wide variety of operations between arrays and special functions that are useful not only for scientific work but for things like advanced image manipulation or in general anything where you need to perform efficient calculations with large amounts of data.</p>

<p>Numpy is also much more flexible, e.g. it supports arrays of any type of Python objects, and is also able to interact ""natively"" with your own objects if they conform to the <a href=""http://numpy.scipy.org/"">array interface</a>.</p>
"
112337,7432,2008-09-21T22:19:09Z,112263,2,"<p>The answer to your specific question is no. You can't have two states or otherwise use pack two different ways in the same parent. </p>

<p>However, what I think you want to accomplish is simple. Use the built-in features of the canvas to create an image item that is part of the canvas, then pack things into the canvas as if it were a frame. </p>

<p>You can accomplish a similar thing by creating a label widget with an image, then pack your other widgets into the label.</p>

<p>One advantage to using a canvas is you can easily tile an image to fill the whole canvas with a repeating background image so as the window grows the image will continue to fill the window (of course you can just use a sufficiently large original image...)</p>
"
112397,6034,2008-09-21T22:39:05Z,112263,1,"<p>I believe that Bryan's answer is probably the best general solution.  However, you may also want to look at the <a href=""http://www.pythonware.com/library/tkinter/introduction/place.htm"" rel=""nofollow"">place</a> geometry manager.  The <strong>place</strong> geometry manager lets you specify the exact size and position of the widget... which can get tedious quickly, but will get the job done.</p>
"
112432,15401,2008-09-21T22:48:37Z,112263,0,"<p>Not without swapping widget trees in and out, which I don't think can be done cleanly with Tk.  Other toolkits can do this a little more elegantly.</p>

<ul>
<li>COM/VB/MFC can do this with an ActiveX control - you can hide/show multiple ActiveX controls in the same region.  Any of the containers will let you do this by changing the child around.  If you're doing a windows-specific program you may be able to accomplish it this way.</li>
<li>QT will also let you do this in a similar manner.</li>
<li>GTK is slightly harder.</li>
</ul>
"
112505,9567,2008-09-21T23:17:37Z,112483,2,"<p>You can use <a href=""http://doc.trolltech.com/4.4/qgraphicsview.html"" rel=""nofollow"">QGraphicsView</a> in PyQt. Each state is a new <code>QGraphicsItem</code>, which is either a bitmap or a path object. You just need to provide the outlines (or bitmaps) and the positions of the states. </p>

<p>If you have SVGs of the states, you can use them, too.</p>

<p>There is no generally accepted canvas class for GTK+.</p>
"
112540,10778,2008-09-21T23:29:51Z,112532,2,"<pre><code>var words = from word in dictionary
            where word.key.StartsWith(""bla-bla-bla"");
            select word;
</code></pre>
"
112541,422,2008-09-21T23:30:13Z,112532,1,"<p>Try using regex to search through your list of words, e.g. /^word/ and report all matches.</p>
"
112556,2603,2008-09-21T23:35:07Z,112532,2,"<pre><code>def main(script, name):
	for word in open(""/usr/share/dict/words""):
		if word.startswith(name):
			print word,

if __name__ == ""__main__"":
	import sys
	main(*sys.argv)
</code></pre>
"
112557,6852,2008-09-21T23:35:09Z,112532,8,"<p>One of the best ways to do this is to use a directed graph to store your dictionary.  It takes a little bit of setting up, but once done it is fairly easy to then do the type of searches you are talking about.</p>

<p>The nodes in the graph correspond to a letter in your word, so each node will have one incoming link and up to 26 (in English) outgoing links.</p>

<p>You could also use a hybrid approach where you maintain a sorted list containing your dictionary and use the directed graph as an index into your dictionary.  Then you just look up your prefix in your directed graph and then go to that point in your dictionary and spit out all words matching your search criteria.</p>
"
112559,3474,2008-09-21T23:35:48Z,112532,10,"<p>Use a <a href=""http://en.wikipedia.org/wiki/Trie"">trie</a>.</p>

<p>Add your list of words to a trie. Each path from the root to a leaf is a valid word. A path from a root to an intermediate node represents a prefix, and the children of the intermediate node are valid completions for the prefix.</p>
"
112560,16943,2008-09-21T23:36:31Z,112532,2,"<p>If you really want to be efficient - use suffix trees or suffix arrays - <a href=""http://en.wikipedia.org/wiki/Suffix_tree"" rel=""nofollow"">wikipedia article</a>.</p>

<p>Your problem is what suffix trees were designed to handle.
There is even implementation for Python - <a href=""http://hkn.eecs.berkeley.edu/~dyoo/python/suffix_trees/"" rel=""nofollow"">here</a></p>
"
112562,7028,2008-09-21T23:37:19Z,112532,1,"<p>If you need to be <em>really</em> fast, use a tree:</p>

<p>build an array and split the words in 26 sets based on the first letter, then split each item in 26 based on the second letter, then again.</p>

<p>So if your user types ""abd"" you would look for Array[0][1][3] and get a list of all the words starting like that. At that point your list should be small enough to pass over to the client and use javascript to filter.</p>
"
112563,8297,2008-09-21T23:37:53Z,112532,6,"<p>If you on a debian[-like] machine, </p>

<pre><code>#!/bin/bash
echo -n ""Enter a word: ""
read input
grep ""^$input"" /usr/share/dict/words
</code></pre>

<p>Takes all of 0.040s on my P200.</p>
"
112587,19745,2008-09-21T23:50:59Z,112532,4,"<pre><code>egrep `read input &amp;&amp; echo ^$input` /usr/share/dict/words
</code></pre>

<p>oh I didn't see the Python edit, here is the same thing in python</p>

<pre><code>my_input = raw_input(""Enter beginning of word: "")
my_words = open(""/usr/share/dict/words"").readlines()
my_found_words = [x for x in my_words if x[0:len(my_input)] == my_input]
</code></pre>
"
112598,9567,2008-09-21T23:57:05Z,112532,4,"<p>If you really want speed, use a trie/automaton. However, something that will be faster than simply scanning the whole list, given that the list of words is sorted:</p>

<pre><code>from itertools import takewhile, islice
import bisect

def prefixes(words, pfx):
    return list(
             takewhile(lambda x: x.startswith(pfx), 
                       islice(words, 
                              bisect.bisect_right(words, pfx), 
                              len(words)))
</code></pre>

<p>Note that an automaton is O(1) with regard to the size of your dictionary, while this algorithm is O(log(m)) and then O(n) with regard to the number of strings that actually start with the prefix, while the full scan is O(m), with n &lt;&lt; m.</p>
"
112608,9567,2008-09-22T00:04:12Z,112483,-1,"<p>Yes, you can use cairo, but cairo is not a canvas. You have to code behavior like mouseover/onclick yourself.</p>
"
112659,12650,2008-09-22T00:29:34Z,112564,2,"<p>Genshi.builder is for ""programmatically generating markup streams""[1]. I believe the purpose of it is as a backend for the templating language. You're probably looking for the templating language for generating a whole page.</p>

<p>You can, however do the following:</p>

<pre><code>&gt;&gt;&gt; import genshi.output
&gt;&gt;&gt; genshi.output.DocType('html')
('html', '-//W3C//DTD HTML 4.01//EN', 'http://www.w3.org/TR/html4/strict.dtd')
</code></pre>

<p>See other Doctypes here: <a href=""http://genshi.edgewall.org/wiki/ApiDocs/genshi.output#genshi.output:DocType"" rel=""nofollow"">http://genshi.edgewall.org/wiki/ApiDocs/genshi.output#genshi.output:DocType</a></p>

<pre><code>[1] genshi.builder.__doc__
</code></pre>
"
112708,9567,2008-09-22T00:53:21Z,112698,-5,"<p>No, it's doesn't give you a single executable in the sense that you only have one file afterwards - but you have a directory which contains everything you need for running your program, including an exe file.</p>

<p>I just wrote <a href=""http://hg.diotavelli.net/sta/master/file/542689f50e63/setup.py"" rel=""nofollow"">this setup.py</a> today. You only need to invoke <code>python setup.py py2exe</code>.</p>
"
112713,3002,2008-09-22T00:55:46Z,112698,72,"<p><a href=""http://www.pyinstaller.org/"">PyInstaller</a> will create a single .exe file with no dependencies; use the <code>--onefile</code> option. It does this by packing all the needed shared libs into the executable, and unpacking them before it runs, just as you describe (EDIT: py2exe also has this feature, see <a href=""http://stackoverflow.com/questions/112698/py2exe-generate-single-executable-file#113014"">minty's answer</a>)</p>

<p>I use the version of PyInstaller from svn, since the latest release (1.3) is somewhat outdated. It's been working really well for an app which depends on PyQt, PyQwt, numpy, scipy and a few more.</p>
"
112716,5022,2008-09-22T00:56:28Z,112698,-2,"<p>I recently used py2exe to create an executable for post-review for sending reviews to ReviewBoard.</p>

<p>This was the setup.py I used</p>

<pre><code>from distutils.core import setup
import py2exe

setup(console=['post-review'])
</code></pre>

<p>It created a directory containing the exe file and the libraries needed. I don't think it is possible to use py2exe to get just a single .exe file. If you need that you will need to first use py2exe and then use some form of installer to make the final executable.</p>

<p>One thing to take care of is that any egg files you use in your application need to be unzipped, otherwise py2exe can't include them. This is covered in the py2exe docs.</p>
"
112819,6760,2008-09-22T01:54:20Z,112768,2,"<p>Have you tried fetching the login page first?</p>

<p>I would suggest using <a href=""https://addons.mozilla.org/en-US/firefox/addon/966"" rel=""nofollow"">Tamper Data</a> to have a peek at exactly what's being sent when you request the login page and then log in normally using a web browser from a fresh start, with no initial cookies in place, so that your script can replicate it exactly.</p>

<p>That's the approach I used when writing the following, extracted from a script which needs to login to an Invision Power Board forum, using cookielib and urllib2 - you may find it useful as a reference.</p>

<pre><code>import cookielib
import logging
import sys
import urllib
import urllib2

cookies = cookielib.LWPCookieJar()
opener = urllib2.build_opener(urllib2.HTTPCookieProcessor(cookies))
urllib2.install_opener(opener)
headers = {
    'User-Agent': 'Mozilla/5.0 (Windows; U; Windows NT 5.0; en-GB; rv:1.8.1.12) Gecko/20080201 Firefox/2.0.0.12',
    'Accept': 'text/xml,application/xml,application/xhtml+xml,text/html;q=0.9,text/plain;q=0.8,image/png,*/*;q=0.5',
    'Accept-Language': 'en-gb,en;q=0.5',
    'Accept-Charset': 'ISO-8859-1,utf-8;q=0.7,*;q=0.7',
}

# Fetch the login page to set initial cookies
urllib2.urlopen(urllib2.Request('http://www.rllmukforum.com/index.php?act=Login&amp;CODE=00', None, headers))

# Login so we can access the Off Topic forum
login_headers = headers.copy()
login_headers.update({
    'Referer': 'http://www.rllmukforum.com/index.php?act=Login&amp;CODE=00',
    'Content-Type': 'application/x-www-form-urlencoded',
})
html = urllib2.urlopen(urllib2.Request('http://www.rllmukforum.com/index.php?act=Login&amp;CODE=01',
                                       urllib.urlencode({
                                           'referer': 'http://www.rllmukforum.com/index.php?',
                                           'UserName': RLLMUK_USERNAME,
                                           'PassWord': RLLMUK_PASSWORD,
                                       }),
                                       login_headers)).read()
if 'The following errors were found' in html:
    logging.error('RLLMUK login failed')
    logging.info(html)
    sys.exit(1)
</code></pre>
"
112843,NA,2008-09-22T02:05:02Z,112532,0,"<p>If your dictionary is really big, i'd suggest indexing with a python text index (PyLucene - note that i've never used the python extension for lucene)  The search would be efficient and you could even return a search 'score'.</p>

<p>Also, if your dictionary is relatively static you won't even have the overhead of re-indexing very often.</p>
"
112860,3560,2008-09-22T02:12:07Z,112564,4,"<p>It's not possible to build an entire page using just <code>genshi.builder.tag</code> -- you would need to perform some surgery on the resulting stream to insert the doctype. Besides, the resulting code would look horrific. The recommended way to use Genshi is to use a separate template file, generate a stream from it, and then render that stream to the output type you want.</p>

<p><code>genshi.builder.tag</code> is mostly useful for when you need to generate simple markup from within Python, such as when you're building a form or doing some sort of logic-heavy modification of the output.</p>

<p>See documentation for:</p>

<ul>
<li><a href=""http://genshi.edgewall.org/wiki/Documentation/0.5.x/templates.html"" rel=""nofollow"">Creating and using templates</a></li>
<li><a href=""http://genshi.edgewall.org/wiki/Documentation/0.5.x/xml-templates.html"" rel=""nofollow"">The XML-based template language</a></li>
<li><a href=""http://genshi.edgewall.org/wiki/ApiDocs/0.5.x/genshi.builder"" rel=""nofollow""><code>genshi.builder</code> API docs</a></li>
</ul>

<p>If you really want to generate a full document using only <code>builder.tag</code>, this (completely untested) code could be a good starting point:</p>

<pre><code>from itertools import chain
from genshi.core import DOCTYPE, Stream
from genshi.output import DocType
from genshi.builder import tag as t

# Build the page using `genshi.builder.tag`
page = t.html (t.head (t.title (""Hello world!"")), t.body (t.div (""Body text"")))

# Convert the page element into a stream
stream = page.generate ()

# Chain the page stream with a stream containing only an HTML4 doctype declaration
stream = Stream (chain ([(DOCTYPE, DocType.get ('html4'), None)], stream))

# Convert the stream to text using the ""html"" renderer (could also be xml, xhtml, text, etc)
text = stream.render ('html')
</code></pre>

<p>The resulting page will have no whitespace in it -- it'll look normal, but you'll have a hard time reading the source code because it will be entirely on one line. Implementing appropriate filters to add whitespace is left as an exercise to the reader.</p>
"
112895,18184,2008-09-22T02:33:43Z,112768,1,"<p>I'd recommend taking a look at the <a href=""http://wwwsearch.sourceforge.net/mechanize/"" rel=""nofollow"">mechanize</a> library; it's designed for precisely this type of task. It's also far easier than doing it by hand.</p>
"
112980,17160,2008-09-22T03:07:44Z,112970,129,"<p>You should always use <code>open()</code>.</p>

<p>As the <a href=""http://docs.python.org/2/library/functions.html#file"" rel=""nofollow"" title=""BuiltinFuncs Doc"">documentation</a> states:</p>

<blockquote>
  <p>When opening a file, it's preferable
  to use open() instead of invoking this
  constructor directly. file is more
  suited to type testing (for example,
  writing ""isinstance(f, file)"").</p>
</blockquote>

<p>Also, <code>file()</code> <a href=""http://docs.python.org/release/3.0/whatsnew/3.0.html#builtins"" rel=""nofollow"">has been removed</a> since Python 3.0.</p>
"
112982,3002,2008-09-22T03:08:37Z,112970,4,"<p>Functionally, the two are the same; <code>open</code> will call <code>file</code> anyway, so currently the difference is a matter of style. The <a href=""http://docs.python.org/lib/built-in-funcs.html"" rel=""nofollow"">Python docs</a> recommend using <code>open</code>. </p>

<blockquote>
  <p>When opening a file, it's preferable to use open() instead of invoking the file constructor directly. </p>
</blockquote>

<p>The reason is that in future versions they is not guaranteed to be the same (<code>open</code> will become a factory function, which returns objects of  different types depending on the path it's opening).</p>
"
112989,8819,2008-09-22T03:10:16Z,112970,28,"<p>Two reasons: The python philosophy of ""There ought to be one way to do it"" and <code>file</code> is going away.</p>

<p><code>file</code> is the actual type (using e.g. <code>file('myfile.txt')</code> is calling its constructor). <code>open</code> is a factory function that will return a file object.</p>

<p>In python 3.0 <code>file</code> is going to move from being a built-in to being implemented by multiple classes in the <code>io</code> library (somewhat similar to Java with buffered readers, etc.)</p>
"
112990,18515,2008-09-22T03:10:45Z,112970,3,"<p>Only ever use open() for opening files. file() is actually being removed in 3.0, and it's deprecated at the moment. They've had a sort of strange relationship, but file() is going now, so there's no need to worry anymore.</p>

<p>The following is from the Python 2.6 docs. [bracket stuff] added by me.</p>

<blockquote>
  <p>When opening a file, it’s preferable to use open() instead of invoking this [file()] constructor directly. file is more suited to type testing (for example, writing isinstance(f, file)</p>
</blockquote>
"
112993,10897,2008-09-22T03:12:27Z,112970,1,"<p>According to Mr Van Rossum, although open() is currently an alias for file() you should use open() because this might change in the future.</p>
"
113011,17160,2008-09-22T03:16:58Z,113007,12,"<p>Yes, just use Windows Python Extension, as stated <a href=""http://www.ravenbrook.com/project/p4dti/master/design/win32-eventlog/"">here</a>.</p>

<pre><code>import win32evtlogutil
win32evtlogutil.ReportEvent(ApplicationName, EventID, EventCategory,
    		    EventType, Inserts, Data, SID)
</code></pre>
"
113014,4491,2008-09-22T03:19:08Z,112698,150,"<p>The way to do this using py2exe is to use the bundle_files option in your setup.py file. For a single file you will want to set <code>bundle_files</code> to 1, <code>compressed</code> to True, and set the zipfile option to None. That way it creates one compressed file for easy distribution.</p>

<p>Here is a more complete description of the bundle_file option quoted directly from the <a href=""http://www.py2exe.org/index.cgi/SingleFileExecutable?highlight=%28file%29|%28single%29"">py2exe site</a>*</p>

<blockquote>
  <p>Using ""bundle_files"" and ""zipfile""</p>
  
  <p>An easier (and better) way to create
  single-file executables is to set
  bundle_files to 1 or 2, and to set
  zipfile to None. This approach does
  not require extracting files to a
  temporary location, which provides
  much faster program startup.</p>
  
  <p>Valid values for bundle_files are:</p>
  
  <ul>
  <li>3 (default) don't bundle </li>
  <li>2 bundle everything but the Python interpreter</li>
  <li>1 bundle everything, including the Python interpreter </li>
  </ul>
  
  <p>If zipfile is set to None, the files will be bundle
  within the executable instead of library.zip.</p>
</blockquote>

<p>Here is a sample setup.py:</p>

<pre><code>from distutils.core import setup
import py2exe, sys, os

sys.argv.append('py2exe')

setup(
    options = {'py2exe': {'bundle_files': 1, 'compressed': True}},
    windows = [{'script': ""single.py""}],
    zipfile = None,
)
</code></pre>
"
113050,14648,2008-09-22T03:32:08Z,112970,16,"<p><code>file()</code> is a type, like an int or a list. <code>open()</code> is a function for opening files, and will return a <code>file</code> object.</p>

<p>This is an example of when you should use open:</p>

<pre><code>f = open(filename, 'r')
for line in f:
    process(line)
f.close()
</code></pre>

<p>This is an example of when you should use file:</p>

<pre><code>class LoggingFile(file):
    def write(self, data):
        sys.stderr.write(""Wrote %d bytes\n"" % len(data))
        super(LoggingFile, self).write(data)
</code></pre>

<p>As you can see, there's a good reason for both to exist, and a clear use-case for both.</p>
"
113201,15578,2008-09-22T04:36:29Z,113170,2,"<p>There is no way to ``block'' signals temporarily from critical sections (since this is not supported by all Unix flavors).</p>

<p><a href=""https://docs.python.org/library/signal.html"" rel=""nofollow"">https://docs.python.org/library/signal.html</a></p>
"
113219,17209,2008-09-22T04:47:24Z,113170,2,"<p>There are no direct bindings for this in Python. Accessing them through ctypes is easy enough; here is an example.</p>

<pre><code>import ctypes, signal
libc = ctypes.cdll.LoadLibrary(""libc.so.6"")
libc.sighold(signal.SIGKILL)
libc.sigrelse(signal.SIGKILL)
</code></pre>

<p>I'm not familiar with the use of these calls, but be aware that Python's signal handlers work differently than C. When Python code is attached to a signal callback, the signal is caught on the C side of the interpreter and queued. The interpreter is occasionally interrupted for internal housekeeping (and thread switching, etc). It is during that interrupt the Python handler for the signal will be called.</p>

<p>All that to say, just be aware that Python's signal handling is a little less asynchronous than normal C signal handlers.</p>
"
113374,8570,2008-09-22T05:59:28Z,113341,0,"<p>If I understood you correctly, then the answer is: You can't.</p>

<p>intelligence should be an attribute of WizardPageSimple, if you'd want both classes to inherit it.</p>

<p>Depending on your situation, you might try to extract intelligence and related attributes into another baseclass. Then you could inherit from both:</p>

<pre><code>class MOS(wiz.WizardPageSimple, wiz.IntelligenceAttributes): # Or something like that.
</code></pre>

<p>In that case you <strong>must</strong> use the co-operative super. In fact, you should be using it already. Instead of calling </p>

<pre><code>wiz.WizardPageSimple.__init__(self, parent)
</code></pre>

<p>call</p>

<pre><code>super(MOS, self).__init__(self, parent)
</code></pre>
"
113388,18515,2008-09-22T06:05:58Z,113341,1,"<p>All you need is a reference. It's not really a simple problem that I can give some one-line solution to (other than a simple ugly global that would probably break something else), but one of program structure. You don't magically get access to a variable that was created on another instance of another class. You have to either give the intelligence reference to MOS, or take it from BasicInfoPage, however that might happen. It seems to me that the classes are designed rather oddly-- an information page, for one thing, should not generate anything, and if it does, it should give it back to whatever needs to know-- some sort of central place, which should have been the one generating it in the first place. Ordinarily, you'd set the variables there, and get them from there. Or at least, I would.</p>

<p>If you want the basic answer of ""how do I pass variables between different classes"", then here you go, but I doubt it's exactly what you want, as you look to be using some sort of controlling framework:</p>

<pre><code>class Foo(object):
    def __init__(self, var):
        self.var = var

class Bar(object):
    def do_something(self, var):
        print var*3

if __name__ == '__main__':
    f = Foo(3)
    b = Bar()
    # look, I'm using the variable from one instance in another!
    b.do_something(f.var)
</code></pre>
"
113493,6421,2008-09-22T06:42:22Z,107616,1,"<p>The use of ""i8"" as a data-type is becoming more and more common. I recently added this to my Perl XML-RPC module (<a href=""http://metacpan.org/pod/RPC::XML"" rel=""nofollow"">http://metacpan.org/pod/RPC::XML</a>) in response to a request from a large group that needed it in order to work with a server written in Java. I don't know what toolkit the server used, but it was already accepting i8 as a type.</p>

<p>One thing that I feel still has to be addressed, is whether the ""int"" alias for ""i4"" should also accept i8, the way it currently does i4. Or, for that matter, if a parameter typed as i8 should quietly accept an input typed as i4. XML-RPC has great potential as a lightweight, low-overhead protocol handy when you don't need all the coverage of SOAP, but it is often overlooked in the religious wars between REST and SOAP.</p>

<p>XML-RPC is in need of some updating and revision, if we could just get the original author to permit it...</p>
"
113554,612,2008-09-22T07:07:58Z,113534,1,"<p>The hard part with what you're trying to do is that you aren't giving it a character to split on. split() explodes a string on the character you provide to it, and removes that character.</p>

<p>Perhaps this may help:</p>

<pre><code>s = ""String to split""
mylist = []
for item in s.split():
    mylist.append(item)
    mylist.append(' ')
mylist = mylist[:-1]
</code></pre>

<p>Messy, but it'll do the trick for you...</p>
"
113555,893,2008-09-22T07:08:04Z,113534,40,"<pre><code>&gt;&gt;&gt; import re
&gt;&gt;&gt; re.split(r""(\s+)"", ""This is the string I want to split"")
['This', ' ', 'is', ' ', 'the', ' ', 'string', ' ', 'I', ' ', 'want', ' ', 'to', ' ', 'split']
</code></pre>

<p>Using the capturing parentheses in re.split() causes the function to return the separators as well.</p>
"
113558,20010,2008-09-22T07:08:59Z,113534,4,"<p>I don't think there is a function in the standard library that does that by itself, but ""partition"" comes close</p>

<p>The best way is probably to use regular expressions (which is how I'd do this in any language!)</p>

<pre><code>import re
print re.split(r""(\s+)"", ""Your string here"")
</code></pre>
"
113662,893,2008-09-22T07:42:15Z,113655,119,"<pre><code>&gt;&gt;&gt; list(""Word to Split"")
['W', 'o', 'r', 'd', ' ', 't', 'o', ' ', 'S', 'p', 'l', 'i', 't']
</code></pre>
"
113680,14860,2008-09-22T07:46:45Z,113655,9,"<p>The easiest way is probably just to use <code>list()</code>, but there is at least one other option as well:</p>

<pre><code>s = ""Word to Split""
wordlist = list(s)               # option 1, 
wordlist = [ch for ch in s]      # option 2, list comprehension.
</code></pre>

<p>They should <em>both</em> give you what you need:</p>

<pre><code>['W','o','r','d',' ','t','o',' ','S','p','l','i','t']
</code></pre>

<p>As stated, the first is likely the most preferable for your example but there are use cases that may make the latter quite handy for more complex stuff, such as if you want to apply some arbitrary function to the items, such as with:</p>

<pre><code>[doSomethingWith(ch) for ch in s]
</code></pre>
"
113681,20010,2008-09-22T07:47:20Z,113655,1,"<p>The list function will do this</p>

<pre><code>&gt;&gt;&gt; list('foo')
['f', 'o', 'o']
</code></pre>
"
114002,9951,2008-09-22T09:39:15Z,112532,0,"<p>Don't use a bazooka to kill a fly. Use something simple just like SQLite. There are all the tools you need for every modern languages and you can just do :</p>

<pre><code>""SELECT word FROM dict WHERE word LIKE ""user_entry%""
</code></pre>

<p>It's lightning fast and a baby could do it. What's more it's portable, persistent and so easy to maintain.</p>

<p>Python tuto :</p>

<p><a href=""http://www.initd.org/pub/software/pysqlite/doc/usage-guide.html"" rel=""nofollow"">http://www.initd.org/pub/software/pysqlite/doc/usage-guide.html</a></p>
"
114114,10661,2008-09-22T10:12:50Z,113341,6,"<p>You may have ""Class"" and ""Instance"" confused.  It's not clear from your example, so I'll presume that you're using a lot of class definitions and don't have appropriate object instances of those classes.</p>

<p>Classes don't really have usable attribute values.  A class is just a common set of definitions for a collection of objects.  You should think of of classes as definitions, not actual things.</p>

<p>Instances of classes, ""objects"", are actual things that have actual attribute values and execute method functions.</p>

<p>You don't pass variables among <em>classes</em>.  You pass variables among <em>instances</em>.  As a practical matter only instance variables matter.  [Yes, there are class variables, but they're a fairly specialized and often confusing thing, best avoided.]</p>

<p>When you create an object (an instance of a class)</p>

<pre><code>b= BasicInfoPage(...)
</code></pre>

<p>Then <code>b.intelligence</code> is the value of intelligence for the <code>b</code> instance of <code>BasicInfoPage</code>.</p>

<p>A really common thing is </p>

<pre><code>class MOS( wx.wizard.PageSimple ):
    def __init__( self, parent, title, basicInfoPage ):
        &lt;snip&gt;
        self.basicInfo= basicInfoPage
</code></pre>

<p>Now, within MOS methods, you can say <code>self.basicInfo.intelligence</code> because MOS has an object that's a BasicInfoPage available to it.</p>

<p>When you build MOS, you provide it with the instance of BasicInfoPage that it's supposed to use.</p>

<pre><code>someBasicInfoPage= BasicInfoPage( ... ) 
m= MOS( ..., someBasicInfoPage )
</code></pre>

<p>Now, the object <code>m</code> can examine <code>someBasicInfoPage.intelligence</code> </p>
"
114127,20164,2008-09-22T10:17:53Z,114112,0,"<p>This looks like a good place to start: <a href=""http://www.unessa.net/en/hoyci/2007/06/using-capistrano-deploy-django-apps/"" rel=""nofollow"">http://www.unessa.net/en/hoyci/2007/06/using-capistrano-deploy-django-apps/</a></p>
"
114128,10661,2008-09-22T10:18:04Z,113341,3,"<p>Each page of a Wizard -- by itself -- shouldn't actually be the container for the information you're gathering.</p>

<p>Read up on the <a href=""http://en.wikipedia.org/wiki/Model-view-controller"" rel=""nofollow"">Model-View-Control</a> design pattern.  Your pages have the View and Control parts of the design.  They aren't the data model, however.</p>

<p>You'll be happier if you have a separate object that is ""built"" by the pages.  Each page will set some attributes of that underlying model object.  Then, the pages are independent of each other, since the pages all get and set values of this underlying model object.</p>

<p>Since you're building a character, you'd have some class like this</p>

<pre><code>class Character( object ):
    def __init__( self ):
        self.intelligence= 10
        &lt;default values for all attributes.&gt;
</code></pre>

<p>Then your various Wizard instances just need to be given the underlying Character object as a place to put and get values.</p>
"
114137,7864,2008-09-22T10:20:42Z,114112,-2,"<p>The easiest way would be to use one of the sites on <a href=""http://djangofriendly.com/hosts/"" rel=""nofollow"">http://djangofriendly.com/hosts/</a> that will provide the hosting and set up for you, but even if you're wanting to roll your own it will allow you to see what set up other sites are using.</p>
"
114228,6267,2008-09-22T10:55:39Z,114112,1,"<p>I have had success with <a href=""http://code.google.com/p/modwsgi/wiki/IntegrationWithDjango"" rel=""nofollow"">mod_wsgi</a></p>
"
114232,6967,2008-09-22T10:56:27Z,114214,10,"<p>When you call a class member, Python automatically uses a reference to the object as the first parameter. The variable <code>self</code> actually means nothing, it's just a coding convention. You could call it <code>gargaloo</code> if you wanted. That said, the call to <code>method_two</code> would raise a <code>TypeError</code>, because Python is automatically trying to pass a parameter (the reference to its parent object) to a method that was defined as having no parameters.</p>

<p>To actually make it work, you could append this to your class definition:</p>

<pre><code>method_two = staticmethod(method_two)
</code></pre>

<p>or you could use the <code>@staticmethod</code> <a href=""https://docs.python.org/2/library/functions.html#staticmethod"" rel=""nofollow"">function decorator</a>.</p>
"
114250,15369,2008-09-22T11:00:29Z,114214,4,"<p>method_two won't work because you're defining a member function but not telling it what the function is a member of. If you execute the last line you'll get:</p>

<pre><code>&gt;&gt;&gt; a_test.method_two()
Traceback (most recent call last):
  File ""&lt;stdin&gt;"", line 1, in &lt;module&gt;
TypeError: method_two() takes no arguments (1 given)
</code></pre>

<p>If you're defining member functions for a class the first argument must always be 'self'.</p>
"
114251,18044,2008-09-22T11:00:59Z,114214,1,"<p>The call to method_two will throw an exception for not accepting the self parameter the Python runtime will automatically pass it.</p>

<p>If you want to create a static method in a Python class, decorate it with the <code>staticmethod decorator</code>.</p>

<pre><code>Class Test(Object):
  @staticmethod
  def method_two():
    print ""Called method_two""

Test.method_two()
</code></pre>
"
114267,9567,2008-09-22T11:05:54Z,114214,325,"<p>In Python, there is a distinction between <em>bound</em> and <em>unbound</em> methods. </p>

<p>Basically, a call to a member function (like <code>method_one</code>), a bound function</p>

<pre><code>a_test.method_one()
</code></pre>

<p>is translated to</p>

<pre><code>Test.method_one(a_test)
</code></pre>

<p>i.e. a call to an unbound method. Because of that, a call to your version of <code>method_two</code> will fail with a <code>TypeError</code></p>

<pre><code>&gt;&gt;&gt; a_test = Test() 
&gt;&gt;&gt; a_test.method_two()
Traceback (most recent call last):
  File ""&lt;stdin&gt;"", line 1, in &lt;module&gt;
TypeError: method_two() takes no arguments (1 given)
</code></pre>

<p>You can change the behavior of a method using a decorator</p>

<pre><code>class Test(object):
    def method_one(self):
        print ""Called method_one""

    @staticmethod
    def method_two():
        print ""Called method two""
</code></pre>

<p>The decorator tells the built-in default metaclass <code>type</code> (the class of a class, cf. <a href=""http://stackoverflow.com/questions/100003/what-is-a-metaclass-in-python"">this question</a>) to not create bound methods for <code>method_two</code>.</p>

<p>Now, you can invoke static method both on an instance or on the class directly:</p>

<pre><code>&gt;&gt;&gt; a_test = Test()
&gt;&gt;&gt; a_test.method_one()
Called method_one
&gt;&gt;&gt; a_test.method_two()
Called method_two
&gt;&gt;&gt; Test.method_two()
Called method_two
</code></pre>
"
114268,19990,2008-09-22T11:06:01Z,114112,7,"<p><code>mod_wsgi</code> in combination with a <code>virtualenv</code> for all the dependencies, a mercurial checkout into the virtualenv and a <code>fabric</code> recipe to check out the changes on the server.</p>

<p>I wrote an article about my usual workflow: <a href=""http://lucumr.pocoo.org/2008/7/17/deploying-python-web-applications/"" rel=""nofollow"">Deploying Python Web Applications</a>.  Hope that helps.</p>
"
114281,16084,2008-09-22T11:10:01Z,114214,1,"<p>that is an error.</p>

<p>first of all, first line should be like this (be careful of capitals)</p>

<pre><code>class Test(object):
</code></pre>

<p>Whenever you call a method of a class, it gets itself as the first argument (hence the name self) and method_two gives this error </p>

<pre><code>&gt;&gt;&gt; a.method_two()
Traceback (most recent call last):
File ""&lt;stdin&gt;"", line 1, in &lt;module&gt;
TypeError: method_two() takes no arguments (1 given)
</code></pre>
"
114285,7883,2008-09-22T11:11:49Z,114214,1,"<p>The second one won't work because when you call it like that python internally tries to call it with the a_test instance as the first argument, but your method_two doesn't accept any arguments, so it wont work, you'll get a runtime error.
If you want the equivalent of a static method you can use a class method.
There's much less need for class methods in Python than static methods in languages like Java or C#. Most often the best solution is to use a method in the module, outside a class definition, those work more efficiently than class methods.</p>
"
114289,19990,2008-09-22T11:12:36Z,114214,163,"<p>Methods in Python are a very, very simple thing once you understood the basics of the descriptor system.  Imagine the following class:</p>

<pre><code>class C(object):
    def foo(self):
        pass
</code></pre>

<p>Now let's have a look at that class in the shell:</p>

<pre><code>&gt;&gt;&gt; C.foo
&lt;unbound method C.foo&gt;
&gt;&gt;&gt; C.__dict__['foo']
&lt;function foo at 0x17d05b0&gt;
</code></pre>

<p>As you can see if you access the <code>foo</code> attribute on the class you get back an unbound method, however inside the class storage (the dict) there is a function.  Why's that?  The reason for this is that the class of your class implements a <code>__getattribute__</code> that resolves descriptors.  Sounds complex, but is not.  <code>C.foo</code> is roughly equivalent to this code in that special case:</p>

<pre><code>&gt;&gt;&gt; C.__dict__['foo'].__get__(None, C)
&lt;unbound method C.foo&gt;
</code></pre>

<p>That's because functions have a <code>__get__</code> method which makes them descriptors.  If you have an instance of a class it's nearly the same, just that <code>None</code> is the class instance:</p>

<pre><code>&gt;&gt;&gt; c = C()
&gt;&gt;&gt; C.__dict__['foo'].__get__(c, C)
&lt;bound method C.foo of &lt;__main__.C object at 0x17bd4d0&gt;&gt;
</code></pre>

<p>Now why does Python do that?  Because the method object binds the first parameter of a function to the instance of the class.  That's where self comes from.  Now sometimes you don't want your class to make a function a method, that's where <code>staticmethod</code> comes into play:</p>

<pre><code> class C(object):
  @staticmethod
  def foo():
   pass
</code></pre>

<p>The <code>staticmethod</code> decorator wraps your class and implements a dummy <code>__get__</code> that returns the wrapped function as function and not as a method:</p>

<pre><code>&gt;&gt;&gt; C.__dict__['foo'].__get__(None, C)
&lt;function foo at 0x17d0c30&gt;
</code></pre>

<p>Hope that explains it.</p>
"
114348,9622,2008-09-22T11:36:43Z,114283,1,"<p>I'm by no means a Django expert, so this answer might misguide you. </p>

<p>Start looking somewhere around <code>django.contrib.admin.options.ModelAdmin</code>, especially <code>render_change_form</code> and <code>response_change</code>. I guess you would need to subclass ModelAdmin for your model and provide required behavior around those methods.</p>
"
114373,19990,2008-09-22T11:42:42Z,114283,2,"<p>You could overload the <code>get_form</code> method of your model admin and add an extra checkbox to the generated form that has to be ticket.  Alternatively you can override <code>change_view</code> and intercept the request.</p>
"
114449,7424,2008-09-22T12:02:08Z,107675,10,"<p>I have added a <a href=""http://code.google.com/p/gaeunit/source/browse/#svn/trunk/sample_app"">sample application</a> to the GAEUnit project which demonstrates how to write and execute a web test using GAEUnit.  The sample includes a slightly modified version of the '<a href=""http://pythonpaste.org/webtest/index.html"">webtest</a>' module ('import webbrowser' is commented out, as recommended by David Coffin).</p>

<p>Here's the 'web_tests.py' file from the sample application 'test' directory:</p>

<pre><code>import unittest
from webtest import TestApp
from google.appengine.ext import webapp
import index

class IndexTest(unittest.TestCase):

  def setUp(self):
    self.application = webapp.WSGIApplication([('/', index.IndexHandler)], debug=True)

  def test_default_page(self):
    app = TestApp(self.application)
    response = app.get('/')
    self.assertEqual('200 OK', response.status)
    self.assertTrue('Hello, World!' in response)

  def test_page_with_param(self):
    app = TestApp(self.application)
    response = app.get('/?name=Bob')
    self.assertEqual('200 OK', response.status)
    self.assertTrue('Hello, Bob!' in response)
</code></pre>
"
114626,19435,2008-09-22T12:43:30Z,114597,6,"<p>The fastest way to display 30x400 data points is to:</p>

<h2>Use OpenGL color arrays</h2>

<p>If you can quickly transform your data to what OpenGL understands as color array, you could create a vertex array describing quads, one for each sensor, then update your color array and draw this orthographically on screen.</p>

<h2>Use OpenGL textures</h2>

<p>If you can quickly transform your datapoints to an opengl texture you can draw one quad with fixed UV coordinates that is bound to this texture.</p>

<h2>Use pygame</h2>

<p>Pygame has support for conversion of Numpy/Numarray to surfaces, Pygame can then transform such surfaces which involves resampling, after resampling you can blit it on screen.</p>

<h2>Misc</h2>

<p><a href=""http://pyglet.org/"">pyglet</a> makes dealing with opengl very easy</p>
"
114648,19215,2008-09-22T12:46:40Z,111945,8,"<p>I needed to solve this problem too a while back so that I could act as a client for a RESTful API.  I settled on httplib2 because it allowed me to send PUT and DELETE in addition to GET and POST.  Httplib2 is not part of the standard library but you can easily get it from the cheese shop.</p>
"
114717,19215,2008-09-22T12:58:57Z,106725,4,"<p>My company uses the free InnoSetup tool.  It is a moderately complex program that has tons of flexibility for building installers for windows.  I believe that it creates .exe and not .msi files, however.  InnoSetup is not python specific but we have created an installer for one of our products that installs python along with dependencies to locations specified by the user at install time.</p>
"
114831,17160,2008-09-22T13:23:00Z,114830,127,"<p>Yes, it is a hash mapping or hash table. You can read a description of python's dict implementation, as written by Tim Peters, <a href=""http://mail.python.org/pipermail/python-list/2000-March/048085.html"">here</a>.</p>

<p>That's why you can't use something 'not hashable' as a dict key, like a list:</p>

<pre><code>&gt;&gt;&gt; a = {}
&gt;&gt;&gt; b = ['some', 'list']
&gt;&gt;&gt; hash(b)
Traceback (most recent call last):
  File ""&lt;stdin&gt;"", line 1, in &lt;module&gt;
TypeError: list objects are unhashable
&gt;&gt;&gt; a[b] = 'some'
Traceback (most recent call last):
  File ""&lt;stdin&gt;"", line 1, in &lt;module&gt;
TypeError: list objects are unhashable
</code></pre>

<p>You can <a href=""http://en.wikipedia.org/wiki/Hash_table"">read more about hash tables</a> or <a href=""https://hg.python.org/cpython/file/10eea15880db/Objects/dictobject.c"">check how it has been implemented in python</a> and <a href=""https://hg.python.org/cpython/file/10eea15880db/Objects/dictnotes.txt"">why it is implemented that way</a>.</p>
"
114848,4482,2008-09-22T13:25:27Z,114830,14,"<p>Yes.  Internally it is implemented as open hashing based on a primitive polynomial over Z/2 (<a href=""http://mail.python.org/pipermail/python-list/2000-February/023645.html"">source</a>).</p>
"
114853,9567,2008-09-22T13:26:19Z,114830,25,"<p>If you're interested in the technical details, one article in <a href=""http://oreilly.com/catalog/9780596510046/"">Beautiful Code</a> deals with the internals of Python's <code>dict</code> implementation.</p>
"
114923,6782,2008-09-22T13:42:59Z,82607,0,"<p>This looks like a probable bug in the Python DNS library, although I don't read Python well enough to find it.</p>

<p>Note that in any case your EDNS0 buffer size parameter is not large enough to handle the RRSIG records for sources.org, so your client and server would have to fail over to TCP/IP.</p>
"
114941,6034,2008-09-22T13:47:28Z,112263,1,"<blockquote>
  <p>... turned out to be unworkable because I wanted to add labels and more canvases to it, but I can't find any way to make their backgrounds transparent</p>
</blockquote>

<p>If it is acceptable to load an additional extension, take a look at <a href=""http://www.tkzinc.org/tkzinc/index.php"" rel=""nofollow"">Tkzinc</a>.  From the web site, </p>

<blockquote>
  <p>Tkzinc (historically called Zinc) widget is very similar to the Tk Canvas in that they both support structured graphics. Like the Canvas, Tkzinc implements items used to display graphical entities. Those items can be manipulated and bindings can be associated with them to implement interaction behaviors. But unlike the Canvas, Tkzinc can structure the items in a hierarchy, has support for scaling and rotation, clipping can be set for sub-trees of the item hierarchy, supports muti-contour curves. It also provides advanced rendering with the help of OpenGL, such as color gradient, antialiasing, transparencies and a triangles item. </p>
</blockquote>

<p>I'm currently using it on a tcl project and am quite pleased with the results.  Extensions for tcl, perl, and python are available.</p>
"
115195,15929,2008-09-22T14:36:35Z,113655,2,"<p>Abuse of the rules, same result:
    (x for x in 'Word to split')</p>

<p>Actually an iterator, not a list. But it's likely you won't really care.</p>
"
115349,4279,2008-09-22T15:04:53Z,111234,59,"<p>From Python's sources <a href=""http://svn.python.org/view/python/trunk/Objects/object.c?rev=64962&amp;view=markup"">object.c</a>:</p>

<pre class=""lang-c prettyprint-override""><code>/* Test whether an object can be called */

int
PyCallable_Check(PyObject *x)
{
    if (x == NULL)
        return 0;
    if (PyInstance_Check(x)) {
        PyObject *call = PyObject_GetAttrString(x, ""__call__"");
        if (call == NULL) {
            PyErr_Clear();
            return 0;
        }
        /* Could test recursively but don't, for fear of endless
           recursion if some joker sets self.__call__ = self */
        Py_DECREF(call);
        return 1;
    }
    else {
        return x-&gt;ob_type-&gt;tp_call != NULL;
    }
}
</code></pre>

<p>It says:</p>

<ol>
<li>If an object is an instance of some class then it is callable <em>iff</em> it has <code>__call__</code> attribute.</li>
<li>Else the object <code>x</code> is callable <em>iff</em> <code>x-&gt;ob_type-&gt;tp_call != NULL</code></li>
</ol>

<p>Desciption of <a href=""http://docs.python.org/api/type-structs.html""><code>tp_call</code> field</a>:</p>

<blockquote>
  <p><code>ternaryfunc tp_call</code> An optional
  pointer to a function that implements
  calling the object. This should be
  NULL if the object is not callable.
  The signature is the same as for
  PyObject_Call(). This field is
  inherited by subtypes.</p>
</blockquote>

<p>You can always use built-in <code>callable</code> function to determine whether given object is callable or not; or better yet just call it and catch <code>TypeError</code> later. <code>callable</code> is removed in Python 3.0 and 3.1, use <code>callable = lambda o: hasattr(o, '__call__')</code> or <code>isinstance(o, collections.Callable)</code>.</p>

<p>Example, a simplistic cache implementation:</p>

<pre><code>class Cached:
    def __init__(self, function):
        self.function = function
        self.cache = {}

    def __call__(self, *args):
        try: return self.cache[args]
        except KeyError:
            ret = self.cache[args] = self.function(*args)
            return ret    
</code></pre>

<p>Usage:</p>

<pre><code>@Cached
def ack(x, y):
    return ack(x-1, ack(x, y-1)) if x*y else (x + y + 1) 
</code></pre>

<p>Example from standard library, file <a href=""http://svn.python.org/projects/python/trunk/Lib/site.py""><code>site.py</code></a>, definition of built-in <code>exit()</code> and <code>quit()</code> functions:</p>

<pre><code>class Quitter(object):
    def __init__(self, name):
        self.name = name
    def __repr__(self):
        return 'Use %s() or %s to exit' % (self.name, eof)
    def __call__(self, code=None):
        # Shells like IDLE catch the SystemExit, but listen when their
        # stdin wrapper is closed.
        try:
            sys.stdin.close()
        except:
            pass
        raise SystemExit(code)
__builtin__.quit = Quitter('quit')
__builtin__.exit = Quitter('exit')
</code></pre>
"
115379,18866,2008-09-22T15:09:43Z,114830,5,"<p>To expand upon nosklo's explanation:</p>

<pre><code>a = {}
b = ['some', 'list']
a[b] = 'some' # this won't work
a[tuple(b)] = 'some' # this will, same as a['some', 'list']
</code></pre>
"
115700,8508,2008-09-22T15:55:07Z,115316,9,"<p>Right now (as of 2008), all the SOAP libraries available for Python suck. I recommend avoiding SOAP if possible. The last time we where forced to use a SOAP web service from Python, we wrote a wrapper in C# that handled the SOAP on one side and spoke COM out the other. </p>
"
115777,19435,2008-09-22T16:05:25Z,115764,6,"<p>It's pythonic not to think about esoteric difference in some pattern you read somewhere and now want to use everywhere, like the factory pattern.</p>

<p>Most of the time you would think of a @staticmethod as a solution it's probably better to use a module function, except when you stuff multiple classes in one module and each has a different implementation of the same interface, then it's better to use a @staticmethod</p>

<p>Ultimately weather you create your instances by a @staticmethod or by module function makes little difference.</p>

<p>I'd probably use the initializer ( __init__ ) of a class because one of the more accepted ""patterns"" in python is that the factory for a class is the class initialization.</p>
"
115802,17847,2008-09-22T16:09:45Z,115764,0,"<p>The factory pattern has its own <a href=""http://en.wikipedia.org/wiki/Factory_method_pattern"" rel=""nofollow"">strengths and weaknesses</a>.  However, choosing one way to create instances usually has little pragmatic effect on your code.</p>
"
115807,8206,2008-09-22T16:11:52Z,115764,2,"<p>IMHO a module-level method is a cleaner solution. It hides behind the Python module system that gives it a unique namespace prefix, something the ""factory pattern"" is commonly used for. </p>
"
115826,17160,2008-09-22T16:16:12Z,115773,13,"<p>That depends on how you are running the cherrypy init.</p>

<p>If using cherrypy 3.1 syntax, that wold do it:</p>

<pre><code>cherrypy.server.socket_host = 'www.machinename.com'
cherrypy.engine.start()
cherrypy.engine.block()
</code></pre>

<p>Of course you can have something more fancy, like subclassing the server class, or using config files. Those uses are covered in <a href=""http://www.cherrypy.org/wiki/ServerAPI"">the documentation</a>.</p>

<p>But that should be enough. If not just tell us what you are doing and cherrypy version, and I will edit this answer.</p>
"
115853,10661,2008-09-22T16:20:38Z,115764,11,"<p>[<strong>Note</strong>.  Be very cautious about separating ""Calendar"" a collection of events, and ""Event"" - a single event on a calendar.  In your question, it seems like there could be some confusion.]</p>

<p>There are many variations on the Factory design pattern.</p>

<ol>
<li><p>A stand-alone convenience function (e.g., calendarMaker(data))</p></li>
<li><p>A separate class (e.g., CalendarParser) which builds your target class (Calendar).</p></li>
<li><p>A class-level method (e.g. Calendar.from_string) method.</p></li>
</ol>

<p>These have different purposes.  All are Pythonic, the questions are ""what do you <em>mean</em>?"" and ""what's likely to change?""  Meaning is everything; change is important.</p>

<p>Convenience functions are Pythonic.  Languages like Java can't have free-floating functions; you must wrap a lonely function in a class.  Python allows you to have a lonely function without the overhead of a class.  A function is relevant when your constructor has no state changes or alternate strategies or any memory of previous actions.  </p>

<p>Sometimes folks will define a class and then provide a convenience function that makes an instance of the class, sets the usual parameters for state and strategy and any other configuration, and then calls the single relevant method of the class.  This gives you both the statefulness of  class plus the flexibility of a stand-alone function.</p>

<p>The class-level method pattern is used, but it has limitations.  One, it's forced to rely on class-level variables.  Since these can be confusing, a complex constructor as a static method runs into problems when you need to add features (like statefulness or alternative strategies.)  Be sure you're never going to expand the static method.</p>

<p>Two, it's more-or-less irrelevant to the rest of the class methods and attributes.  This kind of <code>from_string</code> is just one of many alternative encodings for your Calendar objects.  You might have a <code>from_xml</code>, <code>from_JSON</code>, <code>from_YAML</code> and on and on.  None of this has the least relevance to what a Calendar IS or what it DOES.  These methods are all about how a Calendar is encoded for transmission.</p>

<p>What you'll see in the mature Python libraries is that factories are separate from the things they create.  Encoding (as strings, XML, JSON, YAML) is subject to a great deal of more-or-less random change.  The essential thing, however, rarely changes.</p>

<p>Separate the two concerns.  Keep encoding and representation as far away from state and behavior as you can.</p>
"
115903,4618,2008-09-22T16:26:51Z,115866,24,"<p>Why not let MySQL do the hard work?</p>

<p>select unix_timestamp(fieldname) from tablename;</p>
"
115933,17624,2008-09-22T16:30:48Z,115764,0,"<p>A staticmethod rarely has value, but a classmethod may be useful. It depends on what you want the class and the factory function to actually do.</p>

<p>A factory function in a module would always make an instance of the 'right' type (where 'right' in your case is the 'Calendar' class always, but you might also make it dependant on the contents of what it is creating the instance out of.)</p>

<p>Use a classmethod if you wish to make it dependant not on the data, but on the class you call it on. A classmethod is like a staticmethod in that you can call it on the class, without an instance, but it receives the class it was called on as first argument. This allows you to actually create an instance of <em>that class</em>, which may be a subclass of the original class. An example of a classmethod is dict.fromkeys(), which creates a dict from a list of keys and a single value (defaulting to None.) Because it's a classmethod, when you subclass dict you get the 'fromkeys' method entirely for free. Here's an example of how one could write dict.fromkeys() oneself:</p>

<pre><code>class dict_with_fromkeys(dict):
    @classmethod
    def fromkeys(cls, keys, value=None):
        self = cls()
        for key in keys:
            self[key] = value
        return self
</code></pre>
"
115985,11834,2008-09-22T16:41:18Z,115974,4,"<p><a href=""http://en.wikipedia.org/wiki/Nohup"" rel=""nofollow"">nohup</a> </p>

<p><a href=""http://code.activestate.com/recipes/278731/"" rel=""nofollow"">Creating a daemon the Python way</a></p>
"
116025,17624,2008-09-22T16:46:00Z,115977,15,"<p>Because of how pylint works (it examines the source itself, without letting Python actually execute it) it's very hard for pylint to figure out how metaclasses and complex baseclasses actually affect a class and its instances. The 'pychecker' tool is a bit better in this regard, because it <em>does</em> actually let Python execute the code; it imports the modules and examines the resulting objects. However, that approach has other problems, because it does actually let Python execute the code :-)</p>

<p>You could extend pylint to teach it about the magic Django uses, or to make it understand metaclasses or complex baseclasses better, or to just ignore such cases after detecting one or more features it doesn't quite understand. I don't think it would be particularly easy. You can also just tell pylint to not warn about these things, through special comments in the source, command-line options or a .pylintrc file.</p>
"
116027,14057,2008-09-22T16:46:13Z,115744,0,"<p><a href=""http://www.jython.org/docs/api/org/python/util/PyServlet.html"" rel=""nofollow"">PyServlet</a> helps you configure Tomcat to serve up Jython scripts from a URL.  You could use this is a ""REST-like"" way to do some basic web services without much effort.  (It is also described <a href=""http://www.informit.com/articles/article.aspx?p=26865&amp;seqNum=6"" rel=""nofollow"">here</a>.) </p>

<p>We used a similar home grown framework to provide a variety of data services in a large multiple web application very successfully.</p>
"
116035,19435,2008-09-22T16:47:31Z,115974,20,"<p>See <a href=""http://www.kohala.com/start/"">Stevens</a> and also this <a href=""http://code.activestate.com/recipes/278731/"">lengthy thread on activestate</a> which I found personally to be both mostly incorrect and much to verbose, and I came up with this:</p>

<pre><code>from os import fork, setsid, umask, dup2
from sys import stdin, stdout, stderr

if fork(): exit(0)
umask(0) 
setsid() 
if fork(): exit(0)

stdout.flush()
stderr.flush()
si = file('/dev/null', 'r')
so = file('/dev/null', 'a+')
se = file('/dev/null', 'a+', 0)
dup2(si.fileno(), stdin.fileno())
dup2(so.fileno(), stdout.fileno())
dup2(se.fileno(), stderr.fileno())
</code></pre>

<p>If you need to stop that process again, it is required to know the pid, the usual solution to this is pidfiles. Do this if you need one</p>

<pre><code>from os import getpid
outfile = open(pid_file, 'w')
outfile.write('%i' % getpid())
outfile.close()
</code></pre>

<p>For security reasons you might consider any of these after demonizing</p>

<pre><code>from os import setuid, setgid, chdir
from pwd import getpwnam
from grp import getgrnam
setuid(getpwnam('someuser').pw_uid)
setgid(getgrnam('somegroup').gr_gid)
chdir('/')
</code></pre>

<p>You could also use <a href=""http://en.wikipedia.org/wiki/Nohup"">nohup</a> but that does not work well with <a href=""http://docs.python.org/lib/module-subprocess.html"">python's subprocess module</a></p>
"
116047,8297,2008-09-22T16:50:09Z,115977,5,"<p>Try running pylint with</p>

<pre><code>pylint --ignored-classes=Tags
</code></pre>

<p>If that works, add all the other Django classes - possibly using a script, in say, python :P </p>

<p>The documentation for <code>--ignore-classes</code> is:</p>

<blockquote>
  <p><code>--ignored-classes=&lt;members names&gt;</code><br />
  List of classes names for which member
  attributes should not be checked
  (useful for classes with attributes
  dynamicaly set). [current: %default]</p>
</blockquote>

<p>I should add this is not a particular elegant solution in my view, but it should work.</p>
"
116081,8427,2008-09-22T16:57:14Z,115974,0,"<p>Use <a href=""http://www.clapper.org/software/python/grizzled/"" rel=""nofollow"">grizzled.os.daemonize</a>:</p>

<pre><code>$ easy_install grizzled

&gt;&gt;&gt; from grizzled.os import daemonize
&gt;&gt;&gt; daemon.daemonize()
</code></pre>

<p>To understand how this works or to do it yourself, read <a href=""http://code.activestate.com/recipes/278731/"" rel=""nofollow"">the discussion on ActiveState</a>.</p>
"
116122,16148,2008-09-22T17:05:30Z,111945,6,"<p>I also recommend <a href=""http://code.google.com/p/httplib2/"" rel=""nofollow"">httplib2</a> by Joe Gregario.  I use this regularly instead of httplib in the standard lib.</p>
"
116194,1065,2008-09-22T17:16:43Z,116139,4,"<p>A docx is just a zip archive with lots of files inside. Maybe you can look at some of the contents of those files? Other than that you probably have to find a lib that understands the word format so that you can filter out things you're not interested in.</p>

<p>A second choice would be to interop with word and do the search through it.</p>
"
116197,9611,2008-09-22T17:17:15Z,116139,2,"<p>a docx file is essentially a zip file with an xml inside it.<br />
the xml contains the formatting but it also contains the text.</p>
"
116199,455552,2008-09-22T17:17:26Z,116139,0,"<p>You should be able to use the MSWord ActiveX interface to extract the text to search (or, possibly, do the search). I have no idea how you access ActiveX from Python though.</p>
"
116217,15459,2008-09-22T17:22:10Z,116139,30,"<p>More exactly, a .docx document is a Zip archive in OpenXML format: you have first to uncompress it.<br />
I downloaded a sample (Google: <em>some search term filetype:docx</em>) and after unzipping I found some folders. The <em>word</em> folder contains the document itself, in file <em>document.xml</em>.</p>
"
116557,3275,2008-09-22T18:18:09Z,116494,0,"<p>Almost the same, but using non-greedy quantifiers and taking advantage of the whitespace sequence.</p>

<pre><code>\s*?\n\s*?\n\s*?
</code></pre>
"
116621,10661,2008-09-22T18:28:28Z,116494,2,"<p>Are you trying to deduce  the structure of a document in plain test?  Are you doing what <a href=""http://docutils.sourceforge.net/"" rel=""nofollow"">docutils</a> does?</p>

<p>You might be able to simply use the <a href=""http://docutils.sourceforge.net/docs/dev/hacking.html#parsing-the-document"" rel=""nofollow"">Docutils parser</a> rather than roll your own.</p>
"
116622,17875,2008-09-22T18:28:47Z,116494,3,"<p>Unfortunately there's no nice way to write ""space but not a newline"".</p>

<p>I think the best you can do is add some space with the <code>x</code> modifier and try to factor out the ugliness a bit, but that's questionable: <code>(?x)  (?: [ \t\r\f\v]*? \n ){2}  [ \t\r\f\v]*?</code></p>

<p>You could also try creating a subrule just for the character class and interpolating it three times.</p>
"
116901,1114,2008-09-22T19:19:30Z,116657,7,"<p>I don't know the correct way to do it, but this manual method is the approach I've used for simple scripts which seems to have preformed suitably.</p>

<p>I'll assume that whatever directory I'm in, the Python files for my program are in the relative <code>src/</code> directory, and that the file I want to execute (which has the proper shebang and execute permissions) is named <code>main.py</code>.</p>

<pre>
$ mkdir -p MyApplication.app/Contents/MacOS
$ mv src/* MyApplication.app/Contents/MacOS
$ cd MyApplication.app/Contents/MacOS
$ mv main.py MyApplication
</pre>

<p>At this point we have an application bundle which, as far as I know, should work on any Mac OS system with Python installed (which I think it has by default). It doesn't have an icon or anything, that requires adding some more metadata to the package which is unnecessary for my purposes and I'm not familiar with.</p>

<p>To create the drag-and-drop installer is quite simple. Use Disk Utility to create a New Disk Image of approximately the size you require to store your application. Open it up, copy your application and an alias of <code>/Applications</code> to the drive, then use View Options to position them as you want.</p>

<p>The drag-and-drop message is just a background of the disk image, which you can also specify in View Options. I haven't done it before, but I'd assume that after you whip up an image in your editor of choice you could copy it over, set it as the background and then use <code>chflags hidden</code> to prevent it from cluttering up your nice window.</p>

<p>I know these aren't the clearest, simplest or most detailed instructions out there, but I hope somebody may find them useful.</p>
"
116974,17160,2008-09-22T19:30:31Z,116894,1,"<p>Have you considered using an ORM? <a href=""http://www.sqlalchemy.org/features.html"" rel=""nofollow"" title=""SQL Alchemy features"">SQLAlchemy</a> is pretty good, and <a href=""http://elixir.ematia.de/trac/wiki"" rel=""nofollow"" title=""Elixir Wiki"">Elixir</a> makes it beautiful. It can really reduce the ammount of boilerplate code needed to deal with databases. Also, a lot of the <em>gotchas</em> mentioned have already shown up and the SQLAlchemy developers dealt with them.</p>
"
117012,7883,2008-09-22T19:35:55Z,116894,-2,"<p>Using a ORM for an iPhone app might be a bad idea because of performance issues, you want your code to be as fast as possible. So you can't avoid boilerplate code. If you are considering a ORM, besides SQLAlchemy I'd recommend Storm.</p>
"
117025,12138,2008-09-22T19:38:22Z,115316,2,"<p>It's not true SOAPpy does not work with Python 2.5 - it works, although it's very simple and really, really basic. If you want to talk to any more complicated webservice, ZSI is your only friend.</p>

<p>The really useful demo I found is at <a href=""http://www.ebi.ac.uk/Tools/webservices/tutorials/python"" rel=""nofollow"">http://www.ebi.ac.uk/Tools/webservices/tutorials/python</a> - this really helped me to understand how ZSI works.</p>
"
117047,14038,2008-09-22T19:42:41Z,117014,26,"<p>Try this:</p>

<pre><code>import os;
print os.environ.get( ""USERNAME"" )
</code></pre>

<p>That should do the job.</p>
"
117092,15079,2008-09-22T19:48:00Z,117014,1,"<p>I don't know Python, but for windows the underlying api is <a href=""http://msdn.microsoft.com/en-us/library/ms724435(VS.85).aspx"" rel=""nofollow"">GetUserNameEx</a>, I assume you can call that in Python if os.environ.get( ""USERNAME"" ) doesn't tell you everything you need to know.</p>
"
117095,12138,2008-09-22T19:48:45Z,114112,1,"<p>In my previous work we had real genius guy on deployment duties, he deployed application (Python, SQL, Perl and Java code) as set of deb files built for Ubuntu. Unfortunately now, I have no such support. We are deploying apps manually to virtualenv-ed environments with separate nginx configs for FastCGI. We use <a href=""http://www.blueskyonmars.com/projects/paver/"" rel=""nofollow"">paver</a> to deploy to remote servers.  It's painful, but it works.</p>
"
117174,17624,2008-09-22T19:58:10Z,117127,1,"<p>Functions are always executed in the scope they are defined in, as are methods and class bodies. They are never executed in another scope. Because importing is just another assignment statement, and everything in Python is a reference, the functions, classes and modules don't even know where they are imported to.</p>

<p>You can do two things: explicitly pass the 'environment' you want them to use, or use stack hackery to access their caller's namespace. The former is vastly preferred over the latter, as it's not as implementation-dependent and fragile as the latter.</p>

<p>You may wish to look at the string.Template class, which tries to do something similar.</p>
"
117176,12138,2008-09-22T19:58:20Z,115974,1,"<p>If you do not care for actual discussions (which tend to go offtopic and do not offer authoritative response), you can choose some library that will make your tast easier. I'd recomment taking a look at <a href=""http://www.livinglogic.de/Python/Download.html"" rel=""nofollow"">ll-xist</a>, this library contains large amount of life-saving code, like cron jobs helper, daemon framework, and (what is not interesting to you, but is really great) <em>object-oriented XSL</em> (ll-xist itself).</p>
"
117201,17624,2008-09-22T20:01:12Z,117167,10,"<p>The simplest method is the 'cgi' module:</p>

<pre><code>import cgi
data = cgi.FieldStorage()
data['bob']
</code></pre>

<p>But the context you are executing in (frameworks you're using, WSGI or even (heaven forbid) mod_python) may have different, more efficient or more direct methods of access.</p>
"
117256,9936,2008-09-22T20:07:20Z,117250,1,"<p>Try 4.0/100</p>
"
117257,13990,2008-09-22T20:07:27Z,117250,1,"<p>A simple route 4 / 100.0 </p>

<p>or</p>

<p>4.0 / 100</p>
"
117258,11834,2008-09-22T20:07:38Z,117250,3,"<p>You need to tell Python to use floating point values, not integers. You can do that simply by using a decimal point yourself in the inputs:</p>

<pre><code>&gt;&gt;&gt; 4/100.0
0.040000000000000001
</code></pre>
"
117264,9567,2008-09-22T20:08:15Z,117250,79,"<p>There are three options:</p>

<pre><code>&gt;&gt;&gt; 4 / float(100)
0.04
&gt;&gt;&gt; 4 / 100.0
0.04
</code></pre>

<p>which is the same behavior as the C, C++, Java etc, or </p>

<pre><code>&gt;&gt;&gt; from __future__ import division
&gt;&gt;&gt; 4 / 100
0.04
</code></pre>

<p>You can also activate this behavior by passing the argument <code>-Qnew</code> to the Python interpreter:</p>

<pre><code>$ python -Qnew
&gt;&gt;&gt; 4 / 100
0.04
</code></pre>

<p>The second option will be the default in Python 3.0. If you want to have the old integer division, you have to use the <code>//</code> operator. </p>

<p><strong>Edit</strong>: added section about <code>-Qnew</code>, thanks to <a href=""http://stackoverflow.com/users/6899/"">ΤΖΩΤΖΙΟΥ</a>!</p>
"
117270,17624,2008-09-22T20:08:45Z,117250,7,"<p>Make one or both of the terms a floating point number, like so:</p>

<pre><code>4.0/100.0
</code></pre>

<p>Alternatively, turn on the feature that will be default in Python 3.0, 'true division', that does what you want. At the top of your module or script, do:</p>

<pre><code>from __future__ import division
</code></pre>
"
117285,7883,2008-09-22T20:11:02Z,117250,0,"<p>You cant get a decimal value by dividing one integer with another, you'll allways get an integer that way (result truncated to integer). You need at least one value to be a decimal number.</p>
"
117299,12138,2008-09-22T20:12:40Z,115977,6,"<p>I resigned from using pylint/pychecker in favor of using pyflakes with Django code - it just tries to import module and reports any problem it finds, like unused imports or uninitialized local names.</p>
"
117384,3051,2008-09-22T20:24:50Z,117211,5,"<p>woo!
solved it on my own.</p>

<p>Use </p>

<pre><code>self.combo['selection']
</code></pre>

<p>instead of</p>

<pre><code>self.combo['value']
</code></pre>
"
117433,9567,2008-09-22T20:32:17Z,117127,1,"<p>In this example, you can simply hand over functions as objects to the methods in <code>C1</code>:</p>

<pre><code>&gt;&gt;&gt; class C1(object):
&gt;&gt;&gt;    def eval(self, x):
&gt;&gt;&gt;        x()
&gt;&gt;&gt;
&gt;&gt;&gt; def f2(): print ""go f2""
&gt;&gt;&gt; c = C1()
&gt;&gt;&gt; c.eval(f2)
go f2
</code></pre>

<p>In Python, you can pass functions and classes to other methods and invoke/create them there.</p>

<p>If you want to actually evaluate a code string, you have to specify the environment, as already mentioned by Thomas.</p>

<p>Your module from above, slightly changed:</p>

<pre><code>## File 1
def f1():  print ""go f1!""

class C1(object):
    def do_eval(self, x, e_globals = globals(), e_locals = locals()):
        eval(x, e_globals, e_locals)
</code></pre>

<p>Now, in the interactive interpreter:</p>

<pre><code>&gt;&gt;&gt; def f2():
&gt;&gt;&gt;    print ""go f2!""
&gt;&gt;&gt; from file1 import *    # 1
&gt;&gt;&gt; C1().do_eval(""f2()"")   # 2
NameError: name 'f2' is not defined

&gt;&gt;&gt; C1().do_eval(""f2()"", globals(), locals()) #3
go f2!
&gt;&gt;&gt; C1().do_eval(""f1()"", globals(), locals()) #4
go f1!
</code></pre>

<h2>Some annotations</h2>

<ol>
<li>Here, we insert all objects from <code>file1</code> into this module's namespace</li>
<li><code>f2</code> is not in the namespace of <code>file1</code>, therefore we get a <code>NameError</code></li>
<li>Now we pass the environment explictly, and the code can be evaluated</li>
<li><code>f1</code> is in the namespace of this module, because we imported it</li>
</ol>

<p><strong>Edit</strong>: Added code sample on how to explicitly pass environment for <code>eval</code>.</p>
"
117523,17624,2008-09-22T20:46:08Z,117514,9,"<p>The Python standard library doesn't contain timezone information, because unfortunately timezone data changes a lot faster than Python. You need a third-party module for this; the usual choice is <a href=""http://pytz.sourceforge.net"">pytz</a></p>
"
117532,19990,2008-09-22T20:47:15Z,113185,2,"<p>I don't think there is a clever way.  owpython doesn't support that telling from the API documentation.  I guess <code>/proc</code> is your safest bet.  Maybe have a look at the source of the owpython module and check if you can find out how it works.</p>
"
117543,5690,2008-09-22T20:48:51Z,117477,0,"<p><a href=""http://sphinx.pocoo.org/"" rel=""nofollow"">Sphinx</a> is a documentation generator using reStructuredText. It's quite nice,  although I haven't used it personally.</p>

<p>The website <a href=""http://sphinx.pocoo.org/"" rel=""nofollow"">Hazel Tree</a>, which compiles python text uses Sphinx, and so does the new Python documentation.</p>
"
117615,19990,2008-09-22T20:59:40Z,117514,36,"<p>I recommend <code>babel</code> and <code>pytz</code> when working with timezones.  Keep your internal datetime objects naive and in UTC and convert to your timezone for formatting only.  The reason why you probably want naive objects (objects without timezone information) is that many libraries and database adapters have no idea about timezones.</p>

<ul>
<li><a href=""http://babel.pocoo.org/"">Babel</a></li>
<li><a href=""http://pytz.sourceforge.net/"">pytz</a></li>
</ul>
"
117682,13564,2008-09-22T21:12:07Z,117250,21,"<p>Other answers suggest how to get a floating-point value.  While this wlil be close to what you want, it won't be exact:</p>

<pre><code>&gt;&gt;&gt; 0.4/100.
0.0040000000000000001
</code></pre>

<p>If you actually want a <em>decimal</em> value, do this:</p>

<pre><code>&gt;&gt;&gt; import decimal
&gt;&gt;&gt; decimal.Decimal('4') / decimal.Decimal('100')
Decimal(""0.04"")
</code></pre>

<p>That will give you an object that properly knows that 4 / 100 in <em>base 10</em> is ""0.04"".  Floating-point numbers are actually in base 2, i.e. binary, not decimal.</p>
"
117712,NA,2008-09-22T21:18:15Z,535,3,"<p>TeamCity has some Python <a href=""http://www.jetbrains.net/confluence/display/TW/Python+Unit+Test+Reporting"" rel=""nofollow"">integration</a>.</p>

<p>But TeamCity is:</p>

<ul>
<li>not open-source</li>
<li>is not small, but rather feature rich</li>
<li>is free for small-mid teams.</li>
</ul>
"
117769,15401,2008-09-22T21:30:03Z,116894,0,"<p>Depending on how much you want to do with the data you may not need to populate an intermediate object.  The cursor's header data structure will let you get the column names - a bit of introspection will let you make a dictionary with col-name:value pairs for the row.
You can pass the dictionary to the % operator.  The docs for the odbc module will explain how to get at the column metadata.</p>

<p>This snippet of code to shows the application of the % operator in this manner.</p>

<pre><code>&gt;&gt;&gt; a={'col1': 'foo', 'col2': 'bar', 'col3': 'wibble'}
&gt;&gt;&gt; 'Col1=%(col1)s, Col2=%(col2)s, Col3=%(col3)s' % a
'Col1=foo, Col2=bar, Col3=wibble'
&gt;&gt;&gt;
</code></pre>
"
117794,10661,2008-09-22T21:35:01Z,117732,5,"<p>Look closely at <a href=""http://www.sqlalchemy.org/"" rel=""nofollow"">SQLAlchemy</a>.  This can probably do much of what you want.  It gives you Python syntax for plain-old SQL that runs on the server.</p>
"
117806,10661,2008-09-22T21:38:16Z,117250,2,"<p>You might want to look at Python's <a href=""http://docs.python.org/lib/module-decimal.html"" rel=""nofollow"">decimal</a> package, also.  This will provide nice decimal results.</p>

<pre><code>&gt;&gt;&gt; decimal.Decimal('4')/100
Decimal(""0.04"")
</code></pre>
"
117818,2729,2008-09-22T21:40:10Z,117732,5,"<p>LINQ is a language feature of C# and VB.NET.  It is a special syntax recognized by the compiler and treated specially.  It is also dependent on another language feature called expression trees.</p>

<p>Expression trees are a <strong>little</strong> different in that they are not special syntax.  They are written just like any other class instantiation, but the compiler does treat them specially under the covers by turning a lambda into an instantiation of a run-time <a href=""http://en.wikipedia.org/wiki/Abstract_syntax_tree"">abstract syntax tree</a>.  These can be manipulated at run-time to produce a command in another language (i.e. SQL).</p>

<p>The C# and VB.NET compilers take LINQ syntax, and turn it into lambdas, then pass those into expression tree instantiations.  Then there are a bunch of framework classes that manipulate these trees to produce SQL.  You can also find other libraries, both MS-produced and third party, that offer ""LINQ providers"", which basically pop a different AST processer in to produce something from the LINQ other than SQL.</p>

<p>So one obstacle to doing these things in another language is the question whether they support run-time AST building/manipulation.  I don't know whether any implementations of Python or Boo do, but I haven't heard of any such features.</p>
"
117819,14232,2008-09-22T21:40:15Z,117477,1,"<p><p><a href=""http://www.freewisdom.org/projects/python-markdown/"" rel=""nofollow"">Markdown in python</a> is a python implementation of the <a href=""http://daringfireball.net/projects/markdown/"" rel=""nofollow"">perl based markdown</a> utility.</p>

<p><p>Markown converts various forms of structured text to valid html, and one of the supported forms is just plain ascii. Use is pretty <a href=""http://www.freewisdom.org/projects/python-markdown/Command_Line"" rel=""nofollow"">straight forward</a>.</p>

<pre><code>python markdown.py input_file.txt &gt; output_file.html
</code></pre>

<p>Markdown can be easily <a href=""http://www.freewisdom.org/projects/python-markdown/Using_as_a_Module"" rel=""nofollow"">called as a module</a> too:</p>

<pre><code>import markdown
html = markdown.markdown(your_text_string)
</code></pre>
"
117824,19990,2008-09-22T21:41:26Z,117477,14,"<p>Okay.  I found it now.  It's called <a href=""http://glyphobet.net/pottymouth/"">PottyMouth</a>.</p>
"
117994,10661,2008-09-22T22:23:44Z,116894,1,"<p>The empty Record class and the free-floating function that (generally) applies to an individual Record is a hint that you haven't designed your class properly.</p>

<pre><code>class Record( object ):
    """"""Assuming rtda and pnl must exist.""""""
    def __init__( self ):
        self.da= 0
        self.rt= 0
        self.rtda= 0 # or whatever
        self.pnl= None # 
        self.sink = None # Not clear what this is
    def setPnl( self, node_prices ):
        # fill RT and DA prices from the hash retrieved above
        # calculate dependent values: RT-DA and PNL
</code></pre>

<p>Now, your <code>calculate_pnl( records, node_prices )</code> is simpler and uses the object properly.</p>

<pre><code>def calculate_pnl( records, node_prices ):
    for record in records:
        record.setPnl( node_prices )
</code></pre>

<p>The point isn't to trivially refactor the code in small ways.</p>

<p>The point is this:  <strong>A Class Encapsulates Responsibility</strong>.</p>

<p>Yes, an empty-looking class <em>is</em> usually a problem.  It means the responsibilities are scattered somewhere else.</p>

<p>A similar analysis holds for the collection of records.  This is more than a simple list, since the collection -- as a whole -- has operations it performs.</p>

<p>The ""Request-Transform-Render"" isn't quite right.  You have a Model (the Record class).  Instances of the Model get built (possibly because of a Request.)  The Model objects are responsible for their own state transformations and updates.  Perhaps they get displayed (or rendered) by some object that examines their state.</p>

<p>It's that ""Transform"" step that often violates good design by scattering responsibility all over the place.  ""Transform"" is a hold-over from non-object design, where responsibility was a nebulous concept.</p>
"
118037,19990,2008-09-22T22:35:22Z,117986,2,"<p>That shouldn't be too hard to write yourself as long as you only need the headers.  Try that:</p>

<pre><code>import sys

def log_headers(app, stream=None):
    if stream is None:
        stream = sys.stdout
    def proxy(environ, start_response):
        for key, value in environ.iteritems():
            if key.startswith('HTTP_'):
                stream.write('%s: %s\n' % (key[5:].title().replace('_', '-'), value))
        return app(environ, start_response)
    return proxy
</code></pre>
"
118110,893,2008-09-22T22:56:56Z,118096,5,"<p>You may also want to consider the <a href=""http://docs.python.org/lib/module-csv.html"" rel=""nofollow"">csv</a> module. I haven't tried it, but it looks like your input data is closer to CSV than to shell syntax (which is what shlex parses).</p>
"
118132,19990,2008-09-22T23:02:31Z,118096,1,"<p>You could do something like this:</p>

<pre><code>&gt;&gt;&gt; import re
&gt;&gt;&gt; pattern = re.compile(r'\s*(""[^""]*""|.*?)\s*,')
&gt;&gt;&gt; def split(line):
...  return [x[1:-1] if x[:1] == x[-1:] == '""' else x
...          for x in pattern.findall(line.rstrip(',') + ',')]
... 
&gt;&gt;&gt; split(""foo, bar, baz"")
['foo', 'bar', 'baz']
&gt;&gt;&gt; split('foo, bar, baz, ""blub blah""')
['foo', 'bar', 'baz', 'blub blah']
</code></pre>
"
118136,9825,2008-09-22T23:03:32Z,116139,1,"<p>OLE Automation would probably be the easiest.  You have to consider formatting, because the text could look like this in the XML:</p>

<pre><code>&lt;b&gt;Looking &lt;i&gt;for&lt;/i&gt; this &lt;u&gt;phrase&lt;/u&gt;
</code></pre>

<p>There's no easy way to find that using a simple text scan.</p>
"
118142,19435,2008-09-22T23:05:34Z,117986,2,"<p>The middleware</p>

<pre><code>from wsgiref.util import request_uri
import sys

def logging_middleware(application, stream=sys.stdout):
    def _logger(environ, start_response):
        stream.write('REQUEST\n')
        stream.write('%s %s\n' %(
            environ['REQUEST_METHOD'],
            request_uri(environ),
        ))

        for name, value in environ.items():
            if name.startswith('HTTP_'):
                stream.write('    %s: %s\n' %(
                    name[5:].title().replace('_', '-'),
                    value,
                ))
        stream.flush()
        def _start_response(code, headers):
            stream.write('RESPONSE\n')
            stream.write('%s\n' % code)
            for data in headers:
                stream.write('    %s: %s\n' % data)
            stream.flush()
            start_response(code, headers)
        return application(environ, _start_response)
    return _logger
</code></pre>

<p>The test</p>

<pre><code>def application(environ, start_response):
    start_response('200 OK', [
        ('Content-Type', 'text/html')
    ])
    return ['Hello World']

if __name__ == '__main__':
    logger = logging_middleware(application)
    from wsgiref.simple_server import make_server
    httpd = make_server('', 1234, logger)
    httpd.serve_forever()
</code></pre>

<p>See also the <a href=""http://werkzeug.pocoo.org/documentation/debug"" rel=""nofollow"">werkzeug debugger</a> Armin wrote, it's usefull for interactive debugging.</p>
"
118161,20330,2008-09-22T23:09:25Z,118096,-2,"<p>If it doesn't need to be pretty, this might get you on your way:</p>

<pre><code>def f(s, splitifeven):
    if splitifeven &amp; 1:
        return [s]
    return [x.strip() for x in s.split("","") if x.strip() != '']

ss = 'foo, bar, ""one, two"", three four'

print sum([f(s, sie) for sie, s in enumerate(ss.split('""'))], [])
</code></pre>
"
118162,20789,2008-09-22T23:09:45Z,118096,39,"<p>It depends how complicated you want to get... do you want to allow more than one type of quoting.  How about escaped quotes?</p>

<p>Your syntax looks very much like the common CSV file format, which is supported by the Python standard library:</p>

<pre><code>import csv
reader = csv.reader(['''foo, bar, ""one, two"", three four'''], skipinitialspace=True)
for r in reader:
  print r
</code></pre>

<p>Outputs:</p>

<pre><code>['foo', 'bar', 'one, two', 'three four']
</code></pre>

<p>HTH!</p>
"
118163,17160,2008-09-22T23:10:13Z,118143,7,"<p>It works for me. You must be doing something wrong.</p>

<pre><code>&gt;&gt;&gt; re.match(r'(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)', '127.255.0.0').groups()
('127', '255', '0', '0')
</code></pre>

<p>Don't forget to escape the regex using raw strings: <code>r'regex_here'</code> as stated in the <a href=""http://docs.python.org/dev/howto/regex.html"" rel=""nofollow"">Regex Howto</a></p>
"
118165,19990,2008-09-22T23:10:35Z,118143,1,"<p>That regular expression matches here, no idea what you are doing wrong:</p>

<pre><code>&gt;&gt;&gt; import re
&gt;&gt;&gt; x = re.compile(r'(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|'
... r'2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9]'
... r'[0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)')
&gt;&gt;&gt; x.match(""127.0.0.1"")
&lt;_sre.SRE_Match object at 0x5a8860&gt;
&gt;&gt;&gt; x.match(""127.255.0.1"")
&lt;_sre.SRE_Match object at 0x5a8910&gt;
&gt;&gt;&gt; x.match(""127.255.0.0"")
&lt;_sre.SRE_Match object at 0x5a8860&gt;
</code></pre>

<p>Please note that <code>preg_match</code> translates to <code>re.search</code> in Python and not <code>re.match</code>.  <code>re.match</code> is for useful for lexing because it's anchored.</p>
"
118175,4966,2008-09-22T23:12:59Z,116139,14,"<p>In this example, ""Course Outline.docx"" is a Word 2007 document, which does contain the word ""Windows"", and does not contain the phrase ""random other string"".</p>

<pre><code>&gt;&gt;&gt; import zipfile
&gt;&gt;&gt; z = zipfile.ZipFile(""Course Outline.docx"")
&gt;&gt;&gt; ""Windows"" in z.read(""word/document.xml"")
True
&gt;&gt;&gt; ""random other string"" in z.read(""word/document.xml"")
False
&gt;&gt;&gt; z.close()
</code></pre>

<p>Basically, you just open the docx file (which is a zip archive) using <a href=""http://docs.python.org/lib/module-zipfile.html"">zipfile</a>, and find the content in the 'document.xml' file in the 'word' folder.  If you wanted to be more sophisticated, you could then <a href=""http://docs.python.org/lib/module-xml.etree.ElementTree.html"">parse the XML</a>, but if you're just looking for a phrase (which you know won't be a tag), then you can just look in the XML for the string.</p>
"
118180,13491,2008-09-22T23:14:25Z,118143,1,"<p><a href=""http://www.regular-expressions.info/php.html"" rel=""nofollow"">PHP</a> uses 3 different flavors of regex, while python uses only one. I don't code in python, so I make no expert claims on how it uses REGEX. <a href=""http://oreilly.com/catalog/9781565922570/"" rel=""nofollow"">O'Reilly Mastering Regular Expressions</a> is a great book, as most of their works are.</p>
"
118181,893,2008-09-22T23:14:34Z,118143,4,"<p>I would suggest that using a regex for decimal range validation is not necessarily the correct answer for this problem. This is far more readable:</p>

<pre><code>def valid_ip(s):
    m = re.match(r""(\d+)\.(\d+)\.(\d+)\.(\d+)$"", s)
    if m is None:
        return False
    parts = [int(m.group(1+x)) for x in range(4)]
    if max(parts) &gt; 255:
        return False
    return True
</code></pre>
"
118182,4668,2008-09-22T23:14:43Z,118143,2,"<p>Without further details, I'd guess it's quote escaping of some kind.  Both PHP and python's RegEX objects take strings as arguments.  These strings will be escaped by the languge before being passed on to the RegEx engine.</p>

<p>I always using Python's ""raw"" string format when working with regular expressions.  It ensure that ""<a href=""http://www.amk.ca/python/howto/regex/"" rel=""nofollow"">backslashes are not handled in any special way</a>""</p>

<pre><code>r'(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)'
</code></pre>
"
118187,17160,2008-09-22T23:15:45Z,118096,21,"<p>The shlex module solution allows escaped quotes, one quote escape another, and all fancy stuff shell supports.</p>

<pre><code>&gt;&gt;&gt; import shlex
&gt;&gt;&gt; my_splitter = shlex.shlex('''foo, bar, ""one, two"", three four''', posix=True)
&gt;&gt;&gt; my_splitter.whitespace += ','
&gt;&gt;&gt; my_splitter.whitespace_split = True
&gt;&gt;&gt; print list(my_splitter)
['foo', 'bar', 'one, two', 'three', 'four']
</code></pre>

<p>escaped quotes example:</p>

<pre><code>&gt;&gt;&gt; my_splitter = shlex.shlex('''""test, a"",'foo,bar"",baz',bar \xc3\xa4 baz''',
                              posix=True) 
&gt;&gt;&gt; my_splitter.whitespace = ',' ; my_splitter.whitespace_split = True 
&gt;&gt;&gt; print list(my_splitter)
['test, a', 'foo,bar"",baz', 'bar \xc3\xa4 baz']
</code></pre>
"
118216,20789,2008-09-22T23:27:06Z,63086,0,"<p>Nope, there's no way around it, and it's by design:</p>

<pre><code>&gt;&gt;&gt; from __future__ import braces
  File ""&lt;stdin&gt;"", line 1
SyntaxError: not a chance
</code></pre>

<p>Most Python programmers simply don't use tabs, but use spaces to indent instead, that way there's no editor-to-editor inconsistency.</p>
"
118227,3560,2008-09-22T23:30:39Z,118221,1,"<p>Are these other applications running in another address space? If so, you'll need to use an interprocess communication library like <a href=""http://www.freedesktop.org/wiki/Software/dbus"" rel=""nofollow"">D-BUS</a>.</p>

<p>If you're just sending signals in the same process, try <a href=""http://pypi.python.org/pypi/PyDispatcher/2.0.1"" rel=""nofollow"">PyDispatcher</a></p>
"
118228,20789,2008-09-22T23:30:44Z,118221,0,"<p>What platform are you running under?  GObject is the basis of the GTK GUI that's widely-used under Linux, and it supports event loops with prioritizable events like this.</p>
"
118236,4966,2008-09-22T23:34:51Z,115866,3,"<p>If you don't want to have MySQL do the work for some reason, then you can do this in Python easily enough.  When you get a datetime column back from MySQLdb, you get a Python datetime.datetime object.  To convert one of these, you can use time.mktime.  For example:</p>

<pre><code>import time
# Connecting to database skipped (also closing connection later)
c.execute(""SELECT my_datetime_field FROM my_table"")
d = c.fetchone()[0]
print time.mktime(d.timetuple())
</code></pre>
"
118275,19435,2008-09-22T23:49:11Z,118260,53,"<p>There's a file called idle.py in your Python installation directory in Lib\idlelib\idle.py</p>

<p>If you run that file with Python, then IDLE should start.</p>

<blockquote>
  <p>c:\Python25\pythonw.exe c:\Python25\Lib\idlelib\idle.py</p>
</blockquote>
"
118308,11292,2008-09-22T23:56:03Z,118260,8,"<p>Here's another path you can use.  I'm not sure if this is part of the standard distribution or if the file is automatically created on first use of the IDLE.</p>

<pre><code>C:\Python25\Lib\idlelib\idle.pyw
</code></pre>
"
118350,4966,2008-09-23T00:11:39Z,117732,4,"<p>I believe that when IronPython 2.0 is complete, it will have LINQ support (see <a href=""http://groups.google.com/group/ironpy/browse_thread/thread/eb6b9eb2241cc68e"" rel=""nofollow"">this thread</a> for some example discussion).  Right now you should be able to write something like:</p>

<pre><code>Queryable.Select(Queryable.Where(someInputSequence, somePredicate), someFuncThatReturnsTheSequenceElement)
</code></pre>

<p>Something better might have made it into IronPython 2.0b4 - there's a lot of <a href=""http://ironpython-urls.blogspot.com/2008/09/dlr-namespace-change-fire-drill.html"" rel=""nofollow"">current discussion</a> about how naming conflicts were handled.</p>
"
118375,16361,2008-09-23T00:17:58Z,115977,7,"<p>This is not a solution, but you can add <code>objects = models.Manager()</code> to your Django models without changing any behavior.</p>

<p>I myself only use pyflakes, primarily due to some dumb defaults in pylint and laziness on my part (not wanting to look up how to change the defaults).</p>
"
118395,17160,2008-09-23T00:24:21Z,118370,70,"<p>You'd use it in your own class, since no builtin class makes use of it.</p>

<p>Numpy uses it, as stated in the <a href=""http://wiki.scipy.org/Numpy_Example_List_With_Doc#head-490d781b49b68b300eedaef32369fae7d58627fb"">documentation</a>. Some examples <a href=""http://wiki.scipy.org/Tentative_NumPy_Tutorial#head-864862d3f2bb4c32f04260fac61eb4ef34788c4c"">here</a>.</p>

<p>In your own class, you'd use it like this:</p>

<pre><code>&gt;&gt;&gt; class TestEllipsis(object):
...     def __getitem__(self, item):
...         if item is Ellipsis:
...             return ""Returning all items""
...         else:
...             return ""return %r items"" % item
... 
&gt;&gt;&gt; x = TestEllipsis()
&gt;&gt;&gt; print x[2]
return 2 items
&gt;&gt;&gt; print x[...]
Returning all items
</code></pre>

<p>Of course, there is the <a href=""https://docs.python.org/library/constants.html#Ellipsis"">python documentation</a>, and <a href=""https://docs.python.org/reference/expressions.html#grammar-token-slicing"">language reference</a>. But those aren't very helpful. </p>
"
118462,17160,2008-09-23T00:43:42Z,118458,7,"<p>Using the <code>csv</code> module you can do that way:</p>

<pre><code>import csv
writer = csv.writer(open(""some.csv"", ""wb""))
writer.writerow(the_list)
</code></pre>

<p>If you need a string just use <code>StringIO</code> instance as a file:</p>

<pre><code>f = StringIO.StringIO()
writer = csv.writer(f)
writer.writerow(the_list)
print f.getvalue()
</code></pre>

<p>The output: <code>a,""one """"two"""" three"",""foo, bar"",""both""""'""</code></p>

<p><code>csv</code> will write in a way it can read back later.
You can fine-tune its output by defining a <code>dialect</code>, just set <code>quotechar</code>, <code>escapechar</code>, etc, as needed:</p>

<pre><code>class SomeDialect(csv.excel):
    delimiter = ','
    quotechar = '""'
    escapechar = ""\\""
    doublequote = False
    lineterminator = '\n'
    quoting = csv.QUOTE_MINIMAL

f = cStringIO.StringIO()
writer = csv.writer(f, dialect=SomeDialect)
writer.writerow(the_list)
print f.getvalue()
</code></pre>

<p>The output: <code>a,one \""two\"" three,""foo, bar"",both\""'</code></p>

<p>The same dialect can be used with csv module to read the string back later to a list.</p>
"
118496,20842,2008-09-23T00:52:48Z,117732,6,"<p><a href=""http://www.sqlalchemy.org/trac/wiki/SqlSoup"" rel=""nofollow"">sqlsoup</a> in sqlalchemy gives you the quickest solution in python I think if you want a clear(ish) one liner . Look at the page to see.</p>

<p>It should be something like...</p>

<pre><code>result = [n.Number for n in db.Numbers.filter(db.Numbers.Number &lt; 5).all()]
</code></pre>
"
118507,19369,2008-09-23T00:54:58Z,118467,0,"<p>The better method is to use the ZSI soap module which allows you to take a WDSL file and turn it into classes and methods that you can then use to call it. The online documentation is <a href=""http://pywebsvcs.sourceforge.net/zsi.html#SECTION0012300000000000000000"" rel=""nofollow""> on their website</a> but the latest documentation is more easily found in the source package. If you install in Debian/Ubuntu (package name python-zsi) the documentation is in /usr/share/doc/python-zsi in a pair of PDFs you can find in there.</p>
"
118508,9567,2008-09-23T00:55:09Z,118370,159,"<p>The ellipsis is used to slice higher-dimensional data structures. </p>

<p>It's designed to mean <em>at this point, insert as many full slices (<code>:</code>) to extend the multi-dimensional slice to all dimensions</em>.</p>

<p><strong>Example</strong>:</p>

<pre><code>&gt;&gt;&gt; from numpy import arange
&gt;&gt;&gt; a = arange(16).reshape(2,2,2,2)
</code></pre>

<p>Now, you have a 4-dimensional matrix of order 2x2x2x2. To select all first elements in the 4th dimension, you can use the ellipsis notation</p>

<pre><code>&gt;&gt;&gt; a[..., 0].flatten()
array([ 0,  2,  4,  6,  8, 10, 12, 14])
</code></pre>

<p>which is equivalent to</p>

<pre><code>&gt;&gt;&gt; a[:,:,:,0].flatten()
array([ 0,  2,  4,  6,  8, 10, 12, 14])
</code></pre>

<p>In your own implementations, you're free to ignore the contract mentioned above and use it for whatever you see fit.</p>
"
118586,699,2008-09-23T01:14:51Z,118516,0,"<p>Well here is some code that I did: (look down the bottom): <a href=""http://anonsvn.labs.jboss.com/labs/jbossrules/trunk/drools-decisiontables/src/main/resources/python-dt/pydt.py"" rel=""nofollow"">here</a></p>

<p>Not sure about the newer formats - if xlrd can't read it, xlrd needs to have a new version released !</p>
"
118625,10661,2008-09-23T01:26:34Z,118458,1,"<p>Here's a slightly simpler alternative.</p>

<pre><code>def quote(s):
    if ""'"" in s or '""' in s or "","" in str(s):
        return repr(s)
    return s
</code></pre>

<p>We only need to quote a value that might have commas or quotes.</p>

<pre><code>&gt;&gt;&gt; x= ['a', 'one ""two"" three', 'foo, bar', 'both""\'']
&gt;&gt;&gt; print "", "".join( map(quote,x) )
a, 'one ""two"" three', 'foo, bar', 'both""\''
</code></pre>
"
118645,712,2008-09-23T01:33:59Z,118540,0,"<p>Do you have a typo in positionChanged() ?</p>

<pre><code>def positionChanged(self, newPos):
    self.snappedPos = snapToGrid(newPos, Y_OFFSET, Y_STEP)
</code></pre>

<p>I guess you are off by one pixel because of the accuracy problems during float division. Try changing your snapToGrid() to this:</p>

<pre><code>def snapToGrid(originalPos, offset, step):
    EPS = 1e-6
    index = int((originalPos - offset) / step  + EPS) #truncates the remainder away
    return index * gap + offset
</code></pre>
"
118647,3560,2008-09-23T01:34:37Z,118591,2,"<p>That's not a Bash command, it's a <code>find</code> command. If you really want to port it to Python it's possible, but you'll never be able to write a Python version that's as concise. <code>find</code> has been optimized over 20 years to be excellent at manipulating filesystems, while Python is a general-purpose programming language.</p>
"
118651,20010,2008-09-23T01:35:23Z,118643,10,"<p>I personally doubt that there currently is at the moment, as a lot of the Python afficionados love the fact that Python is this way, whitespace delimited.</p>

<p>I've never actually thought about that as an accessibility issue however. Maybe it's something to put forward as a bug report to Python?</p>

<p>I'd assume that you use a screen reader here however for the output? So the tabs would seem ""invisible"" to you? With a Braille output, it might be easier to read, but I can understand exactly how confusing this could be.</p>

<p>In fact, this is very interesting to me. I wish that I knew enough to be able to write an app that will do this for you. </p>

<p>I think it's definately something that I'll put in a bug report for, unless you've already done so yourself, or want to.</p>

<p>Edit: Also, as <a href=""http://stackoverflow.com/questions/118643#118656"">noted</a> by <a href=""http://stackoverflow.com/users/3560/john-millikin"">John Millikin</a> There is also <a href=""http://timhatch.com/projects/pybraces/"">PyBraces</a> Which might be a viable solution to you, and may be possible to be hacked together dependant on your coding skills to be exactly what you need (and I hope that if that's the case, you release it out for others like yourself to use)</p>

<p>Edit 2: I've just <a href=""http://bugs.python.org/issue3942"">reported this</a> to the python bug tracker</p>
"
118656,3560,2008-09-23T01:38:10Z,118643,6,"<p>You should be able to configure your editor to speak the tabs and spaces -- I know it's possible to <em>display</em> whitespace in most editors, so there must be an accessibility option somewhere to speak them.</p>

<p>Failing that, there is <a href=""http://timhatch.com/projects/pybraces/"" rel=""nofollow"">pybraces</a>, which was written as a practical joke but might actually be useful to you with a bit of work.</p>
"
118658,17095,2008-09-23T01:38:31Z,118591,0,"<pre><code>import os, stat
os.stat(""test"")[stat.ST_MTIME]
</code></pre>

<p>Will give you the mtime. I suggest fixing those in <code>walk_results[2]</code>, and then recursing, calling the function for each dir in <code>walk_results[1]</code>.</p>
"
118671,4977,2008-09-23T01:42:48Z,118654,0,"<p>I haven't tested it, but I'd say it'll most likely work with the latest IPy2.</p>

<p>As for distribution, it's very simple.  Use the -X:SaveAssemblies option to compile your Python code down to a binary and then ship it with your other DLLs and the IPy dependencies.</p>
"
118676,6152,2008-09-23T01:43:21Z,118643,4,"<p>I appreciate your problem, but think you are specifying the implementation instead of the problem you need solved.  Instead of converting to braces, how about working on a way for your screen reader to tell you the indentation level?
<p>
For example, <a href=""http://viming.blogspot.com/2007/02/indent-level-highlighting.html"" rel=""nofollow"">some people</a> have worked on vim syntax coloring to represent python indentation levels.  Perhaps a modified syntax coloring could produce something your screen reader would read?</p>
"
118680,18515,2008-09-23T01:43:40Z,118654,5,"<p>If BeautifulSoup doesn't work on IronPython, it's because IronPython doesn't implement the whole Python language (the same way CPython does). BeautifulSoup is pure-python, no C-extensions, so the only problem is the compatibility of IronPython with CPython in terms of Python source code.There shouldn't be one, but if there is, the error will be obvious (""no module named ..."", ""no method named ..."", etc.). Google says that only one of BS's tests fails with IronPython. it probably works, and that test may be fixed by now. I wouldn't know.</p>

<p>Try it out and see, would be my advice, unless anybody has anything more concrete.</p>
"
118706,6173,2008-09-23T01:51:53Z,118643,9,"<p>Although I am not blind, I have heard good things about <a href=""http://emacspeak.sourceforge.net/"">Emacspeak</a>. They've had a Python mode since their <a href=""http://emacspeak.sourceforge.net/releases/release-8.0.html"">8.0 release</a> in 1998 (they seem to be up to release 28.0!). Definitely worth checking out.</p>
"
118713,6173,2008-09-23T01:53:58Z,118654,8,"<p>I've tested and used BeautifulSoup with both IPy 1.1 and 2.0 (forget which beta, but this was a few months back). Leave a comment if you are still having trouble and I'll dig out my test code and post it.</p>
"
118738,14648,2008-09-23T02:02:25Z,118643,24,"<p>Python supports braces for defining code blocks, and it also supports using 'begin' and 'end' tags.</p>

<p>Please see these code examples:</p>

<pre><code>class MyClass(object): #{
    def myfunction(self, arg1, arg2): #{
        for i in range(arg1): #{ 
            print i
        #}
    #}
#}
</code></pre>

<p>And an example with bash style:</p>

<pre><code>fi = endclass = enddef = endclass = done = None
class MyClass(object):
    def myfunction(self, arg1, arg2):
        for i in range(arg1): #do
            if i &gt; 5: #then
                print i
            fi
        done
    enddef
endclass
</code></pre>

<p>The best thing about this is is that you can forget to put a close bracket in, and it's still valid python!</p>

<pre><code>class MyClass(object): #{
    def myfunction(self, arg1, arg2): #{
        for i in range(arg1): #{ 
            print i
        # whoops, forgot to close that bracket!
    #}
#}
</code></pre>

<p><a href=""http://www.python.org/doc/humor/#python-block-delimited-notation-parsing-explained"" rel=""nofollow"">original gag</a></p>

<p>My real advice is to get a Braille display if you can afford one/source one - blind python programmers of my acquaintance really found a Braille display indispensable for writing python programs, it makes the indentation thing much less painful. A 40 cell display is well worth it.</p>
"
118744,8819,2008-09-23T02:04:01Z,118643,52,"<p>There's a solution to your problem that is distributed with python itself. <code>pindent.py</code>, it's located in the Tools\Scripts directory in a windows install (my path to it is C:\Python25\Tools\Scripts), it looks like you'd have grab it from svn.python.org if you are running on Linux or OSX. </p>

<p>It adds comments when blocks are closed, or can properly indent code if comments are put in. Here's an example of the code outputted by pindent with the command:</p>

<p><code>pindent -c myfile.py</code></p>

<pre><code>def foobar(a, b):
   if a == b:
       a = a+1
   elif a &lt; b:
       b = b-1
       if b &gt; a: a = a-1
       # end if
   else:
       print 'oops!'
   # end if
# end def foobar
</code></pre>

<p>Where the original <code>myfile.py</code> was: </p>

<pre><code>def foobar(a, b):
   if a == b:
       a = a+1
   elif a &lt; b:
       b = b-1
       if b &gt; a: a = a-1
   else:
       print 'oops!'
</code></pre>

<p>You can also use <code>pindent.py -d</code> to insert the correct indentation based on comments (read the header of pindent.py for details), this should allow you to code in python without worrying about indentation.</p>

<p>I'd be interested to learn what solution you end up using, if you require any further assistance, please comment on this post and I'll try to help.</p>
"
118803,15154,2008-09-23T02:33:40Z,118516,-1,"<p>Do you have to use xlrd?  I just downloaded 'UPDATED - Dow Jones Industrial Average Movers - 2008' from that website and had no trouble reading it with <a href=""http://sourceforge.net/projects/pyexcelerator"" rel=""nofollow"">pyExcelerator</a>.</p>

<pre><code>import pyExcelerator
book = pyExcelerator.parse_xls('DJIAMovers.xls')
</code></pre>
"
118817,15464,2008-09-23T02:39:18Z,118591,5,"<pre><code>import os
import shutil
from os import path
from os.path import join, getmtime
from time import time

archive = ""bak""
current = ""cur""

def archive_old_versions(days = 3):
    for root, dirs, files in os.walk(current):
        for name in files:
            fullname = join(root, name)
            if (getmtime(fullname) &lt; time() - days * 60 * 60 * 24):
                shutil.move(fullname, join(archive, name))
</code></pre>
"
118820,893,2008-09-23T02:40:05Z,118813,22,"<p>I have both installed:</p>

<pre><code>$ which python
/usr/bin/python
$ which python2.5
/opt/local/bin/python2.5
</code></pre>

<p>I also added the following line to my <code>.profile</code>:</p>

<pre><code>export PATH=/opt/local/bin:/opt/local/sbin:$PATH
</code></pre>
"
118821,3560,2008-09-23T02:40:13Z,118813,4,"<p>Instead of uninstalling the built-in Python, install the MacPorts version and then modify your <code>$PATH</code> to have the MacPorts version first.</p>

<p>For example, if MacPorts installs <code>/usr/local/bin/python</code>, then modify your <code>.bashrc</code> to include <code>PATH=/usr/local/bin:$PATH</code> at the end.</p>
"
118823,8297,2008-09-23T02:41:15Z,118813,3,"<p>I wouldn't uninstall it since many scripts will expect python to be in the usual places when they do not follow  convention and use <code>#!/usr/bin/env python</code>. You should simply edit your <code>.profile</code> or <code>.bash_profile</code> so the macports binaries are the first in your path.</p>

<p>Your <code>.profile</code> should have this line: </p>

<pre><code>export PATH=/opt/local/bin:/opt/local/sbin:$PATH
</code></pre>

<p>If not, add it in, and now your shell will search macport's <code>bin/</code> first, and should find macports python before system python.</p>
"
118824,18184,2008-09-23T02:41:53Z,118813,29,"<p>Don't. Apple ships various system utilities that rely on the system Python (and particularly the Python ""framework"" build); removing it will cause you problems.</p>

<p>Instead, modify your PATH environ variable in your <code>~/.bash_profile</code> to put <code>/opt/local/bin</code> first.</p>
"
118828,712,2008-09-23T02:44:10Z,108822,4,"<p>The <a href=""http://groups.google.com/group/google-appengine/browse_thread/thread/ec0800a3ca92fe69#"" rel=""nofollow"">official answer</a> from Google is that you have to delete in chunks spread over multiple requests. You can use AJAX, <a href=""http://en.wikipedia.org/wiki/Meta_refresh"" rel=""nofollow"">meta refresh</a>, or request your URL from a script until there are no entities left.</p>
"
118847,NA,2008-09-23T02:54:08Z,118540,0,"<p>Thanks for the answer, there may be a typo, but I can't see it...</p>

<p>Unfortunately the change to snapToGrid didn't make a difference, so I don't think that's the issue.</p>

<p>It's not off by one pixel, but rather it's off by Y_STEP.  Playing around with it some more I've found that I can't get it to be exact at any point that the screen is scrolled up and also that it happens towards the top of the screen, which I suspect is ODE position zero, so I'm guessing my problem is around small or negative values.</p>
"
118879,17160,2008-09-23T03:05:37Z,118591,3,"<pre><code>import subprocess
subprocess.call(['find', '~/podcasts/current', '-mindepth', '2', '-mtime', '+5',
                 '-exec', 'mv', '{}', '~/podcasts/old', ';'], shell=True)
</code></pre>

<p>That is not a joke. This python script will do exactly what the bash one does.</p>

<p><strong>EDIT</strong>: Dropped the backslash on the last param because it is not needed.</p>
"
119022,NA,2008-09-23T03:56:48Z,118540,1,"<p>Ok, I'm answering my own question here, as alexk mentioned, using int to truncate was my mistake.  </p>

<p>The behaviour I'm after is best modeled by math.floor().</p>

<p>Apologies, the original question does not contain enough information to really work out what the problem is.  I didn't have the extra bit of information at that point.</p>

<p>With regards to the typo note, I think I may be using the context in a confusing manner...  From the perspective of the positionChanged() function, the parameter is a new position coming in.<br />
From the perspective of the snapToGrid() function the parameter is an original position which is being changed to a snapped position.
The language is like that because part of it is in my event handling code and the other part is in my general services code.  I should have changed it for the example</p>
"
119178,712,2008-09-23T04:47:51Z,119167,63,"<p>All imports in <code>__init__.py</code> are made available when you import the package (directory) that contains it.</p>

<p>Example:</p>

<p><code>./dir/__init__.py</code>:</p>

<pre><code>import something
</code></pre>

<p><code>./test.py</code>:</p>

<pre><code>import dir
# can now use dir.something
</code></pre>

<p>EDIT: forgot to mention, the code in <code>__init__.py</code> runs the first time you import any module from that directory. So it's normally a good place to put any package-level initialisation code.</p>

<p>EDIT2: dgrant pointed out to a possible confusion in my example. In <code>__init__.py</code> <code>import something</code> can import any module, not necessary from the package. For example, we can replace it with <code>import datetime</code>, then in our top level <code>test.py</code> both of these snippets will work:</p>

<pre><code>import dir
print dir.datetime.datetime.now()
</code></pre>

<p>and</p>

<pre><code>import dir.some_module_in_dir
print dir.datetime.datetime.now()
</code></pre>

<p>The bottom line is: all names assigned in <code>__init__.py</code>, be it imported modules, functions or classes, are automatically available in the package namespace whenever you import the package or a module in the package.</p>
"
119205,372,2008-09-23T04:55:35Z,119198,1,"<p>Depends on what you will use it for. If you're making enterprise Windows forms applications, I don't think switching to Python would be a good idea.</p>

<p>Also, it is possible to still use Python on the .NET CLR with IronPython.</p>
"
119208,12702,2008-09-23T04:56:18Z,119198,1,"<p>Both are useful for different purposes.  C# is a pretty good all-rounder, python's dynamic nature makes it more suitable for RAD experiences such as site building.  </p>

<p>I don't think your career will suffer if you were competant in both.  To get going with Python consider an IDE with Python support such as Eclipse+PyDev or ActiveIDE's Komodo.  (I found a subscription to Safari Bookshelf online really invaluable too!)</p>
"
119215,712,2008-09-23T04:59:52Z,119198,1,"<p>What's better is inherently subjective. If you like Python's syntax - learn it. It will probably be harder to find a Python job, C# and .NET in general seem to be more popular, but this may change.</p>

<p>I also think it's worth to know at least one scripting language, even if your main job doesn't require it. Python is not a bad candidate.</p>
"
119219,20164,2008-09-23T05:02:16Z,119198,5,"<p>Personally I feel you can write good/bad code in any language. I also firmly believe in learning a <a href=""http://www.linuxjournal.com/article/6536"" rel=""nofollow"">new language every so often</a> for the sake of learning itself. On those grounds I say if you have the time just go for it. Python is a great language that many others are inspired from.</p>

<p>Whether one framework or language is better or not depends on your definition of better. Do you want more work as a programmer? Do you want to develop business apps quickly, or do you want to compute 3D matrix transformations? </p>

<p>Once you've answered those questions you might find yourself taking a completely different direction, say F# if you had particular interest in the financial or scientific sector.</p>
"
119224,10427,2008-09-23T05:03:23Z,119198,3,"<p>It can't hurt to learn Python, especially considering some of the heavy weights (Google) are really getting behind it.</p>

<p>As for the actual use, it all depends on the application.  Use the best tool for the job.</p>
"
119232,10167,2008-09-23T05:05:53Z,119198,15,"<p>Yes, you should learn Python, but it has nothing to do with Python or C# being better.  It is really about making you a better programmer.</p>

<p>Learning Python will give you a whole new perspective on programmer and how problems can be solved.  It's like lifting weights, except you're building up the developer muscles in your mind.  </p>

<p>For example, if you've only ever programmed using a statically typed language then it is hard to imagine any other way.  Learning Python will teach you that there is an alternative in the form of dynamic typing.</p>

<p>For a summary of Pythons benefits:
<a href=""http://www.cmswire.com/cms/enterprise-20/2007s-programming-language-of-the-year-is-002221.php"">http://www.cmswire.com/cms/enterprise-20/2007s-programming-language-of-the-year-is-002221.php</a></p>
"
119346,9484,2008-09-23T06:12:15Z,119167,30,"<p>It's just personal preference really, and has to do with the layout of your python modules.</p>

<p>Let's say you have a module called <code>erikutils</code>. There are two ways that it can be a module, either you have a file called <em>erikutils.py</em> on your <code>sys.path</code> or you have a directory called <em>erikutils</em> on your <code>sys.path</code> with an empty <em><code>__init__.py</code></em> file inside it. Then let's say you have a bunch of modules called <code>fileutils</code>, <code>procutils</code>, <code>parseutils</code> and you want those to be sub-modules under <code>erikutils</code>. So you make some .py files called <em>fileutils.py</em>, <em>procutils.py</em>, and <em>parseutils.py</em>:</p>

<pre><code>erikutils
  __init__.py
  fileutils.py
  procutils.py
  parseutils.py
</code></pre>

<p>Maybe you have a few functions that just don't belong in the <code>fileutils</code>, <code>procutils</code>, or <code>parseutils</code> modules. And let's say you don't feel like creating a new module called <code>miscutils</code>. AND, you'd like to be able to call the function like so:</p>

<pre><code>erikutils.foo()
erikutils.bar()
</code></pre>

<p>rather than doing</p>

<pre><code>erikutils.miscutils.foo()
erikutils.miscutils.bar()
</code></pre>

<p>So because the <code>erikutils</code> module is a directory, not a file, we have to define it's functions inside the <em><code>__init__.py</code></em> file.</p>

<p>In django, the best example I can think of is <code>django.db.models.fields</code>. ALL the django *Field classes are defined in the <em><code>__init__.py</code></em> file in the <em>django/db/models/fields</em> directory. I guess they did this because they didn't want to cram everything into a hypothetical <em>django/db/models/fields.py</em> model, so they split it out into a few submodules (<em>related.py</em>, <em>files.py</em>, for example) and they stuck the made *Field definitions in the fields module itself (hence, <em><code>__init__.py</code></em>).</p>
"
119386,11249,2008-09-23T06:28:30Z,119198,2,"<p>Never stop learning! </p>

<p>That said, how can you compare the two? How good is Python support in .Net? Is there C# support in Google App Engine? It really depends what your target system is. Therefore, the more languages you have the better equipped you will be to tackle different challenges.</p>
"
119418,1057,2008-09-23T06:37:50Z,119404,23,"<p>You can use <a href=""http://spacepants.org/src/pymad/"">pymad</a>.  It's an external library, but don't fall for the Not Invented Here trap.  Any particular reason you don't want any external libraries?</p>

<pre><code>import mad

mf = mad.MadFile(""foo.mp3"")
track_length_in_milliseconds = mf.total_time()
</code></pre>

<p>Spotted <a href=""http://simonwillison.net/2003/Dec/4/mp3lengths/"">here</a>.</p>

<p>--</p>

<p>If you really don't want to use an external library, have a look <a href=""http://ibofobi.dk/stuff/mp3/"">here</a> and check out how he's done it.  Warning: it's complicated.</p>
"
119436,5140,2008-09-23T06:43:57Z,119404,0,"<p>You might count the number of frames in the file. Each frame has a start code, although I can't recollect the exact value of the start code and I don't have MPEG specs laying around. Each frame has a certain length, around 40ms for MPEG1 layer II.</p>

<p>This method works for CBR-files (Constant Bit Rate), how VBR-files work is a completely different story.</p>

<p>From the document below:</p>

<p>For Layer I files us this formula:</p>

<p>FrameLengthInBytes = (12 * BitRate / SampleRate + Padding) * 4</p>

<p>For Layer II &amp; III files use this formula:</p>

<p>FrameLengthInBytes = 144 * BitRate / SampleRate + Padding </p>

<p><a href=""http://mpgedit.org/mpgedit/mpeg_format/mpeghdr.htm"" rel=""nofollow"">Information about MPEG Audio Frame Header</a></p>
"
119576,712,2008-09-23T07:28:00Z,119562,180,"<p>Because <a href=""http://www.python.org/dev/peps/pep-0008/#tabs-or-spaces"">PEP-8</a> tells us to use spaces :)</p>
"
119594,893,2008-09-23T07:31:58Z,119562,21,"<p>I recently came across an article titled <a href=""http://www.secnetix.de/olli/Python/block_indentation.hawk"">Python: Myths about Indentation</a> which discusses this and related questions. The article has good reasons for recommending the use of spaces when writing Python code, but there is certainly room for disagreement.</p>

<p>I believe it's true that most Python programmers use spaces only.</p>
"
119598,10322,2008-09-23T07:32:35Z,119562,51,"<p>The most ""pythonic"" way is to use 4 spaces per indentation level. The Python interpreter will however recognize spaces or tabs. The only gottcha is you <strong>must never mix spaces and tabs</strong>, pick one or the other. That said, the specification recommends spaces, most developers use spaces, so unless you have a really good reason not to, I'd say go with spaces.</p>
"
119616,16272,2008-09-23T07:37:41Z,119404,7,"<blockquote>
  <blockquote>
    <p>Simple, parse MP3 binary blob to calculate something, in Python</p>
  </blockquote>
</blockquote>

<p>That sounds like a pretty tall order. I don't know Python, but here's some code I've refactored from another program I once tried to write.</p>

<p><strong>Note:</strong> It's in C++ (sorry, it's what I've got). Also, as-is, it'll only handle constant bit rate MPEG 1 Audio Layer 3 files. That <em>should</em> cover most, but I can't make any guarantee as to this working in all situations. Hopefully this does what you want, and hopefully refactoring it into Python is easier than doing it from scratch.</p>

<pre class=""lang-cpp prettyprint-override""><code>// determines the duration, in seconds, of an MP3;
// assumes MPEG 1 (not 2 or 2.5) Audio Layer 3 (not 1 or 2)
// constant bit rate (not variable)

#include &lt;iostream&gt;
#include &lt;fstream&gt;
#include &lt;cstdlib&gt;

using namespace std;

//Bitrates, assuming MPEG 1 Audio Layer 3
const int bitrates[16] = {
         0,  32000,  40000,  48000,  56000,  64000,  80000,   96000,
    112000, 128000, 160000, 192000, 224000, 256000, 320000,       0
  };


//Intel processors are little-endian;
//search Google or see: http://en.wikipedia.org/wiki/Endian
int reverse(int i)
{
    int toReturn = 0;
    toReturn |= ((i &amp; 0x000000FF) &lt;&lt; 24);
    toReturn |= ((i &amp; 0x0000FF00) &lt;&lt; 8);
    toReturn |= ((i &amp; 0x00FF0000) &gt;&gt; 8);
    toReturn |= ((i &amp; 0xFF000000) &gt;&gt; 24);
    return toReturn;
}

//In short, data in ID3v2 tags are stored as
//""syncsafe integers"". This is so the tag info
//isn't mistaken for audio data, and attempted to
//be ""played"". For more info, have fun Googling it.
int syncsafe(int i)
{
 int toReturn = 0;
 toReturn |= ((i &amp; 0x7F000000) &gt;&gt; 24);
 toReturn |= ((i &amp; 0x007F0000) &gt;&gt;  9);
 toReturn |= ((i &amp; 0x00007F00) &lt;&lt;  6);
 toReturn |= ((i &amp; 0x0000007F) &lt;&lt; 21);
 return toReturn;     
}

//How much room does ID3 version 1 tag info
//take up at the end of this file (if any)?
int id3v1size(ifstream&amp; infile)
{
   streampos savePos = infile.tellg(); 

   //get to 128 bytes from file end
   infile.seekg(0, ios::end);
   streampos length = infile.tellg() - (streampos)128;
   infile.seekg(length);

   int size;
   char buffer[3] = {0};
   infile.read(buffer, 3);
   if( buffer[0] == 'T' &amp;&amp; buffer[1] == 'A' &amp;&amp; buffer[2] == 'G' )
     size = 128; //found tag data
   else
     size = 0; //nothing there

   infile.seekg(savePos);

   return size;

}

//how much room does ID3 version 2 tag info
//take up at the beginning of this file (if any)
int id3v2size(ifstream&amp; infile)
{
   streampos savePos = infile.tellg(); 
   infile.seekg(0, ios::beg);

   char buffer[6] = {0};
   infile.read(buffer, 6);
   if( buffer[0] != 'I' || buffer[1] != 'D' || buffer[2] != '3' )
   {   
       //no tag data
       infile.seekg(savePos);
       return 0;
   }

   int size = 0;
   infile.read(reinterpret_cast&lt;char*&gt;(&amp;size), sizeof(size));
   size = syncsafe(size);

   infile.seekg(savePos);
   //""size"" doesn't include the 10 byte ID3v2 header
   return size + 10;
}

int main(int argCount, char* argValues[])
{
  //you'll have to change this
  ifstream infile(""C:/Music/Bush - Comedown.mp3"", ios::binary);

  if(!infile.is_open())
  {
   infile.close();
   cout &lt;&lt; ""Error opening file"" &lt;&lt; endl;
   system(""PAUSE"");
   return 0;
  }

  //determine beginning and end of primary frame data (not ID3 tags)
  infile.seekg(0, ios::end);
  streampos dataEnd = infile.tellg();

  infile.seekg(0, ios::beg);
  streampos dataBegin = 0;

  dataEnd -= id3v1size(infile);
  dataBegin += id3v2size(infile);

  infile.seekg(dataBegin,ios::beg);

  //determine bitrate based on header for first frame of audio data
  int headerBytes = 0;
  infile.read(reinterpret_cast&lt;char*&gt;(&amp;headerBytes),sizeof(headerBytes));

  headerBytes = reverse(headerBytes);
  int bitrate = bitrates[(int)((headerBytes &gt;&gt; 12) &amp; 0xF)];

  //calculate duration, in seconds
  int duration = (dataEnd - dataBegin)/(bitrate/8);

  infile.close();

  //print duration in minutes : seconds
  cout &lt;&lt; duration/60 &lt;&lt; "":"" &lt;&lt; duration%60 &lt;&lt; endl;

  system(""PAUSE"");
  return 0;
}
</code></pre>
"
119671,14860,2008-09-23T07:51:00Z,119651,1,"<p>Why don't you contact CA and ask them to tell them what they're searching for, for that virus?</p>

<p>Or, you could copy the file and change each individual byte until the warning disappeared (may take a while depending on the size).</p>

<p>It's possible the virus detection may be a lot more complicated than simply looking for a fixed string.</p>
"
119693,8297,2008-09-23T07:54:59Z,119562,6,"<p>Editor-to-editor mistake occurs when you have <em>mixed indentation within a file</em>. This arises as follows: a block of code is indented with 4 spaces, and then one indentation level ""in"", it is indented with tabs. Now the heathen who did this (mixing tabs and spaces) had it so his tabs are also 4 spaces, so he sees no problems, and python sees no problems. Now our victim comes along later, and he has his tabs set to 8 spaces. Now our victims thinks the code looks all whacked, and <em>fixes it</em> by <em>removing one level of indentation</em>, which now makes the code <em>look</em> like it is still 2 levels of indentation, but is <em>really one level</em>. At this point all hell breaks loose.</p>

<p>The lesson here is that you should never, ever, mix tabs and spaces. If you keep to this, then it is easy to reindent your code into spaces or tabs, regardless of which you personally use. The best way to ensure you don't mix tabs and spaces is to always run python with <code>-tt</code>, which will produce an error when tabs and spaces are mixed.</p>

<p>As for tabs and spaces, I personally use tabs so separate indentation from appearance - it is much easier to change the appearance of code when it is indented with tabs than it is with spaces. I know this runs contrary to what 99% of python programmers do, but that is my <em>personal</em> preference, and it is easy in any case to convert a tabbed file to a spaced one. The reverse is not always true, since you can accidentally whack out 4 spaces in strings etc.</p>
"
119698,12016,2008-09-23T07:55:47Z,119651,1,"<p>Hey,
better not wonder about the complexity and time these kinds of algorithms need.</p>

<p>If you have interest in this - here <a href=""http://www.acm.org/jea/ARTICLES/Vol4Nbr2.ps"" rel=""nofollow"">.ps document linked here</a> you can find a good introduction into this thematic.</p>

<p>If a good implementation for these algorithms exist, I can not tell. Maybe use google to find some - or put a new topic on stackoverflow :)</p>

<p>regards</p>
"
119703,20862,2008-09-23T07:56:34Z,119562,9,"<p>You CAN mix tabs and spaces... BUT a tab is considered to be the same indentation as 8 spaces, so unless your editor is set up to consider a tab to be 8 spaces you're asking for trouble when mixing them.</p>
"
119713,19990,2008-09-23T07:58:31Z,118654,-2,"<p>If you have the complete standard library and the real <code>re</code> module (google for IronPython community edition) it might work.  But IronPython is an incredible bad python implementation, I wouldn't count on that.</p>

<p>Besides, give <code>html5lib</code> a try.  That parser parses with the same rules firefox parses documents.</p>
"
119718,NA,2008-09-23T08:00:13Z,119651,3,"<p>See <a href=""http://en.wikipedia.org/wiki/Longest_common_substring_problem"" rel=""nofollow"">the longest common substring problem</a>. I guess difflib uses the DP solution, which is certainly too slow to compare executables. You can do much better with suffix trees/arrays.</p>

<p>Using perl <a href=""http://search.cpan.org/~gray/Tree-Suffix-0.20/lib/Tree/Suffix.pm"" rel=""nofollow"">Tree::Suffix</a> might be easiest solution. Apparently it gives all common substrings in a specified length range:</p>

<pre><code>@lcs = $tree-&gt;lcs;
@lcs = $tree-&gt;lcs($min_len, $max_len);
@lcs = $tree-&gt;longest_common_substrings;
</code></pre>
"
119837,17523,2008-09-23T08:28:25Z,119684,0,"<p>I wonder what the original poster tried and which methods worked and not worked for him. I have never worked with DICOM, but a quick google search for ""DICOM python"" gave several interesting results. It seems that this project: <a href=""http://www.creatis.univ-lyon1.fr/Public/Gdcm/"" rel=""nofollow"">http://www.creatis.univ-lyon1.fr/Public/Gdcm/</a> should deliver what you want. It has python bindings and a pretty active mailing list.</p>
"
119847,9493,2008-09-23T08:30:15Z,119651,2,"<p>Note that even if you did find it this way, there's no guarantee that the longest match is actually the one being looked for.  Instead, you may find common initialisation code or string tables added by the same compiler for instance.</p>
"
119943,12166,2008-09-23T08:56:03Z,119802,1,"<p>As far as I know, the underlying protocol doesn't support named varargs (or any named args for that matter). The workaround for this is to create a wrapper that will take the **kwargs and pass it as an ordinary dictionary to the method you want to call. Something like this</p>

<p>Server side:</p>

<pre><code>def select_wrapper(self, db, fields, kwargs):
    """"""accepts an ordinary dict which can pass through xmlrpc""""""
    return select(self,db,fields, **kwargs)
</code></pre>

<p>On the client side:</p>

<pre><code>def select(self, db, fields, **kwargs):
    """"""you can call it with keyword arguments and they will be packed into a dict""""""
    return self.rpcClient.select_wrapper(self,db,fields,kwargs)
</code></pre>

<p>Disclaimer: the code shows the general idea, you can do it a bit cleaner (for example writing a decorator to do that).</p>
"
119963,17624,2008-09-23T09:01:47Z,119802,3,"<p>XML-RPC doesn't really have a concept of 'keyword arguments', so xmlrpclib doesn't try to support them. You would need to pick a convention, then modify xmlrpclib._Method to accept keyword arguments and pass them along using that convention.</p>

<p>For instance, I used to work with an XML-RPC server that passed keyword arguments as two arguments, '-KEYWORD' followed by the actual argument, in a flat list. I no longer have access to the code I wrote to access that XML-RPC server from Python, but it was fairly simple, along the lines of:</p>

<pre><code>import xmlrpclib

_orig_Method = xmlrpclib._Method

class KeywordArgMethod(_orig_Method):     
    def __call__(self, *args, **kwargs):
        if args and kwargs:
            raise TypeError, ""Can't pass both positional and keyword args""
        args = list(args) 
        for key in kwargs:
            args.append('-%s' % key.upper())
            args.append(kwargs[key])
       return _orig_Method.__call__(self, *args)     

xmlrpclib._Method = KeywordArgMethod
</code></pre>

<p>It uses monkeypatching because that's by far the easiest method to do this, because of some clunky uses of module globals and name-mangled attributes (__request, for instance) in the ServerProxy class.</p>
"
119964,9493,2008-09-23T09:02:55Z,119941,1,"<p>Why would you want to do such a thing?  Unless you actually do anything with the variables inside the function, a function that just assigns several variables and then discards them is indistinguishable to def foo(): pass   (An optimiser would be justified in generating exactly the same bytecode).</p>

<p>If you also want to dynamically append code that uses the values, then you could do this by using exec (though unless this is really user-input code, there are almost certainly better ways to do what you want).  eg:</p>

<pre><code>some_code = '  return a+b+c'
exec ""def foo():\n  "" + '\n  '.join('%s = %s' for k,v in bar.items()) + '\n' + some_code
</code></pre>

<p>(Note that your code must be indented to the same level.)</p>

<p>On the other hand, if you want to actually assign these values to the function <strong>object</strong> (so you can do foo.a and get 1 - note that your sample code doesn't do this), you can do this by:</p>

<pre><code>for key, val in bar.items():
    setattr(foo, key, val)
</code></pre>
"
119974,2928,2008-09-23T09:06:05Z,119802,0,"<p>As Thomas Wouters said, XML-RPC does not have keyword arguments. Only the order of arguments matters as far as the protocol is concerned and they can be called anything in XML: arg0, arg1, arg2 is perfectly fine, as is cheese, candy and bacon for the same arguments.</p>

<p>Perhaps you should simply rethink your use of the protocol? Using something like document/literal SOAP would be much better than a workaround such as the ones presented in other answers here. Of course, this may not be feasible.</p>
"
119983,6899,2008-09-23T09:08:06Z,119941,2,"<p>Your question is not clear.</p>

<p>If you want to ""set"" said variables when foo is not running, no, you can't. There is no frame object yet to ""set"" the local variables in.</p>

<p>If you want to do that in the function body, you shouldn't (check the <a href=""http://docs.python.org/lib/built-in-funcs.html"" rel=""nofollow"">python documentation</a> for locals()).</p>

<p>However, you <em>could</em> do a <code>foo.__dict__.update(bar)</code>, and then you could access those variables even from inside the function as foo.a, foo.b and foo.c. The question is: why do you want to do that, and why isn't a class more suitable for your purposes?</p>
"
120055,6899,2008-09-23T09:34:48Z,118370,66,"<p>This is another use for Ellipsis, which has nothing to do with slices: I often use it in intra-thread communication with queues, as a mark that signals ""Done""; it's there, it's an object, it's a singleton, and its name means ""lack of"", and it's not the overused None (which could be put in a queue as part of normal data flow). YMMV.</p>

<p>P.S: I don't mind downvotes, when what I say in an answer is not useful in relation to the question; then I try to improve my answer. But I sure can't understand how one can downvote <em>any</em> of the answers in this question— when the question is “how do <em>you</em> use the Ellipsis in Python”… It seems that people think that downvoting means “I disagree” or “I don't like this”.</p>
"
120073,7883,2008-09-23T09:41:22Z,120061,1,"<p>Try changing the user agent header you are sending in your request to something like:
User-Agent: Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.9.0.1) Gecko/2008072820 Ubuntu/8.04 (hardy) Firefox/3.0.1 (Linux Mint)</p>
"
120103,20955,2008-09-23T09:46:57Z,119941,1,"<p>Thanks guys, I got the point. I should not do such thing. But if your curios what I tried to do is to somehow short number of lines in my view function in django. I have form with many fields, and instead of receive every field in form of:</p>

<pre><code>first_name = form.cleaned_data['first_name']
last_name = form.cleaned_data['last_name'] ..
</code></pre>

<p>i was thinking to take every attribute name of my form class and loop over it. Like so:</p>

<pre><code>for name in ProfileRegistration.base_fields.__dict__['keyOrder']:
   # and here the variables that i tried to assign
</code></pre>
"
120104,21006,2008-09-23T09:48:05Z,120061,1,"<p>You don't need to impersonate a browser user-agent; any user-agent at all will work, just not a blank one.</p>
"
120109,18676,2008-09-23T09:48:59Z,113341,2,"<p>My problem was indeed the confusion of classes vs. instances. I was trying to do everything via classes without ever creating an actual instance. Plus, I was forcing the ""BasicInfoPage"" class to do too much work.</p>

<p>Ultimately, I created a new class (<strong>BaseAttribs</strong>) to hold all the variables I need. I then created in instance of that class when I run the wizard and pass that instance as an argument to the classes that need it, as shown below:</p>

<pre><code>#---Run the wizard
if __name__ == ""__main__"":
    app = wx.PySimpleApp()
    wizard = wiz.Wizard(None, -1, ""TW2K Character Creation"")
    attribs = BaseAttribs

#---Create each page
    page1 = IntroPage(wizard, ""Introduction"")
    page2 = BasicInfoPage(wizard, ""Basic Info"", attribs)
    page3 = Ethnicity(wizard, ""Ethnicity"")
    page4 = MOS(wizard, ""Military Occupational Specialty"", attribs)
</code></pre>

<p>I then used the information S.Lott provided and created individual instances (if that's what it's called) within each class; each class is accessing the same variables though.</p>

<p>Everything works, as far as I can tell. Thanks.</p>
"
120113,13565,2008-09-23T09:49:44Z,120061,36,"<p>It is not a solution to the specific problem. But it might be intersting for you to use the mwclient library (<a href=""http://botwiki.sno.cc/wiki/Python:Mwclient"">http://botwiki.sno.cc/wiki/Python:Mwclient</a>) instead. That would be so much easier. Especially since you will directly get the article contents which removes the need for you to parse the html.</p>

<p>I have used it myself for two projects, and it works very well.</p>
"
120118,19435,2008-09-23T09:50:39Z,120061,48,"<p>You need to use the <a href=""http://docs.python.org/lib/module-urllib2.html"" rel=""nofollow"">urllib2</a> that superseedes <a href=""http://docs.python.org/lib/module-urllib.html"" rel=""nofollow"">urllib</a> in the <a href=""http://docs.python.org/lib/"" rel=""nofollow"">python std library</a> in order to change the user agent.</p>

<p>Straight from the <a href=""http://web.archive.org/web/20070202031348/http://docs.python.org/lib/urllib2-examples.html"" rel=""nofollow"">examples</a></p>

<pre><code>import urllib2
opener = urllib2.build_opener()
opener.addheaders = [('User-agent', 'Mozilla/5.0')]
infile = opener.open('http://en.wikipedia.org/w/index.php?title=Albert_Einstein&amp;printable=yes')
page = infile.read()
</code></pre>
"
120121,18333,2008-09-23T09:51:31Z,120061,2,"<p>The general solution I use for any site is to access the page using Firefox and, using an extension such as Firebug, record all details of the HTTP request including any cookies.</p>

<p>In your program (in this case in Python) you should try to send a HTTP request as similar as necessary to the one that worked from Firefox. This often includes setting the User-Agent, Referer and Cookie fields, but there may be others.</p>
"
120214,9493,2008-09-23T10:23:19Z,119941,3,"<p>From your comment, perhaps what you're really looking for is something like a bunch object:</p>

<pre><code>class Bunch(object):
    def __init__(self, **kwargs):
        self.__dict__.update(kwargs)

b=Bunch(**form.cleaned_data)

print b.first_name, b.last_name
</code></pre>

<p>(The ** syntax is because Bunch-type objects are usually used like Bunch(foo=12, bar='blah') - not used in your case but I've left it for consistency with normal usage)</p>

<p>This does require a ""b."" prefix to access your variables, but if you think about it, this is no bad thing.  Consider what would happen if someone crafted a POST request to overwrite variables you <em>aren't</em> expecting to be overwritten - it makes it easy to produce crashes and DOS attacks, and could easily introduce more serious security vulnerabilities.</p>
"
120224,20862,2008-09-23T10:26:25Z,95642,1,"<p>Consider writing a context manager and using the with statement.</p>
"
120225,3355,2008-09-23T10:26:43Z,119802,0,"<p>Using the above advice, I created some working code.</p>

<p>Server method wrapper:</p>

<pre><code>def unwrap_kwargs(func):
    def wrapper(*args, **kwargs):
        print args
        if args and isinstance(args[-1], list) and len(args[-1]) == 2 and ""kwargs"" == args[-1][0]:
            func(*args[:-1], **args[-1][1])
        else:
            func(*args, **kwargs)
    return wrapper
</code></pre>

<p>Client setup (do once):</p>

<pre><code>_orig_Method = xmlrpclib._Method

class KeywordArgMethod(_orig_Method):     
    def __call__(self, *args, **kwargs):
        args = list(args) 
        if kwargs:
            args.append((""kwargs"", kwargs))
        return _orig_Method.__call__(self, *args)

xmlrpclib._Method = KeywordArgMethod
</code></pre>

<p>I tested this, and it supports method with fixed, positional and keyword arguments.</p>
"
120249,20989,2008-09-23T10:35:03Z,119562,-2,"<p>People will use different editors on the same code. These editors will represent a tab on the screen differently. If you're working on an editor that represents a tab as 4 spaces, if you indent the first line by <code>""\t    ""</code> and the second by <code>""\t\t""</code>, they'll look like they're in the same indent level: 8 spaces. </p>

<p>The python interpreter doesn't know your editor, and he has to interpret the tab as some amount of indentation. In fact, it interprets the tab as 8 spaces, so he'll see different indent levels than what you intended: 12 spaces for the first line, 16 spaces for the second. You're toasted. </p>
"
120256,19990,2008-09-23T10:36:44Z,120250,30,"<p>Nope.  But you can use short integers in arrays:</p>

<pre><code>from array import array
a = array(""h"") # h = signed short, H = unsigned short
</code></pre>

<p>As long as the value stays in that array it will be a short integer.</p>

<ul>
<li>documentation for the <a href=""http://docs.python.org/dev/library/array"">array module</a></li>
</ul>
"
120265,20989,2008-09-23T10:38:35Z,119562,13,"<p>Use an editor that allows you to insert spaces up to the tabstop when you press the TAB key, instead of inserting a \t character. And then forget about it.</p>
"
120291,19435,2008-09-23T10:47:37Z,119802,10,"<p>You can't do this with plain xmlrpc since it has no notion of keyword arguments. However, you can superimpose this as a protocol on top of xmlrpc that would always pass a list as first argument, and a dictionary as a second, and then provide the proper support code so this becomes transparent for your usage, example below:</p>

<h2>Server</h2>

<pre><code>from SimpleXMLRPCServer import SimpleXMLRPCServer

class Server(object):
    def __init__(self, hostport):
        self.server = SimpleXMLRPCServer(hostport)

    def register_function(self, function, name=None):
        def _function(args, kwargs):
            return function(*args, **kwargs)
        _function.__name__ = function.__name__
        self.server.register_function(_function, name)

    def serve_forever(self):
        self.server.serve_forever()

#example usage
server = Server(('localhost', 8000))
def test(arg1, arg2):
    print 'arg1: %s arg2: %s' % (arg1, arg2)
    return 0
server.register_function(test)
server.serve_forever()
</code></pre>

<h2>Client</h2>

<pre><code>import xmlrpclib

class ServerProxy(object):
    def __init__(self, url):
        self._xmlrpc_server_proxy = xmlrpclib.ServerProxy(url)
    def __getattr__(self, name):
        call_proxy = getattr(self._xmlrpc_server_proxy, name)
        def _call(*args, **kwargs):
            return call_proxy(args, kwargs)
        return _call

#example usage
server = ServerProxy('http://localhost:8000')
server.test(1, 2)
server.test(arg2=2, arg1=1)
server.test(1, arg2=2)
server.test(*[1,2])
server.test(**{'arg1':1, 'arg2':2})
</code></pre>
"
120449,21029,2008-09-23T11:34:37Z,120250,5,"<p>Thanks to Armin for pointing out the 'array' module. I also found the 'struct' module that packs c-style structs in a string:</p>

<p>From the documentation (<a href=""https://docs.python.org/library/struct.html"" rel=""nofollow"">https://docs.python.org/library/struct.html</a>):</p>

<pre><code>&gt;&gt;&gt; from struct import *
&gt;&gt;&gt; pack('hhl', 1, 2, 3)
'\x00\x01\x00\x02\x00\x00\x00\x03'
&gt;&gt;&gt; unpack('hhl', '\x00\x01\x00\x02\x00\x00\x00\x03')
(1, 2, 3)
&gt;&gt;&gt; calcsize('hhl')
8
</code></pre>
"
120454,4966,2008-09-23T11:35:15Z,120250,2,"<p>Armin's suggestion of the array module is probably best.  Two possible alternatives:</p>

<ul>
<li>You can create an extension module yourself that provides the data structure that you're after.  If it's really just something like a collection of shorts, then
that's pretty simple to do.</li>
<li>You can
cheat and manipulate bits, so that
you're storing one number in the
lower half of the Python int, and
another one in the upper half. 
You'd write some utility functions
to convert to/from these within your
data structure.  Ugly, but it can be made to work.</li>
</ul>

<p>It's also worth realising that a Python integer object is not 4 bytes - there is additional overhead.  So if you have a really large number of shorts, then you can save more than two bytes per number by using a C short in some way (e.g. the array module).</p>

<p>I had to keep a large set of integers in memory a while ago, and a dictionary with integer keys and values was too large (I had 1GB available for the data structure IIRC).  I switched to using a IIBTree (from ZODB) and managed to fit it.  (The ints in a IIBTree are real C ints, not Python integers, and I hacked up an automatic switch to a IOBTree when the number was larger than 32 bits).</p>
"
120469,8203,2008-09-23T11:38:59Z,120250,0,"<p>@<a href=""#120256"" rel=""nofollow"">Armin</a>: how come? The Python documentation said the minimum size for that array of short integer is 2 bytes and </p>

<blockquote>
  <p>The actual representation of values is
  determined by the machine architecture
  (strictly speaking, by the C
  implementation). The actual size can
  be accessed through the itemsize
  attribute.</p>
</blockquote>

<p>@<a href=""#120449"" rel=""nofollow"">Arnav</a>: I suggest that your code should check the size of each Type code and choose the corresponding 2-byte type that is specific to the underlying system. </p>
"
120589,3978,2008-09-23T12:14:51Z,119651,0,"<p>I suspect that looking for binary strings isn't going to help you. An install program is likely to be doing some 'suspicious' things. </p>

<p>You probably need to talk to CA and spybot about white-listing your installer, or about what is triggering the alert.</p>
"
120676,15682,2008-09-23T12:32:00Z,120656,370,"<p>You can use</p>

<pre><code>os.listdir(path)
</code></pre>

<p>For reference and more os functions look here:</p>

<ul>
<li>Python 2 docs: <a href=""https://docs.python.org/2/library/os.html#os.listdir"">https://docs.python.org/2/library/os.html#os.listdir</a></li>
<li>Python 3 docs: <a href=""https://docs.python.org/3.4/library/os.html#os.listdir"">https://docs.python.org/3.4/library/os.html#os.listdir</a></li>
</ul>
"
120692,17651,2008-09-23T12:34:07Z,120656,74,"<pre><code>import os

for filename in os.listdir(""C:\\temp""):
    print  filename
</code></pre>
"
120695,14860,2008-09-23T12:34:34Z,120656,9,"<p>Try this:</p>

<pre><code>import os
for top, dirs, files in os.walk('./'):
    for nm in files:       
        print os.path.join(top, nm)
</code></pre>
"
120701,14648,2008-09-23T12:35:46Z,120656,503,"<p>This is a way to traverse every file and directory in a directory tree:</p>

<pre><code>import os

for dirname, dirnames, filenames in os.walk('.'):
    # print path to all subdirectories first.
    for subdirname in dirnames:
        print(os.path.join(dirname, subdirname))

    # print path to all filenames.
    for filename in filenames:
        print(os.path.join(dirname, filename))

    # Advanced usage:
    # editing the 'dirnames' list will stop os.walk() from recursing into there.
    if '.git' in dirnames:
        # don't go into any .git directories.
        dirnames.remove('.git')
</code></pre>
"
120705,17624,2008-09-23T12:36:18Z,120657,1,"<p>A proper answer will need more information than that. What are you actually doing? How does it fail? Are you using the subprocess module? Are you passing a list of arguments and shell=False (or no shell argument) or are you actually invoking the shell?</p>
"
120706,19990,2008-09-23T12:36:19Z,120657,5,"<p>Make sure you are using lists and no shell expansion:</p>

<pre><code>subprocess.Popen(['command', 'argument1', 'argument2'], shell=False)
</code></pre>
"
120708,20010,2008-09-23T12:36:32Z,120657,1,"<p>Try quoting the argument that contains the &amp;</p>

<pre><code>wget ""http://foo.com/?bar=baz&amp;amp;baz=bar""
</code></pre>

<p>Is usually what has to be done in a Linux shell</p>
"
120782,16035,2008-09-23T12:49:55Z,120657,0,"<p>To answer my own question:</p>

<p>Quoting the actual command when passing the parameters as a list doesn't work correctly (command is first item of list) so to solve the issue I turned the list into a space separated string and passed that into subprocess instead.</p>

<p>Better solutions still welcomed.</p>
"
120794,9567,2008-09-23T12:52:32Z,120584,3,"<p>You can use <a href=""http://www.cairographics.org/"" rel=""nofollow"">Cairo</a> (with PyCairo), which has support for rendering SVGs. The PyGame webpage has a <a href=""http://www.pygame.org/wiki/CairoPygame"" rel=""nofollow"">HOWTO</a> for rendering into a buffer with a Cairo, and using that buffer directly with PyGame.</p>
"
120924,21106,2008-09-23T13:20:30Z,120250,4,"<p>If you're doing any sort of manipulation of this huge dataset, you'll probably want to use <a href=""http://numpy.scipy.org/"" rel=""nofollow"" title=""Numpy Home Page"">Numpy</a>, which has support for a wide variety of numeric types, and efficient operations on arrays of them.</p>
"
120948,21106,2008-09-23T13:23:29Z,120656,63,"<p>Here's a helper function I use quite often:</p>

<pre><code>import os

def listdir_fullpath(d):
    return [os.path.join(d, f) for f in os.listdir(d)]
</code></pre>
"
120956,17624,2008-09-23T13:24:26Z,120926,25,"<p>The problem with tabs is that they are invisible, and people can never agree on the width of tabs. When you mix tabs and spaces, and you set tabstops at something other than Python (which uses tabstops every 8 spaces) you will be seeing the code in a different layout than Python sees it. And because the layout determines blocks, you will be seeing different logic. It leads to subtle bugs.</p>

<p>If you insist on defying PEP 8 and using tabs -- or worse, mixing tabs and spaces -- at least always run python with the '-tt' argument, which makes <em>inconsistent</em> indentation (sometimes a tab, sometimes a space for the same indentation level) an error. Also, if possible, set your editor to display tabs differently. But really, the best approach is not to use tabs, period.</p>
"
120959,6899,2008-09-23T13:25:01Z,120951,9,"<pre><code>import urlparse, urllib
def myquote(url):
    parts= urlparse.urlparse(url)
    return urlparse.urlunparse(parts[:2] + urllib.quote(parts[2]) + parts[3:])
</code></pre>

<p>This quotes only the path component.</p>

<p>Otherwise, you could do: <code>urllib.quote(url, safe="":/"")</code></p>
"
120969,10703,2008-09-23T13:25:57Z,120926,-2,"<p>The universal problem with tabs is that they can be represented differently in different environment.<br />
In a given editor, a tab might be 8 spaces or it might be 2.<br />
In some editors, you can control this, while in others you can't.</p>

<p>Another issue with tabs is how they are represented in printed output.  I believe most printers interpret a tab as 8 spaces.</p>

<p>With spaces, there is no doubt.  Everything will line up as the author intended.</p>
"
120971,1199,2008-09-23T13:26:16Z,120951,18,"<p>use <code>urllib.quote</code> or <code>urllib.quote_plus</code></p>

<p>From the <a href=""http://docs.python.org/lib/module-urllib.html"">urllib documentation</a>:</p>

<blockquote>
  <p><strong>quote(string[, safe])</strong></p>
  
  <p>Replace special characters in string
  using the ""%xx"" escape. Letters,
  digits, and the characters ""_.-"" are
  never quoted. The optional safe
  parameter specifies additional
  characters that should not be quoted
  -- its default value is '/'.</p>
  
  <p>Example: <code>quote('/~connolly/')</code> yields <code>'/%7econnolly/'</code>. </p>
  
  <p><strong>quote_plus(string[, safe])</strong></p>
  
  <p>Like quote(), but also replaces spaces
  by plus signs, as required for quoting
  HTML form values. Plus signs in the
  original string are escaped unless
  they are included in safe. It also
  does not have safe default to '/'.</p>
</blockquote>

<p>EDIT: Using urllib.quote or urllib.quote_plus on the whole URL will mangle it, as @<a href=""#120959"">ΤΖΩΤΖΙΟΥ</a> points out:</p>

<pre><code>&gt;&gt;&gt; quoted_url = urllib.quote('http://www.example.com/foo goo/bar.html')
&gt;&gt;&gt; quoted_url
'http%3A//www.example.com/foo%20goo/bar.html'
&gt;&gt;&gt; urllib2.urlopen(quoted_url)
Traceback (most recent call last):
  File ""&lt;stdin&gt;"", line 1, in &lt;module&gt;
  File ""c:\python25\lib\urllib2.py"", line 124, in urlopen
    return _opener.open(url, data)
  File ""c:\python25\lib\urllib2.py"", line 373, in open
    protocol = req.get_type()
  File ""c:\python25\lib\urllib2.py"", line 244, in get_type
    raise ValueError, ""unknown url type: %s"" % self.__original
ValueError: unknown url type: http%3A//www.example.com/foo%20goo/bar.html
</code></pre>

<p>@<a href=""#120959"">ΤΖΩΤΖΙΟΥ</a> provides a function that uses <a href=""http://docs.python.org/lib/module-urlparse.html"">urlparse.urlparse and urlparse.urlunparse</a> to parse the url and only encode the path. This may be more useful for you, although if you're building the URL from a known protocol and host but with a suspect path, you could probably do just as well to avoid urlparse and just quote the suspect part of the URL, concatenating with known safe parts.</p>
"
120988,20954,2008-09-23T13:28:56Z,119684,1,"<p>There are some libraries (most often implemented in C/C++) with Python bindings, e.g.:</p>

<ul>
<li><a href=""http://dicomlib.swri.ca/pydicomlib.html"" rel=""nofollow"">pydicomlib</a></li>
<li><a href=""http://www.creatis.univ-lyon1.fr/Public/Gdcm/"" rel=""nofollow"">gdcmPython</a></li>
</ul>

<p>However, I'm looking for a native Python implementation to learn more about the DICOM file format.</p>
"
120992,10661,2008-09-23T13:29:31Z,120657,1,"<p>""escaping the ampersand with ^""</p>

<p>Are you sure <code>^</code> is an escape character to Windows?   Shouldn't you use <code>\</code>?</p>
"
120996,6222,2008-09-23T13:30:23Z,120926,0,"<p>The most significant advantage I can tell of spaces over tabs is that a lot of programmers and projects use a set number of columns for the source code, and if someone commits a change with their tabstop set to 2 spaces and the project uses 4 spaces as the tabstop the long lines are going to be too long for other people's editor window. I agree that tabs are easier to work with but I think spaces are easier for collaboration, which is important on a large open source project like Python.</p>
"
121017,19990,2008-09-23T13:33:06Z,120951,60,"<p>Have a look at this module: <a href=""https://github.com/mitsuhiko/werkzeug/blob/master/werkzeug/urls.py"">werkzeug.utils</a>. (now in <code>werkzeug.urls</code>)</p>

<p>The function you are looking for is called ""url_fix"" and works like this:</p>

<pre><code>&gt;&gt;&gt; url_fix(u'http://de.wikipedia.org/wiki/Elf (Begriffsklärung)')
'http://de.wikipedia.org/wiki/Elf%20%28Begriffskl%C3%A4rung%29'
</code></pre>

<p>It's implemented in Werkzeug as follows:</p>

<pre><code>import urllib
import urlparse

def url_fix(s, charset='utf-8'):
    """"""Sometimes you get an URL by a user that just isn't a real
    URL because it contains unsafe characters like ' ' and so on.  This
    function can fix some of the problems in a similar way browsers
    handle data entered by the user:

    &gt;&gt;&gt; url_fix(u'http://de.wikipedia.org/wiki/Elf (Begriffsklärung)')
    'http://de.wikipedia.org/wiki/Elf%20%28Begriffskl%C3%A4rung%29'

    :param charset: The target charset for the URL if the url was
                    given as unicode string.
    """"""
    if isinstance(s, unicode):
        s = s.encode(charset, 'ignore')
    scheme, netloc, path, qs, anchor = urlparse.urlsplit(s)
    path = urllib.quote(path, '/%')
    qs = urllib.quote_plus(qs, ':&amp;=')
    return urlparse.urlunsplit((scheme, netloc, path, qs, anchor))
</code></pre>
"
121036,19435,2008-09-23T13:35:42Z,120926,1,"<p>Since python relies on indentation in order to recognize program structure, a clear way to identify identation is required. This is the reason to pick either spaces or tabs.</p>

<p>However, python also has a strong philosophy of only having one way to do things, therefore there should be an official recommendation for one way to do indentation.</p>

<p>Both spaces and tabs pose unique challenges for an editor to handle as indentation. The handling of tabs themselves is not uniform across editors or even user settings. Since spaces are not configurable, they pose the more logical choice as they guarantee that the outcome will look everywhere the same.</p>
"
121065,18044,2008-09-23T13:40:45Z,119684,3,"<p>Some years ago I was looking for the same thing and found this:
<a href=""http://cvs.atamai.com/cgi-bin/viewvc.cgi/atamai/dicom/"" rel=""nofollow"">Python DICOM lib</a></p>

<p>I wasn't too impressed with the code, but it is native Python reading DICOM files.</p>
"
121126,20989,2008-09-23T13:52:25Z,120926,0,"<p>You can have your cake and eat it to. Set your editor to expand tabs into spaces automatically.</p>

<p>(That would be <code>:set expandtab</code> in Vim.)</p>
"
121180,17917,2008-09-23T14:03:07Z,118138,1,"<p>I'm not sure if I'm grokking all the details of your question, but looking at your problem in general (how do I deploy a python app on mac), I'm inclined to say that the answer is <a href=""http://undefined.org/python/py2app.html"" rel=""nofollow"">py2app</a>. Basically this will bundle a python interpreter and all relevant python files for you, and give you a scriptable system that you can use to add in whatever other resources/dependencies you need. </p>
"
121422,4482,2008-09-23T14:37:24Z,121396,32,"<p>Just use </p>

<pre><code>id(object)
</code></pre>
"
121426,17624,2008-09-23T14:38:01Z,121396,2,"<p>You can get something suitable for that purpose with:</p>

<pre><code>id(self)
</code></pre>
"
121452,12030,2008-09-23T14:41:30Z,121396,116,"<p>The <a href=""https://docs.python.org/2/library/functions.html#id"">Python manual</a> has this to say about id():</p>

<blockquote>
  <p>Return the ``identity'' of an object.
  This is an integer (or long integer)
  which is guaranteed to be unique and
  constant for this object during its
  lifetime. Two objects with
  non-overlapping lifetimes may have the
  same id() value. (Implementation note:
  this is the address of the object.)</p>
</blockquote>

<p>So in CPython, this will be the address of the object. No such guarantee for any other Python interpreter, though.</p>

<p>Note that if you're writing a C extension, you have full access to the internals of the Python interpreter, including access to the addresses of objects directly.</p>
"
121474,2603,2008-09-23T14:44:50Z,121439,14,"<p>Automatically log your 500s, that way:</p>

<ul>
<li>You know when they occur.</li>
<li>You don't need to rely on users sending you stacktraces.</li>
</ul>

<p>Joel recommends even going so far as automatically creating tickets in your bug tracker when your application experiences a failure. Personally, I create a (private) RSS feed with the stacktraces, urls, etc. that the developers can subscribe to.</p>

<p>Showing stack traces  to your users on the other hand could possibly leak information that malicious users could use to attack your site. Overly detailed error messages are one of the classic stepping stones to SQL injection attacks.</p>

<p><em>Edit</em> (added code sample to capture traceback):</p>

<p>You can get the exception information from the sys.exc_info call. While formatting the traceback for display comes from the traceback module:</p>

<pre><code>import traceback
import sys

try:
	raise Exception(""Message"")
except:
	type, value, tb = sys.exc_info()
	print &gt;&gt; sys.stderr,  type.__name__, "":"", value
	print &gt;&gt; sys.stderr, '\n'.join(traceback.format_tb(tb))
</code></pre>

<p>Prints:</p>

<pre><code>Exception : Message
  File ""exception.py"", line 5, in &lt;module&gt;
    raise Exception(""Message"")
</code></pre>
"
121481,10661,2008-09-23T14:45:39Z,120926,28,"<p>The reason for spaces is that tabs are optional.  Spaces are the actual lowest-common denominator in punctuation.</p>

<p>Every decent text editor has a ""replace tabs with spaces"" and many people use this.  But not always.</p>

<p>While some text editors might replace a run of spaces with a tab, this is really rare.</p>

<p><strong>Bottom Line</strong>.  You can't go wrong with spaces.  You <em>might</em> go wrong with tabs.  So don't use tabs and reduce the risk of mistakes.</p>
"
121487,19990,2008-09-23T14:46:22Z,121439,1,"<p>You could call <code>sys.exc_info()</code> in a custom exception handler.  But I don't recommend that.  Django can send you emails for exceptions.</p>
"
121508,19990,2008-09-23T14:49:57Z,121396,46,"<p>You could reimplement the default repr this way:</p>

<pre><code>def __repr__(self):
    return '&lt;%s.%s object at %s&gt;' % (
        self.__class__.__module__,
        self.__class__.__name__,
        hex(id(self))
    )
</code></pre>
"
121572,9567,2008-09-23T15:00:58Z,121396,6,"<p>With <a href=""http://docs.python.org/lib/module-ctypes.html"">ctypes</a>, you can achieve the same thing with</p>

<pre><code>&gt;&gt;&gt; import ctypes
&gt;&gt;&gt; a = (1,2,3)
&gt;&gt;&gt; ctypes.addressof(a)
3077760748L
</code></pre>

<p>Documentation:</p>

<blockquote>
  <p><code>addressof(C instance) -&gt; integer</code><br />
  Return the address of the C instance internal buffer</p>
</blockquote>

<p>Note that in CPython, currently <code>id(a) == ctypes.addressof(a)</code>, but <code>ctypes.addressof</code> should return the real address for each Python implementation, if</p>

<ul>
<li>ctypes is supported</li>
<li>memory pointers are a valid notion.</li>
</ul>

<p><strong>Edit</strong>: added information about interpreter-independence of ctypes</p>
"
121651,7980,2008-09-23T15:16:51Z,120584,3,"<p>I realise this doesn't exactly answer your question, but there's a library called <a href=""http://www.supereffective.org/?p=14"" rel=""nofollow"">Squirtle</a> that will render SVG files using either Pyglet or PyOpenGL.</p>
"
121653,8450,2008-09-23T15:17:06Z,120584,2,"<p>Cairo cannot render SVG out of the box.
It seems we have to use librsvg.</p>

<p>Just found those two pages:</p>

<ul>
<li><a href=""http://www.cairographics.org/cookbook/librsvgpython/"" rel=""nofollow"">Rendering SVG with libRSVG,Python and c-types</a> </li>
<li><a href=""http://www.cairographics.org/pyrsvg/"" rel=""nofollow"">How to use librsvg from Python</a></li>
</ul>

<p>Something like this should probably work (render <strong>test.svg</strong> to <strong>test.png</strong>):</p>

<pre><code>import cairo
import rsvg

WIDTH, HEIGHT  = 256, 256
surface = cairo.ImageSurface(cairo.FORMAT_ARGB32, WIDTH, HEIGHT)

ctx = cairo.Context (surface)

svg = rsvg.Handle(file=""test.svg"")
svg.render_cairo(ctx)

surface.write_to_png(""test.png"")
</code></pre>
"
121671,3850,2008-09-23T15:19:27Z,120926,74,"<p>The answer was given right there in the PEP [ed: this passage has been edited out in <a href=""https://hg.python.org/peps/rev/fb24c80e9afb#l1.75"">2013</a>]. I quote:</p>

<blockquote>
  <p>The <strong>most popular</strong> way of indenting Python is with spaces only.</p>
</blockquote>

<p>What other underlying reason do you need?</p>

<p>To put it less bluntly: Consider also the scope of the PEP as stated in the very first paragraph:</p>

<blockquote>
  <p>This document gives coding conventions for the Python code comprising the standard library in the main Python distribution.</p>
</blockquote>

<p>The intention is to make <em>all code that goes in the official python distribution</em> consistently formatted (I hope we can agree that this is universally a Good Thing™).</p>

<p>Since the decision between spaces and tabs for an individual programmer is a) really a matter of taste and b) easily dealt with by technical means (editors, conversion scripts, etc.), there is a clear way to end all discussion: chose one.</p>

<p>Guido was the one to choose. He didn't even have to give a reason, but he still did by referring to empirical data.</p>

<p>For all other purposes you can either take this PEP as a recommendation, or you can ignore it -- your choice, or your team's, or your team leaders.</p>

<p>But if I may give you one advice: don't mix'em ;-) [ed: Mixing tabs and spaces is no longer an option.]</p>
"
121745,7980,2008-09-23T15:29:04Z,118458,2,"<p>On a related note, Python's <a href=""http://docs.python.org/lib/standard-encodings.html"" rel=""nofollow"">builtin encoders</a> can also do string escaping:</p>

<pre><code>&gt;&gt;&gt; print ""that's interesting"".encode('string_escape')
that\'s interesting
</code></pre>
"
121796,10040,2008-09-23T15:37:06Z,114283,0,"<p>Have you considered overriding the administrative templates for the models in question?  This <a href=""http://www.unessa.net/en/hoyci/2006/12/custom-admin-templates/"" rel=""nofollow"">link</a> provides an excellent overview of the process.  In this particular situation, having a finer-grained level of control may be the best way to achieve the desired result.</p>
"
122032,20789,2008-09-23T16:10:37Z,121396,0,"<p>While it's true that <code>id(object)</code> gets the object's address in the default CPython implementation, this is generally useless... you can't <i>do</i> anything with the address from pure Python code.</p>

<p>The only time you would actually be able to use the address is from a C extension library... in which case it is trivial to get the object's address since Python objects are always passed around as C pointers.</p>
"
122047,20789,2008-09-23T16:13:51Z,122033,0,"<p>Python with Numeric Python:</p>

<pre><code>from numpy import *
a = random.random_integers(0, 100, 5)
b = unique(a)
</code></pre>

<p>Voilà!  Sure you could do something similar in a functional programming style but... why?</p>
"
122062,17624,2008-09-23T16:17:48Z,122033,2,"<p>I will forgo the simplest solutions using the 'random' module since I take it that's not really what you are after. Here's what I think you are looking for in Python:</p>

<pre><code>&gt;&gt;&gt; import random
&gt;&gt;&gt; 
&gt;&gt;&gt; def getUniqueRandomNumbers(num, highest):
...     seen = set()
...     while len(seen) &lt; num:
...         i = random.randrange(0, highest)
...         if i not in seen:
...             seen.add(i)  
...             yield i
... 
&gt;&gt;&gt;
</code></pre>

<p>To show you how it works:</p>

<pre><code>&gt;&gt;&gt; list(getUniqueRandomNumbers(10, 100))
[81, 57, 98, 47, 93, 31, 29, 24, 97, 10]
</code></pre>
"
122064,1114,2008-09-23T16:18:19Z,122033,13,"<pre><code>&gt;&gt;&gt; import random
&gt;&gt;&gt; print random.sample(xrange(100), 5)
[61, 54, 91, 72, 85]
</code></pre>

<p>This should yield 5 unique values in the range <code>0 — 99</code>. The <code>xrange</code> object generates values as requested so no memory is used for values that aren't sampled.</p>
"
122085,7538,2008-09-23T16:23:30Z,122033,-1,"<p>I can't really read your LINQ, but I think you're trying to get 5 random numbers up to 100 and then remove duplicates.</p>

<p>Here's a solution for that:</p>

<pre><code>def random(max)
    (rand * max).to_i
end

# Get 5 random numbers between 0 and 100
a = (1..5).inject([]){|acc,i| acc &lt;&lt; random( 100)}
# Remove Duplicates
a = a &amp; a
</code></pre>

<p>But perhaps you're actually looking for 5 distinct random numbers between 0 and 100.  In which case:</p>

<pre><code>def random(max)
    (rand * max).to_i
end

a = []
while( a.size &lt; 5)
    a &lt;&lt; random( 100)
    a = a &amp; a
end
</code></pre>

<p>Now, this one might violate your sense of ""not too many loops,"" but presumably Take and Distinct are just hiding the looping from you.  It would be easy enough to just add methods to Enumerable to hide the while loop.</p>
"
122093,5757,2008-09-23T16:24:18Z,122033,3,"<p>Hmm... How about (Python):</p>

<pre><code>s = set()
while len(s) &lt;= N: s.update((random.random(),))
</code></pre>
"
122116,4931,2008-09-23T16:27:31Z,122033,5,"<p>In Ruby:</p>

<pre><code>a = (0..100).entries.sort_by {rand}.slice! 0, 5
</code></pre>

<p><strong>Update</strong>: Here is a slightly different way:
    a = (0...100).entries.sort_by{rand}[0...5]</p>

<p><strong>EDIT:</strong></p>

<p>and In Ruby 1.9 you can do this:</p>

<pre><code>Array(0..100).sample(5) 
</code></pre>
"
122121,4570,2008-09-23T16:28:02Z,122033,2,"<p>Here's another Ruby solution:</p>

<pre><code>a = (1..5).collect { rand(100) }
a &amp; a
</code></pre>

<p>I think, with your LINQ statement, the Distinct will remove duplicates after 5 have already been taken, so you aren't guaranteed to get 5 back. Someone can correct me if I'm wrong, though.</p>
"
122146,14057,2008-09-23T16:31:02Z,122033,0,"<pre><code>import random

def makeRand(n):
   rand = random.Random()
   while 1:
      yield rand.randint(0,n)
   yield rand.randint(0,n)      

gen = makeRand(100)      
terms = [ gen.next() for n in range(5) ]

print ""raw list""
print terms
print ""de-duped list""
print list(set(terms))

# produces output similar to this
#
# raw list
# [22, 11, 35, 55, 1]
# de-duped list
# [35, 11, 1, 22, 55]
</code></pre>
"
122159,42219,2008-09-23T16:32:42Z,122033,0,"<p>Well, first you rewrite LINQ in Python.  Then your solution is a one-liner :)</p>

<pre><code>from random import randrange

def Distinct(items):
    set = {}
    for i in items:
        if not set.has_key(i):
            yield i
            set[i] = 1

def Take(num, items):
    for i in items:
        if num &gt; 0:
            yield i
            num = num - 1
        else:
            break

def ToArray(items):
    return [i for i in items]

def GetRandomNumbers(max):
    while 1:
        yield randrange(max)

print ToArray(Take(5, Distinct(GetRandomNumbers(100))))
</code></pre>

<p>If you put all the simple methods above into a module called LINQ.py, you can impress your friends.</p>

<p>(Disclaimer: of course, this is not <em>actually</em> rewriting LINQ in Python.  People have the misconception that LINQ is just a bunch of trivial extension methods and some new syntax.  The really advanced part of LINQ, however, is automatic SQL generation so that when you're querying a database, it's the database that implements Distinct() rather than the client side.)</p>
"
122181,1447,2008-09-23T16:37:41Z,119562,0,"<p>I use two space indentation and an editor (kwrite) that inserts spaces instead of tabs when I hit the tab key.</p>
"
122188,9951,2008-09-23T16:38:45Z,122033,2,"<p>EDIT : Ok, just for fun, a shorter and faster one (and still using iterators).</p>

<pre><code>def getRandomNumbers(max, size) :
    pool = set()
    return ((lambda x :  pool.add(x) or x)(random.randrange(max)) for x in xrange(size) if len(a) &lt; size)

print [x for x in gen(100, 5)]
[0, 10, 19, 51, 18]
</code></pre>

<p>Yeah, I know, one-liners should be left to perl lovers, but I think this one is quite powerful isn't it ?</p>

<p>Old message here :</p>

<p>My god, how complicated is all that ! Let's be pythonic :</p>

<pre><code>import random
def getRandomNumber(max, size, min=0) :
   # using () and xrange = using iterators
   return (random.randrange(min, max) for x in xrange(size))

print set(getRandomNumber(100, 5)) # set() removes duplicates
set([88, 99, 29, 70, 23])
</code></pre>

<p>Enjoy</p>

<p>EDIT : As commentators noticed, this is an exact translation of the question's code.</p>

<p>To avoid the problem we got by removing duplicates after generating the list, resulting in too little data, you can choose another way :</p>

<pre><code>def getRandomNumbers(max, size) :
    pool = []
    while len(pool) &lt; size :
        tmp = random.randrange(max)
        if tmp not in pool :
            yield pool.append(tmp) or tmp

print [x for x in getRandomNumbers(5, 5)]
[2, 1, 0, 3, 4]
</code></pre>
"
122212,10661,2008-09-23T16:42:27Z,122033,0,"<p>Here's a transliteration from your solution to Python.</p>

<p>First, a generator that creates Random numbers.  This isn't very Pythonic, but it's a good match with your sample code. </p>

<pre><code>&gt;&gt;&gt; import random
&gt;&gt;&gt; def getRandomNumbers( max ):
...     while True:
...             yield random.randrange(0,max)
</code></pre>

<p>Here's a client loop that collects a set of 5 distinct values.  This is -- again -- not the most Pythonic implementation.</p>

<pre><code>&gt;&gt;&gt; distinctSet= set()
&gt;&gt;&gt; for r in getRandomNumbers( 100 ):
...     distinctSet.add( r )
...     if len(distinctSet) == 5: 
...             break
... 
&gt;&gt;&gt; distinctSet
set([81, 66, 28, 53, 46])
</code></pre>

<p>It's not clear why you want to use a generator for random numbers -- that's one of the few things that's so simple that a generator doesn't simplify it.  </p>

<p>A more Pythonic version might be something like:</p>

<pre><code>distinctSet= set()
while len(distinctSet) != 5:
    distinctSet.add( random.randrange(0,100) )
</code></pre>

<p>If the requirements are to generate 5 values and find distinct among those 5, then something like</p>

<pre><code>distinctSet= set( [random.randrange(0,100) for i in range(5) ] )
</code></pre>
"
122285,19087,2008-09-23T16:57:09Z,122033,0,"<p>Maybe this will suit your needs and look a bit more linqish:</p>

<pre><code>from numpy import random,unique

def GetRandomNumbers(total=5):
    while True:
    	yield unique(random.random(total*2))[:total]

randomGenerator = GetRandomNumbers()

myRandomNumbers = randomGenerator.next()
</code></pre>
"
122294,17624,2008-09-23T16:58:53Z,122277,16,"<p>Using named groups and a dispatch table:</p>

<pre><code>r = re.compile(r'(?P&lt;cmd&gt;foo|bar|baz)(?P&lt;data&gt;.+)')

def do_foo(data):
    ...

def do_bar(data):
    ...

def do_baz(data):
    ...

dispatch = {
    'foo': do_foo,
    'bar': do_bar,
    'baz': do_baz,
}


m = r.match(var)
if m:
    dispatch[m.group('cmd')](m.group('data'))
</code></pre>

<p>With a little bit of introspection you can auto-generate the regexp and the dispatch table.</p>
"
122340,4766,2008-09-23T17:06:59Z,122327,240,"<p>From <a href=""http://docs.djangoproject.com/en/dev/topics/install/#remove-any-old-versions-of-django"">""How to Install Django"" documentation</a> (though this is useful to more than just Django installation) - execute the following from the shell:</p>

<pre><code>python -c ""from distutils.sysconfig import get_python_lib; print(get_python_lib())""
</code></pre>

<p>Formatted for readability (rather than use as a one-liner), that looks like the following:</p>

<pre><code>from distutils.sysconfig import get_python_lib
print(get_python_lib())
</code></pre>
"
122345,17624,2008-09-23T17:07:16Z,122277,4,"<p>Alternatively, something not using regular expressions at all:</p>

<pre><code>prefix, data = var[:3], var[3:]
if prefix == 'foo':
    # do something with data
elif prefix == 'bar':
    # do something with data
elif prefix == 'baz':
    # do something with data
else:
    # do something with var
</code></pre>

<p>Whether that is suitable depends on your actual problem. Don't forget, regular expressions aren't the swiss army knife that they are in Perl; Python has different constructs for doing string manipulation.</p>
"
122360,19435,2008-09-23T17:09:54Z,122327,5,"<pre><code>from distutils.sysconfig import get_python_lib
print get_python_lib()
</code></pre>
"
122364,9567,2008-09-23T17:11:09Z,122277,4,"<pre><code>def find_first_match(string, *regexes):
    for regex, handler in regexes:
        m = re.search(regex, string):
        if m:
            handler(m)
            return
    else:
        raise ValueError

find_first_match(
    foo, 
    (r'foo(.+)', handle_foo), 
    (r'bar(.+)', handle_bar), 
    (r'baz(.+)', handle_baz))
</code></pre>

<p>To speed it up, one could turn all regexes into one internally and create the dispatcher on the fly. Ideally, this would be turned into a class then.</p>
"
122377,14122,2008-09-23T17:14:02Z,122327,19,"<p>As others have noted, <code>distutils.sysconfig</code> has the relevant settings:</p>

<pre><code>import distutils.sysconfig
print distutils.sysconfig.get_python_lib()
</code></pre>

<p>...though the default <code>site.py</code> does something a bit more crude, paraphrased below:</p>

<pre><code>import sys, os
print os.sep.join([sys.prefix, 'lib', 'python' + sys.version[:3], 'site-packages'])
</code></pre>

<p>(it also adds <code>${sys.prefix}/lib/site-python</code> and adds both paths for <code>sys.exec_prefix</code> as well, should that constant be different).</p>

<p>That said, what's the context? You shouldn't be messing with your <code>site-packages</code> directly; setuptools/distutils will work for installation, and your program may be running in a virtualenv where your pythonpath is completely user-local, so it shouldn't assume use of the system site-packages directly either.</p>
"
122387,19990,2008-09-23T17:16:22Z,122327,7,"<p>An additional note to the <code>get_python_lib</code> function mentioned already: on some platforms different directories are used for platform specific modules (eg: modules that require compilation).  If you pass <code>plat_specific=True</code> to the function you get the site packages for platform specific packages.</p>
"
122482,3207,2008-09-23T17:32:19Z,121439,11,"<p>As @zacherates says, you really don't want to display a stacktrace to your users.  The easiest approach to this problem is what Django does by default if you have yourself and your developers listed in the ADMINS setting with email addresses; it sends an email to everyone in that list with the full stack trace (and more) everytime there is a 500 error with DEBUG = False.</p>
"
122590,19784,2008-09-23T17:50:47Z,122524,1,"<p>It's not eclipse, but ActiveState's <a href=""http://docs.activestate.com/activepython/2.5/faq/windows/index.html#where-is-freeze-for-windows"" rel=""nofollow"">ActivePython FAQ</a> mentions the freeze utility, which sounds like it might be close to what you're asking for.</p>
"
122701,10897,2008-09-23T18:08:41Z,112483,0,"<p>Quick tip, if you color each state differently you can identify which one to pick from the color under mouse cursor rather than doing a complex point in polygon routine.</p>
"
122785,19990,2008-09-23T18:23:31Z,122763,8,"<p>Like this:</p>

<pre><code>def nest(d):
    rv = {}
    for key, value in d.iteritems():
        node = rv
        for part in key.split('/'):
            node = node.setdefault(part, {})
        node.update(value)
    return rv
</code></pre>
"
122812,19193,2008-09-23T18:25:51Z,122763,1,"<pre><code>def layer(dict):
  for k,v in dict:
    if '/' in k:
      del dict[k]
      subdict = dict.get(k[:k.find('/')],{})
      subdict[k[k.find('/')+1:]] = v
      layer(subdict)
</code></pre>
"
123077,10661,2008-09-23T19:04:16Z,122524,1,"<p>For Windows, there's the <a href=""http://www.py2exe.org/"" rel=""nofollow"">py2exe</a> project.</p>

<p>There's <a href=""http://systemexit.de/bbfreeze/README.html"" rel=""nofollow"">bbfreeze</a>, and <a href=""http://pyinstaller.python-hosting.com/"" rel=""nofollow"">PyInstaller</a>, and <a href=""http://www.undefined.org/python/"" rel=""nofollow"">py2app</a>, also.</p>
"
123083,825,2008-09-23T19:04:53Z,122277,10,"<p>Yeah, it's kind of annoying.  Perhaps this will work for your case.  </p>

<pre><code>
import re

class ReCheck(object):
    def __init__(self):
        self.result = None
    def check(self, pattern, text):
        self.result = re.search(pattern, text)
        return self.result

var = 'bar stuff'
m = ReCheck()
if m.check(r'foo(.+)',var):
    print m.result.group(1)
elif m.check(r'bar(.+)',var):
    print m.result.group(1)
elif m.check(r'baz(.+)',var):
    print m.result.group(1)
</code></pre>

<p><strong>EDIT:</strong> Brian correctly pointed out that my first attempt did not work.  Unfortunately, this attempt is longer.</p>
"
123090,15687,2008-09-23T19:05:51Z,742,0,"<p>Generic views will usually be the way to go, but ultimately you're free to handle URLs however you want. FormWizard does things in a class-based way, as do some apps for RESTful APIs.</p>

<p>Basically with a URL you are given a bunch of variables and place to provide a callable, what callable you provide is completely up to you - the standard way is to provide a function - but ultimately Django puts no restrictions on what you do.</p>

<p>I do agree that a few more examples of how to do this would be good, FormWizard is probably the place to start though.</p>
"
123093,20832,2008-09-23T19:06:08Z,1734,3,"<p>From your brief description, it sounds like protocol buffers is not the right fit.  The phrase ""structured content created by hand in a text editor"" pretty much screams for XML.</p>

<p>But if you want efficient, low latency communications with data structures that are not shared outside your organization, binary serialization such as protocol buffers can offer a huge win.</p>
"
123212,12682,2008-09-23T19:25:35Z,123198,964,"<p><a href=""http://docs.python.org/2/library/shutil.html""><code>shutil</code></a> has many methods you can use. One of which is:</p>

<pre><code>from shutil import copyfile

copyfile(src, dst)
</code></pre>

<p>Copy the contents of the file named <code>src</code> to a file named <code>dst</code>. The destination location must be writable; otherwise, an <code>IOError</code> exception will be raised. If <code>dst</code> already exists, it will be replaced. Special files such as character or block devices and pipes cannot be copied with this function. <code>src</code> and <code>dst</code> are path names given as strings. </p>
"
123217,10322,2008-09-23T19:25:51Z,123198,6,"<p><a href=""https://docs.python.org/library/shutil.html"" rel=""nofollow"">shutil</a> may have what you’re looking for.</p>
"
123225,20796,2008-09-23T19:27:07Z,123198,9,"<p>Look at module <strong>shutil</strong>. 
It contains function <strong>copyfile</strong>(<em>src</em>, <em>dst</em>) </p>
"
123226,18017,2008-09-23T19:27:23Z,123198,25,"<p>Use the <a href=""https://docs.python.org/3/library/shutil.html"">shutil module</a>.</p>

<pre><code>copyfile(src, dst)
</code></pre>

<p>Copy the contents of the file named src to a file named dst. The destination location must be writable; otherwise, an IOError exception will be raised. If dst already exists, it will be replaced. Special files such as character or block devices and pipes cannot be copied with this function. src and dst are path names given as strings.</p>

<p>Take a look at <a href=""https://docs.python.org/3/library/filesys.html"">filesys</a> for all the file and directory handling functions available in standard Python modules.</p>
"
123238,11596,2008-09-23T19:29:41Z,123198,281,"<pre><code>import shutil
shutil.copy2('/dir/file.ext', '/new/dir/newname.ext')
</code></pre>

<p>or</p>

<pre><code>shutil.copy2('/dir/file.ext', '/new/dir')
</code></pre>

<p><code>copy2</code> is also often useful, it preserves the original modification and access info (mtime and atime) in the file metadata.</p>
"
123258,9493,2008-09-23T19:33:19Z,122033,0,"<p>Here's another python version, more closely matching the structure of your C# code.  There isn't a builtin for giving distinct results, so I've added a function to do this.</p>

<pre><code>import itertools, random

def distinct(seq):
    seen=set()
    for item in seq:
        if item not in seen:
            seen.add(item)
            yield item

def getRandomNumbers(max):
    while 1:
        yield random.randint(0,max)

for item in itertools.islice(distinct(getRandomNumbers(100)), 5):
    print item
</code></pre>
"
123526,17160,2008-09-23T20:08:51Z,123499,13,"<p>add <code>WSGIPassAuthorization On</code>:</p>

<pre><code>&lt;VirtualHost *&gt;
    &lt;Location /&gt;
        AuthType Digest
        AuthName ""global""
        AuthDigestDomain /
        AuthUserFile /root/apache_users
        &lt;Limit GET&gt;
            Require valid-user
        &lt;/Limit&gt;
    &lt;/Location&gt;
    WSGIPassAuthorization On
    WSGIScriptAlias / /some/script.wsgi
    WSGIDaemonProcess mywsgi user=someuser group=somegroup processes=2 threads=25
    WSGIProcessGroup mywsgi
    ServerName some.example.org
&lt;/VirtualHost&gt;
</code></pre>

<p>Then just read <code>environ['REMOTE_USER']</code>:</p>

<pre><code>def application(environ, start_response):
    start_response('200 OK', [
        ('Content-Type', 'text/plain'),
    ])
    return ['Hello %s' % environ['REMOTE_USER']]
</code></pre>

<p>More information at <a href=""http://code.google.com/p/modwsgi/wiki/ConfigurationGuidelines#User_Authentication"">mod_wsgi documentation</a>.</p>
"
123532,1157248,2008-09-23T20:10:02Z,118654,1,"<p>Regarding the second part of your question, you can use the DLR Hosting APIs to run IronPython code from within a C# application. The DLR hosting spec is <a href=""http://compilerlab.members.winisp.net/dlr-spec-hosting.pdf"" rel=""nofollow"">here</a>. This <a href=""http://blogs.msdn.com/seshadripv/"" rel=""nofollow"">blog</a> also contains some sample hosting applications</p>
"
123589,1157248,2008-09-23T20:16:56Z,118654,2,"<p>Also, regarding one of the previous comments about compiling with -X:SaveAssemblies - that is wrong. -X:SaveAssemblies is meant as a debugging feature. There is a API meant for compiling python code into binaries. <a href=""http://blogs.msdn.com/srivatsn/archive/2008/08/06/static-compilation-of-ironpython-scripts.aspx"" rel=""nofollow"">This post</a> explains the API and the difference between the two modes.</p>
"
123806,9951,2008-09-23T20:54:44Z,116494,1,"<p>Not a regexp but really elegant:</p>

<pre><code>from itertools import groupby

def paragraph(lines) :
    for group_separator, line_iteration in groupby(lines.splitlines(True), key = str.isspace) :
        if not group_separator :
            yield ''.join(line_iteration)

for p in paragraph('p1\n\t\np2\t\n\tstill p2\t   \n     \n\tp'): 
    print repr(p)

'p1\n'
'p2\t\n\tstill p2\t   \n'
'\tp3'
</code></pre>

<p>It's up to you to strip the output as you need it of course.</p>

<p>Inspired from the famous ""Python Cookbook"" ;-)</p>
"
123985,17160,2008-09-23T21:22:43Z,123958,10,"<p>The underlying operational system / shell reports real paths to python. </p>

<p>So, there really is no way around it, since <code>os.getcwd()</code> is a wrapped call to C Library <code>getcwd()</code> function.</p>

<p>There are some workarounds in the spirit of the one that you already know which is launching <code>pwd</code>.</p>

<p>Another one would involve using <code>os.environ['PWD']</code>. If that environmnent variable is set you can make some <code>getcwd</code> function that respects it.</p>

<p>The solution below combines both:</p>

<pre><code>import os
from subprocess import Popen, PIPE

class CwdKeeper(object):
    def __init__(self):
        self._cwd = os.environ.get(""PWD"")
        if self._cwd is None: # no environment. fall back to calling pwd on shell
           self._cwd = Popen('pwd', stdout=PIPE).communicate()[0].strip()
        self._os_getcwd = os.getcwd
        self._os_chdir = os.chdir

    def chdir(self, path):
        if not self._cwd:
            return self._os_chdir(path)
        p = os.path.normpath(os.path.join(self._cwd, path))
        result = self._os_chdir(p)
        self._cwd = p
        os.environ[""PWD""] = p
        return result

    def getcwd(self):
        if not self._cwd:
            return self._os_getcwd()
        return self._cwd

cwd = CwdKeeper()
print cwd.getcwd()
# use only cwd.chdir and cwd.getcwd from now on.    
# monkeypatch os if you want:
os.chdir = cwd.chdir
os.getcwd = cwd.getcwd
# now you can use os.chdir and os.getcwd as normal.
</code></pre>
"
123990,19435,2008-09-23T21:23:46Z,122524,1,"<p><a href=""http://stackoverflow.com/questions/2933/an-executable-python-app"">See</a> <a href=""http://stackoverflow.com/questions/106725/how-to-bundle-a-python-application-including-dependencies-for-windows"">these</a> <a href=""http://stackoverflow.com/questions/116657/how-do-you-create-an-osx-applicationdmg-from-a-python-package"">questions</a></p>
"
124128,3421,2008-09-23T21:50:45Z,122277,9,"<p>I'd suggest this, as it uses the least regex to accomplish your goal.  It is still functional code, but no worse then your old Perl.</p>

<pre><code>import re
var = ""barbazfoo""

m = re.search(r'(foo|bar|baz)(.+)', var)
if m.group(1) == 'foo':
    print m.group(1)
    # do something with m.group(1)
elif m.group(1) == ""bar"":
    print m.group(1)
    # do something with m.group(1)
elif m.group(1) == ""baz"":
    print m.group(2)
    # do something with m.group(2)
</code></pre>
"
124137,6068,2008-09-23T21:51:15Z,124108,2,"<p>You could do something like</p>

<pre><code>if settings.DEBUG:
  other = ""localhost""
else:
  other = ""somehost""
</code></pre>

<p>and use other to build the external URL. Generally you code in DEBUG mode and deploy in non-DEBUG mode. settings.DEBUG is a 'standard' Django thing.</p>
"
124255,19990,2008-09-23T22:14:18Z,124171,5,"<p>Perl is heavily optimized for text processing.  There are so many factors that it's hard to say what's the exact difference.  Text is represented completely differently internally (utf-8 versus utf-16/utf-32) and the regular expression engines are completely different too.  Python's regular expression engine is a custom one and not as much used as the perl one.  There are very few developers working on it (I think it's largely unmaintained) in contrast to the Perl one which is basically the ""core of the language"".</p>

<p>After all Perl is <em>the</em> text processing language.</p>
"
124357,4727,2008-09-23T22:39:07Z,124171,10,"<p>The better regex implementation of perl is one part of the story. That can't explain however why the perl implementation scales better. The difference become bigger with more processors. For some reason the python implementation has an issue there.</p>
"
124422,10661,2008-09-23T22:52:54Z,124108,1,"<p>By ""separate apps within Django"" do you mean separate applications with a common settings?  That is to say, two applications within the same Django site (or project)?</p>

<p>If so, the {% url %} tag will generate a proper absolute URL to any of the apps listed in the settings file.</p>

<p>If there are separate Django servers with separate settings, you have the standard internet problem of URI design.  Your URI's can be consistent with only the hostname changing.</p>

<pre><code>- http://localhost/some/path - development

- http://123.45.67.78/some/path - someone's laptop who's running a server for testing

- http://qa.mysite.com/some/path - QA

- http://www.mysite.com/some/path - production
</code></pre>

<p>You never need to provide the host information, so all of your links are <code>&lt;A HREF=""/some/path/""&gt;</code>.</p>

<p>This, generally, works out the best.  You have can someone's random laptop being a test server; you can get the IP address using ifconfig.</p>
"
124785,15154,2008-09-24T00:49:13Z,124692,23,"<p>I found an explanation <a href=""http://www.enfoldsystems.com/software/proxy/docs/4.0/configuringmanually.html#the-default-section"">here</a> by googling for ""windows ini"" ""default section"".  Summary: whatever you put in the [DEFAULT] section gets propagated to every other section.  Using the example from the linked website, let's say I have a config file called test1.ini:</p>

<pre><code>[host 1]
lh_server=192.168.0.1
vh_hosts = PloneSite1:8080
lh_root = PloneSite1

[host 2]
lh_server=192.168.0.1
vh_hosts = PloneSite2:8080
lh_root = PloneSite2
</code></pre>

<p>I can read this using ConfigParser:</p>

<pre><code>&gt;&gt;&gt; cp = ConfigParser.ConfigParser()
&gt;&gt;&gt; cp.read('test1.ini')
['test1.ini']
&gt;&gt;&gt; cp.get('host 1', 'lh_server')
'192.168.0.1'
</code></pre>

<p>But I notice that lh_server is the same in both sections; and, indeed, I realise that it will be the same for most hosts I might add.  So I can do this, as test2.ini:</p>

<pre><code>[DEFAULT]
lh_server=192.168.0.1

[host 1]
vh_root = PloneSite1
lh_root = PloneSite1

[host 2]
vh_root = PloneSite2
lh_root = PloneSite2
</code></pre>

<p>Despite the sections not having lh_server keys, I can still access them:</p>

<pre><code>&gt;&gt;&gt; cp.read('test2.ini')
['test2.ini']
&gt;&gt;&gt; cp.get('host 1', 'lh_server')
'192.168.0.1'
</code></pre>

<p>Read the linked page for a further example of using variable substitution in the DEFAULT section to simplify the INI file even more.</p>
"
125001,15154,2008-09-24T02:05:29Z,118516,1,"<p>More info on pyExcelerator: To read a file, do this:</p>

<pre><code>import pyExcelerator
book = pyExcelerator.parse_xls(filename)
</code></pre>

<p>where filename is a string that is the filename to read (not a file-like object).  This will give you a data structure representing the workbook: a list of pairs, where the first element of the pair is the worksheet name and the second element is the worksheet data.</p>

<p>The worksheet data is a dictionary, where the keys are (row, col) pairs (starting with 0) and the values are the cell contents -- generally int, float, or string.  So, for instance, in the simple case of all the data being on the first worksheet:</p>

<pre><code>data = book[0][1]
print 'Cell A1 of worksheet %s is: %s' % (book[0][0], repr(data[(0, 0)]))
</code></pre>

<p>If the cell is empty, you'll get a KeyError.  If you're dealing with dates, they <em>may</em> (I forget) come through as integers or floats; if this is the case, you'll need to convert.  Basically the rule is: datetime.datetime(1899, 12, 31) + datetime.timedelta(days=n) but that might be off by 1 or 2 (because Excel treats 1900 as a leap-year for compatibility with Lotus, and because I can't remember if 1900-1-1 is 0 or 1), so do some trial-and-error to check.  Datetimes are stored as floats, I think (days and fractions of a day).</p>

<p>I think there is partial support for forumulas, but I wouldn't guarantee anything.</p>
"
125053,21450,2008-09-24T02:20:16Z,125034,1,"<p>There is no real way to do this. There are ways to make it more 'difficult', but there's no concept of completely hidden, inaccessible class attributes.</p>

<p>If the person using your class can't be trusted to follow the API docs, then that's their own problem. Protecting people from doing stupid stuff just means that they will do far more elaborate, complicated, and damaging stupid stuff to try to do whatever they shouldn't have been doing in the first place.</p>
"
125058,14028,2008-09-24T02:21:56Z,125034,2,"<pre><code>class C(object):

    def __init__(self):

        self.fullaccess = 0
        self.__readonly = 22 # almost invisible to outside code...

    # define a publicly visible, read-only version of '__readonly':
    readonly = property(lambda self: self.__readonly)

    def inc_readonly( self ):
        self.__readonly += 1

c=C()

# prove regular attribute is RW...
print ""c.fullaccess = %s"" % c.fullaccess
c.fullaccess = 1234
print ""c.fullaccess = %s"" % c.fullaccess

# prove 'readonly' is a read-only attribute
print ""c.readonly = %s"" % c.readonly
try:
    c.readonly = 3
except AttributeError:
    print ""Can't change c.readonly""
print ""c.readonly = %s"" % c.readonly

# change 'readonly' indirectly...
c.inc_readonly()
print ""c.readonly = %s"" % c.readonly
</code></pre>

<p>This outputs:</p>

<p>$ python ./p.py<br>
c.fullaccess = 0<br>
c.fullaccess = 1234<br>
c.readonly = 22<br>
Can't change c.readonly<br>
c.readonly = 22<br>
c.readonly = 23<br>
<br>
My fingers itch to be able to say</p>

<pre><code>    @readonly
    self.readonly = 22
</code></pre>

<p>i.e., use a decorator on an attribute. It would be so clean...</p>
"
125061,17095,2008-09-24T02:22:16Z,125034,7,"<p>You should use the <code>@property</code> decorator.</p>

<pre><code>&gt;&gt;&gt; class a(object):
...     def __init__(self, x):
...             self.x = x
...     @property
...     def xval(self):
...             return self.x
... 
&gt;&gt;&gt; b = a(5)
&gt;&gt;&gt; b.xval
5
&gt;&gt;&gt; b.xval = 6
Traceback (most recent call last):
  File ""&lt;stdin&gt;"", line 1, in &lt;module&gt;
AttributeError: can't set attribute
</code></pre>
"
125122,10708,2008-09-24T02:46:54Z,125102,3,"<p>How about this:</p>

<pre><code>Python 2.5.1 (r251:54863, Apr 18 2007, 08:51:08) [MSC v.1310 32 bit (Intel)] on
win32
Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.
&gt;&gt;&gt; def makeSpecial(mystring, special_substr):
...     return mystring.replace(special_substr, '&lt;span class=""special""&gt;%s&lt;/span&gt;
' % special_substr)
...
&gt;&gt;&gt; makeSpecial(""I am the most foo h4ck3r ever!!"", ""foo"")
'I am the most &lt;span class=""special""&gt;foo&lt;/span&gt; h4ck3r ever!!'
&gt;&gt;&gt;
</code></pre>
"
125134,12682,2008-09-24T02:49:13Z,125102,1,"<p>As far as I can tell, you're doing a simple string replace. You're replacing ""foo"" with ""bar foo bar."" So from <a href=""http://docs.python.org/lib/string-methods.html"" rel=""nofollow"" title=""string methods"">string</a> you could just use </p>

<pre><code>replace(old, new[, count])
</code></pre>

<p>Return a copy of the string with all occurrences of substring old replaced by new. If the optional argument count is given, only the first count occurrences are replaced.  </p>

<p>So for you it would be:</p>

<pre><code>myStr.replace(""foo"", ""&lt;span&gt;foo&lt;/span&gt;"")
</code></pre>
"
125136,8819,2008-09-24T02:49:37Z,125034,0,"<p>You could use a metaclass that auto-wraps methods (or class attributes) that follow a naming convention into properties (shamelessly taken from <a href=""http://www.python.org/download/releases/2.2/descrintro/#metaclasses"" rel=""nofollow"">Unifying Types and Classes in Python 2.2</a>:</p>

<pre><code>class autoprop(type):
    def __init__(cls, name, bases, dict):
        super(autoprop, cls).__init__(name, bases, dict)
        props = {}
        for name in dict.keys():
            if name.startswith(""_get_"") or name.startswith(""_set_""):
                props[name[5:]] = 1
        for name in props.keys():
            fget = getattr(cls, ""_get_%s"" % name, None)
            fset = getattr(cls, ""_set_%s"" % name, None)
            setattr(cls, name, property(fget, fset))
</code></pre>

<p>This allows you to use:</p>

<pre><code>class A:
    __metaclass__ = autosuprop
    def _readonly(self):
        return __x
</code></pre>
"
125140,20037,2008-09-24T02:51:00Z,594,17,"<p>My preferred way is the cursor iterator, but setting first the arraysize property of the cursor. </p>

<pre><code>curs.execute('select * from people')
curs.arraysize = 256
for row in curs:
    print row
</code></pre>

<p>In this example, cx_Oracle will fetch rows from Oracle 256 rows at a time, reducing the number of network round trips that need to be performed</p>
"
125142,9021,2008-09-24T02:51:15Z,125102,0,"<p>If you wanted to do it with javascript/jQuery, take a look at this question: <a href=""http://stackoverflow.com/questions/119441/highlight-a-word-with-jquery"">http://stackoverflow.com/questions/119441/highlight-a-word-with-jquery</a></p>
"
125163,20037,2008-09-24T02:58:07Z,95950,0,"<p>You need to append the c:\Oracle32\bin directory to the PATH variable of your environment before you execute python.exe.<br>
In Linux, I need to set up the LD_LIBRARY_PATH variable for similar reasons, to locate the Oracle libraries, before calling python. I use wrapper shell scripts that set the variable and then call Python.<br>
In your case, maybe you can call, in the service startup, a .cmd or .vbs script that sets the PATH variable and then calls python.exe with your .py script.</p>

<p>I hope this helps!</p>
"
125226,12682,2008-09-24T03:17:26Z,125222,4,"<p>Take a look at <a href=""http://stackoverflow.com/questions/124869/how-does-the-doc-format-work"" rel=""nofollow"" title=""how the doc format works"">how the doc format works</a> and <a href=""http://stackoverflow.com/questions/124959/create-word-document-using-php-in-lunux"" rel=""nofollow"" title=""create word document using php in linux"">create word document using PHP in linux</a>. The former is especially useful. <a href=""http://www.abisource.com/"" rel=""nofollow"" title=""abiword"">Abiword</a> is my recommended tool. There are <a href=""http://www.abisource.com/wiki/Microsoft_Word_documents"" rel=""nofollow"" title=""Abiword limitations"">limitations</a> though:</p>

<blockquote>
  <p>However, if the document has complicated tables, text boxes, embedded spreadsheets, and so forth, then it might not work as expected. Developing good MS Word filters is a very difficult process, so please bear with us as we work on getting Word documents to open correctly. If you have a Word document which fails to load, please open a Bug and include the document so we can improve the importer. </p>
</blockquote>
"
125235,17095,2008-09-24T03:19:53Z,125222,2,"<p>I'm not sure if you're going to have much luck without using COM. The .doc format is ridiculously complex, and is often called a ""memory dump"" of Word at the time of saving!</p>

<p>At Swati, that's in HTML, which is fine and dandy, but most word documents aren't so nice!</p>
"
125248,20789,2008-09-24T03:23:42Z,125222,10,"<p>OpenOffice.org can be scripted with Python: <a href=""http://wiki.services.openoffice.org/wiki/Python"">see here</a>.</p>

<p>Since OOo can load most MS Word files flawlessly, I'd say that's your best bet.</p>
"
125386,15154,2008-09-24T04:13:03Z,125222,17,"<p>You could make a subprocess call to <a href=""http://en.wikipedia.org/wiki/Antiword"">antiword</a>.  Antiword is a linux commandline utility for dumping text out of a word doc.  Works pretty well for simple documents (obviously it loses formatting).  It's available through apt, and probably as RPM, or you could compile it yourself.</p>
"
125713,19990,2008-09-24T06:35:51Z,125703,75,"<p>Depends on what you want to do.  To append you can open it with ""a"":</p>

<pre><code> with open(""foo.txt"", ""a"") as f:
     f.write(""new line\n"")
</code></pre>

<p>If you want to preprend something you have to read from the file first:</p>

<pre><code>with open(""foo.txt"", ""r+"") as f:
     old = f.read() # read everything in the file
     f.seek(0) # rewind
     f.write(""new line\n"" + old) # write the new line before
</code></pre>
"
125739,20789,2008-09-24T06:49:36Z,125034,2,"<p>Here's how:</p>

<pre><code>class whatever(object):
  def __init__(self, a, b, c, ...):
    self.__foobar = 1
    self.__blahblah = 2

  foobar = property(lambda self: self.__foobar)
  blahblah = property(lambda self: self.__blahblah)
</code></pre>

<p>(Assuming <code>foobar</code> and <code>blahblah</code> are the attributes you want to be read-only.)  Prepending <b>two</b> underscores to an attribute name effectively hides it from outside the class, so the internal versions won't be accessible from the outside.  This <b>only works for new-style classes inheriting from object</b> since it depends on <code>property</code>.</p>

<p>On the other hand... this is a pretty silly thing to do.  Keeping variables private seems to be an obsession that comes from C++ and Java.  Your users should use the public interface to your class because it's well-designed, not because you force them to.</p>

<p>Edit: Looks like Kevin already posted a similar version.</p>
"
125759,5324,2008-09-24T06:57:21Z,125703,100,"<p>Unfortunately there is no way to insert into the middle of a file without re-writing it. As previous posters have indicated, you can append to a file or overwrite part of it using seek but if you want to add stuff at the beginning or the middle, you'll have to rewrite it.</p>

<p>This is an operating system thing, not a Python thing. It is the same in all languages.</p>

<p>What I usually do is read from the file, make the modifications and write it out to a new file called myfile.txt.tmp or something like that. This is better than reading the whole file into memory because the file may be too large for that. Once the temporary file is completed, I rename it the same as the original file.</p>

<p>This is a good, safe way to do it because if the file write crashes or aborts for any reason, you still have your untouched original file.</p>
"
125810,15274,2008-09-24T07:21:12Z,123198,54,"<p>Copying a file is a relatively straightforward operation as shown by the examples below, but you should instead use the <a href=""https://docs.python.org/library/shutil.html"">shutil stdlib module</a> for that.</p>

<pre class=""lang-py prettyprint-override""><code>def copyfileobj_example(source, dest, buffer_size=1024*1024):
    """"""      
    Copy a file from source to dest. source and dest
    must be file-like objects, i.e. any object with a read or
    write method, like for example StringIO.
    """"""
    while 1:
        copy_buffer = source.read(buffer_size)
        if not copy_buffer:
            break
        dest.write(copy_buffer)
</code></pre>

<p>If you want to copy by filename you could do something like this:</p>

<pre class=""lang-py prettyprint-override""><code>def copyfile_example(source, dest):
    # Beware, this example does not handle any edge cases!
    with open(source, 'rb') as src, open(dest, 'wb') as dst:
        copyfileobj_example(src, dst)
</code></pre>
"
126034,3715,2008-09-24T08:30:00Z,115866,1,"<p>I use something like the following to get seconds since the epoch (UTC) from a MySQL date (local time):</p>

<pre><code>calendar.timegm(
   time.gmtime(
      time.mktime(
         time.strptime(t, 
                       ""%Y-%m-%d %H:%M:%S""))))
</code></pre>

<p>More info in this question: <a href=""http://stackoverflow.com/questions/79797/how-do-i-convert-local-time-to-utc-in-python"">http://stackoverflow.com/questions/79797/how-do-i-convert-local-time-to-utc-in-python</a></p>
"
126216,4999,2008-09-24T09:33:24Z,126131,1,"<p>Only way I know to accomplish this would be to drive real browser, for example using <a href=""http://selenium-rc.openqa.org"" rel=""nofollow"">selenium-rc</a>.</p>
"
126250,995,2008-09-24T09:42:52Z,126131,7,"<p>The big complication here is emulating the full browser environment outside of a browser. You can use stand alone javascript interpreters like Rhino and SpiderMonkey to run javascript code but they don't provide a complete browser like environment to full render a web page.</p>

<p>If I needed to solve a problem like this I would first look at how the javascript is rendering the page, it's quite possible it's fetching data via AJAX and using that to render the page. I could then use python libraries like simplejson and httplib2 to directly fetch the data and use that, negating the need to access the DOM object. However, that's only one possible situation, I don't know the exact problem you are solving.</p>

<p>Other options include the selenium one mentioned by Łukasz, some kind of webkit embedded craziness, some kind of IE win32 scripting craziness or, finally, a pyxpcom based solution (with added craziness). All these have the drawback of requiring pretty much a fully running web browser for python to play with, which might not be an option depending on your environment.</p>
"
126286,9567,2008-09-24T09:54:22Z,126131,5,"<p><a href=""http://doc.trolltech.com/4.4/qtwebkit.html"">QtWebKit</a> is contained in PyQt4, but I don't know if you can use it without showing a widget. After a cursory look over the documentation, it seems to me you can only get HTML, not a DOM tree.</p>
"
126313,2963,2008-09-24T10:03:37Z,118138,1,"<p>While it's not a guide <em>solely</em> targetted at python/GTK+/OS X, <a href=""http://groups.google.com/group/reinteract/msg/4846099674d2153a"" rel=""nofollow"">this post</a> is a good, detailed description of someone else's attempt to do most of what you describe. Obviously, the app-specific stuff is going to vary.</p>
"
126341,19990,2008-09-24T10:11:15Z,126131,1,"<p>You can probably use <a href=""http://code.google.com/p/pywebkitgtk/"" rel=""nofollow"">python-webkit</a> for it.  Requires a running glib and GTK, but that's probably less problematic than wrapping the parts of webkit without glib.</p>

<p>I don't know if it does everything you need, but I guess you should give it a try.</p>
"
126346,14337,2008-09-24T10:12:16Z,118138,3,"<p>Native looking widgets is quite complicated.
There's a beginning of quartz engine (for theming) found here <a href=""http://git.gnome.org/browse/gtk+/tree/gdk/quartz"" rel=""nofollow"">http://git.gnome.org/browse/gtk+/tree/gdk/quartz</a>
For self-contained applications check out the newly released bundle on <a href=""http://live.gnome.org/GTK%2B/OSX"" rel=""nofollow"">http://live.gnome.org/GTK%2B/OSX</a></p>
"
126355,14337,2008-09-24T10:14:06Z,66730,2,"<p>If you use kiwi available <a href=""http://kiwi.async.com.br/"" rel=""nofollow"">here</a> you can just do:</p>

<pre><code>from kiwi.utils import gsignal

class MyObject(gobject.GObject):
    gsignal('signal-name')
</code></pre>
"
126389,10661,2008-09-24T10:27:45Z,125703,28,"<p>Rewriting a file in place is often done by saving the old copy with a modified name.  Unix folks add a <code>~</code> to mark the old one.  Windows folks do all kinds of things -- add .bak or .old -- or rename the file entirely or put the ~ on the front of the name.</p>

<pre><code>import shutil
shutil.move( afile, afile+""~"" )

destination= open( aFile, ""w"" )
source= open( aFile+""~"", ""r"" )
for line in source:
    destination.write( line )
    if &lt;some condition&gt;:
        destination.write( &gt;some additional line&gt; + ""\n"" )
source.close()
destination.close()
</code></pre>

<p>Instead of <code>shutil</code>, you can use the following.</p>

<pre><code>import os
os.rename( aFile, aFile+""~"" )
</code></pre>
"
126399,19990,2008-09-24T10:31:00Z,126356,3,"<p>Why is pyFacebook django centric?  Looks like it works perfectly fine with all kinds of WSGI apps or Python applications in general.  No need to use Django.</p>
"
126494,995,2008-09-24T10:59:27Z,126364,2,"<p>Have you tried the <a href=""http://www.stickpeople.com/projects/python/win-psycopg/"" rel=""nofollow"">binary build</a> of psycopg2 for windows? If that works with your python then it mitigates the need to build by hand.</p>

<p>I've seen random people ask this question on various lists and it seems one recommendation is to build postgresql by hand to work around this problem.</p>
"
126495,19990,2008-09-24T11:00:28Z,126364,1,"<p>Compiling extensions on windows can be tricky.  There are precompiled libraries available however: <a href=""http://www.stickpeople.com/projects/python/win-psycopg/"" rel=""nofollow"">http://www.stickpeople.com/projects/python/win-psycopg/</a></p>
"
126499,11992,2008-09-24T11:02:55Z,119167,24,"<p>Using the <code>__init__.py</code> file allows you to make the internal package structure invisible from the outside. If the internal structure changes (e.g. because you split one fat module into two) you only have to adjust the <code>__init__.py</code> file, but not the code that depends on the package. You can also make parts of your package invisible, e.g. if they are not ready for general usage.</p>

<p>Note that you can use the <code>del</code> command, so a typical <code>__init__.py</code> may look like this:</p>

<pre><code>from somemodule import some_function1, some_function2, SomeObject

del somemodule
</code></pre>

<p>Now if you decide to split <code>somemodule</code> the new <code>__init__.py</code> might be:</p>

<pre><code>from somemodule1 import some_function1, some_function2
from somemodule2 import SomeObject

del somemodule1
del somemodule2
</code></pre>

<p>From the outside the package still looks exactly as before.</p>
"
126533,5190,2008-09-24T11:11:41Z,126524,227,"<pre><code>&gt;&gt;&gt; a = [3,4,5,6]
&gt;&gt;&gt; for i, val in enumerate(a):
...     print i, val
...
0 3
1 4
2 5
3 6
&gt;&gt;&gt;
</code></pre>
"
126535,7136,2008-09-24T11:12:14Z,126524,78,"<p>Yep, that would be the <a href=""http://docs.python.org/library/functions.html#enumerate""><code>enumerate</code></a> function! Or more to the point, you need to do:</p>

<pre><code>list(enumerate([3,7,19]))

[(0, 3), (1, 7), (2, 19)]
</code></pre>
"
126750,15682,2008-09-24T12:15:05Z,126738,1,"<p>Once an object is drawn in a device context it stays there. If you want to move it you need to redraw it.</p>

<p>You can keep a background that's fixed and only redraw the movable elements each time they move. Basically that's how it's done.</p>

<p>To move an object smoothly over a line you have to do something like this (I don't have a program ready, so can only give you an idea):</p>

<ul>
<li>choose the start and end position: point A(x1, y1) and B(x2, y2)</li>
<li>choose in how much time the object should change position from A to B (say 10 seconds).</li>
<li>use a timer set to a certain interval (say 2 seconds)</li>
<li>calculate the delta X and Y that the object should change for each timer interval. In this case dx = (x2-x1)*2/10 and dy = (y2-y1)*2/10</li>
<li>in the timer callback increment the current object position with dx and dy and redraw the image</li>
</ul>

<p>That would be the algorithm.</p>

<p>I suggest that you also take a look to <a href=""http://www.pygame.org/"" rel=""nofollow"">PyGame</a>. Maybe you can use that and it also has some tutorials.</p>
"
126843,19990,2008-09-24T12:28:50Z,126787,2,"<p>As the author of one of the reloader mechanisms (the one in werkzeug) I can tell you that it doesn't work.  What all the reloaders do is forking one time and restarting the child process if a monitor thread notices that one module changed on the file system.</p>

<p>Inline <code>reload()</code>ing doesn't work because references to the reloaded module are not updated.</p>
"
126866,18382,2008-09-24T12:34:47Z,126787,1,"<p>reload() does not work. ""Reloading"" is usually implemented by forking.</p>

<p>Implementing ""real"" reload() is extremely difficult and even the most serious attempt, <a href=""http://twistedmatrix.com/documents/current/api/twisted.python.rebuild.html"" rel=""nofollow"">twisted.python.rebuild</a> isn't perfect.</p>
"
127089,15682,2008-09-24T13:21:55Z,127055,1,"<p>First of all if you only need the first result of re.findall it's better to just use re.search that returns a match or None.</p>

<p>For the groups number you could count the number of open parenthesis '(' except those that are escaped by '\'. You could use another regex for that:</p>

<pre><code>def num_of_groups(regexp):
    rg = re.compile(r'(?&lt;!\\)\(')
    return len(rg.findall(regexp))
</code></pre>

<p>Note that this doesn't work if the regex contains non-capturing groups and also if '(' is escaped by using it as '[(]'. So this is not very reliable. But depending on the regexes that you use it might help.</p>
"
127092,6069,2008-09-24T13:22:27Z,127055,0,"<p>The <code>lastindex</code> property of the match object should be what you are looking for. See the <a href=""http://docs.python.org/lib/match-objects.html"" rel=""nofollow"">re module docs</a>.</p>
"
127097,15677,2008-09-24T13:23:34Z,127055,2,"<p>Something from inside sre_parse might help.</p>

<p>At first glance, maybe something along the lines of:</p>

<pre><code>&gt;&gt;&gt; import sre_parse
&gt;&gt;&gt; sre_parse.parse('(\d)\d(\d)')
[('subpattern', (1, [('in', [('category', 'category_digit')])])), 
('in', [('category', 'category_digit')]), 
('subpattern', (2, [('in', [('category', 'category_digit')])]))]
</code></pre>

<p>I.e. count the items of type 'subpattern':</p>

<pre><code>import sre_parse

def count_patterns(regex):
    """"""
    &gt;&gt;&gt; count_patterns('foo: \d')
    0
    &gt;&gt;&gt; count_patterns('foo: (\d)')
    1
    &gt;&gt;&gt; count_patterns('foo: (\d(\s))')
    1
    """"""
    parsed = sre_parse.parse(regex)
    return len([token for token in parsed if token[0] == 'subpattern'])
</code></pre>

<p>Note that we're only counting root level patterns here, so the last example only returns 1. To change this, <em>tokens</em> would need to searched recursively.</p>
"
127105,21632,2008-09-24T13:25:54Z,127055,0,"<p>Might be wrong, but I don't think there is a way to find the number of groups that would have been returned had the regex matched.  The only way I can think of to make this work the way you want it to is to pass the number of matches your particular regex expects as an argument.</p>

<p>To clarify though: When findall succeeds, you only want the first match to be returned, but when it fails you want a list of empty strings?  Because the comment seems to show all matches being returned as a list.</p>
"
127216,8297,2008-09-24T13:45:34Z,126738,0,"<p>To smoothly move object between starting coordinate <code>(x1, y1)</code> and destination coordinate <code>(x2,y2)</code>, you need to first ask yourself, how <em>long</em> the object should take to get to its destination. Lets say you want the object to get there in <code>t</code> time units (which maybe seconds, hours, whatever). Once you have determined this it is then trivial to workout the displacement per unit time:</p>

<pre><code>dx = (x2-x1)/t
dy = (y2-y1)/t
</code></pre>

<p>Now you simply need to add <code>(dx,dy)</code> to the object's position (<code>(x,y)</code>, initially <code>(x1,y1)</code>) every unit time, and stop when the object gets within some threshold distance of the destination. This is to account for the fact errors in divisions will accumulate, so if you did an equality check like: </p>

<pre><code>(x,y)==(x2,y2)
</code></pre>

<p>It is unlikely it will ever be true. </p>

<p>Note the above method gives you constant velocity, straight line movement. You may wish to instead use some sort a slightly more complex formula to give the object the appearance of accelerating, maintaining cruise speed, then decelerating. The following formulae may then be useful:</p>

<pre><code>v(t) = u(t) + t*a(t)
x(t) = v(t) + t*v(t)
</code></pre>

<p>This is merely <a href=""http://en.wikipedia.org/wiki/Eulers_Method"" rel=""nofollow"">Euler's method</a>, and should suffice for animation purposes. </p>
"
127375,10661,2008-09-24T14:10:58Z,126524,21,"<p>Here's another using the <code>zip</code> function.</p>

<pre><code>&gt;&gt;&gt; a = [3, 7, 19]
&gt;&gt;&gt; zip(range(len(a)), a)
[(0, 3), (1, 7), (2, 19)]
</code></pre>
"
127392,5757,2008-09-24T14:12:57Z,127055,1,"<p>Using your code as a basis:</p>

<pre><code>def groups(regexp, s):
    """""" Returns the first result of re.findall, or an empty default

    &gt;&gt;&gt; groups(r'(\d)(\d)(\d)', '123')
    ('1', '2', '3')
    &gt;&gt;&gt; groups(r'(\d)(\d)(\d)', 'abc')
    ('', '', '')
    """"""
    import re
    m = re.search(regexp, s)
    if m:
        return m.groups()
    return ('',) * len(m.groups())
</code></pre>
"
127493,12423,2008-09-24T14:23:58Z,127454,3,"<p>I guess one way would be to help with documentation (translation, updating), until you are aware enough about the language. Also following the devs and users mail groups would give you a pretty good idea of what is being done and needs to be done by the community.</p>
"
127501,16148,2008-09-24T14:24:47Z,127454,1,"<p>If you aren't up to actually working on the Python core, there are still many ways to contribute..  2 that immediately come to mind is:</p>

<p>work on documentation.. it can ALWAYS be improved.  Take your favorite modules and check out the documentation and add where you can.</p>

<p>Reporting descriptive bugs is very helpful to the development process.</p>
"
127510,14860,2008-09-24T14:25:23Z,127454,1,"<p>Get involved with the community:  <a href=""http://www.python.org/dev/"" rel=""nofollow"">http://www.python.org/dev/</a></p>
"
127601,9425,2008-09-24T14:43:35Z,127454,5,"<ol>
<li><p>Add to the docs. it is downright crappy</p></li>
<li><p>Help out other users on the dev and user mailing lists. </p></li>
<li><p>TEST PYTHON. bugs in programming languages are real bad. And I have seen someone discover atleast 1 bug in python</p></li>
<li><p>Frequent the #python channel on irc.freenode.net</p></li>
</ol>
"
127651,10661,2008-09-24T14:54:21Z,127454,4,"<p>Build something cool in Python and share it with others.  Small values of cool are still cool.  Not everyone gets to write epic, world-changing software.  </p>

<p>Every problem solved well using Python is a way of showing how cool Python is.</p>
"
127678,9567,2008-09-24T14:58:52Z,127606,11,"<p>I'm not sure if converting the info set to nested dicts first is easier. Using ElementTree, you can do this:</p>

<pre><code>import xml.etree.ElementTree as ET
doc = ET.parse(""template.xml"")
lvl1 = doc.findall(""level1-name"")[0]
lvl1.remove(lvl1.find(""leaf1"")
lvl1.remove(lvl1.find(""leaf2"")
# or use del lvl1[idx]
doc.write(""config-new.xml"")
</code></pre>

<p>ElementTree was designed so that you don't have to convert your XML trees to lists and attributes first, since it uses exactly that internally.</p>

<p>It also support as small subset of <a href=""http://effbot.org/zone/element-xpath.htm"" rel=""nofollow"">XPath</a>.</p>
"
127720,10661,2008-09-24T15:05:01Z,127606,0,"<p>Have you tried this?</p>

<pre><code>print xml.etree.ElementTree.tostring( conf_new )
</code></pre>
"
127787,21712,2008-09-24T15:15:24Z,127454,0,"<p>Start by contributing to a Python project that you use and enjoy.  This can be as simple as answering questions on the mailing list or IRC channel, offering to help with documentation and test writing or fixing bugs.</p>
"
127825,6899,2008-09-24T15:19:27Z,127803,22,"<p>What is the exact error you get? Is it like the following:</p>

<pre><code>&gt;&gt;&gt; datetime.datetime.strptime(""2008-08-12T12:20:30.656234Z"", ""%Y-%m-%dT%H:%M:%S.Z"")
ValueError: time data did not match format:  data=2008-08-12T12:20:30.656234Z  fmt=%Y-%m-%dT%H:%M:%S.Z
</code></pre>

<p>If yes, you can split your input string on ""."", and then add the microseconds to the datetime you got.</p>

<p>Try this:</p>

<pre><code>&gt;&gt;&gt; def gt(dt_str):
        dt, _, us= dt_str.partition(""."")
        dt= datetime.datetime.strptime(dt, ""%Y-%m-%dT%H:%M:%S"")
        us= int(us.rstrip(""Z""), 10)
        return dt + datetime.timedelta(microseconds=us)

&gt;&gt;&gt; gt(""2008-08-12T12:20:30.656234Z"")
datetime.datetime(2008, 8, 12, 12, 20, 30, 656234)
&gt;&gt;&gt; 
</code></pre>
"
127872,7972,2008-09-24T15:27:24Z,127803,35,"<pre>
import re,datetime
s=""2008-09-03T20:56:35.450686Z""
d=datetime.datetime(*map(int, re.split('[^\d]', s)[:-1]))
</pre>
"
127934,6372,2008-09-24T15:38:17Z,127803,46,"<p>Try the <a href=""https://bitbucket.org/micktwomey/pyiso8601"">iso8601</a> module; it does exactly this.</p>

<p>There are several other options mentioned on the <a href=""http://wiki.python.org/moin/WorkingWithTime"">WorkingWithTime</a> page on the python.org wiki.</p>
"
127972,21722,2008-09-24T15:45:02Z,127803,80,"<p>Note in Python 2.6+ and Py3K, the %f character catches microseconds.</p>

<pre><code>&gt;&gt;&gt; datetime.datetime.strptime(""2008-09-03T20:56:35.450686Z"", ""%Y-%m-%dT%H:%M:%S.%fZ"")
</code></pre>

<p>See issue <a href=""http://bugs.python.org/issue1158"">here</a></p>
"
128005,9940,2008-09-24T15:52:11Z,127736,0,"<p>From the code that was posted, the only difference between Transition and Labeled Transition is the return of get_lable() and has_label().  In which case you can compress these two a single class that sets a label attribute to None and </p>

<pre><code>return self.label is not None
</code></pre>

<p>in the has_label() function.</p>

<p>Can you post the code for the <code>ConditionalTransition</code> class?  I think this would make it clearer.</p>
"
128023,21245,2008-09-24T15:56:06Z,127606,8,"<p>For easy manipulation of XML in python, I like the <a href=""http://www.crummy.com/software/BeautifulSoup/"" rel=""nofollow"">Beautiful Soup</a> library. It works something like this:</p>

<p>Sample XML File:</p>

<pre><code>&lt;root&gt;
  &lt;level1&gt;leaf1&lt;/level1&gt;
  &lt;level2&gt;leaf2&lt;/level2&gt;
&lt;/root&gt;
</code></pre>

<p>Python code:</p>

<pre><code>from BeautifulSoup import BeautifulStoneSoup, Tag, NavigableString

soup = BeautifulStoneSoup('config-template.xml') # get the parser for the xml file
soup.contents[0].name
# u'root'
</code></pre>

<p>You can use the node names as methods:</p>

<pre><code>soup.root.contents[0].name
# u'level1'
</code></pre>

<p>It is also possible to use regexes:</p>

<pre><code>import re
tags_starting_with_level = soup.findAll(re.compile('^level'))
for tag in tags_starting_with_level: print tag.name
# level1
# level2
</code></pre>

<p>Adding and inserting new nodes is pretty straightforward:</p>

<pre><code># build and insert a new level with a new leaf
level3 = Tag(soup, 'level3')
level3.insert(0, NavigableString('leaf3')
soup.root.insert(2, level3)

print soup.prettify()
# &lt;root&gt;
#  &lt;level1&gt;
#   leaf1
#  &lt;/level1&gt;
#  &lt;level2&gt;
#   leaf2
#  &lt;/level2&gt;
#  &lt;level3&gt;
#   leaf3
#  &lt;/level3&gt;
# &lt;/root&gt;
</code></pre>
"
128361,10661,2008-09-24T16:59:10Z,128259,1,"<p>Sets don't have keys.  The element <strong>is</strong> the key.</p>

<p>If you think you want keys, you have a mapping.  More-or-less by definition.</p>

<p>Sequential list lookup can be slow, even using a binary search.  Mappings use hashes and are fast.</p>

<p>Are you talking about a dictionary like this?</p>

<pre><code>{ 'id1': [ ('description1a', 'type1'), ('description1b','type1') ], 
  'id2': [ ('description2', 'type2') ],
...
}
</code></pre>

<p>This sure seems minimal.  ID's are only represented once.</p>

<p>Perhaps you have something like this?</p>

<pre><code>{ 'id1': ( ('description1a', 'description1b' ), 'type1' ),
  'id2': ( ('description2',), 'type2' ),
...
}
</code></pre>

<p>I'm not sure you can find anything more compact unless you resort to using the <code>struct</code> module.</p>
"
128393,20310,2008-09-24T17:04:11Z,128259,0,"<p>How about using <code>{id: (description, id_type)}</code> dictionary? Or <code>{(id, id_type): description}</code> dictionary if (id,id_type) is the key.</p>
"
128483,3560,2008-09-24T17:23:18Z,128466,3,"<p>Upgrade. For me it was very simple: change <code>__str__()</code> to <code>__unicode__()</code>, write basic <code>admin.py</code>, and done. Just start running your app on 1.0, test it, and when you encounter an error use the documentation on <a href=""http://code.djangoproject.com/wiki/BackwardsIncompatibleChanges"" rel=""nofollow"">backwards-incompatible changes</a> to see how to fix the issue.</p>
"
128496,1694,2008-09-24T17:26:05Z,128466,5,"<p>Although this depends on what you're doing, most applications should be able to just upgrade and then fix everything that breaks.  In my experience, the main things that I've had to fix after an upgrade are</p>

<ol>
<li><p>Changes to some of the funky stuff with models, such as the syntax for following foreign keys.</p></li>
<li><p>A small set of template changes, most notably auto-escaping.</p></li>
<li><p>Anything that depends on the specific structure of Django's internals.  This shouldn't be an issue unless you're doing stuff like dynamically modifying Django internals to change their behavior in a way that's necessary/convenient for your project.</p></li>
</ol>

<p>To summarize, unless you're doing a lot of really weird and/or complex stuff, a simple upgrade should be relatively painless and only require a few changes.</p>
"
128522,533,2008-09-24T17:30:04Z,128478,11,"<p>The first variant is indeed more efficient than the second when the function is called either zero or one times.  With the second and subsequent invocations, however, the ""import every call"" approach is actually less efficient.  See <a href=""http://wiki.python.org/moin/PythonSpeed/PerformanceTips#head-c849d5d5d94bc3eacbff9d5746af4083443cf2ca"">this link</a> for a lazy-loading technique that combines the best of both approaches by doing a ""lazy import"".</p>

<p>But there are reasons other than efficiency why you might prefer one over the other.  One approach is makes it much more clear to someone reading the code as to the dependencies that this module has.  They also have very different failure characteristics -- the first will fail at load time if there's no ""datetime"" module while the second won't fail until the method is called.</p>

<p><strong>Added Note:</strong> In IronPython, imports can be quite a bit more expensive than in CPython because the code is basically being compiled as it's being imported.</p>
"
128525,2147,2008-09-24T17:30:34Z,128478,3,"<p>I wouldn't worry about the efficiency of loading the module up front too much.  The memory taken up by the module won't be very big (assuming it's modular enough) and the startup cost will be negligible.</p>

<p>In most cases you want to load the modules at the top of the source file.  For somebody reading your code, it makes it much easier to tell what function or object came from what module.</p>

<p>One good reason to import a module elsewhere in the code is if it's used in a debugging statement.</p>

<p>For example:</p>

<pre><code>do_something_with_x(x0
</code></pre>

<p>I could debug this with:</p>

<pre><code>from pprint import pprint
pprint(x)
do_something_with_x(x)
</code></pre>

<p>Of course, the other reason to import modules elsewhere in the code is if you need to dynamically import them.  This is because you pretty much don't have any choice.</p>

<p>I wouldn't worry about the efficiency of loading the module up front too much.  The memory taken up by the module won't be very big (assuming it's modular enough) and the startup cost will be negligible.</p>
"
128526,9567,2008-09-24T17:30:36Z,128259,0,"<p>Sets in Python are implemented using hash tables. In earlier versions, they were actually implemented using sets, but that has changed AFAIK. The only thing you save by using a set would then be the size of a pointer for each entry (the pointer to the value). </p>

<p>To use only a part of a tuple for the hashcode, you'd have to subclass tuple and override the hashcode method:</p>

<pre><code>class ProteinTuple(tuple):
     def __new__(cls, m1, m2, m3):
         return tuple.__new__(cls, (m1, m2, m3))

     def __hash__(self):
         return hash(self[0])
</code></pre>

<p>Keep in mind that you pay for the extra function call to <code>__hash__</code> in this case, because otherwise it would be a C method.</p>

<p>I'd go for Constantin's suggestions and take out the id from the tuple and see how much that helps.</p>
"
128532,15401,2008-09-24T17:31:08Z,128478,21,"<p>Most of the time this would be useful for clarity and sensible to do but it's not always the case.  Below are a couple of examples of circumstances where module imports might live elsewhere.</p>

<p>Firstly, you could have a module with a unit test of the form:</p>

<pre><code>if __name__ == '__main__':
    import foo
    aa = foo.xyz()         # initiate something for the test
</code></pre>

<p>Secondly, you might have a requirement to conditionally import some different module at runtime.</p>

<pre><code>if [condition]:
    import foo as plugin_api
else:
    import bar as plugin_api
xx = plugin_api.Plugin()
[...]
</code></pre>

<p>There are probably other situations where you might place imports in other parts in the code.</p>
"
128534,8002,2008-09-24T17:31:17Z,128478,4,"<p>It's a tradeoff, that only the programmer can decide to make. </p>

<p>Case 1 saves some memory and startup time by not importing the datetime module (and doing whatever initialization it might require) until needed.  Note that doing the import 'only when called' also means doing it 'every time when called', so each call after the first one is still incurring the additional overhead of doing the import. </p>

<p>Case 2 save some execution time and latency by importing datetime beforehand so that not_often_called() will return more quickly when it <em>is</em> called, and also by not incurring the overhead of an import on every call.</p>

<p>Besides efficiency, it's easier to see module dependencies up front if the import statements are ... up front. Hiding them down in the code can make it more difficult to easily find what modules something depends on.</p>

<p>Personally I generally follow the PEP except for things like unit tests and such that I don't want always loaded because I <em>know</em> they aren't going to be used except for test code.</p>
"
128549,20789,2008-09-24T17:32:50Z,128478,6,"<p>Curt makes a good point: the second version is clearer and will fail at load time rather than later, and unexpectedly.</p>

<p>Normally I don't worry about the efficiency of loading modules, since it's (a) pretty fast, and (b) mostly only happens at startup.</p>

<p>If you have to load heavyweight modules at unexpected times, it probably makes more sense to load them dynamically with the <code>__import__</code> function, and be <b>sure</b> to catch <code>ImportError</code> exceptions, and handle them in a reasonable manner.</p>
"
128550,19435,2008-09-24T17:32:59Z,128259,1,"<p>I'm assuming the problem you try to solve by cutting down on the memory you use is the address space limit of your process. Additionally you search for a data structure that allows you fast insertion and reasonable sequential read out.</p>

<h2>Use less structures except strings (str)</h2>

<p>The question you ask is how to structure your data in one process to use less memory. The one canonical answer to this is (as long as you still need associative lookups), use as little other structures then python strings (str, not unicode) as possible. A python hash (dictionary) stores the references to your strings fairly efficiently (it is not a b-tree implementation).</p>

<p>However I think that you will not get very far with that approach, since what you face are huge datasets that might eventually just exceed the process address space and the physical memory of the machine you're working with altogether.</p>

<h2>Alternative Solution</h2>

<p>I would propose a different solution that does not involve changing your data structure to something that is harder to insert or interprete.</p>

<ul>
<li>Split your information up in multiple processes, each holding whatever datastructure is convinient for that. </li>
<li>Implement inter process communication with sockets such that processes might reside on other machines altogether. </li>
<li>Try to divide your data such as to minimize inter process communication (i/o is glacially slow compared to cpu cycles). </li>
</ul>

<p>The advantage of the approach I outline is that</p>

<ul>
<li>You get to use two ore more cores on a machine fully for performance</li>
<li>You are not limited by the address space of one process, or even the physical memory of one machine</li>
</ul>

<p>There are numerous packages and aproaches to distributed processing, some of which are</p>

<ul>
<li><a href=""http://pypi.python.org/pypi/linda/0.5.1"" rel=""nofollow"">linda</a></li>
<li><a href=""http://pypi.python.org/pypi/processing/0.52"" rel=""nofollow"">processing</a></li>
</ul>
"
128565,10661,2008-09-24T17:36:20Z,128259,0,"<p>It's still murky, but it sounds like you have some several lists of [(id, description, type)...]</p>

<p>The id's are unique within a list and consistent between lists.</p>

<p>You want to create a UNION: a single list, where each id occurs once, with possibly multiple descriptions.</p>

<p>For some reason, you think a mapping might be too big.  Do you have any evidence of this?  Don't over-optimize without actual measurements.  </p>

<p>This may be (if I'm guessing correctly) the standard ""merge"" operation from multiple sources.</p>

<pre><code>source1.sort()
source2.sort()
result= []
while len(source1) &gt; 0 or len(source2) &gt; 0:
    if len(source1) == 0:
        result.append( source2.pop(0) )
    elif len(source2) == 0:
        result.append( source1.pop(0) )
    elif source1[0][0] &lt; source2[0][0]:
        result.append( source1.pop(0) )
    elif source2[0][0] &lt; source1[0][0]:
        result.append( source2.pop(0) )
    else:
        # keys are equal
        result.append( source1.pop(0) )
        # check for source2, to see if the description is different.
</code></pre>

<p>This assembles a union of two lists by sorting and merging.  No mapping, no hash.</p>
"
128577,3560,2008-09-24T17:38:00Z,128478,141,"<p>Module importing is quite fast, but not instant. This means that:</p>

<ul>
<li>Putting the imports at the top of the module is fine, because it's a trivial cost that's only paid once.</li>
<li>Putting the imports within a function will cause calls to that function to take longer.</li>
</ul>

<p>So if you care about efficiency, put the imports at the top. Only move them into a function if your profiling shows that would help (you <strong>did</strong> profile to see where best to improve performance, right??)</p>

<p><hr /></p>

<p>The best reasons I've seen to perform lazy imports are:</p>

<ul>
<li>Optional library support. If your code has multiple paths that use different libraries, don't break if an optional library is not installed.</li>
<li>In the <code>__init__.py</code> of a plugin, which might be imported but not actually used. Examples are Bazaar plugins, which use <code>bzrlib</code>'s lazy-loading framework.</li>
</ul>
"
128616,9683,2008-09-24T17:44:16Z,61151,1,"<p>We use </p>

<p>app/src/code.py</p>

<p>app/testing/code_test.py </p>

<p>app/docs/..</p>

<p>In each test file we insert ""../src/"" in sys.path. It's not the nicest solution but works. I think it would be great if someone came up w/ something like maven in java that gives you standard conventions that just work, no matter what project you work on.</p>
"
128624,10661,2008-09-24T17:45:17Z,128573,-1,"<p>Here's my suggestion.  Don't use class methods.  </p>

<p>Seriously.  </p>

<p>What's the reason for using class methods in this case?  Why not have an ordinary object of an ordinary class?</p>

<p><hr /></p>

<p>If you simply want to change the value, a property isn't really very helpful is it?  Just set the attribute value and be done with it.</p>

<p>A property should only be used if there's something to conceal -- something that might change in a future implementation.  </p>

<p>Maybe your example is way stripped down, and there is some hellish calculation you've left off.  But it doesn't look like the property adds significant value.</p>

<p>The Java-influenced ""privacy"" techniques (in Python, attribute names that begin with _) aren't really very helpful.  Private from whom?  The point of private is a little nebulous when you have the source (as you do in Python.)</p>

<p>The Java-influenced EJB-style getters and setters (often done as properties in Python) are there to facilitate Java's primitive introspection as well as to pass muster with the static language compiler.  All those getters and setters aren't as helpful in Python.</p>
"
128641,21106,2008-09-24T17:48:02Z,128478,4,"<p>Here's an example where all the imports are at the very top (this is the only time I've needed to do this).  I want to be able to terminate a subprocess on both Un*x and Windows.</p>

<pre><code>import os
# ...
try:
    kill = os.kill  # will raise AttributeError on Windows
    from signal import SIGTERM
    def terminate(process):
        kill(process.pid, SIGTERM)
except (AttributeError, ImportError):
    try:
        from win32api import TerminateProcess  # use win32api if available
        def terminate(process):
            TerminateProcess(int(process._handle), -1)
    except ImportError:
        def terminate(process):
            raise NotImplementedError  # define a dummy function
</code></pre>

<p>(On review: what <a href=""http://stackoverflow.com/questions/128478/should-python-import-statements-always-be-at-the-top-of-a-module#128577"">John Millikin</a> said.)</p>
"
128655,17339,2008-09-24T17:49:54Z,128478,3,"<p>This is like many other optimizations - you sacrifice some readability for speed.  As John mentioned, if you've done your profiling homework and found this to be a significantly useful enough change <strong>and</strong> you need the extra speed, then go for it.  It'd probably be good to put a note up with all the other imports:</p>

<pre><code>from foo import bar
from baz import qux
# Note: datetime is imported in SomeClass below
</code></pre>
"
128684,21776,2008-09-24T17:52:54Z,128478,2,"<p>Module initialization only occurs once - on the first import.  If the module in question is from the standard library, then you will likely import it from other modules in your program as well.  For a module as prevalent as datetime, it is also likely a dependency for a slew of other standard libraries.  The import statement would cost very little then since the module intialization would have happened already.  All it is doing at this point is binding the existing module object to the local scope.</p>

<p>Couple that information with the argument for readability and I would say that it is best to have the import statement at module scope.  </p>
"
128812,19435,2008-09-24T18:08:52Z,128573,2,"<p>Half a solution, __set__ on the class does not work, still. The solution is a custom property class implementing both a property and a staticmethod</p>

<pre><code>class ClassProperty(object):
    def __init__(self, fget, fset):
        self.fget = fget
        self.fset = fset

    def __get__(self, instance, owner):
        return self.fget()

    def __set__(self, instance, value):
        self.fset(value)

class Foo(object):
    _bar = 1
    def get_bar():
        print 'getting'
        return Foo._bar

    def set_bar(value):
        print 'setting'
        Foo._bar = value

    bar = ClassProperty(get_bar, set_bar)

f = Foo()
#__get__ works
f.bar
Foo.bar

f.bar = 2
Foo.bar = 3 #__set__ does not
</code></pre>
"
128859,NA,2008-09-24T18:16:13Z,128478,31,"<p>I have adopted the practice of putting all imports in the functions that use them, rather than at the top of the module.</p>

<p>The benefit I get is the ability to refactor more reliably. When I move a function from one module to another, I know that the function will continue to work with all of its legacy of testing intact. If I have my imports at the top of the module, when I move a function, I find that I end up spending a lot of time getting the new module's imports complete and minimal. A refactoring IDE might make this irrelevant.</p>

<p>There is a speed penalty as mentioned elsewhere. I have measured this in my application and found it to be insignificant for my purposes. </p>

<p>It is also nice to be able to see all module dependencies up front without resorting to search (e.g. grep). However, the reason I care about module dependencies is generally because I'm installing, refactoring, or moving an entire system comprising multiple files, not just a single module. In that case, I'm going to perform a global search anyway to make sure I have the system-level dependencies. So I have not found global imports to aid my understanding of a system in practice.</p>

<p>I usually put the import of <code>sys</code> inside the <code>if __name__=='__main__'</code> check and then pass arguments (like <code>sys.argv[1:]</code>) to a <code>main()</code> function. This allows me to use <code>main</code> in a context where <code>sys</code> has not been imported.</p>
"
128957,10369,2008-09-24T18:35:11Z,128815,5,"<p>.NETs multi-value cookies work exactly the same way as what you're doing in django using a separator.  They've just abstracted that away for you.  What you're doing is fine and proper, and I don't think Django has anything specific to 'solve' this problem.</p>

<p>I will say that you're doing the right thing, in not using multiple cookies. Keep the over-the-wire overhead down by doing what you're doing.</p>
"
129012,18914,2008-09-24T18:42:35Z,128933,1,"<p>It looks like <em>deluser --group [groupname]</em> should do it.</p>

<p>If not, the <em>groups</em> command lists the groups that a user belongs to.  It should be fairly straightforward to come up with some Perl to capture that list into an array (or <em>map</em> it into a hash), delete the unwanted group(s), and feed that back to <em>usermod</em>.</p>
"
129172,3560,2008-09-24T19:04:59Z,129144,4,"<p>If they're simple one-line commands, you can wrap them in <code>lambda</code>s:</p>

<pre><code>for cmd in [
    (lambda: foo (a, b)),
    (lambda: bar (c, d)),
]:
    try:
        cmd ()
    except StandardError, e:
        baz (e)
</code></pre>

<p>You could wrap that whole thing up in a function, so it looked like this:</p>

<pre><code>ignore_errors (baz, [
    (lambda: foo (a, b)),
    (lambda: bar (c, d)),
])
</code></pre>
"
129174,9241,2008-09-24T19:05:17Z,129144,2,"<p>The best approach I have found, is to define a function like such:</p>

<pre><code>def handle_exception(function, reaction, *args, **kwargs):
    try:
        result = function(*args, **kwargs)
    except Exception, e:
        result = reaction(e)
    return result
</code></pre>

<p>But that just doesn't feel or look right in practice:</p>

<pre><code>handle_exception(foo, baz, a, b)
handle_exception(bar, baz, c, d)
</code></pre>
"
129176,9936,2008-09-24T19:05:48Z,129144,-3,"<p>In your specific case, you can do this:</p>

<pre><code>try:
    foo(a, b)
    bar(c, d)
except Exception, e:
    baz(e)
</code></pre>

<p>Or, you can catch the exception one step above:</p>

<pre><code>try:
    foo_bar() # This function can throw at several places
except Exception, e:
    baz(e)
</code></pre>
"
129177,8819,2008-09-24T19:05:58Z,129144,57,"<p>You could use the <a href=""http://docs.python.org/whatsnew/pep-343.html""><code>with</code> statement</a> if you have python 2.5</p>

<pre><code>from __future__ import with_statement
import contextlib

@contextlib.contextmanager
def handler():
    try:
        yield
    except Exception, e:
        baz(e)
</code></pre>

<p>Your example now becomes:</p>

<pre><code>with handler():
    foo(a, b)
with handler():
    bar(c, d)
</code></pre>
"
129187,21223,2008-09-24T19:08:01Z,128466,2,"<p>Just upgrade your app. The switch from 0.96 to 1.0 was huge, but in terms of Backwards Incompatible changes I doubt your app even has 10% of them.</p>

<p>I was on trunk before Django 1.0 so I the transition for me was over time but even then the only major things I had to change were newforms, newforms-admin, <strong>str</strong>() to <strong>unicode</strong>() and maxlength to max_length</p>

<p>Most of the other changes were new features or backend rewrites or stuff that as someone who was building basic websites did not even get near.</p>
"
129245,21204,2008-09-24T19:15:32Z,128933,2,"<p>I found <a href=""http://search.cpan.org/~ssnodgra/Unix-ConfigFile-0.06/GroupFile.pm"" rel=""nofollow"">This</a> for you. It should do what you need. As far as I can tell Perl does not have any built in functions for removing users from a group. It has several for seeing the group id of a user or process.</p>
"
129374,4766,2008-09-24T19:36:16Z,67631,185,"<p>The advantage of adding a path to sys.path (over using imp) is that it simplifies things when importing more than one module from a single package.  For example:</p>

<pre><code>import sys
# the mock-0.3.1 dir contains testcase.py, testutils.py &amp; mock.py
sys.path.append('/foo/bar/mock-0.3.1')

from testcase import TestCase
from testutils import RunTests
from mock import Mock, sentinel, patch
</code></pre>
"
129396,10661,2008-09-24T19:40:55Z,128259,1,"<p>If you're doing an n-way merge with removing duplicates, the following may be what you're looking for.</p>

<p>This generator will merge any number of sources.  Each source must be a sequence.
The key must be in position 0.  It yields the merged sequence one item at a time.</p>

<pre><code>def merge( *sources ):
    keyPos= 0
    for s in sources:
        s.sort()
    while any( [len(s)&gt;0 for s in sources] ):
        topEnum= enumerate([ s[0][keyPos] if len(s) &gt; 0 else None for s in sources ])
        top= [ t for t in topEnum if t[1] is not None ]
        top.sort( key=lambda a:a[1] )
        src, key = top[0]
        #print src, key
        yield sources[ src ].pop(0)
</code></pre>

<p>This generator removes duplicates from a sequence.  </p>

<pre><code>def unique( sequence ):
    keyPos= 0
    seqIter= iter(sequence)
    curr= seqIter.next()
    for next in seqIter:
        if next[keyPos] == curr[keyPos]:
            # might want to create a sub-list of matches
            continue
        yield curr
        curr= next
    yield curr
</code></pre>

<p>Here's a script which uses these functions to produce a resulting sequence which is the union of all the sources with duplicates removed.</p>

<pre><code>for u in unique( merge( source1, source2, source3, ... ) ):
    print u
</code></pre>

<p>The complete set of data in each sequence must exist in memory once because we're sorting in memory.   However, the resulting sequence does not actually exist in memory.  Indeed, it works by consuming the other sequences.  </p>
"
129468,7498,2008-09-24T19:54:07Z,128933,1,"<p>Here's a very simple little Perl script that should give you the list of groups you need:</p>

<pre><code>my $user = 'user';
my $groupNoMore = 'somegroup';
my $groups = join ',', grep { $_ ne $groupNoMore } split /\s/, `groups $user`;
</code></pre>

<p>Getting and sanitizing the required arguments is left as an execrcise for the reader.</p>
"
129518,893,2008-09-24T20:01:43Z,129507,5,"<p>Have a look at the <a href=""https://docs.python.org/2/library/unittest.html#unittest.TestCase.assertRaises"" rel=""nofollow"">assertRaises</a> method of the <code>unittest</code> module.</p>
"
129522,3051,2008-09-24T20:02:29Z,129507,253,"<p>Use <a href=""http://docs.python.org/library/unittest.html#unittest.TestCase.assertRaises""><code>TestCase.assertRaises</code></a> (or <code>TestCase.failUnlessRaises</code>) from the unittest module, for example:</p>

<pre><code>import mymod

class MyTestCase(unittest.TestCase):
    def test1(self):
        self.assertRaises(SomeCoolException, mymod.myfunc)
</code></pre>
"
129528,4766,2008-09-24T20:03:24Z,129507,19,"<p>Your code should follow this pattern (this is a unittest module style test):</p>

<pre><code>def test_afunction_throws_exception(self):
    try:
        afunction()
    except ExpectedException:
        pass
    except Exception as e:
       self.fail('Unexpected exception raised:', e)
    else:
       self.fail('ExpectedException not raised')
</code></pre>

<p>On Python &lt; 2.7 this construct is useful for checking for specific values in the expected exception. The unittest function <code>assertRaises</code> only checks if an exception was raised.</p>
"
129610,4766,2008-09-24T20:13:08Z,129507,120,"<p>The code in my previous answer can be simplified to:</p>

<pre><code>def test_afunction_throws_exception(self):
    self.assertRaises(ExpectedException, afunction)
</code></pre>

<p>And if afunction takes arguments, just pass them into assertRaises like this:</p>

<pre><code>def test_afunction_throws_exception(self):
    self.assertRaises(ExpectedException, afunction, arg1, arg2)
</code></pre>
"
129626,10661,2008-09-24T20:15:09Z,129144,2,"<p>You could try something like this.  This is vaguely C macro-like.</p>

<pre><code>class TryOrBaz( object ):
    def __init__( self, that ):
        self.that= that
    def __call__( self, *args ):
        try:
            return self.that( *args )
        except Exception, e:
            baz( e )

TryOrBaz( foo )( a, b )
TryOrBaz( bar )( c, d )
</code></pre>
"
129810,3051,2008-09-24T20:36:46Z,128478,46,"<p>Putting the import statement inside of a function can prevent circular dependencies.</p>
"
129819,11549,2008-09-24T20:38:47Z,128573,12,"<p>There is no reasonable way to make this ""class property"" system to work in Python.</p>

<p>Here is one unreasonable way to make it work. You can certainly make it more seamless with increasing amounts of metaclass magic.</p>

<pre><code>class ClassProperty(object):
    def __init__(self, getter, setter):
        self.getter = getter
        self.setter = setter
    def __get__(self, cls, owner):
        return getattr(cls, self.getter)()
    def __set__(self, cls, value):
        getattr(cls, self.setter)(value)

class MetaFoo(type):
    var = ClassProperty('getvar', 'setvar')

class Foo(object):
    __metaclass__ = MetaFoo
    _var = 5
    @classmethod
    def getvar(cls):
        print ""Getting var ="", cls._var
        return cls._var
    @classmethod
    def setvar(cls, value):
        print ""Setting var ="", value
        cls._var = value

x = Foo.var
print ""Foo.var = "", x
Foo.var = 42
x = Foo.var
print ""Foo.var = "", x
</code></pre>

<p>The knot of the issue is that properties are what Python calls ""descriptors"". There is no short and easy way to explain how this sort of metaprogramming works, so I must point you to the <a href=""http://users.rcn.com/python/download/Descriptor.htm"">descriptor howto</a>.</p>

<p>You only ever need to understand this sort of things if you are implementing a fairly advanced framework. Like a transparent object persistence or RPC system, or a kind of domain-specific language.</p>

<p>However, in a comment to a previous answer, you say that you </p>

<blockquote>
  <p>need to modify an attribute that in such a way that is seen by all instances of a class, and in the scope from which these class methods are called does not have references to all instances of the class.</p>
</blockquote>

<p>It seems to me, what you really want is an <a href=""http://en.wikipedia.org/wiki/Observer_pattern"">Observer</a> design pattern.</p>
"
129868,3560,2008-09-24T20:47:07Z,128573,3,"<blockquote>
  <p>Because I need to modify an attribute that in such a way that is seen by all instances of a class, and in the scope from which these class methods are called does not have references to all instances of the class.</p>
</blockquote>

<p>Do you have access to at least one instance of the class? I can think of a way to do it then:</p>

<pre><code>class MyClass (object):
    __var = None

    def _set_var (self, value):
        type (self).__var = value

    def _get_var (self):
        return self.__var

    var = property (_get_var, _set_var)

a = MyClass ()
b = MyClass ()
a.var = ""foo""
print b.var
</code></pre>
"
129964,20672,2008-09-24T21:03:05Z,128815,0,"<p>Django does not support it. The best way would be to separate the values with arbitrary separator and then just split the string, like you already said.</p>
"
130090,9241,2008-09-24T21:28:15Z,128573,1,"<p>Give this a try, it gets the job done without having to change/add a lot of existing code.</p>

<pre><code>&gt;&gt;&gt; class foo(object):
...     _var = 5
...     def getvar(cls):
...         return cls._var
...     getvar = classmethod(getvar)
...     def setvar(cls, value):
...         cls._var = value
...     setvar = classmethod(setvar)
...     var = property(lambda self: self.getvar(), lambda self, val: self.setvar(val))
...
&gt;&gt;&gt; f = foo()
&gt;&gt;&gt; f.var
5
&gt;&gt;&gt; f.var = 3
&gt;&gt;&gt; f.var
3
</code></pre>

<p>The <code>property</code> function needs two <code>callable</code> arguments. give them lambda wrappers (which it passes the instance as its first argument) and all is well.</p>
"
130134,9940,2008-09-24T21:38:28Z,130074,3,"<p>I always thought the time and datetime modules were a little incoherent.  Anyways, here's the inverse of mktime</p>

<pre><code>import time
def mkgmtime(t):
    """"""Convert UTC tuple to seconds since Epoch""""""
    return time.mktime(t)-time.timezone
</code></pre>
"
130138,13,2008-09-24T21:38:59Z,130074,0,"<p>I'm only a newbie to Python, but here's my approach.</p>

<pre><code>def mkgmtime(fields):
    now = int(time.time())
    gmt = list(time.gmtime(now))
    gmt[8] = time.localtime(now).tm_isdst
    disp = now - time.mktime(tuple(gmt))
    return disp + time.mktime(fields)
</code></pre>

<p>There, my proposed name for the function too. :-) It's important to recalculate <code>disp</code> every time, in case the daylight-savings value changes or the like. (The conversion back to tuple is required for Jython. CPython doesn't seem to require it.)</p>

<p>This is super ick, because <code>time.gmtime</code> sets the DST flag to false, always. I hate the code, though. There's got to be a better way to do it. And there are probably some corner cases that I haven't got, yet.</p>
"
130179,9940,2008-09-24T21:48:23Z,129912,2,"<p>Not familiar with ActiveTcl, but in general here is how to get a package/module to be loaded when that name already exists in the standard library:</p>

<pre><code>import sys
dir_name=""/usr/lib/mydir""
sys.path.insert(0,dir_name)
</code></pre>

<p>Substitute the value for dir_name with the path to the directory containing your package/module, and run the above code before anything is imported.  This is often done through a 'sitecustomize.py' file so that it will take effect as soon as the interpreter starts up so you won't need to worry about import ordering.</p>
"
130276,5222,2008-09-24T22:12:24Z,130262,17,"<p>Came up with my own answer after a minute of thought.  It can be done with nested comprehensions:</p>

<pre><code>result = [y for y in (expensive(x) for x in mylist) if y]
</code></pre>

<p>I guess that works, though I find nested comprehensions are only marginally readable </p>
"
130278,21450,2008-09-24T22:12:26Z,130262,6,"<pre><code>result = [x for x in map(expensive,mylist) if x]
</code></pre>

<p>map() will return a list of the values of each object in mylist passed to expensive(). Then you can list-comprehend that, and discard unnecessary values.</p>

<p>This is somewhat like a nested comprehension, but should be faster (since the python interpreter can optimize it fairly easily).</p>
"
130285,726,2008-09-24T22:14:18Z,130262,2,"<p>You could always <a href=""http://en.wikipedia.org/wiki/Memoization"" rel=""nofollow"">memoize</a> the <code>expensive()</code> function so that calling it the second time around is merely a lookup for the computed value of <code>x</code>.</p>

<p><a href=""http://wiki.python.org/moin/PythonDecoratorLibrary#head-11870a08b0fa59a8622201abfac735ea47ffade5"" rel=""nofollow"">Here's just one of many implementations of memoize as a decorator</a>.</p>
"
130288,3446,2008-09-24T22:15:58Z,130262,2,"<p>You could memoize expensive(x) (and if you are calling expensive(x) frequently, you probably should memoize it any way.  This page gives an implementation of memoize for python:</p>

<p><a href=""http://code.activestate.com/recipes/52201/"" rel=""nofollow"">http://code.activestate.com/recipes/52201/</a></p>

<p>This has the added benefit that expensive(x) may be run <em>less</em> than N times, since any duplicate entries will make use of the memo from the previous execution.</p>

<p>Note that this assumes expensive(x) is a true function, and does not depend on external state that may change.  If expensive(x) does depend on external state, and you can detect when that state changes, or you know it <em>wont</em> change during your list comprehension, then you can reset the memos before the comprehension.</p>
"
130309,3560,2008-09-24T22:23:50Z,130262,17,"<p>If the calculations are already nicely bundled into functions, how about using <code>filter</code> and <code>map</code>?</p>

<pre><code>result = filter (None, map (expensive, mylist))
</code></pre>

<p>You can use <code>itertools.imap</code> if the list is very large.</p>
"
130312,17624,2008-09-24T22:24:42Z,130262,7,"<p>The most obvious (and I would argue most readable) answer is to not use a list comprehension or generator expression, but rather a real generator:</p>

<pre><code>def gen_expensive(mylist):
    for item in mylist:
        result = expensive(item)
        if result:
            yield result
</code></pre>

<p>It takes more horizontal space, but it's much easier to see what it does at a glance, and you end up not repeating yourself.</p>
"
130332,NA,2008-09-24T22:32:28Z,126356,1,"<p>pyFacebook is Django-centric because it includes a Django example.  I did not intend to irk, but am merely looking for a TurboGears example using pyFacebook.</p>
"
130623,17095,2008-09-24T23:35:26Z,130618,0,"<p>You can subtract two <a href=""http://docs.python.org/lib/module-datetime.html"" rel=""nofollow"">datetime</a> objects to find the difference between them.<br />
You can use <code>datetime.fromtimestamp</code> to parse a POSIX time stamp.</p>
"
130647,14648,2008-09-24T23:40:43Z,130618,1,"<p>You can use a combination of the 'days' and 'seconds' attributes of the returned object to figure out the answer, like this:</p>

<pre><code>def seconds_difference(stamp1, stamp2):
    delta = stamp1 - stamp2
    return 24*60*60*delta.days + delta.seconds + delta.microseconds/1000000.
</code></pre>

<p>Use abs() in the answer if you always want a positive number of seconds.</p>

<p>To discover how many seconds into the past a timestamp is, you can use it like this:</p>

<pre><code>if seconds_difference(datetime.datetime.now(), timestamp) &lt; 100:
     pass
</code></pre>
"
130652,9193,2008-09-24T23:42:01Z,130618,5,"<p>Compare the difference to a timedelta that you create:</p>

<pre><code>if datetime.datetime.now() - timestamp &gt; datetime.timedelta(seconds = 5):
    print 'older'
</code></pre>
"
130665,3560,2008-09-24T23:44:27Z,130618,102,"<p>Use the <code>datetime.timedelta</code> class:</p>

<pre><code>&gt;&gt;&gt; from datetime import datetime, timedelta
&gt;&gt;&gt; then = datetime.now() - timedelta(hours = 2)
&gt;&gt;&gt; now = datetime.now()
&gt;&gt;&gt; (now - then) &gt; timedelta(days = 1)
False
&gt;&gt;&gt; (now - then) &gt; timedelta(hours = 1)
True
</code></pre>

<p>Your example could be written as:</p>

<pre><code>if (datetime.now() - self.timestamp) &gt; timedelta(seconds = 100)
</code></pre>

<p>or</p>

<pre><code>if (datetime.now() - self.timestamp) &gt; timedelta(minutes = 100)
</code></pre>
"
130669,18866,2008-09-24T23:45:28Z,130618,0,"<p>Like so:</p>

<pre><code># self.timestamp should be a datetime object
if (datetime.now() - self.timestamp).seconds &gt; 100:
    print ""object is over 100 seconds old""
</code></pre>
"
130773,3276,2008-09-25T00:24:23Z,130587,0,"<p>This is a bit hacky, but it could work.</p>

<p>Why not call multiple .py scripts in a row?</p>

<p>Each scripts can pass in a small subset of the parameters, and the values to a temp text file. The final script will read and work off of the temp text file.</p>

<p>I agree that this method is filled with danger and WTF's, but sometimes you have to just hack stuff together.</p>
"
130844,21945,2008-09-25T00:41:01Z,125703,13,"<p>Python's mmap module will allow you to insert into a file. The following sample shows how it can be done in Unix (Windows mmap may be different). Note that this does not handle all error conditions and you might corrupt or lose the original file. Also, this won't handle unicode strings.</p>

<pre><code>import os
from mmap import mmap

def insert(filename, str, pos):
    if len(str) &lt; 1:
        # nothing to insert
        return

    f = open(filename, 'r+')
    m = mmap(f.fileno(), os.path.getsize(filename))
    origSize = m.size()

    # or this could be an error
    if pos &gt; origSize:
        pos = origSize
    elif pos &lt; 0:
        pos = 0

    m.resize(origSize + len(str))
    m[pos+len(str):] = m[pos:origSize]
    m[pos:pos+len(str)] = str
    m.close()
    f.close()
</code></pre>

<p>It is also possible to do this without mmap with files opened in 'r+' mode, but it is less convenient and less efficient as you'd have to read and temporarily store the contents of the file from the insertion position to EOF - which might be huge.</p>
"
131047,6007,2008-09-25T01:44:18Z,128815,1,"<p>If you're looking for something a little more abstracted, try using <a href=""http://docs.djangoproject.com/en/dev/topics/http/sessions/#examples"" rel=""nofollow"">sessions</a>. I believe the way they work is by storing an id in the cookie that matches a database record. You can store whatever you want in it. It's not exactly the same as what you're looking for, but it could work if you don't mind a small amount of db overhead.</p>
"
131092,2384,2008-09-25T02:01:34Z,130763,28,"<p>It seems there's no way to elevate the application privileges for a while for you to perform a particular task. Windows needs to know at the start of the program whether the application requires certain privileges, and will ask the user to confirm when the application performs any tasks that <em>need</em> those privileges. There are two ways to do this:</p>

<ol>
<li>Write a manifest file that tells Windows the application might require some privileges</li>
<li>Run the application with elevated privileges from inside another program</li>
</ol>

<p>This <a href=""http://www.codeproject.com/KB/vista-security/UAC__The_Definitive_Guide.aspx"">two</a> <a href=""http://msdn.microsoft.com/en-gb/magazine/cc163486.aspx"">articles</a> explain in much more detail how this works.</p>

<p>What I'd do, if you don't want to write a nasty ctypes wrapper for the CreateElevatedProcess API, is use the ShellExecuteEx trick explained in the Code Project article (Pywin32 comes with a wrapper for ShellExecute). How? Something like this:</p>

<p>When your program starts, it checks if it has Administrator privileges, if it doesn't it runs itself using the ShellExecute trick and exits immediately, if it does, it performs the task at hand.</p>

<p>As you describe your program as a ""script"", I suppose that's enough for your needs.</p>

<p>Cheers.</p>
"
131383,6007,2008-09-25T03:43:34Z,131327,0,"<p>Post save. That way the new data (the reason for performing the serialization) is already in the database. It'll make for a much cleaner bit of code that simply takes from the database and doesn't have to worry about adding an extra value.</p>

<p>The other way that comes to mind is to maintain the xml file in parallel to the database. That is to say, in your save() add the data to the database, and to the xml file. This would have a much less overhead if you're dealing with huge tables.</p>
"
131452,14648,2008-09-25T04:16:25Z,131449,7,"<pre><code>if element in mylist:
    index = mylist.index(element)
    # ... do something
else:
    # ... do something else
</code></pre>
"
131522,14028,2008-09-25T04:47:35Z,131449,9,"<p>Note that the latter approach is going against the generally accepted ""pythonic"" philosophy of <a href=""http://en.wikipedia.org/wiki/Python_syntax_and_semantics#Exceptions"" rel=""nofollow"">EAFP, or ""It is Easier to Ask for Forgiveness than Permission.""</a>, while the former follows it.</p>
"
131930,9493,2008-09-25T07:27:39Z,131449,0,"<p>For the specific case where your list is a sequence of single-character strings you can get what you want by changing the list to be searched to a string in advance (eg. ''.join(chars)).</p>

<p>You can then use the .find() method, which does work as you want.  However, there's no corresponding method for lists or tuples.</p>

<p>Another possible option is to use a dictionary instead.  eg.</p>

<pre><code>d = dict((x, loc) for (loc,x) in enumerate(chars))
...
index = d.get(chars_to_find, -1)  # Second argument is default if not found.
</code></pre>

<p>This may also perform better if you're doing a lot of searches on the list.  If it's just a single search on a throwaway list though, its not worth doing.</p>
"
132108,14533,2008-09-25T08:24:24Z,132058,10,"<p><em>python -dv yourscript.py</em></p>

<p>That will make the interpreter to run in debug mode and to give you a trace of what the interpreter is doing.</p>

<p>If you want to interactively debug the code you should run it like this:</p>

<p><em>python -m pdb yourscript.py</em></p>

<p>That tells the python interpreter to run your script with the module ""pdb"" which is the python debugger, if you run it like that the interpreter will be executed in interactive mode, much like GDB</p>
"
132114,1109480,2008-09-25T08:27:16Z,132058,24,"<p>The <a href=""http://www.python.org/doc/2.5.2/lib/module-traceback.html""><strong>traceback</strong></a> module has some nice functions, among them: print_stack:</p>

<pre><code>import traceback

traceback.print_stack()
</code></pre>
"
132123,9567,2008-09-25T08:29:32Z,132058,31,"<pre><code>&gt;&gt;&gt; import traceback
&gt;&gt;&gt; def x():
&gt;&gt;&gt;    print traceback.extract_stack()

&gt;&gt;&gt; x()
[('&lt;stdin&gt;', 1, '&lt;module&gt;', None), ('&lt;stdin&gt;', 2, 'x', None)]
</code></pre>

<p>You can also nicely format the stack trace, see the <a href=""http://docs.python.org/lib/module-traceback.html"">docs</a>.</p>

<p><strong>Edit</strong>: To simulate Java's behavior, as suggested by @<a href=""#132260"">Douglas Leeder</a>, add this:</p>

<pre><code>import signal
import traceback

signal.signal(signal.SIGUSR1, lambda sig, stack: traceback.print_stack(stack))
</code></pre>

<p>to the startup code in your application. Then you can print the stack by sending <code>SIGUSR1</code> to the running Python process.</p>
"
132237,18676,2008-09-25T09:01:24Z,127454,2,"<p>I see two ways of going about it: working on Python directly or working on something that utilizes Python</p>

<p>Since you're a beginner, you're probably hesitant to work on the core Python language or feel that you can't contribute in a meaningful way, which is understandable. However, as a beginner, you're in a good position to help improve documentation and other items that are essential to learning Python. </p>

<p>For example, the Python tutorial is less of a tutorial (in the standard sense) and more of a feature listing, at least in my opinion. When I tried to learn from it, I never got the feeling that I was building up my knowledge, like creating an application. It felt more like I was being shown all the parts that make up Python but not how to put them together into a cohesive structure.</p>

<p>Once I became more comfortable with the language (mostly through books and lots of practice), I eventually wrote my <a href=""http://www.gidnetwork.com/b-26.html"" rel=""nofollow"">own tutorial</a>, trying to provide not only the technical information but also lessons learned and ""newbie gotchas"".</p>

<p>Alternatively, you can contribute to the Python world by using Python in programs. You can contribute to projects already established, e.g. Django, PyGame, etc., or you can make your own program to ""scratch an itch"". Either way, you not only build your knowledge of Python but you are giving back to the community. </p>

<p>Finally, you can become an advocate of Python, encouraging others to learn the language. I kept suggesting to my supervisor at my last job to use Python rather than Java when a considering what to use for a new project. I tell everyone I know about the joys of Python and encourage them to give it a try. I convinced the administrator of a computer forum I frequent to create a section for Python. And, as I already said, I wrote a tutorial for Python and I'm working on a new one for wxPython.</p>

<p>There are many ways you can contribute to Python that aren't necessarily programming related. As your programming skills grow, you may want to move further into code contributions. But you may gain more satisfaction by helping others find the same joy you found in Python.</p>
"
132260,3978,2008-09-25T09:06:39Z,132058,0,"<p>I don't know of anything similar to <a href=""http://java.sun.com/developer/onlineTraining/Programming/JDCBook/stack.html"" rel=""nofollow"">java's response to SIGQUIT</a>, so you might have to build it in to your application. Maybe you could make a server in another thread that can get a stacktrace on response to a message of some kind?</p>
"
132268,19990,2008-09-25T09:09:54Z,132058,1,"<p>There is no way to hook into a running python process and get reasonable results.  What I do if processes lock up is hooking strace in and trying to figure out what exactly is happening.</p>

<p>Unfortunately often strace is the observer that ""fixes"" race conditions so that the output is useless there too.</p>
"
132425,21284,2008-09-25T10:00:14Z,132411,0,"<p>Why not keeping the C code and <a href=""http://www.python.org/doc/ext/intro.html"" rel=""nofollow"">creating a Python C module</a> which can be imported into a running Python environment?</p>
"
132438,10468,2008-09-25T10:07:47Z,132411,0,"<p>First, i'd consider wrapping the existing C library with Pythonic goodness to provide an API in the form of a python module.  I'd look at  swig, ctypes, pyrex, and whatever else is out there these days.  The C library itself would stay there unchanged.  Saves work.  </p>

<p>But if i really had to write original Python code based on the C, there's no tool i'd use, just my brain.  C allows too many funny tricks with pointers, clever things with macros, etc that i'd never trust an automated tool even if someone pointed one out to me.  </p>

<p>I mentioned Pyrex - this is a language similar to C but also Python oriented. I haven't done much with it, but it could be easier than writing pure python, given that you're starting with C as a guide.</p>

<p>Converting from more constrained, tamer languages such as IDL (the data languages scientists like to use, not the other IDL) is hard, requiring manual and mental effort.  C?  Forget it, not until the UFO people give us their fancy software tools that are a thousand years ahead of our state of the art!</p>
"
132459,17624,2008-09-25T10:12:54Z,132411,12,"<p>There is frankly no way to mechanically and meaningfully translate C to Python without suffering an insane performance penalty. As we all know Python isn't anywhere near C speed (with current compilers and interpreters) but worse than that is that what C is good at (bit-fiddling, integer math, tricks with blocks of memory) Python is very slow at, and what Python is good at you can't express in C directly. A direct translation would therefore be extra inefficient, to the point of absurdity.</p>

<p>The much, much better approach in general is indeed to keep the C the C, and wrap it in a Python extension module (using <a href=""http://www.swig.org"">SWIG</a>, <a href=""http://www.cosc.canterbury.ac.nz/greg.ewing/python/Pyrex/"">Pyrex</a>, <a href=""http://cython.org"">Cython</a> or <a href=""http://docs.python.org/ext"">writing a wrapper manually</a>) or call the C library directly using <a href=""http://docs.python.org/lib/module-ctypes.html"">ctypes</a>. All the benefits (and downsides) of C for what's already C or you add later, and all the convenience (and downsides) of Python for any code in Python.</p>

<p>That won't satisfy your 'sandboxing' needs, but you should realize that you cannot sandbox Python particularly well anyway; it takes a lot of effort and modification of CPython, and if you forget one little hole somewhere your jail is broken. If you want to sandbox Python you should start by sandboxing the entire process, and then C extensions can get sandboxed too.</p>
"
132470,14860,2008-09-25T10:16:49Z,132411,0,"<p>Any automatic translation is going to suffer for not using the power of Python.  C-type procedural code would run very slowly if translated directly into Python, you would need to profile and replace whole sections with more Python-optimized code.</p>
"
132493,12166,2008-09-25T10:25:45Z,132411,3,"<p>The fastest way (in terms of programmer effort, not efficiency) would probably involve using an existing compiler to compile C to something simple (for example LLVM) and either:</p>

<ul>
<li>interpret that in Python (exorbitant performance penalty)</li>
<li>translate that to Python (huge performance penalty)</li>
<li>translate that to Python bytecode (big performance penalty)</li>
</ul>

<p>Translating C to Python directly is possible (and probably yields faster code than the above approaches), but you'd be essentially writing a C compiler backend, which is a huge task.</p>

<p>Edit, afterthought: A perhaps even more quick-and-dirty way of doing that is to take the parse tree for the C code, transform that to a Python data structure and interpret that in Python.</p>
"
132499,17624,2008-09-25T10:27:06Z,132488,0,"<p>Don't use a regular expression for this. You will get confused about comments containing opening tags and what not, and do the wrong thing. HTML isn't regular, and trying to modify it with a single regular expression will fail.</p>

<p>Use a HTML parser for this. BeautifulSoup is a good, easy, flexible and sturdy one that is able to handle real-world (meaning hopelessly broken) HTML. With it you can just look up all comment nodes, examine their content (you can use a regular expression for <em>that</em>, if you wish) and remove them if they need to be removed.</p>
"
132519,14484,2008-09-25T10:31:59Z,132488,1,"<p>@<a href=""#132503"" rel=""nofollow"">Benoit </a></p>

<p>Small Correction (with multiline turned on): </p>

<pre><code> ""&lt;!--\[if IE\]&gt;.*?&lt;!\[endif\]--&gt;""
</code></pre>
"
132521,7224,2008-09-25T10:32:39Z,132488,0,"<p>This works in Visual Studio 2005, where there is no line span option:</p>

<p><code>\&lt;!--\[if IE\]\&gt;{.|\n}*\&lt;!\[endif\]--\&gt;</code></p>
"
132532,5190,2008-09-25T10:34:45Z,132488,4,"<pre><code>&gt;&gt;&gt; from BeautifulSoup import BeautifulSoup, Comment
&gt;&gt;&gt; html = '&lt;html&gt;&lt;!--[if IE]&gt; bloo blee&lt;![endif]--&gt;&lt;/html&gt;'
&gt;&gt;&gt; soup = BeautifulSoup(html)
&gt;&gt;&gt; comments = soup.findAll(text=lambda text:isinstance(text, Comment) 
               and text.find('if') != -1) #This is one line, of course
&gt;&gt;&gt; [comment.extract() for comment in comments]
[u'[if IE]&gt; bloo blee&lt;![endif]']
&gt;&gt;&gt; print soup.prettify()
&lt;html&gt;
&lt;/html&gt;
&gt;&gt;&gt;
</code></pre>

<p>If your data gets BeautifulSoup confused, you can <a href=""http://www.crummy.com/software/BeautifulSoup/documentation.html#Sanitizing%20Bad%20Data%20with%20Regexps"" rel=""nofollow"">fix</a> it before hand or <a href=""http://www.crummy.com/software/BeautifulSoup/documentation.html#Customizing%20the%20Parser"" rel=""nofollow"">customize</a> the parser, among other solutions.</p>

<p>EDIT: Per your comment, you just modify the lambda passed to findAll as you need (I modified it)</p>
"
132561,1830,2008-09-25T10:46:16Z,132488,1,"<p>Here's what you'll need:</p>

<pre><code>&lt;!(|--)\[[^\]]+\]&gt;.+?&lt;!\[endif\](|--)&gt;
</code></pre>

<p>It will filter out all sorts of conditional comments including:</p>

<pre><code>&lt;!--[if anything]&gt;
    ...
&lt;[endif]--&gt;
</code></pre>

<p>and</p>

<pre><code>&lt;![if ! IE 6]&gt;
    ...
&lt;![endif]&gt;
</code></pre>

<p><hr></p>

<blockquote>
  <p><strong>EDIT3</strong>: Vinko Vrsalovic's solution works, but the actual problem why beautifulsoup failed was because of a rogue  comment within the conditional comment. Like</p>
  
     
     
     
  
  <p>Notice the  comment?</p>
  
  <p>Though my problem was solve, I would love to get a regex solution for this.</p>
</blockquote>

<p>How about this:</p>

<pre><code>(&lt;!(|--)\[[^\]]+\]&gt;.*?)(&lt;!--.+?--&gt;)(.*?&lt;!\[endif\](|--)&gt;)
</code></pre>

<p>Do a replace on that regular expression leaving \1\4 (or $1$4) as the replacement.<br />
<em>I know it has .</em>? and .+? in it, see my comment on this post._</p>
"
132652,20261,2008-09-25T11:11:33Z,119562,9,"<p>The only inconvenience I experience with using spaces instead of tabs is that you cannot easily remove an indentation level, you have to remove 4 spaces instead of just one tab.</p>
"
132682,15274,2008-09-25T11:17:18Z,129507,7,"<p>I use <strong>doctest</strong>[1] almost everywhere because I like the fact that I document and test my functions at the same time.</p>

<p>Have a look at this code:</p>

<pre><code>def throw_up(something, gowrong=False):
    """"""
    &gt;&gt;&gt; throw_up('Fish n Chips')
    Traceback (most recent call last):
    ...
    Exception: Fish n Chips

    &gt;&gt;&gt; throw_up('Fish n Chips', gowrong=True)
    'I feel fine!'
    """"""
    if gowrong:
        return ""I feel fine!""
    raise Exception(something)

if __name__ == '__main__':
    import doctest
    doctest.testmod()
</code></pre>

<p>If you put this example in a module and run it from the command line both test cases are evaluated and checked.</p>

<p>[1] <a href=""http://docs.python.org/lib/module-doctest.html"">Python documentation: 23.2 doctest -- Test interactive Python examples</a></p>
"
133017,18893,2008-09-25T12:31:12Z,132988,13,"<p>== determines if the values are equivalent, while ""is"" determines if they are the exact same object. </p>
"
133022,12213,2008-09-25T12:31:57Z,132988,5,"<p><a href=""https://docs.python.org/library/stdtypes.html#comparisons"" rel=""nofollow"">https://docs.python.org/library/stdtypes.html#comparisons</a></p>

<p><code>is</code> tests for identity
<code>==</code> tests for equality</p>

<p>Each (small) integer value is mapped to a single value, so every 3 is identical and equal. This is an implementation detail, not part of the language spec though</p>
"
133024,9567,2008-09-25T12:32:37Z,132988,439,"<p><code>is</code> will return <code>True</code> if two variables point to the same object, <code>==</code> if the objects referred to by the variables are equal.</p>

<pre><code>&gt;&gt;&gt; a = [1, 2, 3]
&gt;&gt;&gt; b = a
&gt;&gt;&gt; b is a 
True
&gt;&gt;&gt; b == a
True
&gt;&gt;&gt; b = a[:]
&gt;&gt;&gt; b is a
False
&gt;&gt;&gt; b == a
True
</code></pre>

<p>In your case, the second test only works because Python caches small integer objects, which is an implementation detail. For larger integers, this does not work:</p>

<pre><code>&gt;&gt;&gt; 1000 is 10**3
False
&gt;&gt;&gt; 1000 == 10**3
True
</code></pre>

<p>The same holds true for string literals:</p>

<pre><code>&gt;&gt;&gt; ""a"" is ""a""
True
&gt;&gt;&gt; ""aa"" is ""a"" * 2
True
&gt;&gt;&gt; x = ""a""
&gt;&gt;&gt; ""aa"" is x * 2
False
&gt;&gt;&gt; ""aa"" is intern(x*2)
True
</code></pre>

<p>Please see <a href=""http://stackoverflow.com/questions/26595/is-there-any-difference-between-foo-is-none-and-foo-none"">this question</a> as well.</p>
"
133035,3171,2008-09-25T12:34:18Z,132988,5,"<p>Your answer is correct. The <code>is</code> operator compares the identity of two objects.  The <code>==</code> operator compares the values of two objects.</p>

<p>An object's identity never changes once it has been created; you may think of it as the object's address in memory.</p>

<p>You can control comparison behaviour of object values by defining a <code>__cmp__</code> method or a <a href=""https://docs.python.org/reference/datamodel.html#basic-customization"" rel=""nofollow"">rich comparison</a> method like <code>__eq__</code>.</p>
"
133336,6760,2008-09-25T13:31:32Z,129144,9,"<p>If this is always, <em>always</em> the behaviour you want when a particular function raises an exception, you could use a decorator:</p>

<pre><code>def handle_exception(handler):
    def decorate(func):
        def call_function(*args, **kwargs):
            try:
                func(*args, **kwargs)
            except Exception, e:
                handler(e)
        return call_function
    return decorate

def baz(e):
    print(e)

@handle_exception(baz)
def foo(a, b):
    return a + b

@handle_exception(baz)
def bar(c, d):
    return c.index(d)
</code></pre>

<p>Usage:</p>

<pre><code>&gt;&gt;&gt; foo(1, '2')
unsupported operand type(s) for +: 'int' and 'str'
&gt;&gt;&gt; bar('steve', 'cheese')
substring not found
</code></pre>
"
133384,9493,2008-09-25T13:38:45Z,132058,251,"<p>I have module I use for situations like this - where a process will be running for a long time but gets stuck sometimes for unknown and irreproducible reasons.  Its a bit hacky, and only works on unix (requires signals):</p>

<pre><code>import code, traceback, signal

def debug(sig, frame):
    """"""Interrupt running process, and provide a python prompt for
    interactive debugging.""""""
    d={'_frame':frame}         # Allow access to frame object.
    d.update(frame.f_globals)  # Unless shadowed by global
    d.update(frame.f_locals)

    i = code.InteractiveConsole(d)
    message  = ""Signal received : entering python shell.\nTraceback:\n""
    message += ''.join(traceback.format_stack(frame))
    i.interact(message)

def listen():
    signal.signal(signal.SIGUSR1, debug)  # Register handler
</code></pre>

<p>To use, just call the listen() function at some point when your program starts up (You could even stick it in site.py to have all python programs use it), and let it run.  At any point, send the process a SIGUSR1 signal, using kill, or in python:</p>

<pre><code>    os.kill(pid, signal.SIGUSR1)
</code></pre>

<p>This will cause the program to break to a python console at the point it is currently at, showing you the stack trace, and letting you manipulate the variables.  Use control-d (EOF) to continue running (though note that you will probably interrupt any I/O etc at the point you signal, so it isn't fully non-intrusive.</p>

<p>I've another script that does the same thing, except it communicates with the running process through a pipe (to allow for debugging backgrounded processes etc).  Its a bit large to post here, but I've added it as a <a href=""http://code.activestate.com/recipes/576515/"">python cookbook recipe</a>.</p>
"
133898,15842,2008-09-25T15:12:20Z,130262,4,"<p>This is exactly what generators are suited to handle:</p>

<pre><code>result = (expensive(x) for x in mylist)
result = (do_something(x) for x in result if some_condition(x))
...
result = [x for x in result if x]  # finally, a list
</code></pre>

<ol>
<li>This makes it totally clear what is happening during each stage of the pipeline.</li>
<li>Explicit over implicit</li>
<li>Uses generators everywhere until the final step, so no large intermediate lists</li>
</ol>

<p>cf:  <a href=""http://www.dabeaz.com/generators/"" rel=""nofollow"">'Generator Tricks for System Programmers' by David Beazley</a></p>
"
133963,22221,2008-09-25T15:24:06Z,133860,0,"<p>Try granting the Apache user (the user that the apache service is running under) r+w permissions on that file.</p>
"
133983,8458,2008-09-25T15:26:22Z,133860,5,"<p>It sounds like the environment you apache process is running under is a little unusual.  For whatever reason, svn seems to think the user configuration files it needs are in /root.  You can avoid having svn use the root versions of the files by specifying on the command line which config directory to use, like so:</p>

<pre><code>svn --config-dir /home/myuser/.subversion checkout http://example.com/path
</code></pre>

<p>While not fixing your enviornment, it will at least allow you to have your script run properly...</p>
"
134007,4462,2008-09-25T15:30:10Z,133860,0,"<p>Doesn't Apache's error log give you a clue?</p>

<p>Maybe it has to do with SELinux. Check /var/log/audit/audit.log and adjust your SELinux configuration accordingly, if the audit.log file indicates that it's SELinux which denies Apache access.</p>
"
134023,15366,2008-09-25T15:32:22Z,133774,1,"<p>An exclusive lock ought to be enough for this problem :  </p>

<ul>
<li><a href=""http://docs.python.org/lib/lock-objects.html"" rel=""nofollow"">Python doc page</a></li>
<li><a href=""http://effbot.org/zone/thread-synchronization.htm"" rel=""nofollow"">Use example</a></li>
</ul>

<p>Define your lock object at the main level, not at the thread level, and you're done.</p>

<p>Edit in Response to comment :</p>

<p>if you define your lock (<code>lock = new Lock()</code>) at the thread level, you will have one lock object per running thread, and you really want a single lock for the file rrdtool updates, so this definition must be at the main level.</p>
"
134065,19990,2008-09-25T15:38:49Z,133886,3,"<p><code>re.match</code> is anchored.  You can give it a position argument:</p>

<pre><code>pos = 0
end = len(text)
while pos &lt; end:
    match = regexp.match(text, pos)
    # do something with your match
    pos = match.end()
</code></pre>

<p>Have a look for pygments which ships a shitload of lexers for syntax highlighting purposes with different implementations, most based on regular expressions.</p>
"
134081,8458,2008-09-25T15:40:47Z,133886,1,"<p>This isn't exactly a direct answer to your question, but you might want to look at <a href=""http://www.antlr.org"" rel=""nofollow"">ANTLR</a>.  According to <a href=""http://www.antlr.org/wiki/display/ANTLR3/Code+Generation+Targets"" rel=""nofollow"">this</a> document the python code generation target should be up to date.</p>

<p>As to your regexes, there are really two ways to go about speeding it up if you're sticking to regexes.  The first would be to order your regexes in the order of the probability of finding them in a default text.  You could figure adding a simple profiler to the code that collected token counts for each token type and running the lexer on a body of work.  The other solution would be to bucket sort your regexes (since your key space, being a character, is relatively small) and then use a array or dictionary to perform the needed regexes after performing a single discrimination on the first character.</p>

<p>However, I think that if you're going to go this route, you should really try something like <a href=""http://www.antlr.org"" rel=""nofollow"">ANTLR</a> which will be easier to maintain, faster, and less likely to have bugs.</p>
"
134168,12166,2008-09-25T15:54:53Z,133886,7,"<p>You can merge all your regexes into one using the ""|"" operator and let the regex library do the work of discerning between tokens. Some care should be taken to ensure the preference of tokens (for example to avoid matching a keyword as an identifier).</p>
"
134631,20789,2008-09-25T17:15:38Z,132988,8,"<p>They are <b>completely different</b>.  <code>is</code> checks for object identity, while <code>==</code> checks for equality (a notion that depends on the two operands' types).</p>

<p>It is only a lucky coincidence that ""<code>is</code>"" seems to work correctly with small integers (e.g. 5 == 4+1).  That is because CPython optimizes the storage of integers in the range (-5 to 256) by making them singletons: <a href=""https://docs.python.org/2/c-api/int.html#c.PyInt_FromLong"" rel=""nofollow"">https://docs.python.org/2/c-api/int.html#c.PyInt_FromLong</a></p>
"
134638,17160,2008-09-25T17:16:31Z,134626,65,"<p>If you need to assign the <code>lambda</code> to a name, use a <code>def</code> instead. <code>def</code>s are just syntactic sugar for an assignment, so the result is the same, and they are a lot more flexible and readable.</p>

<p><code>lambda</code>s can be used for <em>use once, throw away</em> functions which won't have a name.</p>

<p>However, this use case is very rare. You rarely need to pass around unnamed function objects.</p>

<p>The builtins <code>map()</code> and <code>filter()</code> need function objects, but <strong>list comprehensions</strong> and <strong>generator expressions</strong> are generally more readable than those functions and can cover all use cases, without the need of lambdas. </p>

<p>For the cases you really need a small function object, you should use the <code>operator</code> module functions, like <code>operator.add</code> instead of <code>lambda x, y: x + y</code></p>

<p>If you still need some <code>lambda</code> not covered, you might consider writing a <code>def</code>, just to be more readable. If the function is more complex than the ones at <code>operator</code> module, a <code>def</code> is probably better. </p>

<p>So, real world good <code>lambda</code> use cases are very rare.</p>
"
134651,3421,2008-09-25T17:18:16Z,134629,-1,"<p>The reverse function actually uses the ""name"" of the URL.  This is defined like so:</p>

<pre><code>urlpatterns = patterns('',
    (r'^no_monkeys/$', 'views.noMonkeys', {}, ""no-monkeys""),
    (r'^admin/(.*)', admin.site.root),
)
</code></pre>

<p>Now you would call reverse with the string ""no-monkeys"" to get the correct url.</p>

<p>Ninja Edit:  <a href=""http://docs.djangoproject.com/en/dev/topics/http/urls/#id2"" rel=""nofollow"">Here is a link</a> to the django docs on the subject.</p>
"
134659,17917,2008-09-25T17:19:05Z,132988,21,"<p>Note that this is why <code>if foo is None:</code> is the preferred null comparison for python. All null objects are really pointers to the same value, which python sets aside to mean ""None""</p>

<p><code>if x is True:</code> and <code>if x is False:</code> also work in a similar manner. False and True are two special objects, all true boolean values are True and all false boolean values are False </p>
"
134664,20789,2008-09-25T17:19:48Z,134626,6,"<p>I agree with nosklo's advice: if you need to give the function a name, use <code>def</code>.  I reserve <code>lambda</code> functions for cases where I'm just passing a brief snippet of code to another function, e.g.:</p>

<pre><code>a = [ (1,2), (3,4), (5,6) ]
b = map( lambda x: x[0]+x[1], a )
</code></pre>
"
134709,21245,2008-09-25T17:29:26Z,134626,13,"<p><a href=""http://www.amk.ca/python/writing/gvr-interview"">In this interview, </a> Guido van Rossum says he wishes he hadn't let 'lambda' into Python:</p>

<blockquote>
  <p>""<strong>Q. What feature of Python are you least pleased with?</strong><br /><br />
  Sometimes I've been too quick in accepting contributions, and later realized that it was a mistake. One example would be some of the functional programming features, such as lambda functions. lambda is a keyword that lets you create a small anonymous function; built-in functions such as map, filter, and reduce run a function over a sequence type, such as a list.<br /><br />
  In practice, it didn't turn out that well. Python only has two scopes: local and global. This makes writing lambda functions painful, because you often want to access variables in the scope where the lambda was defined, but you can't because of the two scopes. There's a way around this, but it's something of a kludge. Often it seems much easier in Python to just use a for loop instead of messing around with lambda functions. map and friends work well only when there's already a built-in function that does what you want.</p>
</blockquote>

<p>IMHO, Iambdas can be convenient sometimes, but usually are convenient at the expense of readibility. Can you tell me what this does:</p>

<pre><code>str(reduce(lambda x,y:x+y,map(lambda x:x**x,range(1,1001))))[-10:]
</code></pre>

<p>I wrote it, and it took me a minute to figure it out. This is from Project Euler - i won't say which problem because i hate spoilers, but it runs in 0.124 seconds :)</p>
"
134803,19784,2008-09-25T17:47:10Z,124171,1,"<p>The Perl implementation uses the <a href=""http://en.wikipedia.org/wiki/Mmap"" rel=""nofollow"">mmap</a> system call.  What that call does is establish a pointer which to the process appears to be a normal segment of memory or buffer to the program.  It maps the contents of a file to a region of memory.   There are performances advantages of doing this vs normal file IO (read) - one is that there are no user-space library calls necessary to get access to the data, another is that there are often less copy operations necessary (eg: moving data between kernel and user space).</p>

<p>Perl's strings and regular expressions are 8-bit byte based (as opposed to utf16 for Java for example), so Perl's native 'character type' is the same encoding of the mmapped file.</p>

<p>When the regular expression engine then operates on the mmap backed variable, it is directly accessing the file data via the mamped memory region - without going through Perl's IO functions, or even libc's IO functions.</p>

<p>The mmap is probably largely responsible for the performance difference vs the Python version using the normal Python IO libraries -  which additionally introduce the overhead of looking for line breaks.</p>

<p>The Perl program also supports a -J to parallelize the processing, where the oepen ""-|"" causes a fork() where the file handle in the parent is to the child's stdout.  The child processes serialize their results to stdout and the parent de-serializes them to coordinate and summarize the results.</p>
"
134942,17160,2008-09-25T18:07:37Z,134934,46,"<pre><code>x = [1, 10, 100]
for i in x:
    print '%02d' % i
</code></pre>

<p>results:</p>

<pre><code>01
10
100
</code></pre>

<p>Read <a href=""https://pyformat.info/"">more information about string formatting using %</a> in the documentation.</p>
"
134951,3421,2008-09-25T18:08:21Z,134934,405,"<p>Here you are:</p>

<pre><code>print ""%02d"" % (1,)
</code></pre>

<p>Basically <strong>%</strong> is like <code>printf</code> or <code>sprint</code>.</p>
"
134961,18017,2008-09-25T18:10:01Z,134934,3,"<p>Use a format string - <a href=""http://docs.python.org/lib/typesseq-strings.html"" rel=""nofollow"">http://docs.python.org/lib/typesseq-strings.html</a></p>

<p>For example:</p>

<pre><code>python -c 'print ""%(num)02d"" % {""num"":5}'
</code></pre>
"
135050,3560,2008-09-25T18:25:07Z,135035,7,"<pre><code>import sys
sys.path
</code></pre>
"
135051,3421,2008-09-25T18:25:18Z,135035,44,"<p>I think you're looking for <a href=""https://docs.python.org/3/library/sys.html#sys.path"">sys.path</a></p>

<pre><code>import sys
print (sys.path)
</code></pre>
"
135070,21450,2008-09-25T18:28:16Z,135041,11,"<p><code>xrange()</code> is more efficient because instead of generating a list of objects, it just generates one object at a time. Instead of 100 integers, and all of their overhead, and the list to put them in, you just have one integer at a time. Faster generation, better memory use, more efficient code.</p>

<p>Unless I specifically need a list for something, I always favor <code>xrange()</code></p>
"
135074,17624,2008-09-25T18:28:49Z,135041,34,"<p>You should favour <code>range()</code> over <code>xrange()</code> only when you need an actual list. For instance, when you want to modify the list returned by <code>range()</code>, or when you wish to slice it. For iteration or even just normal indexing, <code>xrange()</code> will work fine (and usually much more efficiently). There is a point where <code>range()</code> is a bit faster than <code>xrange()</code> for very small lists, but depending on your hardware and various other details, the break-even can be at a result of length 1 or 2; not something to worry about. Prefer <code>xrange()</code>.</p>
"
135078,3114,2008-09-25T18:29:30Z,130587,2,"<p>You might want to look into PropertySheets. These are files containing Visual C++ settings, including user macros. The sheets can inherit from other sheets and are attached to VC++ projects using the PropertyManager View in Visual Studio. When you create one of these sheets, there is an interface for creating user macros. When you add a macro using this mechanism, there is a checkbox for setting the user macro as an environment variable. We use this type of mechanism in our build system to rapidly set up projects to perform out-of-place builds. Our various build directories are all defined as user macros. I have not actually verified that the environment variables are set in an external script called from post-build. I tend to use these macros as command line arguments to my post-build scripts - but I would expect accessing them as environment variables should work for you.</p>
"
135081,13990,2008-09-25T18:29:50Z,135041,2,"<p>Go with range for these reasons:</p>

<p>1) xrange will be going away in newer Python versions.  This gives you easy future compatibility.</p>

<p>2) range will take on the efficiencies associated with xrange.</p>
"
135114,9493,2008-09-25T18:34:38Z,135041,370,"<p>For performance, especially when you're iterating over a large range, <code>xrange()</code> is usually better.  However, there are still a few cases why you might prefer <code>range()</code>:</p>

<ul>
<li><p>In python 3, <code>range()</code> does what <code>xrange()</code> used to do and <code>xrange()</code> does not exist.  If you want to write code that will run on both Python 2 and Python 3, you can't use <code>xrange()</code>.</p></li>
<li><p><code>range()</code> can actually be faster in some cases - eg. if iterating over the same sequence multiple times.  <code>xrange()</code> has to reconstruct the integer object every time, but <code>range()</code> will have real integer objects.  (It will always perform worse in terms of memory however)</p></li>
<li><p><code>xrange()</code> isn't usable in all cases where a real list is needed.  For instance, it doesn't support slices, or any list methods.</p></li>
</ul>

<p>[Edit] There are a couple of posts mentioning how <code>range()</code> will be upgraded by the 2to3 tool.  For the record, here's the output of running the tool on some sample usages of <code>range()</code> and <code>xrange()</code></p>

<pre><code>RefactoringTool: Skipping implicit fixer: buffer
RefactoringTool: Skipping implicit fixer: idioms
RefactoringTool: Skipping implicit fixer: ws_comma
--- range_test.py (original)
+++ range_test.py (refactored)
@@ -1,7 +1,7 @@

 for x in range(20):
-    a=range(20)
+    a=list(range(20))
     b=list(range(20))
     c=[x for x in range(20)]
     d=(x for x in range(20))
-    e=xrange(20)
+    e=range(20)
</code></pre>

<p>As you can see, when used in a for loop or comprehension, or where already wrapped with list(), range is left unchanged.</p>
"
135157,11527,2008-09-25T18:43:06Z,134934,172,"<p>In Python 3, you would use the format() string method:</p>

<pre><code>for i in (1, 10, 100):
    print('{num:02d}'.format(num=i))
</code></pre>

<p>or using the built-in (for a single number):</p>

<pre><code>print(format(i, '02d'))
</code></pre>

<p>See the <a href=""http://www.python.org/dev/peps/pep-3101"">PEP-3101</a> documentation for the new formatting functions.</p>
"
135209,13820,2008-09-25T18:52:54Z,132411,-1,"<p>You can always compile the C code, and load in the libraries using ctypes in python.</p>
"
135228,16490,2008-09-25T18:55:58Z,135041,7,"<p>range() returns a list, xrange() returns an xrange object.</p>

<p>xrange() is a bit faster, and a bit more memory efficient. But the gain is not very large.</p>

<p>The extra memory used by a list is of course not just wasted, lists have more functionality (slice, repeat, insert, ...). Exact differences can be found in the <a href=""http://docs.python.org/typesseq.html"">documentation</a>. There is no bonehard rule, use what is needed.</p>

<p>Python 3.0 is still in development, but IIRC range() will very similar to xrange() of 2.X and list(range()) can be used to generate lists.</p>
"
135267,3560,2008-09-25T19:02:00Z,135246,1,"<p>What's your code for reading the binary data? Make sure you're copying the data into properly-sized types like <code>int32_t</code> instead of just <code>int</code>.</p>
"
135271,429,2008-09-25T19:02:20Z,135246,0,"<p>Why aren't you using the <a href=""http://docs.python.org/lib/module-struct.html"" rel=""nofollow"">struct</a> package?</p>
"
135273,22277,2008-09-25T19:02:46Z,135035,40,"<p>You can also make additions to this path with the PYTHONPATH environment variable at runtime, in addition to:</p>

<pre><code>import sys
sys.path.append('/home/user/python-libs')
</code></pre>
"
135276,17624,2008-09-25T19:03:02Z,135246,2,"<p>The 'struct' module should be able to do this, although alignment of structs in the middle of the data is always an issue. It's not very hard to get it right, however: find out (once) what boundary the structs-in-structs align to, then pad (manually, with the 'x' specifier) to that boundary. You can doublecheck your padding by comparing struct.calcsize() with your actual data. It's certainly easier than writing a C extension for it.</p>

<p>In order to keep using Py_BuildValue() like that, you have two options. You can determine the size of time_t at compiletime (in terms of fundamental types, so 'an int' or 'a long' or 'an ssize_t') and then use the right format character to Py_BuildValue -- 'i' for an int, 'l' for a long, 'n' for an ssize_t. Or you can use PyInt_FromSsize_t() manually, in which case the compiler does the upcasting for you, and then use the 'O' format characters to pass the result to Py_BuildValue.</p>
"
135290,8458,2008-09-25T19:04:57Z,134387,1,"<p>I'm redacting my response and upvoting the other answer by Ben Bangert, as it's the correct one.  I answered and have since learned the correct way (mentioned below).  If you really want to, check out the history of this answer to see the wrong (but working) solution I originally proposed.</p>
"
135311,21450,2008-09-25T19:07:22Z,135246,3,"<p>Explicitly specify that your data types (e.g. integers) are 32-bit. Otherwise if you have two integers next to each other when you read them they will be read as one 64-bit integer.</p>

<p>When you are dealing with cross-platform issues, the two main things to watch out for are:</p>

<ol>
<li>Bitness. If your packed data is written with 32-bit ints, then all of your code must explicitly specify 32-bit ints when reading <em>and</em> writing.</li>
<li>Byte order. If you move your code from Intel chips to PPC or SPARC, your byte order will be wrong. You will have to import your data and then byte-flip it so that it matches up with the current architecture. Otherwise 12 (<code>0x0000000C</code>) will be read as 201326592 (<code>0x0C000000</code>).</li>
</ol>

<p>Hopefully this helps.</p>
"
135318,17624,2008-09-25T19:08:31Z,135303,22,"<p>In Python 2.5, there is</p>

<pre><code>A if C else B
</code></pre>

<p>which behaves a lot like ?: in C. However, it's frowned upon for two reasons: readability, and the fact that there's usually a simpler way to approach the problem. For instance, in your case:</p>

<pre><code>stringValue = otherString or defaultString
</code></pre>
"
135342,21450,2008-09-25T19:11:18Z,135303,1,"<p>It's never a bad thing to write readable, expressive code.</p>

<pre><code>if otherString:
   stringValue = otherString
else:
   stringValue = defaultString
</code></pre>

<p>This type of code is longer and more expressive, but also more readable and less likely to get tripped over or mis-edited down the road. Don't be afraid to write expressively - readable code should be a goal, not a byproduct.</p>
"
135353,22277,2008-09-25T19:13:39Z,134626,3,"<p>The primary use of lambda has always been for simple callback functions, and for map, reduce, filter, which require a function as an argument. With list comprehensions becoming the norm, and the added allowed if as in:</p>

<pre><code>x = [f for f in range(1, 40) if f % 2]
</code></pre>

<p>it's hard to imagine a real case for the use of lambda in daily use. As a result, I'd say, avoid lambda and create nested functions.</p>
"
135354,8458,2008-09-25T19:14:05Z,135303,-1,"<p>You can take advantage of the fact that logical expressions return their value, and not just true or false status.  For example, you can always use:</p>

<pre><code>result = question and firstanswer or secondanswer
</code></pre>

<p>With the caveat that it doesn't work like the ternary operator if firstanswer is false.  This is because question is evaluated first, assuming it's true firstanswer is returned unless firstanswer is false, so this usage fails to act like the ternary operator.  If you know the values, however, there is usually no problem.  An example would be:</p>

<pre><code>result = choice == 7 and ""Seven"" or ""Another Choice""
</code></pre>
"
135360,9493,2008-09-25T19:15:52Z,135246,2,"<p>You need to make sure you're using architecture independent members for your struct.  For instance an int may be 32 bits on one architecture and 64 bits on another.  As others have suggested, use the <code>int32_t</code> style types instead.  If your struct contains unaligned members, you may need to deal with padding added by the compiler too.</p>

<p>Another common problem with cross architecture data is endianness.  Intel i386 architecture is little-endian, but if you're reading on a completely different machine (e.g. an Alpha or Sparc), you'll have to worry about this too.</p>

<p>The Python struct module deals with both these situations, using the prefix passed as part of the format string.</p>

<ul>
<li>@ - Use native size, endianness and alignment. i= sizeof(int), l= sizeof(long)</li>
<li>= - Use native endianness, but standard sizes and alignment (i=32 bits, l=64 bits)</li>
<li>&lt; - Little-endian standard sizes/alignment</li>
<li>> - Big-endian standard sizes/alignment</li>
</ul>

<p>In general, if the data passes off your machine, you should nail down the endianness and the size / padding format to something specific — ie. use ""&lt;"" or "">"" as your format.  If you want to handle this in your C extension, you may need to add some code to handle it.</p>
"
135421,22277,2008-09-25T19:24:13Z,133886,3,"<p>It's possible that combining the token regexes will work, but you'd have to benchmark it. Something like:</p>

<pre><code>x = re.compile('(?P&lt;NUMBER&gt;[0-9]+)|(?P&lt;VAR&gt;[a-z]+)')
a = x.match('9999').groupdict() # =&gt; {'VAR': None, 'NUMBER': '9999'}
if a:
    token = [a for a in a.items() if a[1] != None][0]
</code></pre>

<p>The filter is where you'll have to do some benchmarking...</p>

<p><strong>Update:</strong> I tested this, and it seems as though if you combine all the tokens as stated and write a function like:</p>

<pre><code>def find_token(lst):
    for tok in lst:
        if tok[1] != None: return tok
    raise Exception
</code></pre>

<p>You'll get roughly the same speed (maybe a teensy faster) for this. I believe the speedup must be in the number of calls to match, but the loop for token discrimination is still there, which of course kills it.</p>
"
135450,1968,2008-09-25T19:27:21Z,135303,5,"<p>@<a href=""#135342"">Dan</a></p>

<blockquote>
<pre><code>if otherString:
   stringValue = otherString
else:
   stringValue = defaultString
</code></pre>
  
  <p>This type of code is longer and more expressive, but also more readable</p>
</blockquote>

<p>Well yes, it's longer. Not so sure about “more expressive” and “more readable”. At the very least, your claim is disputable. I would even go as far as saying it's downright wrong, for two reasons.</p>

<p>First, your code emphasizes the decision-making (rather extremely). Onthe other hand, the conditional operator emphasizes something else, namely the value (resp. the assignment of said value). And this is <em>exactly</em> what the writer of this code wants. The decision-making is really rather a by-product of the code. The important part here is the assignment operation. Your code hides this assignment in a lot of syntactic noise: the branching.</p>

<p>Your code is less expressive because it shifts the emphasis from the important part.</p>

<p>Even then your code would probably trump some obscure ASCII art like <code>?:</code>. An inline-<code>if</code> would be preferable. Personally, I don't like the variant introduced with Python 2.5 because it's backwards. I would prefer something that reads in the same flow (direction) as the C ternary operator but uses words instead of ASCII characters:</p>

<pre><code>C = if cond then A else B
</code></pre>

<p>This wins hands down.</p>

<p>C and C# unfortunately don't have such an expressive statement. But (and this is the second argument), the ternary conditional operator of C languages is so long established that it has become an idiom in itself. The ternary operator is as much part of the language as the “conventional” <code>if</code> statement. Because it's an idiom, anybody who knows the language immediately reads this code right. Furthermore, it's an extremely short, concise way of expressing these semantics. In fact, it's the shortest imaginable way. It's extremely expressive because it doesn't obscure the essence with needless noise.</p>

<p>Finally, Jeff Atwood has written the perfect conclusion to this: <a href=""http://www.codinghorror.com/blog/archives/000878.html""><strong>The best code is no code at all</strong></a>.</p>
"
135471,1968,2008-09-25T19:32:01Z,135303,0,"<p>By the way, j0rd4n, you don't (<em>please</em> don't!) write code like this in C#. Apart from the fact that the <code>IsDefaultOrNull</code> is actually called <code>IsNullOrEmpty</code>, this is pure code bloat. C# offers the coalesce operator for situations like these:</p>

<pre><code>string stringValue = otherString ?? defaultString;
</code></pre>

<p>It's true that this only works if <code>otherString</code> is <code>null</code> (rather than empty) but if this can be ensured beforehand (and often it can) it makes the code much more readable.</p>
"
135531,8458,2008-09-25T19:42:30Z,135041,2,"<p>Okay, everyone here as a different opinion as to the tradeoffs and advantages of xrange versus range.  They're mostly correct, xrange is an iterator, and range fleshes out and creates an actual list.  For the majority of cases, you won't really notice a difference between the two.  (You can use map with range but not with xrange, but it uses up more memory.)</p>

<p>What I think you rally want to hear, however, is that the preferred choice is xrange.  Since range in Python 3 is an iterator, the code conversion tool 2to3 will correctly convert all uses of xrange to range, and will throw out an error or warning for uses of range.  If you want to be sure to easily convert your code in the future, you'll use xrange only, and list(xrange) when you're sure that you want a list.  I learned this during the CPython sprint at PyCon this year (2008) in Chicago.</p>
"
135669,20789,2008-09-25T20:04:30Z,135041,112,"<p>No, they both have their uses:</p>

<p>Use <code>xrange()</code> when iterating, as it saves memory.  Say:</p>

<pre><code>for x in xrange(1, one_zillion):
</code></pre>

<p>rather than:</p>

<pre><code>for x in range(1, one_zillion):
</code></pre>

<p>On the other hand, use <code>range()</code> if you actually want a list of numbers.</p>

<pre><code>multiples_of_seven = range(7,100,7)
print ""Multiples of seven &lt; 100: "", multiples_of_seven
</code></pre>
"
135718,20789,2008-09-25T20:10:53Z,135664,23,"<p>""It depends.""  Python allocates space for lists in such a way as to achieve <a href=""http://effbot.org/zone/python-list.htm"">amortized constant time</a> for appending elements to the list.</p>

<p>In practice, what this means with the current implementation is... the list always has space allocated for a power-of-two number of elements.  So range(1000000) will actually allocate a list big enough to hold 2^20 elements (~ 1.045 million).</p>

<p>This is only the space required to store the list structure itself (which is an array of pointers to the Python objects for each element).  A 32-bit system will require 4 bytes per element, a 64-bit system will use 8 bytes per element.</p>

<p>Furthermore, you need space to store the actual elements.  This varies widely.  For small integers (-5 to 256 currently), no additional space is needed, but for larger numbers Python allocates a new object for each integer, which takes 10-100 bytes and tends to fragment memory.</p>

<p>Bottom line: <b>it's complicated</b> and Python lists are <b>not</b> a good way to store large homogeneous data structures.  For that, use the <code>array</code> module or, if you need to do vectorized math, use NumPy.</p>

<p>PS- Tuples, unlike lists, are <i>not designed</i> to have elements progressively appended to them.  I don't know how the allocator works, but don't even think about using it for large data structures :-)</p>
"
135720,22364,2008-09-25T20:10:55Z,122277,9,"<pre><code>r""""""
This is an extension of the re module. It stores the last successful
match object and lets you access it's methods and attributes via
this module.

This module exports the following additional functions:
    expand  Return the string obtained by doing backslash substitution on a
            template string.
    group   Returns one or more subgroups of the match.
    groups  Return a tuple containing all the subgroups of the match.
    start   Return the indices of the start of the substring matched by
            group.
    end     Return the indices of the end of the substring matched by group.
    span    Returns a 2-tuple of (start(), end()) of the substring matched
            by group.

This module defines the following additional public attributes:
    pos         The value of pos which was passed to the search() or match()
                method.
    endpos      The value of endpos which was passed to the search() or
                match() method.
    lastindex   The integer index of the last matched capturing group.
    lastgroup   The name of the last matched capturing group.
    re          The regular expression object which as passed to search() or
                match().
    string      The string passed to match() or search().
""""""

import re as re_

from re import *
from functools import wraps

__all__ = re_.__all__ + [ ""expand"", ""group"", ""groups"", ""start"", ""end"", ""span"",
        ""last_match"", ""pos"", ""endpos"", ""lastindex"", ""lastgroup"", ""re"", ""string"" ]

last_match = pos = endpos = lastindex = lastgroup = re = string = None

def _set_match(match=None):
    global last_match, pos, endpos, lastindex, lastgroup, re, string
    if match is not None:
        last_match = match
        pos = match.pos
        endpos = match.endpos
        lastindex = match.lastindex
        lastgroup = match.lastgroup
        re = match.re
        string = match.string
    return match

@wraps(re_.match)
def match(pattern, string, flags=0):
    return _set_match(re_.match(pattern, string, flags))


@wraps(re_.search)
def search(pattern, string, flags=0):
    return _set_match(re_.search(pattern, string, flags))

@wraps(re_.findall)
def findall(pattern, string, flags=0):
    matches = re_.findall(pattern, string, flags)
    if matches:
        _set_match(matches[-1])
    return matches

@wraps(re_.finditer)
def finditer(pattern, string, flags=0):
    for match in re_.finditer(pattern, string, flags):
        yield _set_match(match)

def expand(template):
    if last_match is None:
        raise TypeError, ""No successful match yet.""
    return last_match.expand(template)

def group(*indices):
    if last_match is None:
        raise TypeError, ""No successful match yet.""
    return last_match.group(*indices)

def groups(default=None):
    if last_match is None:
        raise TypeError, ""No successful match yet.""
    return last_match.groups(default)

def groupdict(default=None):
    if last_match is None:
        raise TypeError, ""No successful match yet.""
    return last_match.groupdict(default)

def start(group=0):
    if last_match is None:
        raise TypeError, ""No successful match yet.""
    return last_match.start(group)

def end(group=0):
    if last_match is None:
        raise TypeError, ""No successful match yet.""
    return last_match.end(group)

def span(group=0):
    if last_match is None:
        raise TypeError, ""No successful match yet.""
    return last_match.span(group)

del wraps  # Not needed past module compilation
</code></pre>

<p>For example:</p>

<pre><code>if gre.match(""foo(.+)"", var):
  # do something with gre.group(1)
elif gre.match(""bar(.+)"", var):
  # do something with gre.group(1)
elif gre.match(""baz(.+)"", var):
  # do something with gre.group(1)
</code></pre>
"
135748,2827,2008-09-25T20:15:48Z,135664,2,"<p>This is implementation specific, I'm pretty sure. Certainly it depends on the internal representation of integers - you can't assume they'll be stored as 32-bit since Python gives you arbitrarily large integers so perhaps small ints are stored more compactly. </p>

<p>On my Python (2.5.1 on Fedora 9 on core 2 duo) the VmSize before allocation is 6896kB, after is 22684kB. After one more million element assignment, VmSize goes to 38340kB. This very grossly indicates around 16000kB for 1000000 integers, which is around 16 bytes per integer. That suggests a <em>lot</em> of overhead for the list. I'd take these numbers with a large pinch of salt.</p>
"
135815,9951,2008-09-25T20:26:14Z,134626,0,"<p>I agree with nosklo. By the way, even with a <em>use once, throw away</em> function, most of the time you just want to use something from the operator module.</p>

<p>E.G : </p>

<p>You have a function with this signature : myFunction(data, callback function).</p>

<p>You want to pass a function that add 2 elements.</p>

<p>Using lambda :</p>

<pre><code>myFunction(data, (lambda x, y : x + y))
</code></pre>

<p>The pythonic way :</p>

<pre><code>import operator
myFunction(data, operator.add)
</code></pre>

<p>Or course this is a simple example, but there is a lot of stuff the operator module provides, including the items setters  / getters for list and dict. Really cool.</p>
"
135837,9951,2008-09-25T20:29:33Z,132411,0,"<p>I'd personnaly use a tool to extract an uml sheme from the C code, then use it to generate python code.</p>

<p>From this squeleton, I's start to get rid of the uncessary C-style structures and then I'd fill the methods with python code.</p>

<p>I think it would be the safer and yet most efficient way.</p>
"
135873,14167,2008-09-25T20:35:17Z,135834,12,"<p>CTypes is very cool and much easier than SWIG, but it has the drawback that poorly or malevolently-written python code can actually crash the python process.  You should also consider <a href=""http://www.boost.org/doc/libs/release/libs/python/doc/"">boost</a> python.  IMHO it's actually easier than swig while giving you more control over the final python interface.  If you are using C++ anyway, you also don't add any other languages to your mix.</p>
"
135889,234,2008-09-25T20:37:53Z,135303,-1,"<p>If you used ruby, you could write</p>

<pre><code>stringValue = otherString.blank? ? defaultString : otherString;
</code></pre>

<p>the built in <code>blank?</code> method means null or empty.<br />
Come over to the dark side...</p>
"
135899,3207,2008-09-25T20:39:30Z,134629,0,"<p>This does work, and all the code that you've pasted is correct and works fine (I just copied it into a clean test/project app and it reversed the URL without any problem).  So there's something else going on here that you haven't showed us.  Simplify down to the bare-bones basics until it works, then start adding complexity back in and see where it's breaking.</p>

<p>Also, you can do ""./manage.py shell"" and then interactively import the reverse function and your view function and try the reverse.  That'll remove the test setup as a possible cause.</p>
"
135907,20133,2008-09-25T20:40:32Z,135303,0,"<p>I also discovered that just using the ""or"" operator does pretty well.  For instance:</p>

<pre><code>finalString = get_override() or defaultString
</code></pre>

<p>If *get_override()* returns """" or None, it will always use <em>defaultString</em>.</p>
"
135916,9951,2008-09-25T20:42:26Z,132488,1,"<p>I'd simply go with :</p>

<pre><code>import re

html = """"""fjlk&lt;wb&gt;dsqfjqdsmlkf fdsijfmldsqjfl fjdslmfkqsjf&lt;---- fdjslmjkqfs---&gt;&lt;!--[if lt IE 7.]&gt;\
&lt;script defer type=""text/javascript"" src=""pngfix_253168.js""&gt;&lt;/script&gt;&lt;!--png fix for IE--&gt;\
&lt;![endif]--&gt;fjlk&lt;wb&gt;dsqfjqdsmlkf fdsijfmldsqjfl fjdslmfkqsjf&lt;---- fdjslmjkqfs---&gt;""""""

# here the black magic occurs (whithout '.')
clean_html = ''.join(re.split(r'&lt;!--\[[^¤]+?endif]--&gt;', html))

print clean_html

'fjlk&lt;wb&gt;dsqfjqdsmlkf fdsijfmldsqjfl fjdslmfkqsjf&lt;---- fdjslmjkqfs---&gt;fjlk&lt;wb&gt;dsqfjqdsmlkf fdsijfmldsqjfl fjdslmfkqsjf&lt;---- fdjslmjkqfs---&gt;'
</code></pre>

<p>N.B : [^¤] will match any char that is not '¤'. This is really useful since it's lightning fast and this char can be found on any keyboard. But the trick is it's really hard to type (no one will type it by mistake) and nobody uses it : it's a generical money devise char.</p>

<p>If you don't feel like using ¤, however, you can use chr(7) to generate the ""system bell"" char, wich is unprintable and can't be found in a web page ;-)</p>
"
135966,17624,2008-09-25T20:47:28Z,135834,54,"<p>SWIG generates (rather ugly) C or C++ code. It is straightforward to use for simple functions (things that can be translated directly) and reasonably easy to use for more complex functions (such as functions with output parameters that need an extra translation step to represent in Python.) For more powerful interfacing you often need to write bits of C as part of the interface file. For anything but simple use you will need to know about CPython and how it represents objects -- not hard, but something to keep in mind.</p>

<p>ctypes allows you to directly access C functions, structures and other data, and load arbitrary shared libraries. You do not need to write any C for this, but you do need to understand how C works. It is, you could argue, the flip side of SWIG: it doesn't generate code and it doesn't require a compiler at runtime, but for anything but simple use it does require that you understand how things like C datatypes, casting, memory management and alignment work. You also need to manually or automatically translate C structs, unions and arrays into the equivalent ctypes datastructure, including the right memory layout.</p>

<p>It is likely that in pure execution, SWIG is faster than ctypes -- because the management around the actual work is done in C at compiletime rather than in Python at runtime. However, unless you interface a lot of different C functions but each only a few times, it's unlikely the overhead will be really noticeable.</p>

<p>In development time, ctypes has a much lower startup cost: you don't have to learn about interface files, you don't have to generate .c files and compile them, you don't have to check out and silence warnings. You can just jump in and start using a single C function with minimal effort, then expand it to more. And you get to test and try things out directly in the Python interpreter. Wrapping lots of code is somewhat tedious, although there are attempts to make that simpler (like ctypes-configure.)</p>

<p>SWIG, on the other hand, can be used to generate wrappers for multiple languages (barring language-specific details that need filling in, like the custom C code I mentioned above.) When wrapping lots and lots of code that SWIG can handle with little help, the code generation can also be a lot simpler to set up than the ctypes equivalents.</p>
"
136019,9567,2008-09-25T20:54:22Z,135834,8,"<p>You can also use <a href=""http://www.cosc.canterbury.ac.nz/greg.ewing/python/Pyrex/"" rel=""nofollow"">Pyrex</a>, which can act as glue between high-level Python code and low-level C code. <a href=""http://codespeak.net/lxml/"" rel=""nofollow"">lxml</a> is written in Pyrex, for instance.</p>
"
136083,4279,2008-09-25T21:00:40Z,135664,13,"<p>Useful links:</p>

<p><a href=""http://bytes.com/forum/thread757255.html"">How to get memory size/usage of python object</a></p>

<p><a href=""http://mail.python.org/pipermail/python-list/2002-March/135223.html"">Memory sizes of python objects?</a></p>

<p><a href=""http://groups.google.com/group/comp.lang.python/msg/b9afcfc2e1de5b05"">if you put data into dictionary, how do we calculate the data size?</a> </p>

<p>However they don't give a definitive answer. The way to go:</p>

<ol>
<li><p>Measure memory consumed by Python interpreter with/without the list (use OS tools).</p></li>
<li><p>Use a third-party extension module which defines some sort of sizeof(PyObject).</p></li>
</ol>

<p><strong>Update</strong>:</p>

<p><a href=""http://code.activestate.com/recipes/546530/"">Recipe 546530: Size of Python objects (revised)</a></p>

<pre><code>import asizeof

N = 1000000
print asizeof.asizeof(range(N)) / N
# -&gt; 20 (python 2.5, WinXP, 32-bit Linux)
# -&gt; 33 (64-bit Linux)
</code></pre>
"
136138,17624,2008-09-25T21:05:53Z,136097,525,"<p>A staticmethod is a method that knows nothing about the class or instance it was called on. It just gets the arguments that were passed, no implicit first argument. It is basically useless in Python -- you can just use a module function instead of a staticmethod.</p>

<p>A classmethod, on the other hand, is a method that gets passed the class it was called on, or the class of the instance it was called on, as first argument. This is useful when you want the method to be a factory for the class: since it gets the actual class it was called on as first argument, you can always instantiate the right class, even when subclasses are involved. Observe for instance how <code>dict.fromkeys()</code>, a classmethod, returns an instance of the subclass when called on a subclass:</p>

<pre><code>&gt;&gt;&gt; class DictSubclass(dict):
...     def __repr__(self):
...         return ""DictSubclass""
... 
&gt;&gt;&gt; dict.fromkeys(""abc"")
{'a': None, 'c': None, 'b': None}
&gt;&gt;&gt; DictSubclass.fromkeys(""abc"")
DictSubclass
&gt;&gt;&gt; 
</code></pre>
"
136149,22395,2008-09-25T21:07:06Z,136097,54,"<p>Basically <code>@classmethod</code> makes a method whose first argument is the class it's called from (rather than the class instance), <code>@staticmethod</code> does not have any implicit arguments.</p>
"
136152,13565,2008-09-25T21:07:44Z,136069,4,"<p>Depends on the size of the project. If you had only a few previous php-scripts which called your stand alone application then I'd probably go for a cgi-app.</p>

<p>If you have use for databases, url rewriting, templating, user management and such, then using a framework is a good idea.</p>

<p>And of course, before you port it, consider if it's worth it just to switch the language or if there are specific Python features you need.</p>

<p>Good luck!</p>
"
136166,21684,2008-09-25T21:11:08Z,136069,0,"<p>It depends on the way you are going to distribute your application.<br />
If it will only be used internally, go for django. It's a joy to work with it.
However, django really falls short at the distribution-task; django-applications are a pain to set up.</p>
"
136188,10661,2008-09-25T21:14:33Z,136069,13,"<p>The command-line Python, IMO, definitely comes first.  Get that to work, since that's the core of what you're doing.</p>

<p>The issue is that using a web framework's ORM from a command line application isn't obvious.  Django provides specific instructions for using their ORM from a command-line app.  Those are annoying at first, but I think they're a life-saver in the long run.  I use it heavily for giant uploads of customer-supplied files.</p>

<p>Don't use bare CGI.  It's not impossible, but too many things can go wrong, and they've all been solved by the frameworks.  Why reinvent something?  Just use someone else's code.</p>

<p>Frameworks involve learning, but no real ""overhead"".  They're not slow.  They're code you don't have to write or debug.</p>

<ol>
<li><p>Learn some Python.</p></li>
<li><p>Do the <a href=""http://docs.djangoproject.com/en/dev/"">Django</a> tutorial.</p></li>
<li><p>Start to build a web app.</p>

<p>a.  Start a Django project.  Build a small application in that project.</p>

<p>b.  Build your new model using the Django ORM.  Create a Django unit test for the model.  Be sure that it works.  You'll be able to use the default admin pages and do a lot of playing around.  Just don't build the <em>entire</em> web site yet.</p></li>
<li><p>Get your command-line app to work using Django ORM.  Essentially, you have to finesse the settings file for this app to work nicely.  See the <a href=""http://docs.djangoproject.com/en/dev/topics/settings/#topics-settings"">settings/configuration</a> section.  </p></li>
<li><p>Once you've got your command line and the default admin running, you can finish
the web app.</p></li>
</ol>

<p>Here's the golden rule of frameworks:  <strong>It's code you don't have to write, debug or maintain.</strong>  Use them.</p>
"
136215,22364,2008-09-25T21:18:49Z,127055,25,"<pre><code>def num_groups(regex):
    return re.compile(regex).groups
</code></pre>
"
136232,17209,2008-09-25T21:22:15Z,135834,6,"<p>ctypes is great, but does not handle C++ classes.  I've also found ctypes is about 10% slower than a direct C binding, but that will highly depend on what you are calling.</p>

<p>If you are going to go with ctypes, definitely check out the Pyglet and Pyopengl projects, that have massive examples of ctype bindings.</p>
"
136234,9448,2008-09-25T21:22:30Z,136069,3,"<p>I recently ported a PHP app to Python using <a href=""http://webpy.org/"" rel=""nofollow"">web.py</a>.  As frameworks go it is extremely lightweight with minimal dependencies, and it tends to stay out of your way, so it might be the compromise you're looking for. </p>

<p>It all depends on your initial application though, because with a large application the advantages of having a full-featured framework handling the plumbing tend to outweigh the disadvantages involved in having to drag around all the framework code.</p>
"
136246,19990,2008-09-25T21:24:13Z,136097,12,"<p><code>@staticmethod</code> just disables the default function as method descriptor.  classmethod wraps your function in a container callable that passes a reference to the owning class as first argument:</p>

<pre><code>&gt;&gt;&gt; class C(object):
...  pass
... 
&gt;&gt;&gt; def f():
...  pass
... 
&gt;&gt;&gt; staticmethod(f).__get__(None, C)
&lt;function f at 0x5c1cf0&gt;
&gt;&gt;&gt; classmethod(f).__get__(None, C)
&lt;bound method type.f of &lt;class '__main__.C'&gt;&gt;
</code></pre>

<p>As a matter of fact, <code>classmethod</code> has a runtime overhead but makes it possible to access the owning class.  Alternatively I recommend using a metaclass and putting the class methods on that metaclass:</p>

<pre><code>&gt;&gt;&gt; class CMeta(type):
...  def foo(cls):
...   print cls
... 
&gt;&gt;&gt; class C(object):
...  __metaclass__ = CMeta
... 
&gt;&gt;&gt; C.foo()
&lt;class '__main__.C'&gt;
</code></pre>
"
136280,16363,2008-09-25T21:30:14Z,136168,57,"<p>Assumes a unix-like system.</p>

<pre><code>import os
def tail(f, n, offset=0):
  stdin,stdout = os.popen2(""tail -n ""+n+offset+"" ""+f)
  stdin.close()
  lines = stdout.readlines(); stdout.close()
  return lines[:,-offset]
</code></pre>
"
136354,9493,2008-09-25T21:40:32Z,136168,1,"<p>For efficiency with very large files (common in logfile situations where you may want to use tail), you generally want to avoid reading the whole file (even if you do do it without reading the whole file into memory at once)  However, you do need to somehow work out the offset in lines rather than characters.  One possibility is reading backwards with seek() char by char, but this is very slow.  Instead, its better to process in larger blocks.</p>

<p>I've a utility function I wrote a while ago to read files backwards that can be used here.</p>

<pre><code>import os, itertools

def rblocks(f, blocksize=4096):
    """"""Read file as series of blocks from end of file to start.

    The data itself is in normal order, only the order of the blocks is reversed.
    ie. ""hello world"" -&gt; [""ld"",""wor"", ""lo "", ""hel""]
    Note that the file must be opened in binary mode.
    """"""
    if 'b' not in f.mode.lower():
        raise Exception(""File must be opened using binary mode."")
    size = os.stat(f.name).st_size
    fullblocks, lastblock = divmod(size, blocksize)

    # The first(end of file) block will be short, since this leaves 
    # the rest aligned on a blocksize boundary.  This may be more 
    # efficient than having the last (first in file) block be short
    f.seek(-lastblock,2)
    yield f.read(lastblock)

    for i in range(fullblocks-1,-1, -1):
        f.seek(i * blocksize)
        yield f.read(blocksize)

def tail(f, nlines):
    buf = ''
    result = []
    for block in rblocks(f):
        buf = block + buf
        lines = buf.splitlines()

        # Return all lines except the first (since may be partial)
        if lines:
            result.extend(lines[1:]) # First line may not be complete
            if(len(result) &gt;= nlines):
                return result[-nlines:]

            buf = lines[0]

    return ([buf]+result)[-nlines:]


f=open('file_to_tail.txt','rb')
for line in tail(f, 20):
    print line
</code></pre>

<p>[Edit] Added more specific version (avoids need to reverse twice)</p>
"
136368,10661,2008-09-25T21:43:18Z,136168,97,"<p>This may be quicker than yours.  Makes no assumptions about line length.  Backs through the file one block at a time till it's found the right number of '\n' characters.</p>

<pre><code>def tail( f, lines=20 ):
    total_lines_wanted = lines

    BLOCK_SIZE = 1024
    f.seek(0, 2)
    block_end_byte = f.tell()
    lines_to_go = total_lines_wanted
    block_number = -1
    blocks = [] # blocks of size BLOCK_SIZE, in reverse order starting
                # from the end of the file
    while lines_to_go &gt; 0 and block_end_byte &gt; 0:
        if (block_end_byte - BLOCK_SIZE &gt; 0):
            # read the last block we haven't yet read
            f.seek(block_number*BLOCK_SIZE, 2)
            blocks.append(f.read(BLOCK_SIZE))
        else:
            # file too small, start from begining
            f.seek(0,0)
            # only read what was not read
            blocks.append(f.read(block_end_byte))
        lines_found = blocks[-1].count('\n')
        lines_to_go -= lines_found
        block_end_byte -= BLOCK_SIZE
        block_number -= 1
    all_read_text = ''.join(reversed(blocks))
    return '\n'.join(all_read_text.splitlines()[-total_lines_wanted:])
</code></pre>

<p>I don't like tricky assumptions about line length when -- as a practical matter -- you can never know things like that.</p>

<p>Generally, this will locate the last 20 lines on the first or second pass through the loop.  If your 74 character thing is actually accurate, you make the block size 2048 and you'll tail 20 lines almost immediately.</p>

<p>Also, I don't burn a lot of brain calories trying to finesse alignment with physical OS blocks.  Using these high-level I/O packages, I doubt you'll see any performance consequence of trying to align on OS block boundaries.  If you use lower-level I/O, then you might see a speedup.</p>
"
136399,15687,2008-09-25T21:49:44Z,131327,2,"<p>If it's core functionality for saving the model you'll want it as part of the save method. However, if you already have a functioning model and you want to extend it for other purposes then signals are your best bet since they allow for properly decoupled modules.</p>

<p>A good example might be that you want to add event logging to your site, so you simply listen for the signals that signify an event rather than modifying the original site code.</p>

<p>post_save() is usually best because it means the model has been successfully saved, using pre_save() doesn't guarantee that the save will be successful so shouldn't be used for anything that would depend on the save being completed.</p>
"
136475,10661,2008-09-25T22:03:09Z,136168,-1,"<p>On second thought, this is probably just as fast as anything here.</p>

<pre><code>def tail( f, window=20 ):
    lines= ['']*window
    count= 0
    for l in f:
        lines[count%window]= l
        count += 1
    print lines[count%window:], lines[:count%window]
</code></pre>

<p>It's a lot simpler.  And it does seem to rip along at a good pace.  </p>
"
136683,22445,2008-09-25T22:47:33Z,136069,2,"<p>Django makes it possible to whip out a website rapidly, that's for sure. You don't need to be a Python master to use it, and since it's very pythonic in it's design, and there is not really any ""magic"" going on, it will help you learn Python along the way.</p>

<p>Start with the examples, check out some django screencasts from TwiD and you'll be on your way.</p>

<p>Start slow, tweaking the admin, and playing with it via shell is the way to start. Once you have a handle on the ORM and get how things work, start building the real stuff!</p>

<p>The framework isn't going to cause any performance problems, like S. Lott said, it's code you don't have to maintain, and that's the best kind.</p>
"
136721,22445,2008-09-25T22:55:44Z,134629,2,"<p>Jack M.'s example is nearly correct.</p>

<p>It needs to be a url function, not a tuple, if you want to use named urls.</p>

<pre><code>url(r'^no_monkeys/$', 'views.noMonkeys', {}, ""no-monkeys""),
</code></pre>
"
136741,2827,2008-09-25T22:59:55Z,136734,0,"<p>It's probably <em>possible</em> - but where do you want the key presses to go? To another application? That would probably be a case of understanding your platform's windowing toolkit and sending the right messages to the right window.</p>

<p>Clarify your requirements, and I'm sure we can help out.</p>
"
136749,13433,2008-09-25T23:00:48Z,136739,5,"<p><a href=""http://docs.python.org/library/pydoc.html"" rel=""nofollow"">pydoc</a>?</p>

<p>I'm not sure if you're looking for something more sophisticated, but it does the trick.</p>
"
136758,1057,2008-09-25T23:03:33Z,136739,1,"<p><a href=""https://docs.python.org/py-modindex.html"" rel=""nofollow"">Here</a> is a list of all the modules in Python, not sure if that's what you're really after.</p>
"
136759,394,2008-09-25T23:03:55Z,136734,5,"<p><a href=""http://www.autohotkey.com/"" rel=""nofollow"">AutoHotKey</a> is perfect for this kind of tasks (keyboard automation / remapping)</p>

<p>Script to send ""A"" 100 times:</p>

<pre><code>Send {A 100}
</code></pre>

<p>That's all</p>

<p><strong>EDIT</strong>: to send the keys to an specific application:</p>

<pre><code>WinActivate Word
Send {A 100}
</code></pre>
"
136760,15401,2008-09-25T23:04:21Z,136739,0,"<p>If you're working on Windows <a href=""http://www.activestate.com/Products/activepython/index.mhtml"" rel=""nofollow"">ActiveState Python</a> comes with the documentation, including the library reference in a searchable help file.</p>
"
136780,6899,2008-09-25T23:09:39Z,136734,17,"<p>Install the <a href=""http://sourceforge.net/projects/pywin32/"" rel=""nofollow"">pywin32</a> extensions. Then you can do the following:</p>

<pre><code>import win32com.client as comclt
wsh= comclt.Dispatch(""WScript.Shell"")
wsh.AppActivate(""Notepad"") # select another application
wsh.SendKeys(""a"") # send the keys you want
</code></pre>

<p>Search for documentation of the WScript.Shell object (I believe installed by default in all Windows XP installations). You can start <a href=""http://www.microsoft.com/technet/scriptcenter/guide/sas_wsh_pkoy.mspx?mfr=true"" rel=""nofollow"">here</a>, perhaps.</p>

<p><strong>EDIT:</strong> Sending F11 </p>

<pre><code>import win32com.client as comctl
wsh = comctl.Dispatch(""WScript.Shell"")

# Google Chrome window title
wsh.AppActivate(""icanhazip.com"")
wsh.SendKeys(""{F11}"")
</code></pre>
"
136783,22277,2008-09-25T23:11:13Z,136739,2,"<p>The standard python library is fairly well documented. Try jumping into python and importing a module say ""os"" and running:</p>

<pre><code>import os   
help(os)
</code></pre>

<p>This reads the doc strings on each of the items in the module and displays it. This is exactly what pydoc will do too.</p>

<p>EDIT: <a href=""http://epydoc.sourceforge.net/"" rel=""nofollow"">epydoc</a> is probably exactly what you're looking for: </p>
"
136786,14199,2008-09-25T23:12:13Z,136734,-1,"<p>If you're platform is Windows, I wouldn't actually recommend Python.  Instead, look into <a href=""http://www.autohotkey.com/"" rel=""nofollow"">Autohotkey</a>.  Trust me, I love Python, but in this circumstance a macro program is the ideal tool for the job.  Autohotkey's scripting is only decent (in my opinion), but the ease of simulating input will save you countless hours.  Autohotkey scripts can be ""compiled"" as well so you don't need the interpreter to run the script.</p>

<p>Also, if this is for something on the Web, I recommend <a href=""https://addons.mozilla.org/en-US/firefox/addon/3863"" rel=""nofollow"">iMacros</a>.  It's a firefox plugin and therefore has a much better integration with websites.  For example, you can say ""write 1000 'a's in this form"" instead of ""simulate a mouseclick at (319,400) and then press 'a' 1000 times"".</p>

<p>For Linux, I unfortunately have not been able to find a good way to easily create keyboard/mouse macros.</p>
"
136804,22277,2008-09-25T23:17:24Z,136069,10,"<p>You might consider using something like <a href=""http://webpy.org/"">web.py</a> which would be easy to distribute (since it's small) and it would also be easy to adapt your other tools to it since it doesn't require you to submit to the framework so much like Django does. </p>

<p>Be forewarned, however, it's not the most loved framework in the Python community, but it might be just the thing for you. You might also check out <a href=""http://mdp.cti.depaul.edu/"">web2py</a>, but I know less about that.</p>
"
136870,9940,2008-09-25T23:29:56Z,136789,3,"<p>Use bind variables instead of literal values in the sql statements and create a cursor for 
each unique sql statement so that the statement does not need to be reparsed the next time it is used.  From the python db api doc:</p>

<blockquote>
  <p>Prepare and execute a database
  operation (query or command). 
  Parameters may be provided as sequence
  or mapping and will be bound to
  variables in the operation. Variables
  are specified in a database-specific
  notation (see the module's paramstyle
  attribute for details). [5]</p>
  
  <p>A reference to the operation will be
  retained by the cursor.  If the same
  operation object is passed in again,
  then the cursor can optimize its
  behavior.  This is most effective for
  algorithms where the same operation is
  used, but different parameters are
  bound to it (many times).</p>
</blockquote>

<p>ALWAYS ALWAYS ALWAYS use bind variables.</p>
"
136929,20654,2008-09-25T23:42:37Z,136739,1,"<p>I've downloaded Python 2.5 from Python.org and It does not contains pydoc.</p>

<pre><code>Directorio de C:\Python25

9/23/2008  10:45 PM    &lt;DIR&gt;          .
9/23/2008  10:45 PM    &lt;DIR&gt;          ..
9/23/2008  10:45 PM    &lt;DIR&gt;          DLLs
9/23/2008  10:45 PM    &lt;DIR&gt;          Doc
9/23/2008  10:45 PM    &lt;DIR&gt;          include
9/25/2008  06:34 PM    &lt;DIR&gt;          Lib
9/23/2008  10:45 PM    &lt;DIR&gt;          libs
2/21/2008  01:05 PM            14,013 LICENSE.txt
2/21/2008  01:05 PM           119,048 NEWS.txt
2/21/2008  01:11 PM            24,064 python.exe
2/21/2008  01:12 PM            24,576 pythonw.exe
2/21/2008  01:05 PM            56,354 README.txt
9/23/2008  10:45 PM    &lt;DIR&gt;          tcl
9/23/2008  10:45 PM    &lt;DIR&gt;          Tools
2/21/2008  01:11 PM             4,608 w9xpopen.exe
          6 archivos        242,663 bytes
</code></pre>

<p>But it has ( the substitute I guess ) pydocgui...</p>

<pre><code>C:\Python25&gt;dir Tools\Scripts\pydocgui.pyw

10/28/2005  07:06 PM               222 pydocgui.pyw
           1 archivos            222 bytes
</code></pre>

<p>This launches a webserver and shows what I was looking for. All the modules plus all the classes that come with the platform.</p>

<p>The Doc dir contains the same as in:</p>

<p><a href=""http://docs.python.org/"" rel=""nofollow"">http://docs.python.org/</a></p>

<p>Thanks a lot for guide me  to pydoc.</p>
"
137002,9940,2008-09-25T23:59:39Z,136789,3,"<p>In the for loop, you're inserting into the 'chats' table repeatedly, so you only need a single sql statement with bind variables, to be executed with different values.  So you could put this before the for loop:</p>

<pre><code>insert_statement=""""""
    INSERT INTO chats(person_id, message_type, created_at, channel)
    VALUES(:person_id,:message_type,:created_at,:channel)
""""""
</code></pre>

<p>Then in place of each sql statement you execute put this in place:</p>

<pre><code>cursor.execute(insert_statement, person_id='person',message_type='msg',created_at=some_date, channel=3)
</code></pre>

<p>This will make things run faster because:</p>

<ol>
<li>The cursor object won't have to reparse the statement each time</li>
<li>The db server won't have to generate a new execution plan as it can use the one it create previously.</li>
<li>You won't have to call santitize() as special characters in the bind variables won't part of the sql statement that gets executed.</li>
</ol>

<p>Note: The bind variable syntax I used is Oracle specific.  You'll have to check the psycopg2 library's documentation for the exact syntax.</p>

<p>Other optimizations:</p>

<ol>
<li>You're incrementing with the ""UPDATE people SET chatscount"" after each loop iteration.  Keep a dictionary mapping user to chat_count and then execute the statement of the total number you've seen.  This will be faster then hitting the db after every record.</li>
<li>Use bind variables on ALL your queries.  Not just the insert statement, I choose that as an example.</li>
<li>Change all the find_*() functions that do db look ups to cache their results so they don't have to hit the db every time.</li>
<li>psycho optimizes python programs that perform a large number of numberic operation.  The script is IO expensive and not CPU expensive so I wouldn't expect to give you much if any optimization.</li>
</ol>
"
137052,19837,2008-09-26T00:13:02Z,136207,1,"<p>I have been doing the same thing.  Extract common functionality, pretty the code up with extra documentation and unit tests/ doctests, create an easy_install setup.py, and then release on PyPi.  Recently, I created a single <a href=""http://code.google.com/p/7oars/"" rel=""nofollow"">Google Code site</a> where I manage the source and keep the wiki up to date.  </p>
"
137076,17312,2008-09-26T00:20:36Z,136789,2,"<p>As Mark suggested, use binding variables. The database only has to prepare each statement once, then ""fill in the blanks"" for each execution. As a nice side effect, it will automatically take care of string-quoting issues (which your program isn't handling).</p>

<p>Turn transactions on (if they aren't already) and do a single commit at the end of the program. The database won't have to write anything to disk until all the data needs to be committed. And if your program encounters an error, none of the rows will be committed, allowing you to simply re-run the program once the problem has been corrected.</p>

<p>Your log_hostname, log_person, and log_date functions are doing needless SELECTs on the tables. Make the appropriate table attributes PRIMARY KEY or UNIQUE. Then, instead of checking for the presence of the key before you INSERT, just do the INSERT. If the person/date/hostname already exists, the INSERT will fail from the constraint violation. (This won't work if you use a transaction with a single commit, as suggested above.)</p>

<p>Alternatively, if you know you're the only one INSERTing into the tables while your program is running, then create parallel data structures in memory and maintain them in memory while you do your INSERTs. For example, read in all the hostnames from the table into an associative array at the start of the program. When want to know whether to do an INSERT, just do an array lookup. If no entry found, do the INSERT and update the array appropriately. (This suggestion is compatible with transactions and a single commit, but requires more programming. It'll be wickedly faster, though.)</p>
"
137096,9567,2008-09-26T00:26:21Z,136789,1,"<p>Additionally to the many fine suggestions @Mark Roddy has given, do the following:</p>

<ul>
<li>don't use <code>readlines</code>, you can iterate over file objects</li>
<li>try to use <code>executemany</code> rather than <code>execute</code>: try to do batch inserts rather single inserts, this tends to be faster because there's less overhead. It also reduces the number of commits</li>
<li><code>str.rstrip</code> will work just fine instead of stripping of the newline with a regex</li>
</ul>

<p>Batching the inserts will use more memory temporarily, but that should be fine when you don't read the whole file into memory.</p>
"
137207,9567,2008-09-26T01:05:35Z,36953,15,"<p>For medium-complex grammars, <a href=""http://pyparsing.wikispaces.com/"">PyParsing</a> is brilliant. You can define grammars directly within Python code, no need for code generation:</p>

<pre><code>&gt;&gt;&gt; from pyparsing import Word, alphas
&gt;&gt;&gt; greet = Word( alphas ) + "","" + Word( alphas ) + ""!"" # &lt;-- grammar defined here
&gt;&gt;&gt; hello = ""Hello, World!""
&gt;&gt;&gt;&gt; print hello, ""-&gt;"", greet.parseString( hello )
Hello, World! -&gt; ['Hello', ',', 'World', '!']
</code></pre>

<p>(Example taken from the PyParsing home page).</p>

<p>With parse actions (functions that are invoked when a certain grammar rule is triggered), you can convert parses directly into abstract syntax trees, or any other representation.</p>

<p>There are many helper functions that encapsulate recurring patterns, like operator hierarchies, quoted strings, nesting or C-style comments.</p>
"
137291,2147,2008-09-26T01:39:58Z,136207,1,"<p>What kind of modules are we talking about here?  If you're planning on distributing your projects to other python developers, setuptools is great.  But it's usually not a very good way to distribute apps to end users.  Your best bet in the latter case is to tailor your packaging to the platforms you're distributing it for.  Sure, it's a pain, but it makes life for end users far easier.</p>

<p>For example, in my Debian system, I usually don't use easy_install because it is a little bit more difficult to get eggs to work well with the package manager.  In OS X and windows, you'd probably want to package everything up using py2app and py2exe respectively.  This makes life for the end user better.  After all, they shouldn't know or care what language your scripts are written in.  They just need them to install.</p>
"
137320,10661,2008-09-26T01:50:23Z,136789,5,"<p>Don't waste time profiling.  The time is always in the database operations.  Do as few as possible.  Just the minimum number of inserts.</p>

<p>Three Things.</p>

<p>One.  Don't SELECT over and over again to conform the Date, Hostname and Person dimensions.  Fetch all the data ONCE into a Python dictionary and use it in memory.  Don't do repeated singleton selects.  Use Python.</p>

<p>Two.  Don't Update.</p>

<p>Specifically, Do not do this.  It's bad code for two reasons.</p>

<pre><code>cursor.execute(""UPDATE people SET chats_count = chats_count + 1 WHERE id = '%s'"" % person_id)
</code></pre>

<p>It be replaced with a simple SELECT COUNT(*) FROM ... .  Never update to increment a count.  Just count the rows that are there with a SELECT statement.  [If you can't do this with a simple SELECT COUNT or SELECT COUNT(DISTINCT), you're missing some data -- your data model should always provide correct complete counts.  Never update.]</p>

<p>And.  Never build SQL using string substitution.  Completely dumb.</p>

<p>If, for some reason the <code>SELECT COUNT(*)</code> isn't fast enough (benchmark first, before doing anything lame) you can cache the result of the count in another table.  AFTER all of the loads.  Do a <code>SELECT COUNT(*) FROM whatever GROUP BY whatever</code> and insert this into a table of counts.  Don't Update.  Ever.</p>

<p>Three.  Use Bind Variables.  Always.</p>

<pre><code>cursor.execute( ""INSERT INTO ... VALUES( %(x)s, %(y)s, %(z)s )"", {'x':person_id, 'y':time_to_string(time), 'z':channel,} )
</code></pre>

<p>The SQL never changes.  The values bound in change, but the SQL never changes.  This is MUCH faster.  Never build SQL statements dynamically.  Never.  </p>
"
137335,10661,2008-09-26T01:56:12Z,136739,1,"<blockquote>
  <p>BTW I know that I would eventually
  will read this:</p>
  
  <p><a href=""http://docs.python.org/lib/lib.html"" rel=""nofollow"">http://docs.python.org/lib/lib.html</a></p>
  
  <p>But, well, I think it is not today.</p>
</blockquote>

<p>I suggest that you're making a mistake.  The lib doc has ""the class, its methods and and example of how to use it.""   It <em>is</em> what you are looking for.  </p>

<p>I use both Java and Python all the time.  Dig into the library doc, you'll find everything you're looking for.</p>
"
137624,21998,2008-09-26T03:37:33Z,137580,8,"<p>Mechanize itself only sends GETs and POSTs, but you can easily extend the Request class to send HEAD. Example:</p>

<pre><code>import mechanize

class HeadRequest(mechanize.Request):
    def get_method(self):
        return ""HEAD""

request = HeadRequest(""http://www.example.com/"")
response = mechanize.urlopen(request)

print response.info()
</code></pre>
"
137827,20789,2008-09-26T04:49:05Z,135834,7,"<p>I'm going to be contrarian and suggest that, if you can, you should write your extension library using the <a href=""http://docs.python.org/api/"" rel=""nofollow"">standard Python API</a>.  It's really well-integrated from both a C and Python perspective... if you have any experience with the Perl API, you will find it a <em>very</em> pleasant surprise.</p>

<p>Ctypes is nice too, but as others have said, it doesn't do C++.</p>

<p>How big is the library you're trying to wrap?  How quickly does the codebase change?  Any other maintenance issues?  These will all probably affect the choice of the best way to write the Python bindings.</p>
"
137831,20938,2008-09-26T04:51:12Z,132488,1,"<p>As I see it, you only need to worry about <em>downlevel-hidden</em> comments (the ones that start with <code>&lt;!--</code>), and you don't need to match anything beyond the word <code>if</code> and the space following it.  This should do what you want:</p>

<pre><code>""&lt;!--\[if\s(?:[^&lt;]+|&lt;(?!!\[endif\]--&gt;))*&lt;!\[endif\]--&gt;""
</code></pre>

<p>That mess in the middle is to satisfy your desire not to use <code>.*?</code>, but I don't really think it's worth the effort.  The <code>.*?</code> approach should work fine if you compile the regex with the Re.S flag set or wrap it in <code>(?s:...)</code>.  For example:</p>

<pre><code>""(?s:&lt;!--\[if\s.*?&lt;!\[endif\]--&gt;)""
</code></pre>
"
137903,6068,2008-09-26T05:26:03Z,47953,1,"<p>Whatever you do, do not stop distributing your application, also, as a tarball, as that is the easiest packagable format for operating systems with a package sysetem.</p>
"
138039,20789,2008-09-26T06:31:03Z,138029,0,"<p>Doesn't appear to be... why not just save it yourself if you're going to need it, or use a non-anonymous function?</p>

<p>Also, your code doesn't work as written: <code>lambda</code> functions can only contain expressions, not statements, so <code>print</code> is a no-go (this will change in Python 3.0 when <code>print()</code> becomes a function).</p>
"
138053,3957,2008-09-26T06:39:43Z,138045,3,"<p>Use reflection for this.</p>

<p><a href=""http://msdn.microsoft.com/en-us/library/system.type.getproperty.aspx"" rel=""nofollow""><code>Type.GetProperty()</code></a> and <a href=""http://msdn.microsoft.com/en-us/library/system.type.getproperty.aspx"" rel=""nofollow""><code>Type.GetProperties()</code></a> each return <a href=""http://msdn.microsoft.com/en-us/library/system.reflection.propertyinfo.aspx"" rel=""nofollow""><code>PropertyInfo</code></a> instances, which can be used to read a property value on an object.</p>

<pre><code>var result = typeof(DateTime).GetProperty(""Year"").GetValue(dt, null)
</code></pre>

<p><a href=""http://msdn.microsoft.com/en-us/library/system.type.getmethod.aspx"" rel=""nofollow""><code>Type.GetMethod()</code></a> and <a href=""http://msdn.microsoft.com/en-us/library/system.type.getmethods.aspx"" rel=""nofollow""><code>Type.GetMethods()</code></a> each return <a href=""http://msdn.microsoft.com/en-us/library/system.reflection.methodinfo.aspx"" rel=""nofollow""><code>MethodInfo</code></a> instances, which can be used to execute a method on an object.</p>

<pre><code>var result = typeof(DateTime).GetMethod(""ToLongDateString"").Invoke(dt, null);
</code></pre>

<p>If you don't necessarily know the type (which would be a little wierd if you new the property name), than you could do something like this as well.</p>

<pre><code>var result = dt.GetType().GetProperty(""Year"").Invoke(dt, null);
</code></pre>
"
138054,14642,2008-09-26T06:40:58Z,138045,1,"<p>Yes, you can do this...</p>

<pre><code>typeof(YourObjectType).GetProperty(""PropertyName"").GetValue(instanceObjectToGetPropFrom, null);
</code></pre>
"
138063,10174,2008-09-26T06:46:51Z,138045,0,"<p>There's the System.Reflection.PropertyInfo class that can be created using object.GetType().GetProperties(). That can be used to probe an object's properties using strings. (Similar methods exist for object methods, fields, etc.)</p>

<p>I don't think that will help you accomplish your goals though. You should probably just create and manipulate the objects directly. Controls have a Name property that you can set, for example.</p>
"
138079,5745,2008-09-26T06:57:23Z,138045,9,"<p>There is also <a href=""http://msdn.microsoft.com/en-us/library/66btctbe.aspx"">Type.InvokeMember</a>.</p>

<pre><code>public static class ReflectionExt
{
    public static object GetAttr(this object obj, string name)
    {
        Type type = obj.GetType();
        BindingFlags flags = BindingFlags.Instance | 
                                 BindingFlags.Public | 
                                 BindingFlags.GetProperty;

        return type.InvokeMember(name, flags, Type.DefaultBinder, obj, null);
    }
}
</code></pre>

<p>Which could be used like:</p>

<pre><code>object value = ReflectionExt.GetAttr(obj, ""PropertyName"");
</code></pre>

<p>or (as an extension method):</p>

<pre><code>object value = obj.GetAttr(""PropertyName"");
</code></pre>
"
138090,18676,2008-09-26T07:01:59Z,47953,1,"<p>For simple Python programs, you probably don't need to use eggs. Distributing the raw .py files should suffice; it's like distributing source files for GNU/Linux. You can also use the various OS ""packagers"" (like py2exe or py2app) to create .exe, .dmg, or other files for different operating systems.</p>

<p>More complex programs, e.g. Django, pretty much require eggs due to the various modules and dependencies required.</p>
"
138121,18676,2008-09-26T07:16:09Z,136739,0,"<p>It doesn't directly answer your question (so I'll probably be downgraded), but you may be interested in <a href=""http://www.jython.org"" rel=""nofollow"">Jython</a>.</p>

<blockquote>
  <p>Jython is an implementation of the high-level, dynamic, object-oriented language Python written in 100% Pure Java, and seamlessly integrated with the Java platform. It thus allows you to run Python on any Java platform.</p>
</blockquote>

<p>Since you are coming from Java, Jython may help you leverage Python while still allowing you to use your Java knowledge.</p>
"
138231,5147,2008-09-26T08:03:35Z,116139,0,"<p><a href=""http://www.codeproject.com/KB/WPF/OpenFlowDoc.aspx?msg=2740533#xx2740533xx"" rel=""nofollow"">Here</a> is a example of using XLINQ to search throu a word document</p>
"
138240,22035,2008-09-26T08:07:29Z,136739,1,"<p>You can set the <em>environment variable</em> <strong>PYTHONDOCS</strong> to point to where the python documentation is installed.</p>

<p>On my system, it's in <em>/usr/share/doc/python2.5</em></p>

<p>So you can define this variable in your <em>shell profile</em> or somewhere else depending on your system:</p>

<blockquote>
  <p>export PYTHONDOCS=/usr/share/doc/python2.5</p>
</blockquote>

<p>Now, if you open an interractive python console, you can call the help system. For exemple:</p>

<blockquote>
<pre><code>&gt;&gt;&gt; help(Exception)
&gt;&gt;&gt; Help on class Exception in module exceptions:

&gt;&gt;&gt; class Exception(BaseException)
&gt;&gt;&gt;  |  Common base class for all non-exit exceptions.
&gt;&gt;&gt;  |  
&gt;&gt;&gt;  |  Method resolution order:
&gt;&gt;&gt;  |      Exception
</code></pre>
</blockquote>

<p>Documentation is here:</p>

<p><a href=""https://docs.python.org/library/pydoc.html"" rel=""nofollow"">https://docs.python.org/library/pydoc.html</a></p>
"
138254,893,2008-09-26T08:14:23Z,138250,1,"<p>Image manipulation is a complex topic, and it's best if you <em>do</em> use a library. I can recommend <a href=""http://newcenturycomputers.net/projects/gdmodule.html"" rel=""nofollow"">gdmodule</a> which provides easy access to many different image formats from within Python.</p>
"
138258,19435,2008-09-26T08:15:25Z,138029,2,"<p>The associated call to do that for the tk C API would be <a href=""http://linux.about.com/library/cmd/blcmdl3_Tcl_GetCommandInfo.htm"" rel=""nofollow"">Get_GetCommandInfo</a> which</p>

<blockquote>
  <p>places information about the command
  in the Tcl_CmdInfo structure pointed
  to by infoPtr</p>
</blockquote>

<p>However this function is not used anywhere in <a href=""http://svn.python.org/projects/python/trunk/Modules/_tkinter.c"" rel=""nofollow"">_tkinter.c</a> which is the binding for tk used by python trough <a href=""http://svn.python.org/projects/python/trunk/Lib/lib-tk/Tkinter.py"" rel=""nofollow"">Tkinter.py</a>.</p>

<p>Therefore it is impossible to get the bound function out of tkinter. You need to remember that function yourself.</p>
"
138260,3171,2008-09-26T08:15:56Z,138250,108,"<p>It's probably best to use the <a href=""http://www.pythonware.com/products/pil/"">Python Image Library</a> to do this which I'm afraid is a separate download.</p>

<p>The easiest way to do what you want is via the <a href=""http://effbot.org/imagingbook/image.htm"">load() method on the Image object</a> which returns a pixel access object which you can manipulate like an array:</p>

<pre><code>from PIL import Image
im = Image.open(""dead_parrot.jpg"") #Can be many different formats.
pix = im.load()
print im.size #Get the width and hight of the image for iterating over
print pix[x,y] #Get the RGBA Value of the a pixel of an image
pix[x,y] = value # Set the RGBA Value of the image (tuple)
</code></pre>

<p>Alternatively, look at <a href=""http://effbot.org/imagingbook/imagedraw.htm"">ImageDraw</a> which gives a much richer API for creating images.</p>
"
138300,15369,2008-09-26T08:28:57Z,138250,3,"<p>There's a really good article on wiki.wxpython.org entitled <a href=""http://wiki.wxpython.org/index.cgi/WorkingWithImages"" rel=""nofollow"">Working With Images</a>. The article mentions the possiblity of using wxWidgets (wxImage), PIL or PythonMagick. Personally, I've used PIL and wxWidgets and both make image manipulation fairly easy.</p>
"
138317,15958,2008-09-26T08:34:18Z,136739,0,"<p>Also try</p>

<pre><code>pydoc -p 11111
</code></pre>

<p>Then type in web browser <a href=""http://localhost:11111"" rel=""nofollow"">http://localhost:11111</a></p>

<p>EDIT: of course you can use any other value for port number instead of 11111</p>
"
138479,8206,2008-09-26T09:34:03Z,138353,0,"<p>Two possible solutions</p>

<ol>
<li>Rebuild the sizer with the radio widgets each time you have to make a change</li>
<li>Hold the radio button widgets in a list, and call SetLabel each time you have to change their labels.</li>
</ol>
"
138534,8206,2008-09-26T09:55:39Z,5136,2,"<p>I'd also try ctypes first. </p>

<ol>
<li>Use the Matlab compiler to compile the code into C. </li>
<li>Compile the C code into a DLL.</li>
<li>Use ctypes to load and call code from this DLL</li>
</ol>

<p>The hardest step is probably 1, but if you already know Matlab and have used the Matlab compiler, you should not have serious problems with it.</p>
"
138539,893,2008-09-26T09:56:08Z,138521,6,"<p>This might seem reasonable at first glance, however there are a lot of ordinary things in Python that aren't directly mappable to to a C representation without carrying over a lot of the Python runtime support. For example, duck typing comes to mind. Many functions in Python that read input can take a file <em>or file-like</em> object, as long as it supports certain operations, eg. read() or readline(). If you think about what it would take to map this type of support to C, you begin to imagine exactly the sorts of things that the Python runtime system already does.</p>

<p>There are utilities such as <a href=""http://www.py2exe.org/"">py2exe</a> that will bundle a Python program and runtime into a single executable (as far as possible).</p>
"
138545,6739,2008-09-26T09:58:28Z,138502,1,"<p>Have you looked at <a href=""http://4suite.org/index.xhtml"" rel=""nofollow"">4suite</a>?</p>
"
138548,8450,2008-09-26T09:59:12Z,138521,2,"<p><a href=""http://psyco.sourceforge.net/"" rel=""nofollow"">Psyco</a> is a kind of just-in-time (JIT) compiler: dynamic compiler for Python, runs code 2-100 times faster, but it needs much memory.</p>

<p>In short: it run your existing Python software much faster, with no change in your source but it doesn't compile to object code the same way a C compiler would.</p>
"
138553,29503,2008-09-26T10:00:15Z,138521,15,"<p>Try <a href=""http://shed-skin.blogspot.com/"">ShedSkin</a> Python-to-C++ compiler, but it is far from perfect. Also there is Psyco - Python JIT if only speedup is needed. But IMHO this is not worth the effort. For speed-critical parts of code best solution would be to write them as C/C++ extensions. </p>
"
138554,13,2008-09-26T10:00:16Z,138521,2,"<p>Jython has a compiler targeting JVM bytecode. The bytecode is fully dynamic, just like the Python language itself! Very cool. (Yes, as Greg Hewgill's answer alludes, the bytecode does use the Jython runtime, and so the Jython jar file must be distributed with your app.)</p>
"
138582,8925,2008-09-26T10:06:06Z,138521,11,"<p><a href=""http://codespeak.net/pypy/dist/pypy/doc/home.html"">PyPy</a> is a project to reimplement Python in Python, using compilation to native code as one of the implementation strategies (others being a VM with JIT, using JVM, etc.). Their compiled C versions run slower than CPython on average but much faster for some programs.</p>

<p><a href=""http://code.google.com/p/shedskin/"">Shedskin</a> is an experimental Python-to-C++ compiler.</p>

<p><a href=""http://www.cosc.canterbury.ac.nz/greg.ewing/python/Pyrex/version/Doc/About.html"">Pyrex</a> is a language specially designed for writing Python extension modules. It's designed to bridge the gap between the nice, high-level, easy-to-use world of Python and the messy, low-level world of C.</p>
"
138585,9567,2008-09-26T10:06:43Z,138521,41,"<p>As @Greg Hewgill says it, there are good reasons why this is not always possible. However, certain kinds of code (like very algorithmic code) can be turned into ""real"" machine code. </p>

<p>There are several options:</p>

<ul>
<li>Use <a href=""http://psyco.sourceforge.net/"">Psyco</a>, which emits machine code dynamically. You should choose carefully which methods/functions to convert, though.</li>
<li>Use <a href=""http://cython.org/"">Cython</a>, which is a Python-<em>like</em> language that is compiled into a Python C extension</li>
<li>Use <a href=""http://pypy.org"">PyPy</a>, which has a translator from RPython (a <em>restricted subset</em> of Python that does not support some of the most ""dynamic"" features of Python) to C or LLVM. 
<ul>
<li>PyPy is still highly experimental</li>
<li>not all extensions will be present</li>
</ul></li>
</ul>

<p>After that, you can use one of the existing packages (freeze, Py2exe, PyInstaller) to put everything into one binary.</p>

<p>All in all: there is no general answer for your question. If you have Python code that is performance-critical, try to use as much builtin functionality as possible (or ask a ""How do I make my Python code faster"" question). If that doesn't help, try to identify the code and port it to C (or Cython) and use the extension.</p>
"
138586,15401,2008-09-26T10:06:46Z,138521,8,"<p><a href=""http://www.cosc.canterbury.ac.nz/greg.ewing/python/Pyrex/"" rel=""nofollow"">Pyrex</a> is a subset of the Python language that compiles to C, done by the guy that first built <a href=""http://www.secnetix.de/olli/Python/list_comprehensions.hawk"" rel=""nofollow"">list comprehensions</a> for Python.  It was mainly developed for building wrappers but can be used in a more general context.  <a href=""http://cython.org/"" rel=""nofollow"">Cython</a> is a more actively maintained fork of pyrex.</p>
"
138587,2900,2008-09-26T10:06:52Z,133860,0,"<p>The Permission Denied error is showing that the script is running with root credentials, because it's looking in root's home dir for files.</p>

<p>I suggest you change the hook script to something that does:</p>

<pre><code>id &gt; /tmp/id
</code></pre>

<p>so that you can check the results of that to make sure what the uid/gid and euid/egid are.  You will probably find it's not actually running as the user you think it is.</p>

<p>My first guess, like Troels, was also SELinux, but that would only be my guess if you are absolutely sure the script through Apache is running with exactly the same user/group as your manual test.</p>
"
138594,16827,2008-09-26T10:08:42Z,138552,1,"<p>Not with plain regexp. Regular expressions have no ""memory"" so they cannot distinguish between being ""inside"" or ""outside"" quotes. </p>

<p>You need something more powerful, for example using <a href=""http://gema.sourceforge.net"" rel=""nofollow"">gema</a> it would be straighforward:</p>

<pre><code>'&lt;repl&gt;'=$0
repl:x=P
</code></pre>
"
138598,21097,2008-09-26T10:10:00Z,138552,0,"<p>Sorry to break your hopes, but you need a push-down automata to do that. There is more info here:
<a href=""http://en.wikipedia.org/wiki/Pushdown_automaton"" rel=""nofollow"">Pushdown Automaton</a></p>

<p>In short, Regular expressions, which are finite state machines can only read and has no memory while pushdown automaton has a stack and manipulating capabilities.</p>

<p>Edit: spelling...</p>
"
138605,17624,2008-09-26T10:14:09Z,138521,2,"<p>The answer is ""Yes, it is possible"". You could take Python code and attempt to compile it into the equivalent C code using the CPython API. In fact, there used to be a Python2C project that did just that, but I haven't heard about it in many years (back in the Python 1.5 days is when I last saw it.)</p>

<p>You could attempt to translate the Python code into native C as much as possible, and fall back to the CPython API when you need actual Python features. I've been toying with that idea myself the last month or two. It is, however, an awful lot of work, and an enormous amount of Python features are very hard to translate into C: nested functions, generators, anything but simple classes with simple methods, anything involving modifying module globals from outside the module, etc, etc.</p>
"
138615,893,2008-09-26T10:18:50Z,138552,8,"<p>I was able to do this with Python:</p>

<pre><code>&gt;&gt;&gt; import re
&gt;&gt;&gt; re.sub(r""x(?=[^']*'([^']|'[^']*')*$)"", ""P"", ""axbx'cxdxe'fxgh'ixj'k"")
""axbx'cPdPe'fxgh'iPj'k""
</code></pre>

<p>What this does is use the non-capturing match (?=...) to check that the character x is within a quoted string. It looks for some nonquote characters up to the next quote, then looks for a sequence of either single characters or quoted groups of characters, until the end of the string.</p>

<p>This relies on your assumption that the quotes are always balanced. This is also not very efficient.</p>
"
138620,11621,2008-09-26T10:19:31Z,138552,1,"<p>Similar discussion about balanced text replaces: <a href=""http://stackoverflow.com/questions/133601/can-regular-expressions-be-used-to-match-nested-patterns#133771"">http://stackoverflow.com/questions/133601/can-regular-expressions-be-used-to-match-nested-patterns#133771</a></p>

<p>Although you can try this in Vim, but it works well only if the string is on one line, and there's only one pair of 's.</p>

<pre><code>:%s:\('[^']*\)x\([^']*'\):\1P\2:gci
</code></pre>

<p>If there's one more pair or even an unbalanced ', then it could fail. That's way I included the <code>c</code> a.k.a. confirm flag on the <code>ex</code> command.</p>

<p>The same can be done with sed, without the interaction - or with <code>awk</code> so you can add some interaction.</p>

<p>One possible solution is to break the lines on pairs of <code>'</code>s then you can do with vim solution. </p>
"
138625,2900,2008-09-26T10:20:43Z,134626,22,"<p>Practically speaking, to me there are two differences:</p>

<p>The first is about what they do and what they return:</p>

<ul>
<li><p>def is a keyword that doesn't return anything and creates a 'name' in the local namespace.</p></li>
<li><p>lambda is a keyword that returns a function object and does not create a 'name' in the local namespace.</p></li>
</ul>

<p>Hence, if you need to call a function that takes a function object, the only way to do that in one line of python code is with a lambda.  There's no equivalent with def.</p>

<p>In some frameworks this is actually quite common; for example, I use <a href=""http://twistedmatrix.com/"">Twisted</a> a lot, and so doing something like</p>

<pre><code>d.addCallback(lambda result: setattr(self, _someVariable, result))
</code></pre>

<p>is quite common, and more concise with lambdas.</p>

<p>The second difference is about what the actual function is allowed to do.</p>

<ul>
<li>A function defined with 'def' can contain any python code</li>
<li>A function defined with 'lambda' has to evaluate to an expression, and can thus not contain statements like print, import, raise, ... </li>
</ul>

<p>For example,</p>

<pre><code>def p(x): print x
</code></pre>

<p>works as expected, while</p>

<pre><code>lambda x: print x
</code></pre>

<p>is a SyntaxError.</p>

<p>Of course, there are workarounds - substitute <code>print</code> with <code>sys.stdout.write</code>, or <code>import</code> with <code>__import__</code>.  But usually you're better off going with a function in that case.</p>
"
138630,22080,2008-09-26T10:21:40Z,78238,7,"<p>In the latest releases of QT you can draw widgets <em>into</em> your OpenGL context, if you really would like to do something like that. Otherwise there is <a href=""http://www.cegui.org.uk/wiki/index.php/Main_Page"">CEGui</a> that is used in some game engines. </p>

<p>Implementing GUI Widgets yourself unless you want to edify yourself is a waste of your time, unless you would be satisfied with the most rudimentary of looks and functionality. </p>
"
138666,12138,2008-09-26T10:40:03Z,128466,1,"<p>Only simplest sites are easy to upgrade.</p>

<p>Expect real pain if your site happen to be for <em>non-ASCII</em> part of the world (read: anywhere outside USA and UK). The most painful change in Django was switching from bytestrings to unicode objects internally - now you have to find all places where you use bytestrings and change this to unicode. Worst case is the template rendering, you'll never know you forgot to change one variable until you get UnicodeError.</p>

<p>Other notable thing: manipulators (<em>oldforms</em>) have gone and you have no other way than to rewrite all parts with forms (<em>newforms</em>).</p>

<p>If this is your case and your project is larger than 2-3 apps, I'd be rather reluctant to upgrade until really necessary.</p>
"
138709,15622,2008-09-26T10:55:13Z,138680,19,"<p>vim supports scripting in python (and in perl as well, I think).</p>

<p>You just have to make sure that the vim distribution you are using has been compiled with python support.</p>

<p>If you are using a Linux system, you can download the source and then compile it with</p>

<pre><code>./configure --enable-pythoninterp 
make
sudo make install
</code></pre>

<p>Inside vim, you can type</p>

<pre><code>:version
</code></pre>

<p>to list the available features; if it has python support, you should see a '+python' somewhere (a '-python' otherwise).</p>

<p>Then, to check the usage of the python module, you can type</p>

<pre><code>:help python
</code></pre>

<p>P.S: if you're going to compile the vim sources, make sure to check the available configure options, you might need to specify --with-python-config-dir as well.</p>

<p>P.P.S: to create a ""custom command in command mode"" (if I understand correctly what you mean), you can create a function ""MyFunction"" in a vim script (using python or the vim scripting language) and then invoke it with </p>

<pre><code>:Call MyFunction()
</code></pre>

<p>Check </p>

<pre><code>:help user-functions
</code></pre>

<p>for details</p>
"
138720,11621,2008-09-26T10:57:54Z,138680,5,"<p>Yes it is. There are several extensions on <a href=""http://www.vim.org/scripts/index.php"" rel=""nofollow"">http://www.vim.org/scripts/index.php</a> </p>

<p>It can be done with python as well if the support for python is compiled in. </p>

<p>Article about it: <a href=""http://www.techrepublic.com/article/extending-vim-with-python/"" rel=""nofollow"">http://www.techrepublic.com/article/extending-vim-with-python/</a> </p>

<p>Google is our friend.</p>

<p>HTH</p>
"
138755,11830,2008-09-26T11:04:02Z,138552,9,"<p>I converted Greg Hewgill's python code to C# and it worked!</p>

<pre><code>[Test]
public void ReplaceTextInQuotes()
{
  Assert.AreEqual(""axbx'cPdPe'fxgh'iPj'k"", 
    Regex.Replace(""axbx'cxdxe'fxgh'ixj'k"",
      @""x(?=[^']*'([^']|'[^']*')*$)"", ""P""));
}
</code></pre>

<p>That test passed.</p>
"
138886,NA,2008-09-26T11:31:27Z,49307,1,"<p>for loops in MATLAB used to be slow, but this is not true anymore.</p>

<p>So Vectorizing is not always the miracle solution. just use the profiler, and tic and toc functions to help you identify possible bottlenecks</p>
"
138888,9951,2008-09-26T11:31:45Z,136069,2,"<p>Go for a framework. Basic stuffs like session handling are a nightmare if you don't use a one because Python is not web specialized like PHP.</p>

<p>If you think django is too much, you can try a lighter one like the very small but still handy web.py.</p>
"
138970,4279,2008-09-26T11:54:18Z,130763,0,"<p>If your script always requires an Administrator's privileges then:    </p>

<pre><code>runas /user:Administrator ""python your_script.py""
</code></pre>
"
139009,18745,2008-09-26T12:06:40Z,138353,1,"<p>To make new list elements appear in correct places, you have to re-layout the grid after adding new elements to it. For example, to add a few new items, you could call:</p>

<pre><code>def addNewSkills(self, newSkillList):
    '''newSkillList is a list of skill names you want to add'''
    for skillName in newSkillList:
        newRadioButton = wx.RadioButton(self, -1, skillName)
        self.grid1.Add(newRadioButton) # appears in top-left corner of the panel
    self.Layout() # all newly added radio buttons appear where they should be
    self.Fit() # if you need to resize the panel to fit new items, this will help
</code></pre>

<p>where <code>self.grid1</code> is the sizer you keep all your radio buttons on.</p>
"
139047,18745,2008-09-26T12:15:24Z,26706,1,"<p>There is no way to see dragged data in <code>OnEnter</code> and <code>OnDragOver</code> methods.</p>

<p>The only solution I found is to store the dragged item in some instance variable that is then readable inside these methods.</p>
"
139056,22080,2008-09-26T12:18:12Z,139005,1,"<p>It will come down to you using the QScrollArea, it is a widget that implements showing something that is larger than the available space. You will not need to use QScrollBar directly. I don't have a PyQt example but there is a C++ example in the QT distribution it is called the ""Image Viewer"". The object hierarchy will still be the same </p>
"
139070,20310,2008-09-26T12:20:38Z,138250,20,"<p><strong>PyPNG - lightweight PNG decoder/encoder</strong></p>

<p>Although the question hints at JPG, I hope my answer will be useful to some people.</p>

<p>Here's how to read and write PNG pixels using <a href=""https://pypi.python.org/pypi/pypng/0.0.18"" rel=""nofollow"">PyPNG module</a>:</p>

<pre><code>import png, array

point = (2, 10) # coordinates of pixel to be painted red

reader = png.Reader(filename='image.png')
w, h, pixels, metadata = reader.read_flat()
pixel_byte_width = 4 if metadata['alpha'] else 3
pixel_position = point[0] + point[1] * w
new_pixel_value = (255, 0, 0, 0) if metadata['alpha'] else (255, 0, 0)
pixels[
  pixel_position * pixel_byte_width :
  (pixel_position + 1) * pixel_byte_width] = array.array('B', new_pixel_value)

output = open('image-with-red-dot.png', 'wb')
writer = png.Writer(w, h, **metadata)
writer.write_array(output, pixels)
output.close()
</code></pre>

<p>PyPNG is a single pure Python module less than 4000 lines long, including tests and comments.</p>

<p><a href=""http://www.pythonware.com/products/pil/"" rel=""nofollow"">PIL</a> is a more comprehensive imaging library, but it's also significantly heavier.</p>
"
139082,3363,2008-09-26T12:23:54Z,139005,0,"<p>In the PyQT source code distribution, look at the file:</p>

<blockquote>
  <p>examples/widgets/sliders.pyw</p>
</blockquote>

<p>Or there is a minimal example <a href=""http://www.zetcode.com/tutorials/pyqt4/widgets/"" rel=""nofollow"">here</a> (I guess I shouldn't copy paste because of potential copyright issues)</p>
"
139107,9567,2008-09-26T12:28:38Z,139005,2,"<pre><code>&gt;&gt;&gt; import sys
&gt;&gt;&gt; from PyQt4 import QtCore, QtGui
&gt;&gt;&gt; app = QtGui.QApplication(sys.argv)
&gt;&gt;&gt; sb = QtGui.QScrollBar()
&gt;&gt;&gt; sb.setMinimum(0)
&gt;&gt;&gt; sb.setMaximum(100)
&gt;&gt;&gt; def on_slider_moved(value): print ""new slider position: %i"" % (value, )
&gt;&gt;&gt; sb.connect(sb, QtCore.SIGNAL(""sliderMoved(int)""), on_slider_moved)
&gt;&gt;&gt; sb.show()
&gt;&gt;&gt; app.exec_()
</code></pre>

<p>Now, when you move the slider (you might have to resize the window), you'll see the slider position printed to the terminal as you the handle.</p>
"
139137,4915,2008-09-26T12:32:46Z,138851,8,"<p>What we did was override the default test_runner so that it wouldn't create a new database to test against.  This way, it runs the test against whatever our current local database looks like.  But be very careful if you use this method because any changes to data you make in your tests will be permanent.  I made sure that all our tests restores any changes back to their original state, and keep our pristine version of our database on the server and backed up.</p>

<p>So to do this you need to copy the run_test method from django.test.simple to a location in your project -- I put mine in myproject/test/test_runner.py</p>

<p>Then make the following changes to that method:</p>

<pre><code>// change
old_name = settings.DATABASE_NAME
from django.db import connection
connection.creation.create_test_db(verbosity, autoclobber=not interactive)
result = unittest.TextTestRunner(verbosity=verbosity).run(suite)
connection.creation.destroy_test_db(old_name, verbosity)

// to:
result = unittest.TextTestRunner(verbosity=verbosity).run(suite)
</code></pre>

<p>Make sure to do all the necessary imports at the top and then in your settings file set the setting:</p>

<pre><code>TEST_RUNNER = 'myproject.test.test_runner.run_tests'
</code></pre>

<p>Now when you run ./manage.py test Django will run the tests against the current state of your database rather than creating a new version based on your current model definitions.</p>

<p>Another thing you can do is create a copy of your database locally, and then do a check in your new run_test() method like this:</p>

<pre><code>if settings.DATABASE_NAME != 'my_test_db': 
    sys.exit(""You cannot run tests using the %s database. Please switch DATABASE_NAME to my_test_db in settings.py"" % settings.DATABASE_NAME)
</code></pre>

<p>That way there's no danger of running tests against your main database.</p>
"
139193,22445,2008-09-26T12:40:20Z,139180,238,"<p>You can use <code>dir(module)</code> to see all available methods/attributes.  Also check out PyDocs.</p>
"
139198,17624,2008-09-26T12:41:04Z,139180,69,"<p>The inspect module. Also see the <a href=""http://docs.python.org/2/library/pydoc.html""><code>pydoc</code></a> module, the <code>help()</code> function in the interactive interpreter and the <code>pydoc</code> command-line tool which generates the documentation you are after. You can just give them the class you wish to see the documentation of. They can also generate, for instance, HTML output and write it to disk.</p>
"
139258,22035,2008-09-26T12:50:39Z,139180,44,"<pre><code>import types
import yourmodule

print [yourmodule.__dict__.get(a) for a in dir(yourmodule)
  if isinstance(yourmodule.__dict__.get(a), types.FunctionType)]
</code></pre>
"
139393,20310,2008-09-26T13:08:27Z,135664,6,"<p><strong>Addressing ""tuple"" part of the question</strong></p>

<p>Declaration of CPython's PyTuple in a typical build configuration boils down to this:</p>

<pre><code>struct PyTuple {
  size_t refcount; // tuple's reference count
  typeobject *type; // tuple type object
  size_t n_items; // number of items in tuple
  PyObject *items[1]; // contains space for n_items elements
};
</code></pre>

<p>Size of PyTuple instance is fixed during it's construction and cannot be changed afterwards. The number of bytes occupied by PyTuple can be calculated as</p>

<blockquote>
  <p><code>sizeof(size_t) x 2 + sizeof(void*) x (n_items + 1)</code>.</p>
</blockquote>

<p>This gives <em>shallow</em> size of tuple. To get <em>full</em> size you also need to add total number of bytes consumed by object graph rooted in <code>PyTuple::items[]</code> array. </p>

<p>It's worth noting that tuple construction routines make sure that only single instance of empty tuple is ever created (singleton).</p>

<p>References:
<a href=""http://svn.python.org/view/python/tags/r252/Include/Python.h?rev=60915&amp;view=markup"">Python.h</a>,
<a href=""http://svn.python.org/view/python/tags/r252/Include/object.h?rev=60915&amp;view=markup"">object.h</a>,
<a href=""http://svn.python.org/view/python/tags/r252/Include/tupleobject.h?rev=60915&amp;view=markup"">tupleobject.h</a>,
<a href=""http://svn.python.org/view/python/tags/r252/Objects/tupleobject.c?rev=60915&amp;view=markup"">tupleobject.c</a></p>
"
139467,22364,2008-09-26T13:22:18Z,138552,1,"<pre><code>Pattern:     (?s)\G((?:^[^']*'|(?&lt;=.))(?:'[^']*'|[^'x]+)*+)x
Replacement: \1P
</code></pre>

<ol>
<li><code>\G</code> &mdash; Anchor each match at the end of the previous one, or the start of the string.</li>
<li><code>(?:^[^']*'|(?&lt;=.))</code> &mdash; If it is at the beginning of the string, match up to the first quote.</li>
<li><code>(?:'[^']*'|[^'x]+)*+</code> &mdash; Match any block of unquoted characters, or any (non-quote) characters up to an 'x'.</li>
</ol>

<p>One sweep trough the source string, except for a single character look-behind.</p>
"
139469,21384,2008-09-26T13:22:20Z,111234,19,"<p>A callable is an object allows you to use round parenthesis ( ) and eventually pass some parameters, just like functions.</p>

<p>Every time you define a function python creates a callable object. 
In example, you could define the function <strong>func</strong> in these ways (it's the same):</p>

<pre><code>class a(object):
    def __call__(self, *args):
        print 'Hello'

func = a()

# or ... 
def func(*args):
    print 'Hello'
</code></pre>

<p>You could use this method instead of methods like <strong>doit</strong> or <strong>run</strong>, I think it's just more clear to see obj() than obj.doit()</p>
"
139574,985,2008-09-26T13:42:50Z,47801,2,"<p>Ok, another update on the subject. It seems that the cheeseshop template is broken. I've followed the chapter you linked in the post and it seems that authkit is working fine. There are some caveats:</p>

<ol>
<li>sqlalchemy has to be in 0.5 version</li>
<li>authkit has to be the dev version from svn (easy_install authkit==dev)</li>
</ol>

<p>I managed to get it working fine.</p>
"
139802,11545,2008-09-26T14:17:33Z,138552,2,"<p>The trick is to use non-capturing group to match the part of the string <em>following</em> the match (character <strong>x</strong>) we are searching for.
Trying to match the string up to <strong>x</strong> will only find either the first or the last occurence, depending whether non-greedy quantifiers are used.
Here's Greg's idea transposed to Tcl, with comments.</p>

<pre>
set strIn {axbx'cxdxe'fxgh'ixj'k}
set regex {(?x)                     # enable expanded syntax 
                                    # - allows comments, ignores whitespace
            x                       # the actual match
            (?=                     # non-matching group
                [^']*'              # match to end of current quoted substring
                                    ##
                                    ## assuming quotes are in pairs,
                                    ## make sure we actually were 
                                    ## inside a quoted substring
                                    ## by making sure the rest of the string 
                                    ## is what we expect it to be
                                    ##
                (
                    [^']*           # match any non-quoted substring
                    |               # ...or...
                    '[^']*'         # any quoted substring, including the quotes
                )*                  # any number of times
                $                   # until we run out of string :)
            )                       # end of non-matching group
}

#the same regular expression without the comments
set regexCondensed {(?x)x(?=[^']*'([^']|'[^']*')*$)}

set replRegex {P}
set nMatches [regsub -all -- $regex $strIn $replRegex strOut]
puts ""$nMatches replacements. ""
if {$nMatches > 0} {
    puts ""Original: |$strIn|""
    puts ""Result:   |$strOut|""
}
exit
</pre>

<p>This prints:</p>

<pre><code>3 replacements. 
Original: |axbx'cxdxe'fxgh'ixj'k|
Result:   |axbx'cPdPe'fxgh'iPj'k|
</code></pre>
"
139880,9493,2008-09-26T14:28:40Z,139819,5,"<p>The lambda captures variables, not values, hence the code</p>

<pre><code>lambda : i
</code></pre>

<p>will always return the value i is <strong>currently</strong> bound to in the closure.  By the time it gets called, this value has been set to -1.</p>

<p>To get what you want, you'll need to capture the actual binding at the time the lambda is created, by:</p>

<pre><code>&gt;&gt;&gt; f(*(lambda i=i: i for i in t)) # -&gt; [-1, -1]
[1, -1]
&gt;&gt;&gt; f(*[lambda i=i: i for i in t]) # -&gt; [-1, -1]
[1, -1]
</code></pre>
"
139899,9567,2008-09-26T14:31:47Z,139819,9,"<p>They are different, because the value of <code>i</code> in both the generator expression and the list comp are evaluated lazily, i.e. when the anonymous functions are invoked in <code>f</code>.<br />
By that time, <code>i</code> is bound to the last value if <code>t</code>, which is -1.</p>

<p>So basically, this is what the list comprehension does (likewise for the genexp):</p>

<pre><code>x = []
i = 1 # 1. from t
x.append(lambda: i)
i = -1 # 2. from t
x.append(lambda: i)
</code></pre>

<p>Now the lambdas carry around a closure that references <code>i</code>, but <code>i</code> is bound to -1 in both cases, because that is the last value it was assigned to.</p>

<p>If you want to make sure that the lambda receives the current value of <code>i</code>, do</p>

<pre><code>f(*[lambda u=i: u for i in t])
</code></pre>

<p>This way, you force the evaluation of <code>i</code> at the time the closure is created.</p>

<p><strong>Edit</strong>: There is one difference between generator expressions and list comprehensions: the latter leak the loop variable into the surrounding scope.</p>
"
140066,1638,2008-09-26T15:02:56Z,140026,0,"<p>Why not create a language that when it ""compiles"" it generates SQL or whatever query language your datastore requires ?</p>

<p>You would be basically creating an abstraction over your persistence layer.  </p>
"
140091,13663,2008-09-26T15:07:03Z,140026,0,"<p>You mentioned Python. Why not use Python? If someone can ""type in"" an expression in your DSL, they can type in Python.</p>

<p>You'll need some rules on structure of the expression, but that's a lot easier than implementing something new.</p>
"
140106,20789,2008-09-26T15:08:54Z,139180,76,"<p>Once you've <code>import</code>ed the module, you can just do:</p>

<pre><code> help(modulename)
</code></pre>

<p>... To get the docs on all the functions at once, interactively.  Or you can use:</p>

<pre><code> dir(modulename)
</code></pre>

<p>... To simply list the names of all the functions and variables defined in the module.</p>
"
140208,17624,2008-09-26T15:26:18Z,140182,1,"<p>Of course. See the 'sub' and 'subn' methods of compiled regular expressions, or the 're.sub' and 're.subn' functions. You can either make it replace the matches with a string argument you give, or you can pass a callable (such as a function) which will be called to supply the replacement. See <a href=""https://docs.python.org/library/re.html"" rel=""nofollow"">https://docs.python.org/library/re.html</a></p>
"
140209,12682,2008-09-26T15:26:22Z,140182,7,"<pre><code>sub (replacement, string[, count = 0])
</code></pre>

<p><a href=""https://docs.python.org/howto/regex.html#search-and-replace"" rel=""nofollow"">sub</a> returns the string obtained by replacing the leftmost non-overlapping occurrences of the RE in string by the replacement replacement. If the pattern isn't found, string is returned unchanged.</p>

<pre><code>    p = re.compile( '(blue|white|red)')
    &gt;&gt;&gt; p.sub( 'colour', 'blue socks and red shoes')
    'colour socks and colour shoes'
    &gt;&gt;&gt; p.sub( 'colour', 'blue socks and red shoes', count=1)
    'colour socks and red shoes'
</code></pre>
"
140218,4918,2008-09-26T15:27:48Z,140182,2,"<p>You want to use <a href=""https://docs.python.org/2/library/re.html#re.sub"" rel=""nofollow"">re.sub</a>:</p>

<pre><code>&gt;&gt;&gt; import re
&gt;&gt;&gt; re.sub(r'aaa...bbb', 'aaaooobbb', ""hola aaaiiibbb como estas?"")
'hola aaaooobbb como estas?'
</code></pre>

<p>To re-use variable parts from the pattern, use <code>\g&lt;n&gt;</code> in the replacement string to access the n-th <code>()</code> group:</p>

<pre><code>&gt;&gt;&gt; re.sub( ""(svcOrdNbr +).."", ""\g&lt;1&gt;XX"", ""svcOrdNbr               IASZ0080"")
'svcOrdNbr               XXSZ0080'
</code></pre>
"
140228,2995,2008-09-26T15:29:21Z,140026,0,"<p>You said nobody is going to want to install a server that downloads and executes arbitrary code at runtime.  However, that is exactly what your DSL will do (eventually) so there probably isn't that much of a difference.  Unless you're doing something very specific with the data then I don't think a DSL will buy you that much and it will frustrate the users who are already versed in SQL.  Don't underestimate the size of the task you'll be taking on.</p>

<p>To answer your question however, you will need to come up with a grammar for your language, something to parse the text and walk the tree, emitting code or calling an API that you've written (which is why my comment that you're still going to have to ship some code).  </p>

<p>There are plenty of educational texts on grammars for mathematical expressions you can refer to on the net, that's fairly straight forward.  You may have a parser generator tool like ANTLR or Yacc you can use to help you generate the parser (or use a language like Lisp/Scheme and marry the two up).  Coming up with a reasonable SQL grammar won't be easy.  But google 'BNF SQL' and see what you come up with.</p>

<p>Best of luck.</p>
"
140275,6741,2008-09-26T15:35:16Z,140026,1,"<p>I think we're going to need a bit more information here.  Let me know if any of the following is based on incorrect assumptions.</p>

<p>First of all, as you pointed out yourself, there already exists a DSL for selecting rows from arbitrary tables-- it is called ""SQL"".  Since you don't want to reinvent SQL, I'm assuming that you only need to query from a single table with a fixed format.</p>

<p>If this is the case, you probably don't need to implement a DSL (although that's certainly one way to go); it may be easier, if you are used to Object Orientation, to create a Filter object.  </p>

<p>More specifically, a ""Filter"" collection that would hold one or more SelectionCriterion objects.  You can implement these to inherit from one or more base classes representing types of selections (Range, LessThan, ExactMatch, Like, etc.) Once these base classes are in place, you can create column-specific inherited versions which are appropriate to that column.  Finally, depending on the complexity of the queries you want to support, you'll want to implement some kind of connective glue to handle AND and OR and NOT linkages between the various criteria.</p>

<p>If you feel like it, you can create a simple GUI to load up the collection; I'd look at the filtering in Excel as a model, if you don't have anything else in mind.</p>

<p>Finally, it should be trivial to convert the contents of this Collection to the corresponding SQL, and pass that to the database.</p>

<p>However: if what you are after is simplicity, and your users understand SQL, you could simply ask them to type in the contents of a WHERE clause, and programmatically build up the rest of the query.  From a security perspective, if your code has control over the columns selected and the FROM clause, and your database permissions are set properly, and you do some sanity checking on the string coming in from the users, this would be a relatively safe option.</p>
"
140304,6615,2008-09-26T15:39:40Z,140026,0,"<p>It really sounds like SQL, but perhaps it's worth to try using SQLite if you want to keep it simple?</p>
"
140495,4319,2008-09-26T16:18:18Z,140439,37,"<p>I was missing </p>

<pre><code>l.set_option(ldap.OPT_REFERRALS, 0)
</code></pre>

<p>From the init.</p>
"
140737,15366,2008-09-26T17:14:23Z,140439,1,"<p>Use a Distinguished Name to log on your system.<code>""CN=Your user,CN=Users,DC=b2t,DC=local""</code>
It should work on any LDAP system, including AD</p>
"
140776,8669,2008-09-26T17:23:44Z,140182,0,"<p>If you want to continue using the syntax you mentioned (replace the match value instead of replacing the part that didn't match), and considering you will only have one group, you could use the code below.</p>

<pre><code>def getExpandedText(pattern, text, replaceValue):
    m = re.search(pattern, text)
    expandedText = text[:m.start(1)] + replaceValue + text[m.end(1):]
    return expandedText
</code></pre>
"
140778,18308,2008-09-26T17:24:10Z,140758,2,"<p>Straight from Python's Refererence Library</p>

<pre><code>&gt;&gt;&gt; import glob
&gt;&gt;&gt; glob.glob('./[0-9].*')
['./1.gif', './2.txt']
&gt;&gt;&gt; glob.glob('*.gif')
['1.gif', 'card.gif']
&gt;&gt;&gt; glob.glob('?.gif')
['1.gif']
</code></pre>
"
140795,9448,2008-09-26T17:26:17Z,140758,3,"<p>Try ""listdir()"" in the os module (<a href=""http://docs.python.org/lib/os-file-dir.html"" rel=""nofollow"">docs</a>):</p>

<pre><code>import os
print os.listdir('.')
</code></pre>
"
140805,14057,2008-09-26T17:27:59Z,140758,2,"<p>Take a look at <code>os.walk()</code> and the examples <a href=""http://docs.python.org/lib/os-file-dir.html"" rel=""nofollow"">here</a>.  With <code>os.walk()</code> you can easily process a whole directory tree. </p>

<p>An example from the link above...</p>

<pre><code># Delete everything reachable from the directory named in 'top',
# assuming there are no symbolic links.
# CAUTION:  This is dangerous!  For example, if top == '/', it
# could delete all your disk files.
import os
for root, dirs, files in os.walk(top, topdown=False):
    for name in files:
        os.remove(os.path.join(root, name))
    for name in dirs:
        os.rmdir(os.path.join(root, name))
</code></pre>
"
140818,4194,2008-09-26T17:30:39Z,140758,25,"<p>Yes, there is. The Python way is even better.</p>

<p>There are three possibilities:</p>

<p><strong>1)  Like File.listFiles():</strong></p>

<p>Python has the function os.listdir(path). It works like the Java method.</p>

<p><strong>2) pathname pattern expansion with glob:</strong></p>

<p>The module glob contains functions to list files on the file system using Unix shell like pattern, e.g.
<code><pre>
files = glob.glob('/usr/joe/*.gif')
</pre></code></p>

<p><strong>3)  File Traversal with walk:</strong></p>

<p>Really nice is the os.walk function of Python.</p>

<p>The walk method returns a generation function that recursively list all directories and files below a given starting path.</p>

<p>An Example:
 <code><pre>
import os
from os.path import join
for root, dirs, files in os.walk('/usr'):
   print ""Current directory"", root
   print ""Sub directories"", dirs
   print ""Files"", files
</pre></code>
You can even on the fly remove directories from ""dirs"" to avoid walking to that dir: if ""joe"" in dirs: dirs.remove(""joe"") to avoid walking into directories called ""joe"".</p>

<p>listdir and walk are documented <a href=""http://docs.python.org/lib/os-file-dir.html"">here</a>.
glob is documented <a href=""http://docs.python.org/lib/module-glob.html"">here</a>.</p>
"
140822,8669,2008-09-26T17:31:07Z,140758,2,"<p>Use os.path.walk if you want subdirectories as well.</p>

<pre>walk(top, func, arg)

        Directory tree walk with callback function.

        For each directory in the directory tree rooted at top (including top
        itself, but excluding '.' and '..'), call func(arg, dirname, fnames).
        dirname is the name of the directory, and fnames a list of the names of
        the files and subdirectories in dirname (excluding '.' and '..').  func
        may modify the fnames list in-place (e.g. via del or slice assignment),
        and walk will only recurse into the subdirectories whose names remain in
        fnames; this can be used to implement a filter, or to impose a specific
        order of visiting.  No semantics are defined for, or required of, arg,
        beyond that arg is always passed to func.  It can be used, e.g., to pass
        a filename pattern, or a mutable object designed to accumulate
        statistics.  Passing None for arg is common.
</pre>
"
140977,NA,2008-09-26T17:56:13Z,138552,2,"<pre><code>#!/usr/bin/perl -w

use strict;

# Break up the string.
# The spliting uses quotes
# as the delimiter.
# Put every broken substring
# into the @fields array.

my @fields;
while (&lt;&gt;) {
    @fields = split /'/, $_;
}

# For every substring indexed with an odd
# number, search for x and replace it
# with P.

my $count;
my $end = $#fields;
for ($count=0; $count &lt; $end; $count++) {
    if ($count % 2 == 1) {
        $fields[$count] =~ s/a/P/g;
    }    
}
</code></pre>

<p>Wouldn't this chunk do the job?</p>
"
141084,22491,2008-09-26T18:18:34Z,138502,1,"<p>If you only need <em>basic</em> support, and your XML isn't too crazy, consider removing the XSLT element from the equation and just using a DOM/SAX parser.</p>

<p>Here's some info from the <a href=""http://wiki.python.org/"" rel=""nofollow"">PythonInfo Wiki</a>:</p>

<blockquote>
  <p>[DOM] sucks up an entire XML file,
  holds it in memory, and lets you work
  with it. Sax, on the other hand, emits
  events as it goes step by step through
  the file.</p>
</blockquote>

<p>What do you think?</p>
"
141113,4279,2008-09-26T18:24:31Z,139819,3,"<p>Expression <code>f = lambda: i</code> is equivalent to:</p>

<pre><code>def f():
    return i
</code></pre>

<p>Expression <code>g = lambda i=i: i</code> is equivalent to:</p>

<pre><code>def g(i=i):
    return i
</code></pre>

<p><code>i</code> is a <a href=""http://docs.python.org/ref/naming.html"" rel=""nofollow"">free variable</a> in the first case and it is bound to the function parameter in the second case i.e., it is a local variable in that case. Values for default parameters are evaluated at the time of function definition. </p>

<p>Generator expression is the nearest enclosing scope (where <code>i</code> is defined) for <code>i</code> name in the <code>lambda</code> expression, therefore <code>i</code> is resolved in that block:</p>

<pre><code>f(*(lambda: i for i in (1, -1)) # -&gt; [-1, -1]
</code></pre>

<p><code>i</code> is a local variable of the <code>lambda i: ...</code> block, therefore the object it refers to is defined in that block:</p>

<pre><code>f(*map(lambda i: lambda: i, (1,-1))) # -&gt; [1, -1]
</code></pre>
"
141214,22445,2008-09-26T18:46:29Z,82653,1,"<p>Nathan Borror has a great package of 'basic apps' that has a blog. These are well written, well documented apps that you should try out, get ideas from, etc.</p>

<p><a href=""http://code.google.com/p/django-basic-apps/"" rel=""nofollow"">http://code.google.com/p/django-basic-apps/</a></p>
"
141277,21106,2008-09-26T18:58:52Z,140758,2,"<p>I'd recommend against <code>os.path.walk</code> as it is being removed in Python 3.0.  <code>os.walk</code> is simpler, anyway, or at least <em>I</em> find it simpler.</p>
"
141313,9940,2008-09-26T19:04:46Z,141291,9,"<pre><code>directories=[d for d in os.listdir(os.getcwd()) if os.path.isdir(d)]
</code></pre>
"
141317,32538,2008-09-26T19:05:26Z,141291,0,"<p>Like so?</p>

<p>>>> [path for path in os.listdir(os.getcwd()) if os.path.isdir(path)]</p>
"
141318,3051,2008-09-26T19:05:26Z,141291,1,"<pre><code>[x for x in os.listdir(somedir) if os.path.isdir(os.path.join(somedir, x))]
</code></pre>
"
141327,17624,2008-09-26T19:06:57Z,141291,61,"<p>Filter the result using os.path.isdir() (and use os.path.join() to get the real path):</p>

<pre><code>&gt;&gt;&gt; [ name for name in os.listdir(thedir) if os.path.isdir(os.path.join(thedir, name)) ]
['ctypes', 'distutils', 'encodings', 'lib-tk', 'config', 'idlelib', 'xml', 'bsddb', 'hotshot', 'logging', 'doc', 'test', 'compiler', 'curses', 'site-packages', 'email', 'sqlite3', 'lib-dynload', 'wsgiref', 'plat-linux2', 'plat-mac']
</code></pre>
"
141336,9884,2008-09-26T19:10:36Z,141291,26,"<p>Filter the list using os.path.isdir to detect directories.</p>

<pre><code>filter(os.path.isdir, os.listdir(os.getcwd()))
</code></pre>
"
141426,4279,2008-09-26T19:28:32Z,13857,60,"<p><a href=""http://mrevelle.blogspot.com/2006/10/closure-on-closures.html"">Closure on closures</a></p>

<blockquote>
  <p>Objects are data with methods
  attached, closures are functions with
  data attached.</p>
</blockquote>

<pre><code>def make_counter():
    i = 0
    def counter(): # counter() is a closure
        nonlocal i
        i += 1
        return i
    return counter

c1 = make_counter()
c2 = make_counter()

print (c1(), c1(), c2(), c2())
# -&gt; 1 2 1 2
</code></pre>
"
141451,4766,2008-09-26T19:34:04Z,141449,67,"<p>Use the <a href=""https://docs.python.org/2/library/stringio.html"" rel=""nofollow"">StringIO</a> module.  For example:</p>

<pre><code>&gt;&gt;&gt; from cStringIO import StringIO
&gt;&gt;&gt; f = StringIO('foo')
&gt;&gt;&gt; f.read()
'foo'
</code></pre>

<p>I use cStringIO (which is faster), but note that it doesn't <a href=""http://docs.python.org/lib/module-cStringIO.html"" rel=""nofollow"">accept Unicode strings that cannot be encoded as plain ASCII strings</a>.  (You can switch to StringIO by changing  ""from cStringIO"" to ""from StringIO"".)</p>
"
141505,22468,2008-09-26T19:44:31Z,141487,4,"<p>For pre-1.0:</p>

<pre><code>slug = models.SlugField(prepopulate_from=('title',))
</code></pre>

<p>should work just fine</p>

<p>For 1.0, use <a href=""http://stackoverflow.com/questions/141487/is-there-an-easy-way-to-populate-slugfield-from-charfield#141554"">camflan's</a></p>
"
141554,22445,2008-09-26T19:51:46Z,141487,43,"<p>for Admin in Django 1.0 and up, you'd need to use</p>

<pre><code>prepopulated_fields = {'slug': ('title',), }
</code></pre>

<p>in your admin.py</p>

<p>Your key in the prepopulated_fields dictionary is the field you want filled, and the value is a tuple of fields you want concatenated.</p>

<p>Outside of admin, you can use the <code>slugify</code> function in your views. In templates, you can use the <code>|slugify</code> filter.</p>

<p>There is also this package which will take care of this automatically: <a href=""https://pypi.python.org/pypi/django-autoslug"">https://pypi.python.org/pypi/django-autoslug</a></p>
"
141565,3560,2008-09-26T19:52:59Z,141545,6,"<p>A better way would be to use isinstance and type conversion. If I'm understanding you right, you want this:</p>

<pre><code>def __init__ (self, filename):
    if isinstance (filename, basestring):
        # filename is a string
    else:
        # try to convert to a list
        self.path = list (filename)
</code></pre>
"
141570,1694,2008-09-26T19:54:30Z,141545,2,"<p>You probably want the <code>isinstance</code> builtin function:</p>

<pre><code>self.data = data if isinstance(data, list) else self.parse(data)
</code></pre>
"
141571,3051,2008-09-26T19:54:33Z,141545,3,"<p>You should use isinstance</p>

<pre><code>isinstance(...)
    isinstance(object, class-or-type-or-tuple) -&gt; bool

    Return whether an object is an instance of a class or of a subclass thereof.
    With a type as second argument, return whether that is the object's type.
    The form using a tuple, isinstance(x, (A, B, ...)), is a shortcut for
    isinstance(x, A) or isinstance(x, B) or ... (etc.).
</code></pre>
"
141670,3560,2008-09-26T20:11:53Z,141642,6,"<p>The only difficulty I've seen people encounter with Python's in particular is when they try to mix non-functional features like variable reassignment with closures, and are surprised when this doesn't work:</p>

<pre><code>def outer ():
    x = 1
    def inner ():
        print x
        x = 2
    return inner
outer () ()
</code></pre>

<p>Usually just pointing out that a function has its own local variables is enough to deter such silliness.</p>
"
141700,1179,2008-09-26T20:18:19Z,141545,-1,"<p>OK, great. I just tossed together this example with a tuple, not a filename, but that's easy. Thanks all.</p>

<pre><code>class MyData:
    def __init__(self, data):
        self.myList = []
        if isinstance(data, tuple):
            for i in data:
                self.myList.append(i)
        else:
            self.myList = data

    def GetData(self):
        print self.myList
</code></pre>

<p>a = [1,2]</p>

<p>b = (2,3)</p>

<p>c = MyData(a)</p>

<p>d = MyData(b)</p>

<p>c.GetData()</p>

<p>d.GetData()</p>

<p>[1, 2]</p>

<p>[2, 3]</p>
"
141710,17624,2008-09-26T20:19:27Z,141642,39,"<p>The most important limitation, currently, is that you cannot assign to an outer-scope variable. In other words, closures are read-only:</p>

<pre><code>&gt;&gt;&gt; def outer(x): 
...     def inner_reads():
...         # Will return outer's 'x'.
...         return x
...     def inner_writes(y):
...         # Will assign to a local 'x', not the outer 'x'
...         x = y
...     def inner_error(y):
...         # Will produce an error: 'x' is local because of the assignment,
...         # but we use it before it is assigned to.
...         tmp = x
...         x = y
...         return tmp
...     return inner_reads, inner_writes, inner_error
... 
&gt;&gt;&gt; inner_reads, inner_writes, inner_error = outer(5)
&gt;&gt;&gt; inner_reads()
5
&gt;&gt;&gt; inner_writes(10)
&gt;&gt;&gt; inner_reads()
5
&gt;&gt;&gt; inner_error(10)
Traceback (most recent call last):
  File ""&lt;stdin&gt;"", line 1, in &lt;module&gt;
  File ""&lt;stdin&gt;"", line 11, in inner_error
UnboundLocalError: local variable 'x' referenced before assignment
</code></pre>

<p>A name that gets assigned to in a local scope (a function) is always local, unless declared otherwise. While there is the 'global' declaration to declare a variable global even when it is assigned to, there is no such declaration for enclosed variables -- yet. In Python 3.0, there is (will be) the 'nonlocal' declaration that does just that.</p>

<p>You can work around this limitation in the mean time by using a mutable container type:</p>

<pre><code>&gt;&gt;&gt; def outer(x):
...     x = [x]
...     def inner_reads():
...         # Will return outer's x's first (and only) element.
...         return x[0]
...     def inner_writes(y):
...         # Will look up outer's x, then mutate it.      
...         x[0] = y
...     def inner_error(y):
...         # Will now work, because 'x' is not assigned to, just referenced.
...         tmp = x[0]
...         x[0] = y
...         return tmp
...     return inner_reads, inner_writes, inner_error
... 
&gt;&gt;&gt; inner_reads, inner_writes, inner_error = outer(5)
&gt;&gt;&gt; inner_reads()
5
&gt;&gt;&gt; inner_writes(10)
&gt;&gt;&gt; inner_reads()
10
&gt;&gt;&gt; inner_error(15)
10
&gt;&gt;&gt; inner_reads()
15
</code></pre>
"
141729,8247,2008-09-26T20:23:04Z,140439,22,"<p>If you are open to using pywin32, you can use Win32 calls from Python. This is what we do in our CherryPy web server:</p>

<pre><code>import win32security
token = win32security.LogonUser(
    username,
    domain,
    password,
    win32security.LOGON32_LOGON_NETWORK,
    win32security.LOGON32_PROVIDER_DEFAULT)
authenticated = bool(token)
</code></pre>
"
141744,4279,2008-09-26T20:25:13Z,141642,2,"<p>@<a href=""#141670"" rel=""nofollow"">John Millikin</a></p>

<pre><code>def outer():
    x = 1 # local to `outer()`

    def inner():
        x = 2     # local to `inner()`
        print(x)
        x = 3
        return x

    def inner2():
        nonlocal x
        print(x)  # local to `outer()`
        x = 4     # change `x`, it is not local to `inner2()`
        return x

    x = 5         # local to `outer()`
    return (inner, inner2)

for inner in outer():
    print(inner()) 

# -&gt; 2 3 5 4
</code></pre>
"
141767,14028,2008-09-26T20:29:21Z,141642,3,"<p>Fixed in Python 3 via the <a href=""https://docs.python.org/3/reference/simple_stmts.html?#nonlocal"" rel=""nofollow""><code>nonlocal</code></a> statement:</p>

<blockquote>
  <p>The <code>nonlocal</code> statement causes the listed identifiers to refer to previously bound variables in the nearest enclosing scope excluding globals. This is important because the default behavior for binding is to search the local namespace first. The statement allows encapsulated code to rebind variables outside of the local scope besides the global (module) scope.</p>
</blockquote>
"
141777,17624,2008-09-26T20:30:15Z,141545,257,"<p>A much neater way to get 'alternate constructors' is to use classmethods. For instance:</p>

<pre><code>&gt;&gt;&gt; class MyData:
...     def __init__(self, data):
...         ""Initialize MyData from a sequence""
...         self.data = data
...     
...     @classmethod
...     def fromfilename(cls, filename):
...         ""Initialize MyData from a file""
...         data = open(filename).readlines()
...         return cls(data)
...     
...     @classmethod
...     def fromdict(cls, datadict):
...         ""Initialize MyData from a dict's items""
...         return cls(datadict.items())
... 
&gt;&gt;&gt; MyData([1, 2, 3]).data
[1, 2, 3]
&gt;&gt;&gt; MyData.fromfilename(""/tmp/foobar"").data
['foo\n', 'bar\n', 'baz\n']
&gt;&gt;&gt; MyData.fromdict({""spam"": ""ham""}).data
[('spam', 'ham')]
</code></pre>

<p>The reason it's neater is that there is no doubt about what type is expected, and you aren't forced to guess at what the caller intended for you to do with the datatype it gave you. The problem with <code>isinstance(x, basestring)</code> is that there is no way for the caller to tell you, for instance, that even though the type is not a basestring, you should treat it as a string (and not another sequence.) And perhaps the caller would like to use the same type for different purposes, sometimes as a single item, and sometimes as a sequence of items. Being explicit takes all doubt away and leads to more robust and clearer code.</p>
"
141826,17624,2008-09-26T20:38:17Z,141802,4,"<p>There is no builtin way other than aborting (with os.abort(), causing the coredump if resource limits allow it) -- although you can certainly build your own 'dump' function that dumps relevant information about the data you care about. There are no ready-made tools for it.</p>

<p>As for handling the corefile of a Python process, the <a href=""http://svn.python.org/projects/python/trunk/Misc/gdbinit"" rel=""nofollow"">Python source has a gdbinit file</a> that contains useful macros. It's still a lot more painful than somehow getting into the process itself (with pdb or the interactive interpreter) but it makes life a little easier.</p>
"
141872,10661,2008-09-26T20:46:31Z,140026,1,"<p>""implement a Domain Specific Language""</p>

<p>""nobody is going to want to install a server that downloads and executes arbitrary Python code at runtime""</p>

<p>I want a DSL but I don't want Python to be that DSL.  Okay.  How will you execute this DSL?  What runtime <em>is</em> acceptable if not Python?</p>

<p>What if I have a C program that happens to embed the Python interpreter?  Is that acceptable?</p>

<p>And -- if Python is not an acceptable runtime -- why does this have a Python tag?</p>
"
141881,4279,2008-09-26T20:47:39Z,141642,2,"<p><sub>comment for <a href=""http://stackoverflow.com/a/141767/4279"">@Kevin Little's answer</a> to include the code example</sub></p>

<p><code>nonlocal</code> does not solve completely this problem on python3.0:</p>

<pre><code>x = 0 # global x
def outer():
    x = 1 # local to `outer`
    def inner():
        global x
        x = 2 # change global
        print(x) 
        x = 3 # change global
        return x
    def inner2():
##        nonlocal x # can't use `nonlocal` here
        print(x)     # prints global
##        x = 4      # can't change `x` here
        return x
    x = 5
    return (inner, inner2)

for inner in outer():
    print(inner())
# -&gt; 2 3 3 3
</code></pre>

<p>On the other hand:</p>

<pre><code>x = 0
def outer():
    x = 1 # local to `outer`
    def inner():
##        global x
        x = 2
        print(x) # local to `inner` 
        x = 3 
        return x
    def inner2():
        nonlocal x
        print(x)
        x = 4  # local to `outer`
        return x
    x = 5
    return (inner, inner2)

for inner in outer():
    print(inner())
# -&gt; 2 3 5 4
</code></pre>

<p>it works on python3.1-3.3</p>
"
141947,16361,2008-09-26T20:59:49Z,141487,5,"<p>Outside the admin, see <a href=""http://www.djangosnippets.org/snippets/690/"">this django snippet</a>. Put it in your <code>.save()</code>, and it'll work with objects created programmatically. Inside the admin, as the others have said, use <code>prepopulated_fields</code>.</p>
"
141972,19799,2008-09-26T21:05:15Z,140026,0,"<p>It sounds like you want to create a grammar not a DSL.  I'd look into <a href=""http://antlr.org/"" rel=""nofollow"">ANTLR</a> which will allow you to create a specific parser that will interpret text and translate to specific commands.  ANTLR provides libraries for Python, SQL, Java, C++, C, C# etc.</p>

<p>Also, here is a fine example of an ANTLR <a href=""http://www.codeproject.com/KB/recipes/sota_expression_evaluator.aspx"" rel=""nofollow"">calculation engine</a> created in C#</p>
"
142103,8458,2008-09-26T21:30:33Z,141802,1,"<p>Someone above said that there is no builtin way to perform this, but that's not entirely true.  For an example, you could take a look at the pylons debugging tools.  Whene there is an exception, the exception handler saves the stack trace and prints a URL on the console that can be used to retrieve the debugging session over HTTP.</p>

<p>While they're probably keeping these sessions in memory, they're just python objects, so there's nothing to stop you from pickling a stack dump and restoring it later for inspection.  It would mean some changes to the app, but it should be possible...</p>

<p>After some research, it turns out the relevant code is actually coming from Paste's <a href=""http://svn.pythonpaste.org/Paste/trunk/paste/evalexception/evalcontext.py"" rel=""nofollow"">EvalException module</a>.  You should be able to look there to figure out what you need.</p>
"
142106,12030,2008-09-26T21:30:58Z,141973,1,"<p>You're correct - the key is stored as the property name prefixed with '_'. You should just be able to access it directly on the model object. Can you demonstrate what you're trying? I've used this technique in the past with no problems.</p>

<p>Edit: Have you tried calling series_id() directly, or referencing _series in your template directly? I'm not sure whether Django automatically calls methods with no arguments if you specify them in this context. You could also try putting the @property decorator on the method.</p>
"
142138,19104,2008-09-26T21:37:03Z,141351,1,"<p>I don't know how to dump an entire python interpreter state and restore it. It would be useful, I'll keep my eye on this answer in case anyone else has ideas.</p>

<p>If you have an idea where the memory is leaking, you can add checks the refcounts of your objects. For example:</p>

<pre><code>x = SomeObject()
... later ...
oldRefCount = sys.getrefcount( x )
suspiciousFunction( x )
if (oldRefCount != sys.getrefcount(x)):
    print ""Possible memory leak...""
</code></pre>

<p>You could also check for reference counts higher than some number that is reasonable for your app. To take it further, you could modify the python interpreter to do these kinds of check by replacing the <code>Py_INCREF</code> and <code>Py_DECREF</code> macros with your own. This might be a bit dangerous in a production app, though.</p>

<p>Here is an essay with more info on debugging these sorts of things. It's more geared for plugin authors but most of it applies.</p>

<p><a href=""http://www.python.org/doc/essays/refcnt/"" rel=""nofollow"" title=""Debugging Reference Counts"">Debugging Reference Counts</a></p>
"
142162,20685,2008-09-26T21:41:54Z,141432,5,"<p>I had to do this to make it work:</p>

<ol>
<li><p>Open MainMenu.xib. Make sure the class of the app delegate is <code>MyApplicationAppDelegate</code>. I'm not sure if you will have to do this, but I did. It was wrong and so the app delegate never got called in the first place.</p></li>
<li><p>Add <code>statusItem.retain()</code> because it gets autoreleased right away.</p></li>
</ol>
"
142177,9567,2008-09-26T21:45:10Z,141351,1,"<p>The <a href=""http://docs.python.org/lib/module-gc.html"" rel=""nofollow""><code>gc</code> module</a> has some functions that might be useful, like listing all objects the garbage collector found to be unreachable but cannot free, or a list of all objects being tracked.</p>

<p>If you have a suspicion which objects might leak, the <a href=""http://docs.python.org/lib/module-weakref.html"" rel=""nofollow"">weakref</a> module could be handy to find out if/when objects are collected.</p>
"
142188,22364,2008-09-26T21:48:26Z,140182,0,"<pre><code>def getExpandedText(pattern,text,*group):
    r"""""" Searches for pattern in the text and replaces
    all captures with the values in group.

    Tag renaming:
    &gt;&gt;&gt; html = '&lt;div&gt; abc &lt;span id=""x""&gt; def &lt;/span&gt; ghi &lt;/div&gt;'
    &gt;&gt;&gt; getExpandedText(r'&lt;/?(span\b)[^&gt;]*&gt;', html, 'div')
    '&lt;div&gt; abc &lt;div id=""x""&gt; def &lt;/div&gt; ghi &lt;/div&gt;'

    Nested groups, capture-references:
    &gt;&gt;&gt; getExpandedText(r'A(.*?Z(.*?))B', ""abAcdZefBgh"", r'&lt;\2&gt;')
    'abA&lt;ef&gt;Bgh'
    """"""
    pattern = re.compile(pattern)
    ret = []
    last = 0
    for m in pattern.finditer(text):
        for i in xrange(0,len(m.groups())):
            start,end = m.span(i+1)

            # nested or skipped group
            if start &lt; last or group[i] is None:
                continue

            # text between the previous and current match
            if last &lt; start:
                ret.append(text[last:start])

            last = end
            ret.append(m.expand(group[i]))

    ret.append(text[last:])
    return ''.join(ret)
</code></pre>

<p><strong>Edit:</strong> Allow capture-references in the replacement strings.</p>
"
142251,4279,2008-09-26T22:00:25Z,141449,19,"<p>In Python 3.0:</p>

<pre><code>import io

with io.StringIO() as f:
    f.write('abcdef')
    print('gh', file=f)
    f.seek(0)
    print(f.read())
</code></pre>
"
142306,10661,2008-09-26T22:14:14Z,140026,4,"<p>Building a DSL to be interpreted by Python.</p>

<p>Step 1.  Build the run-time classes and objects.  These classes will have all the cursor loops and SQL statements and all of that algorithmic processing tucked away in their methods.  You'll make heavy use of the <a href=""http://exciton.cs.rice.edu/javaresources/DesignPatterns/command.htm"" rel=""nofollow"">Command</a> and <a href=""http://exciton.cs.rice.edu/javaresources/DesignPatterns/StrategyPattern.htm"" rel=""nofollow"">Strategy</a> design patterns to build these classes.  Most things are a command, options and choices are plug-in strategies.  Look at the design for Apache Ant's <a href=""http://ant.apache.org/manual/develop.html"" rel=""nofollow"">Task</a> API -- it's a good example.</p>

<p>Step 2.  Validate that this system of objects actually works.  Be sure that the design is simple and complete.  You're tests will construct the Command and Strategy objects, and then execute the top-level Command object.  The Command objects will do the work. </p>

<p>At this point you're largely done.  Your run-time is just a configuration of objects created from the above domain.  [This isn't as easy as it sounds.  It requires some care to define a set of classes that can be instantiated and then ""talk among themselves"" to do the work of your application.]</p>

<p>Note that what you'll have will require nothing more than declarations.  What's wrong with procedural?  One you start to write a DSL with procedural elements, you find that you need more and more features until you've written Python with different syntax.  Not good.</p>

<p>Further, procedural language interpreters are simply hard to write.  State of execution, and scope of references are simply hard to manage.</p>

<p>You can use native Python -- and stop worrying about ""getting out of the sandbox"".  Indeed, that's how you'll unit test everything, using a short Python script to create your objects.  Python will be the DSL.  </p>

<p>[""But wait"", you say, ""If I simply use Python as the DSL people can execute arbitrary things.""  Depends on what's on the PYTHONPATH, and sys.path.  Look at the <a href=""http://docs.python.org/lib/module-site.html"" rel=""nofollow"">site</a> module for ways to control what's available.]</p>

<p>A declarative DSL is simplest.  It's entirely an exercise in representation.  A block of Python that merely sets the values of some variables is nice.  That's what Django uses.</p>

<p>You can use the <a href=""http://docs.python.org/lib/module-ConfigParser.html"" rel=""nofollow"">ConfigParser</a> as a language for representing your run-time configuration of objects.</p>

<p>You can use <a href=""http://pypi.python.org/pypi/python-json/"" rel=""nofollow"">JSON</a> or <a href=""http://pyyaml.org/"" rel=""nofollow"">YAML</a> as a language for representing your run-time configuration of objects.  Ready-made parsers are totally available.</p>

<p>You can use XML, too.  It's harder to design and parse, but it works fine.  People love it.  That's how Ant and Maven (and lots of other tools) use declarative syntax to describe procedures.  I don't recommend it, because it's a wordy pain in the neck.  I recommend simply using Python.</p>

<p>Or, you can go off the deep-end and invent your own syntax and write your own parser.</p>
"
142324,4966,2008-09-26T22:17:59Z,34079,3,"<p>Or if you want to install it, so that it is always used with urllib2.urlopen (so you don't need to keep a reference to the opener around):</p>

<pre><code>import urllib2
url = 'www.proxyurl.com'
username = 'user'
password = 'pass'
password_mgr = urllib2.HTTPPasswordMgrWithDefaultRealm()
# None, with the ""WithDefaultRealm"" password manager means
# that the user/pass will be used for any realm (where
# there isn't a more specific match).
password_mgr.add_password(None, url, username, password)
auth_handler = urllib2.HTTPBasicAuthHandler(password_mgr)
opener = urllib2.build_opener(auth_handler)
urllib2.install_opener(opener)
print urllib2.urlopen(""http://www.example.com/folder/page.html"").read()
</code></pre>
"
142368,6899,2008-09-26T22:32:50Z,141291,8,"<p>Note that, instead of doing <code>os.listdir(os.getcwd())</code>, it's preferable to do <code>os.listdir(os.path.curdir)</code>. One less function call, and it's as portable.</p>

<p>So, to complete the answer, to get a list of directories in a folder:</p>

<pre><code>def listdirs(folder):
    return [d for d in os.listdir(folder) if os.path.isdir(os.path.join(folder, d))]
</code></pre>

<p>If you prefer full pathnames, then use this function:</p>

<pre><code>def listdirs(folder):
    return [
        d for d in (os.path.join(folder, d1) for d1 in os.listdir(folder))
        if os.path.isdir(d)
    ]
</code></pre>
"
142379,4279,2008-09-26T22:36:02Z,141647,1,"<p>Have you read <a href=""http://pramode.net/articles/lfy/mobile/pramode.html"" rel=""nofollow"">Hack a Mobile Phone with Linux and Python</a>? It is rather old, but maybe you find it helpful.</p>
"
142500,22892,2008-09-26T23:41:01Z,141351,3,"<p>Could you record the traffic (via a log) on your production site, then re-play it on your development server instrumented with a python memory debugger? (I recommend dozer: <a href=""http://pypi.python.org/pypi/Dozer"" rel=""nofollow"">http://pypi.python.org/pypi/Dozer</a>)</p>
"
142501,22893,2008-09-26T23:41:16Z,139180,20,"<p>This will do the trick:</p>

<pre><code>dir(module) 
</code></pre>

<p>However, if you find it annoying to read the returned list, just use the following loop to get one name per line.</p>

<pre><code>for i in dir(module): print i
</code></pre>
"
142502,22847,2008-09-26T23:42:08Z,141647,0,"<p>If the code is working in the interactive interpreter when typed, but not when run directly then I would suggest seeing if your code has reached a deadlock on the socket, for example both ends are waiting for data from the other.  When typing into the interactive interpreter there is a longer delay between the execution of each line on code.</p>
"
142535,1941213,2008-09-26T23:57:04Z,141291,99,"<pre><code>os.walk('.').next()[1]
</code></pre>
"
142561,22847,2008-09-27T00:08:25Z,142545,2,"<p>This sounds like modifying the <code>__builtin__</code> name space.  To do it:</p>

<pre><code>import __builtin__
__builtin__.foo = 'some-value'
</code></pre>

<p>Do not use the <code>__builtins__</code> directly (notice the extra ""s"") - apparently this can be a dictionary or a module.  Thanks to ΤΖΩΤΖΙΟΥ for pointing this out, more can be found <a href=""http://groups.google.com/group/comp.lang.python/browse_thread/thread/1907d5e660444c08/69c29c4ec0c4d3ec"" rel=""nofollow"" title=""here"">here</a>.</p>

<p>Now <code>foo</code> is available for use everywhere.</p>

<p>I don't recommend doing this generally, but the use of this is up to the programmer.</p>

<p>Assigning to it must be done as above, just setting <code>foo = 'some-other-value'</code> will only set it in the current namespace.</p>
"
142566,533,2008-09-27T00:09:29Z,142545,75,"<p>I don't endorse this solution in any way, shape or form.  But if you add a variable to the <code>__builtin__</code> module, it will be accessible as if a global from any other module that includes <code>__builtin__</code> -- which is all of them, by default.</p>

<p>a.py contains</p>

<pre><code>print foo
</code></pre>

<p>b.py contains</p>

<pre><code>import __builtin__
__builtin__.foo = 1
import a
</code></pre>

<p>The result is that ""1"" is printed.</p>

<p><strong>Edit:</strong> The <code>__builtin__</code> module is available as the local symbol <code>__builtins__</code> -- that's the reason for the discrepancy between two of these answers. Also note that <code>__builtin__</code> has been renamed to <code>builtins</code> in python3.</p>
"
142571,1941213,2008-09-27T00:11:08Z,141351,2,"<p><a href=""http://www.gsp.com/cgi-bin/man.cgi?section=1&amp;topic=gcore"" rel=""nofollow"">Make your program dump core</a>, then clone an instance of the program on a sufficiently similar box using <a href=""http://www.gsp.com/cgi-bin/man.cgi?section=1&amp;topic=gdb"" rel=""nofollow"">gdb</a>.  There are <a href=""http://wiki.python.org/moin/DebuggingWithGdb"" rel=""nofollow"">special macros</a> to help with debugging python programs within gdb, but if you can get your program to concurrently <a href=""http://blog.vrplumber.com/index.php?/archives/1631-Minimal-example-of-using-twisted.manhole-Since-it-took-me-so-long-to-get-it-working....html"" rel=""nofollow"">serve up a remote shell</a>, you could just continue the program's execution, and query it with python.</p>

<p>I have never had to do this, so I'm not 100% sure it'll work, but perhaps the pointers will be helpful.</p>
"
142581,16084,2008-09-27T00:15:19Z,142545,17,"<p>Define a module ( call it ""globalbaz"" ) and have the variables defined inside it. All the modules using this ""pseudoglobal"" should import the ""globalbaz"" module, and refer to it using ""globalbaz.var_name""</p>

<p>This works regardless of the place of the change, you can change the variable before or after the import. The imported module will use the latest value. (I tested this in a toy example)</p>

<p>For clarification, globalbaz.py looks just like this:</p>

<pre><code>var_name = ""my_useful_string""
</code></pre>
"
142582,1941213,2008-09-27T00:15:31Z,141802,0,"<p><a href=""http://stackoverflow.com/questions/141351/how-do-i-find-what-is-using-memory-in-a-python-process-in-a-production-system#142571"">This answer</a> suggests making your program core dump and then continuing execution on another sufficiently similar box.</p>
"
142601,4279,2008-09-27T00:25:00Z,142545,101,"<p>If you need a global cross-module variable maybe just simple global module-level variable will suffice. </p>

<p>a.py:</p>

<pre><code>var = 1
</code></pre>

<p>b.py:</p>

<pre><code>import a
print a.var
import c
print a.var
</code></pre>

<p>c.py:</p>

<pre><code>import a
a.var = 2
</code></pre>

<p>Test:</p>

<pre><code>$ python b.py
# -&gt; 1 2
</code></pre>

<p>Real-world example: <a href=""https://github.com/django/django/blob/master/django/conf/global_settings.py"">Django's global_settings.py</a> (though in Django apps settings are used by importing the <em>object</em> <a href=""http://docs.djangoproject.com/en/dev/topics/settings/#using-settings-in-python-code""><code>django.conf.settings</code></a>).</p>
"
142669,22701,2008-09-27T01:03:43Z,142545,6,"<p>Global variables are usually a bad idea, but you can do this by assigning to <code>__builtins__</code>:</p>

<pre><code>__builtins__.foo = 'something'
print foo
</code></pre>

<p>Also, modules themselves are variables that you can access from any module.  So if you define a module called <code>my_globals.py</code>:</p>

<pre><code># my_globals.py
foo = 'something'
</code></pre>

<p>Then you can use that from anywhere as well:</p>

<pre><code>import my_globals
print my_globals.foo
</code></pre>

<p>Using modules rather than modifying <code>__builtins__</code> is generally a cleaner way to do globals of this sort.</p>
"
142712,4919,2008-09-27T01:30:15Z,128689,0,"<p>While <a href=""http://docs.turbogears.org/1.0/CRUDTemplate"" rel=""nofollow"">CRUDTemplate</a> looks mildly complex, I'd say that you can implement CRUD/ABCD using just about any ORM that you choose. It just depends on how much of it you with to automate (which generally means defining models/schemas ahead of time). You may learn more and have better control if you put together your own using SQLAlchemy or SQLObject, woth of which work great with TurboGears.</p>
"
142770,3560,2008-09-27T02:19:38Z,142764,15,"<p>With the warning that I think it's a tremendously bad idea to replace the default Python with an unreleased beta version:</p>

<p>First, install 2.6rc2. You can download the source from the <a href=""http://www.python.org/download/releases/2.6/"">Python website</a>. Standard <code>./configure &amp;&amp; make &amp;&amp; sudo make install</code> installation style.</p>

<p>Next, remove the <code>/usr/bin/python</code> symlink. Do <em>not</em> remove <code>/usr/bin/python2.5</code>. Add a symlink to 2.6 with <code>ln -s /usr/local/bin/python2.6 /usr/bin/python</code>.</p>

<p>Once again, I think this is a terrible idea. There is almost certainly a better way to do whatever you're trying to accomplish.</p>

<p><hr /></p>

<p>Migrating installed libraries is a much longer process. Look in the <code> /usr/lib/python2.5/site-packages/</code> and <code> /usr/local/lib/python2.5/site-packages/</code> directories. Any libraries installed to them will need to be re-installed with 2.6. Since you're not using a packaged Python version, you cannot use Ubuntu's packages -- you'll have to manually upgrade all the libraries yourself. Most of them can probably be installed with <code>sudo easy_install &lt;name&gt;</code>, but some like PyGTK+ are not so easy. You'll have to follow custom installation procedures for each such library.</p>
"
142775,20625,2008-09-27T02:21:39Z,95950,0,"<p>If your Python application runs in the 64-bit space, you will need to access a 64-bit installation of Oracle's oci.dll, rather than the 32-bit version. Normally you would update the system path to include the appropriate Oracle Home bin directory, prior to running the script. The solution may also vary depending on what component you are using to access Oracle from Python.</p>
"
142777,20010,2008-09-27T02:25:18Z,142764,1,"<p>Is there any need to?</p>

<p>Ubuntu in general doesn't package RC releases. 2.6 will not be available in Ubuntu until Jaunty Jackalope.</p>

<p>However,, if you insist that you need to install it, then, you'll have to do so without a package manager.</p>

<p>Download the package, and unzip it to a directory</p>

<p>run the following commands (waiting for each to finish as you do so)</p>

<pre><code>./configure
make
sudo make install
</code></pre>

<p>There, you have it installed.</p>

<p>It's better to wait for it to be packaged first, espescially as Python is used in a lot of ubuntu internals, so may break your system horribly</p>
"
142786,22834,2008-09-27T02:31:34Z,141647,0,"<p>Well, it doesn't appear to be a deadlock situation. It throws an error saying remote server refused connection. However, like I said before, if i type the very same code into the interactive interpreter it works just fine. I'm wondering if the error is because the script is run through filebrowser.py?</p>
"
142802,3518,2008-09-27T02:42:40Z,140295,1,"<p>Setting the locale after multiple threads have started operating may have unexpected results. Unless I could figure out a more subtle approach, I'd probably just split file loading and the user interface into separate processes, communicating through a pipe or a file socket.</p>
"
142821,2147,2008-09-27T02:52:13Z,142812,4,"<p>NumPy has a <a href=""http://numpy.scipy.org/array_interface.shtml"" rel=""nofollow"">array interface</a> module that you can use to make a bitfield.</p>
"
142846,13433,2008-09-27T03:03:16Z,142812,5,"<p>The BitVector package may be what you need. It's not built in to my python installation, but easy to track down on the python site.</p>

<p><a href=""https://pypi.python.org/pypi/BitVector"" rel=""nofollow"">https://pypi.python.org/pypi/BitVector</a> for the current version.</p>
"
142854,1199,2008-09-27T03:06:25Z,142844,46,"<p>Sure. From a <a href=""http://mindlesstechnology.wordpress.com/2008/03/29/make-python-scripts-droppable-in-windows/"">mindless technology article called ""Make Python Scripts Droppable in Windows""</a>, you can add a drop handler by adding a registry key:</p>

<blockquote>
  <p>Here’s a registry import file that you can use to do this. Copy the
  following into a .reg file and run it
  (Make sure that your .py extensions
  are mapped to Python.File).</p>

<pre><code>Windows Registry Editor Version 5.00

[HKEY_CLASSES_ROOT\Python.File\shellex\DropHandler]
@=""{60254CA5-953B-11CF-8C96-00AA00B8708C}""
</code></pre>
</blockquote>

<p>This makes Python scripts use the WSH drop handler, which is compatible with long filenames. To use the short filename handler, replace the GUID with <code>86C86720-42A0-1069-A2E8-08002B30309D</code>.</p>

<p>A comment in that post indicates that one can enable dropping on ""no console Python files (<code>.pyw</code>)"" or ""compiled Python files (<code>.pyc</code>)"" by using the <code>Python.NoConFile</code> and <code>Python.CompiledFile</code> classes.</p>
"
143221,1941213,2008-09-27T08:20:43Z,142812,22,"<p><a href=""http://pypi.python.org/pypi/bitarray/"">Bitarray</a> was the best answer I found, when I recently had a similar need.  It's a C extension (so much faster than BitVector, which is pure python) and stores its data in an actual bitfield (so it's eight times more memory efficient than a numpy boolean array, which appears to use a byte per element.)</p>
"
143227,19627,2008-09-27T08:27:39Z,140758,5,"<p>As a long-time Pythonista, I have to say the path/file manipulation functions in the std library are sub-par: they are not object-oriented and they reflect an obsolete, lets-wrap-OS-system-functions-without-thinking philosophy.  I'd heartily recommend the 'path' module as a wrapper (around os, os.path, glob and tempfile if you must know): much nicer and OOPy: <a href=""http://pypi.python.org/pypi/path.py/2.2"" rel=""nofollow"">http://pypi.python.org/pypi/path.py/2.2</a></p>

<p>This is walk() with the path module:</p>

<pre><code>dir = path(os.environ['HOME'])
for f in dir.walk():
    if f.isfile() and f.endswith('~'):
        f.remove()
</code></pre>
"
143247,8570,2008-09-27T08:41:05Z,142812,2,"<p>If your bitfield is short, you can probably use <a href=""http://docs.python.org/lib/module-struct.html"" rel=""nofollow"">the struct module</a>. Otherwise I'd recommend some sort of a wrapper around <a href=""http://docs.python.org/lib/module-array.html"" rel=""nofollow"">the array module</a>.</p>

<p>Also, the ctypes module does contain <a href=""http://docs.python.org/lib/ctypes-bit-fields-in-structures-unions.html"" rel=""nofollow"">bitfields</a>, but I've never used it myself. <em>Caveat emptor</em>.</p>
"
143532,9951,2008-09-27T12:19:45Z,141449,1,"<p>Two good answers. I’d add a little trick — if you need a real file object (some methods expect one, not just an interface), here is a way to create an adapter:</p>

<ul>
<li><a href=""http://www.rfk.id.au/software/filelike/"" rel=""nofollow"">http://www.rfk.id.au/software/filelike/</a></li>
</ul>
"
143643,10661,2008-09-27T13:26:06Z,142812,4,"<p>I use the binary bit-wise operators !, &amp;, |, ^, >>, and &lt;&lt;.  They work really well and are implemented directly in the underlying C, which is usually directly on the underlying hardware.</p>
"
143798,NA,2008-09-27T15:20:58Z,81451,10,"<p>There is a thread in Google Groups about it:</p>

<p><a href=""http://groups.google.com/group/google-appengine/browse_thread/thread/f9d0f22d8de8c025/bba32165e308dd13?lnk=gst&amp;q=uploading+files#bba32165e308dd13"">Uploading Files</a></p>

<p>With a lot of useful code, that discussion helped me very much in uploading files.</p>
"
143995,4834,2008-09-27T16:56:59Z,120926,7,"<p>The answer to the question is: PEP-8 wants to make a recommendation and has decided that since spaces are more popular it will strongly recommend spaces over tabs.</p>

<p><hr /></p>

<p>Notes on PEP-8</p>

<p>PEP-8 says <em>'Use 4 spaces per indentation level.'</em><br />
Its clear that this is the standard recommendation.</p>

<p><em>'For really old code that you don't want to mess up, you can continue to use 8-space tabs.'</em><br />
Its clear that there are SOME circumstances when tabs can be used.</p>

<p><em>'Never mix tabs and spaces.'</em><br />
This is a clear prohibition of mixing - I think we all agree on this.  Python can detect this and often chokes.  Using the -tt argument makes this an explicit error.</p>

<p><em>'The most popular way of indenting Python is with spaces only.  The second-most popular way is with tabs only.'</em><br />
This clearly states that both are used.  Just to be ultra-clear: You should still never mix spaces and tabs in same file.</p>

<p><em>'For new projects, spaces-only are strongly recommended over tabs.'</em><br />
This is a clear recommendation, and a strong one, but not a prohibition of tabs.</p>

<p><hr /></p>

<p>I can't find a good answer to my own question in PEP-8. 
I use tabs, which I have used historically in other languages.
Python accepts source with exclusive use of tabs.  That's good enough for me.</p>

<p>I thought I would have a go at working with spaces.  In my editor, I configured a file type to use spaces exclusively and so it inserts 4 spaces if I press tab.  If I press tab too many times, I have to delete the spaces!  <strong>Arrgh!</strong>  Four times as many deletes as tabs!  My editor can't tell that I'm using 4 spaces for indents (although AN editor might be able to do this) and obviously insists on deleting the spaces one at a time.</p>

<p>Couldn't Python be told to consider tabs to be n spaces when its reading indentations?
If we could agree on 4 spaces per indentation and 4 spaces per tab and allow Python to accept this, then there would be no problems.<br />
We should find win-win solutions to problems.</p>
"
143996,NA,2008-09-27T16:57:12Z,143515,1,"<p>Have you check pyOpenSSL.. am sure openssl supports ocsp and python binding may support it</p>
"
144087,22351,2008-09-27T17:28:36Z,143632,3,"<p>You might want to try <a href=""http://www.keyczar.org/"" rel=""nofollow"">keyczar</a> as mentioned by me in your other post, since that library actually has implementations for both python and java. That would make it easier to use it in both contexts.</p>

<p>A word of warning: I have not actually used this library 8(, so please take this with a grain of salt.</p>
"
144096,9493,2008-09-27T17:32:09Z,120926,19,"<p>The main problems with indentation occur when you mix tabs and spaces.  Obviously this doesn't tell you which you should choose, but it is a good reason to to recommend one, even if you pick it by flipping a coin.</p>

<p>However, IMHO there are a few minor reasons to favour spaces over tabs:</p>

<ul>
<li><p>Different tools.  Sometimes code gets displayed outside of a programmer's editor.  Eg. posted to a newsgroup or forum.  Spaces generally do better than tabs here - everywhere spaces would get mangled, tabs do as well, but not vice-versa.</p></li>
<li><p>Programmers see the source differently.  This is deeply subjective - its either the main benefit of tabs, or a reason to avoid them depending on which side you're on.  On the plus side, developers can view the source with their preferred indentation, so a developer preferring 2-space indent can work with an 8-space developer on the same source and still see it as they like.  The downside is that there are repercussions to this - some people like 8-space because it gives very visible feedback that they're too deeply nested - they may see code checked in by the 2-indenter constantly wrapping in their editor.  Having every developer see the code the same way leads to more consistency wrt line lengths, and other matters too.</p></li>
<li><p>Continued line indentation.  Sometimes you want to indent a line to indicate it is carried from the previous one.  eg.</p>

<pre><code>def foo():
    x = some_function_with_lots_of_args(foo, bar, baz,
                                        xyzzy, blah)
</code></pre>

<p>If using tabs, theres no way to align this for people using different tabstops in their editor without mixing spaces and tabs.  This effectively kills the above benefit.</p></li>
</ul>

<p>Obviously though, this is a deeply religious issue, which programming is plagued with.  The most important issue is that we should choose one - even if thats not the one you favour.  Sometimes I think that the biggest advantage of significant indentation is that at least we're spared brace placement flamewars.</p>

<p>Also worth reading is <a href=""http://www.jwz.org/doc/tabs-vs-spaces.html"">this</a> article by Jamie Zawinski on the issue.</p>
"
144133,1659,2008-09-27T17:50:59Z,120926,2,"<p><a href=""http://www.jwz.org/doc/tabs-vs-spaces.html"" rel=""nofollow"">JWZ says it best</a>:</p>

<blockquote>
  <p>When [people are] reading code, and when they're done writing new code, they care about how many screen columns by which the code tends to indent when a new scope (or sexpr, or whatever) opens...</p>
  
  <p>...My opinion is that the best way to solve the technical issues is to mandate that the ASCII #9 TAB character never appear in disk files: program your editor to expand TABs to an appropriate number of spaces before writing the lines to disk...</p>
  
  <p>...This assumes that you never use tabs in places where they are actually significant, like in string or character constants, but I never do that: when it matters that it is a tab, I always use '\t' instead. </p>
</blockquote>
"
144139,3474,2008-09-27T17:53:57Z,143515,3,"<p>Java 5 has support of revocation checking via <a href=""http://java.sun.com/j2se/1.5.0/docs/guide/security/pki-tiger.html#OCSP"" rel=""nofollow"">OCSP built in</a>. If you want to build an OCSP responder, or have finer control over revocation checking, check out <a href=""http://www.bouncycastle.org/docs/docs1.5/overview-summary.html"" rel=""nofollow"">Bouncy Castle</a>. You can use this to implement your own <a href=""http://java.sun.com/javase/6/docs/api/java/security/cert/PKIXCertPathChecker.html"" rel=""nofollow"">CertPathChecker</a> that, for example, uses non-blocking I/O in its status checks.</p>
"
144212,15682,2008-09-27T18:42:39Z,144201,17,"<p><a href=""http://www.sontek.net/python-with-a-modular-ide-vim"" rel=""nofollow"">Here you can find some info</a> about this.</p>

<p>It covers code completion, having a list of classes and functions in open files. I haven't got around to do a full configuration for vim, since I don't use Python primarily, but I have the same interests in transforming vim in a better Python IDE.</p>

<p><strong>Edit:</strong> The original site is down, so found it <a href=""https://web.archive.org/web/20110106042207/http://sontek.net/python-with-a-modular-ide-vim"" rel=""nofollow"">saved on the web archive</a>.</p>
"
144225,23033,2008-09-27T18:53:49Z,144218,0,"<p>Decimal defaults to 28 places of precision.<br/>
The only way to limit the number of digits it returns is by altering the precision.</p>
"
144231,NA,2008-09-27T18:58:37Z,144218,2,"<p>Decimals won't throw away decimal places like that. If you really want to limit precision to 2 d.p. then try</p>

<pre><code>decimal.getcontext().prec=2
</code></pre>

<p>EDIT: You can alternatively call quantize() every time you multiply or divide (addition and subtraction will preserve the 2 dps).</p>
"
144253,11549,2008-09-27T19:11:46Z,144218,0,"<p>If I undertand Decimal correctly, the ""precision"" is the number of digits after the decimal point in <em>decimal notation</em>.</p>

<p>You seem to want something else: the number of significant digits. That is one more than the number of digits after the decimal point in <em>scientific notation</em>.</p>

<p>I would be interested in learning about a Python module that does significant-digits-aware floating point point computations.</p>
"
144263,10661,2008-09-27T19:17:57Z,144218,0,"<p>What's wrong with floating point?  </p>

<pre><code>&gt;&gt;&gt; ""%8.2e""%  ( 1.0/3.0 )
'3.33e-01'
</code></pre>

<p>It was designed for scientific-style calculations with a limited number of significant digits.</p>
"
